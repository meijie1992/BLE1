

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Thu Jan 02 09:56:15 2025

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16F1947
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text16,local,class=CODE,merge=1,delta=2
    19                           	psect	text20,local,class=CODE,merge=1,delta=2
    20                           	psect	text21,local,class=CODE,merge=1,delta=2
    21                           	psect	text24,local,class=CODE,merge=1,delta=2
    22                           	psect	text25,local,class=CODE,merge=1,delta=2
    23                           	psect	swtext1,local,class=CONST,delta=2
    24                           	psect	text30,local,class=CODE,merge=1,delta=2
    25                           	psect	text36,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	pa_nodes,global,class=CODE,delta=2
    28                           	psect	text21_split_1,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     	;# 
    31  0001                     	;# 
    32  0002                     	;# 
    33  0003                     	;# 
    34  0004                     	;# 
    35  0005                     	;# 
    36  0006                     	;# 
    37  0007                     	;# 
    38  0008                     	;# 
    39  0009                     	;# 
    40  000A                     	;# 
    41  000B                     	;# 
    42  000C                     	;# 
    43  000D                     	;# 
    44  000E                     	;# 
    45  000F                     	;# 
    46  0010                     	;# 
    47  0011                     	;# 
    48  0012                     	;# 
    49  0013                     	;# 
    50  0014                     	;# 
    51  0015                     	;# 
    52  0016                     	;# 
    53  0016                     	;# 
    54  0017                     	;# 
    55  0018                     	;# 
    56  0019                     	;# 
    57  001A                     	;# 
    58  001B                     	;# 
    59  001C                     	;# 
    60  001E                     	;# 
    61  001F                     	;# 
    62  008C                     	;# 
    63  008D                     	;# 
    64  008E                     	;# 
    65  008F                     	;# 
    66  0090                     	;# 
    67  0091                     	;# 
    68  0092                     	;# 
    69  0093                     	;# 
    70  0094                     	;# 
    71  0095                     	;# 
    72  0096                     	;# 
    73  0097                     	;# 
    74  0098                     	;# 
    75  0099                     	;# 
    76  009A                     	;# 
    77  009B                     	;# 
    78  009B                     	;# 
    79  009C                     	;# 
    80  009D                     	;# 
    81  009E                     	;# 
    82  010C                     	;# 
    83  010D                     	;# 
    84  010E                     	;# 
    85  010F                     	;# 
    86  0110                     	;# 
    87  0111                     	;# 
    88  0112                     	;# 
    89  0113                     	;# 
    90  0114                     	;# 
    91  0115                     	;# 
    92  0116                     	;# 
    93  0117                     	;# 
    94  0118                     	;# 
    95  0119                     	;# 
    96  011A                     	;# 
    97  011B                     	;# 
    98  011D                     	;# 
    99  011E                     	;# 
   100  011F                     	;# 
   101  018C                     	;# 
   102  0190                     	;# 
   103  0191                     	;# 
   104  0191                     	;# 
   105  0192                     	;# 
   106  0193                     	;# 
   107  0193                     	;# 
   108  0193                     	;# 
   109  0194                     	;# 
   110  0195                     	;# 
   111  0196                     	;# 
   112  0199                     	;# 
   113  0199                     	;# 
   114  019A                     	;# 
   115  019A                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019C                     	;# 
   121  019C                     	;# 
   122  019D                     	;# 
   123  019D                     	;# 
   124  019E                     	;# 
   125  019E                     	;# 
   126  019F                     	;# 
   127  020D                     	;# 
   128  0211                     	;# 
   129  0211                     	;# 
   130  0212                     	;# 
   131  0212                     	;# 
   132  0213                     	;# 
   133  0213                     	;# 
   134  0214                     	;# 
   135  0214                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0216                     	;# 
   140  0216                     	;# 
   141  0217                     	;# 
   142  0217                     	;# 
   143  0219                     	;# 
   144  021A                     	;# 
   145  021B                     	;# 
   146  021C                     	;# 
   147  021D                     	;# 
   148  021E                     	;# 
   149  021F                     	;# 
   150  028C                     	;# 
   151  028D                     	;# 
   152  0291                     	;# 
   153  0291                     	;# 
   154  0292                     	;# 
   155  0293                     	;# 
   156  0294                     	;# 
   157  0295                     	;# 
   158  0295                     	;# 
   159  0296                     	;# 
   160  0298                     	;# 
   161  0298                     	;# 
   162  0299                     	;# 
   163  029A                     	;# 
   164  029B                     	;# 
   165  029C                     	;# 
   166  029C                     	;# 
   167  029D                     	;# 
   168  029E                     	;# 
   169  029F                     	;# 
   170  030C                     	;# 
   171  030D                     	;# 
   172  0311                     	;# 
   173  0311                     	;# 
   174  0312                     	;# 
   175  0313                     	;# 
   176  0314                     	;# 
   177  0315                     	;# 
   178  0315                     	;# 
   179  0316                     	;# 
   180  0318                     	;# 
   181  0318                     	;# 
   182  0319                     	;# 
   183  031A                     	;# 
   184  031C                     	;# 
   185  031C                     	;# 
   186  031D                     	;# 
   187  031E                     	;# 
   188  038C                     	;# 
   189  038D                     	;# 
   190  0394                     	;# 
   191  0395                     	;# 
   192  0396                     	;# 
   193  040C                     	;# 
   194  040D                     	;# 
   195  0415                     	;# 
   196  0416                     	;# 
   197  0417                     	;# 
   198  041C                     	;# 
   199  041D                     	;# 
   200  041E                     	;# 
   201  048D                     	;# 
   202  0491                     	;# 
   203  0492                     	;# 
   204  0493                     	;# 
   205  0493                     	;# 
   206  0494                     	;# 
   207  0495                     	;# 
   208  0496                     	;# 
   209  0497                     	;# 
   210  0791                     	;# 
   211  0792                     	;# 
   212  0793                     	;# 
   213  0794                     	;# 
   214  0795                     	;# 
   215  0798                     	;# 
   216  0799                     	;# 
   217  079A                     	;# 
   218  079B                     	;# 
   219  079C                     	;# 
   220  079D                     	;# 
   221  07A0                     	;# 
   222  07A1                     	;# 
   223  07A2                     	;# 
   224  07A3                     	;# 
   225  07A4                     	;# 
   226  07A5                     	;# 
   227  07A6                     	;# 
   228  07A7                     	;# 
   229  07A8                     	;# 
   230  07A9                     	;# 
   231  07AA                     	;# 
   232  07AB                     	;# 
   233  07AC                     	;# 
   234  07AD                     	;# 
   235  07AE                     	;# 
   236  07AF                     	;# 
   237  07B0                     	;# 
   238  07B1                     	;# 
   239  07B2                     	;# 
   240  07B3                     	;# 
   241  07B4                     	;# 
   242  07B5                     	;# 
   243  07B6                     	;# 
   244  07B7                     	;# 
   245  0FE4                     	;# 
   246  0FE5                     	;# 
   247  0FE6                     	;# 
   248  0FE7                     	;# 
   249  0FE8                     	;# 
   250  0FE9                     	;# 
   251  0FEA                     	;# 
   252  0FEB                     	;# 
   253  0FED                     	;# 
   254  0FEE                     	;# 
   255  0FEF                     	;# 
   256  0000                     	;# 
   257  0001                     	;# 
   258  0002                     	;# 
   259  0003                     	;# 
   260  0004                     	;# 
   261  0005                     	;# 
   262  0006                     	;# 
   263  0007                     	;# 
   264  0008                     	;# 
   265  0009                     	;# 
   266  000A                     	;# 
   267  000B                     	;# 
   268  000C                     	;# 
   269  000D                     	;# 
   270  000E                     	;# 
   271  000F                     	;# 
   272  0010                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0014                     	;# 
   277  0015                     	;# 
   278  0016                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001C                     	;# 
   286  001E                     	;# 
   287  001F                     	;# 
   288  008C                     	;# 
   289  008D                     	;# 
   290  008E                     	;# 
   291  008F                     	;# 
   292  0090                     	;# 
   293  0091                     	;# 
   294  0092                     	;# 
   295  0093                     	;# 
   296  0094                     	;# 
   297  0095                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0098                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  010C                     	;# 
   309  010D                     	;# 
   310  010E                     	;# 
   311  010F                     	;# 
   312  0110                     	;# 
   313  0111                     	;# 
   314  0112                     	;# 
   315  0113                     	;# 
   316  0114                     	;# 
   317  0115                     	;# 
   318  0116                     	;# 
   319  0117                     	;# 
   320  0118                     	;# 
   321  0119                     	;# 
   322  011A                     	;# 
   323  011B                     	;# 
   324  011D                     	;# 
   325  011E                     	;# 
   326  011F                     	;# 
   327  018C                     	;# 
   328  0190                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0199                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019D                     	;# 
   350  019E                     	;# 
   351  019E                     	;# 
   352  019F                     	;# 
   353  020D                     	;# 
   354  0211                     	;# 
   355  0211                     	;# 
   356  0212                     	;# 
   357  0212                     	;# 
   358  0213                     	;# 
   359  0213                     	;# 
   360  0214                     	;# 
   361  0214                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0216                     	;# 
   366  0216                     	;# 
   367  0217                     	;# 
   368  0217                     	;# 
   369  0219                     	;# 
   370  021A                     	;# 
   371  021B                     	;# 
   372  021C                     	;# 
   373  021D                     	;# 
   374  021E                     	;# 
   375  021F                     	;# 
   376  028C                     	;# 
   377  028D                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029C                     	;# 
   393  029D                     	;# 
   394  029E                     	;# 
   395  029F                     	;# 
   396  030C                     	;# 
   397  030D                     	;# 
   398  0311                     	;# 
   399  0311                     	;# 
   400  0312                     	;# 
   401  0313                     	;# 
   402  0314                     	;# 
   403  0315                     	;# 
   404  0315                     	;# 
   405  0316                     	;# 
   406  0318                     	;# 
   407  0318                     	;# 
   408  0319                     	;# 
   409  031A                     	;# 
   410  031C                     	;# 
   411  031C                     	;# 
   412  031D                     	;# 
   413  031E                     	;# 
   414  038C                     	;# 
   415  038D                     	;# 
   416  0394                     	;# 
   417  0395                     	;# 
   418  0396                     	;# 
   419  040C                     	;# 
   420  040D                     	;# 
   421  0415                     	;# 
   422  0416                     	;# 
   423  0417                     	;# 
   424  041C                     	;# 
   425  041D                     	;# 
   426  041E                     	;# 
   427  048D                     	;# 
   428  0491                     	;# 
   429  0492                     	;# 
   430  0493                     	;# 
   431  0493                     	;# 
   432  0494                     	;# 
   433  0495                     	;# 
   434  0496                     	;# 
   435  0497                     	;# 
   436  0791                     	;# 
   437  0792                     	;# 
   438  0793                     	;# 
   439  0794                     	;# 
   440  0795                     	;# 
   441  0798                     	;# 
   442  0799                     	;# 
   443  079A                     	;# 
   444  079B                     	;# 
   445  079C                     	;# 
   446  079D                     	;# 
   447  07A0                     	;# 
   448  07A1                     	;# 
   449  07A2                     	;# 
   450  07A3                     	;# 
   451  07A4                     	;# 
   452  07A5                     	;# 
   453  07A6                     	;# 
   454  07A7                     	;# 
   455  07A8                     	;# 
   456  07A9                     	;# 
   457  07AA                     	;# 
   458  07AB                     	;# 
   459  07AC                     	;# 
   460  07AD                     	;# 
   461  07AE                     	;# 
   462  07AF                     	;# 
   463  07B0                     	;# 
   464  07B1                     	;# 
   465  07B2                     	;# 
   466  07B3                     	;# 
   467  07B4                     	;# 
   468  07B5                     	;# 
   469  07B6                     	;# 
   470  07B7                     	;# 
   471  0FE4                     	;# 
   472  0FE5                     	;# 
   473  0FE6                     	;# 
   474  0FE7                     	;# 
   475  0FE8                     	;# 
   476  0FE9                     	;# 
   477  0FEA                     	;# 
   478  0FEB                     	;# 
   479  0FED                     	;# 
   480  0FEE                     	;# 
   481  0FEF                     	;# 
   482  0000                     	;# 
   483  0001                     	;# 
   484  0002                     	;# 
   485  0003                     	;# 
   486  0004                     	;# 
   487  0005                     	;# 
   488  0006                     	;# 
   489  0007                     	;# 
   490  0008                     	;# 
   491  0009                     	;# 
   492  000A                     	;# 
   493  000B                     	;# 
   494  000C                     	;# 
   495  000D                     	;# 
   496  000E                     	;# 
   497  000F                     	;# 
   498  0010                     	;# 
   499  0011                     	;# 
   500  0012                     	;# 
   501  0013                     	;# 
   502  0014                     	;# 
   503  0015                     	;# 
   504  0016                     	;# 
   505  0016                     	;# 
   506  0017                     	;# 
   507  0018                     	;# 
   508  0019                     	;# 
   509  001A                     	;# 
   510  001B                     	;# 
   511  001C                     	;# 
   512  001E                     	;# 
   513  001F                     	;# 
   514  008C                     	;# 
   515  008D                     	;# 
   516  008E                     	;# 
   517  008F                     	;# 
   518  0090                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0093                     	;# 
   522  0094                     	;# 
   523  0095                     	;# 
   524  0096                     	;# 
   525  0097                     	;# 
   526  0098                     	;# 
   527  0099                     	;# 
   528  009A                     	;# 
   529  009B                     	;# 
   530  009B                     	;# 
   531  009C                     	;# 
   532  009D                     	;# 
   533  009E                     	;# 
   534  010C                     	;# 
   535  010D                     	;# 
   536  010E                     	;# 
   537  010F                     	;# 
   538  0110                     	;# 
   539  0111                     	;# 
   540  0112                     	;# 
   541  0113                     	;# 
   542  0114                     	;# 
   543  0115                     	;# 
   544  0116                     	;# 
   545  0117                     	;# 
   546  0118                     	;# 
   547  0119                     	;# 
   548  011A                     	;# 
   549  011B                     	;# 
   550  011D                     	;# 
   551  011E                     	;# 
   552  011F                     	;# 
   553  018C                     	;# 
   554  0190                     	;# 
   555  0191                     	;# 
   556  0191                     	;# 
   557  0192                     	;# 
   558  0193                     	;# 
   559  0193                     	;# 
   560  0193                     	;# 
   561  0194                     	;# 
   562  0195                     	;# 
   563  0196                     	;# 
   564  0199                     	;# 
   565  0199                     	;# 
   566  019A                     	;# 
   567  019A                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019C                     	;# 
   573  019C                     	;# 
   574  019D                     	;# 
   575  019D                     	;# 
   576  019E                     	;# 
   577  019E                     	;# 
   578  019F                     	;# 
   579  020D                     	;# 
   580  0211                     	;# 
   581  0211                     	;# 
   582  0212                     	;# 
   583  0212                     	;# 
   584  0213                     	;# 
   585  0213                     	;# 
   586  0214                     	;# 
   587  0214                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0216                     	;# 
   592  0216                     	;# 
   593  0217                     	;# 
   594  0217                     	;# 
   595  0219                     	;# 
   596  021A                     	;# 
   597  021B                     	;# 
   598  021C                     	;# 
   599  021D                     	;# 
   600  021E                     	;# 
   601  021F                     	;# 
   602  028C                     	;# 
   603  028D                     	;# 
   604  0291                     	;# 
   605  0291                     	;# 
   606  0292                     	;# 
   607  0293                     	;# 
   608  0294                     	;# 
   609  0295                     	;# 
   610  0295                     	;# 
   611  0296                     	;# 
   612  0298                     	;# 
   613  0298                     	;# 
   614  0299                     	;# 
   615  029A                     	;# 
   616  029B                     	;# 
   617  029C                     	;# 
   618  029C                     	;# 
   619  029D                     	;# 
   620  029E                     	;# 
   621  029F                     	;# 
   622  030C                     	;# 
   623  030D                     	;# 
   624  0311                     	;# 
   625  0311                     	;# 
   626  0312                     	;# 
   627  0313                     	;# 
   628  0314                     	;# 
   629  0315                     	;# 
   630  0315                     	;# 
   631  0316                     	;# 
   632  0318                     	;# 
   633  0318                     	;# 
   634  0319                     	;# 
   635  031A                     	;# 
   636  031C                     	;# 
   637  031C                     	;# 
   638  031D                     	;# 
   639  031E                     	;# 
   640  038C                     	;# 
   641  038D                     	;# 
   642  0394                     	;# 
   643  0395                     	;# 
   644  0396                     	;# 
   645  040C                     	;# 
   646  040D                     	;# 
   647  0415                     	;# 
   648  0416                     	;# 
   649  0417                     	;# 
   650  041C                     	;# 
   651  041D                     	;# 
   652  041E                     	;# 
   653  048D                     	;# 
   654  0491                     	;# 
   655  0492                     	;# 
   656  0493                     	;# 
   657  0493                     	;# 
   658  0494                     	;# 
   659  0495                     	;# 
   660  0496                     	;# 
   661  0497                     	;# 
   662  0791                     	;# 
   663  0792                     	;# 
   664  0793                     	;# 
   665  0794                     	;# 
   666  0795                     	;# 
   667  0798                     	;# 
   668  0799                     	;# 
   669  079A                     	;# 
   670  079B                     	;# 
   671  079C                     	;# 
   672  079D                     	;# 
   673  07A0                     	;# 
   674  07A1                     	;# 
   675  07A2                     	;# 
   676  07A3                     	;# 
   677  07A4                     	;# 
   678  07A5                     	;# 
   679  07A6                     	;# 
   680  07A7                     	;# 
   681  07A8                     	;# 
   682  07A9                     	;# 
   683  07AA                     	;# 
   684  07AB                     	;# 
   685  07AC                     	;# 
   686  07AD                     	;# 
   687  07AE                     	;# 
   688  07AF                     	;# 
   689  07B0                     	;# 
   690  07B1                     	;# 
   691  07B2                     	;# 
   692  07B3                     	;# 
   693  07B4                     	;# 
   694  07B5                     	;# 
   695  07B6                     	;# 
   696  07B7                     	;# 
   697  0FE4                     	;# 
   698  0FE5                     	;# 
   699  0FE6                     	;# 
   700  0FE7                     	;# 
   701  0FE8                     	;# 
   702  0FE9                     	;# 
   703  0FEA                     	;# 
   704  0FEB                     	;# 
   705  0FED                     	;# 
   706  0FEE                     	;# 
   707  0FEF                     	;# 
   708  0000                     	;# 
   709  0001                     	;# 
   710  0002                     	;# 
   711  0003                     	;# 
   712  0004                     	;# 
   713  0005                     	;# 
   714  0006                     	;# 
   715  0007                     	;# 
   716  0008                     	;# 
   717  0009                     	;# 
   718  000A                     	;# 
   719  000B                     	;# 
   720  000C                     	;# 
   721  000D                     	;# 
   722  000E                     	;# 
   723  000F                     	;# 
   724  0010                     	;# 
   725  0011                     	;# 
   726  0012                     	;# 
   727  0013                     	;# 
   728  0014                     	;# 
   729  0015                     	;# 
   730  0016                     	;# 
   731  0016                     	;# 
   732  0017                     	;# 
   733  0018                     	;# 
   734  0019                     	;# 
   735  001A                     	;# 
   736  001B                     	;# 
   737  001C                     	;# 
   738  001E                     	;# 
   739  001F                     	;# 
   740  008C                     	;# 
   741  008D                     	;# 
   742  008E                     	;# 
   743  008F                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0093                     	;# 
   748  0094                     	;# 
   749  0095                     	;# 
   750  0096                     	;# 
   751  0097                     	;# 
   752  0098                     	;# 
   753  0099                     	;# 
   754  009A                     	;# 
   755  009B                     	;# 
   756  009B                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009E                     	;# 
   760  010C                     	;# 
   761  010D                     	;# 
   762  010E                     	;# 
   763  010F                     	;# 
   764  0110                     	;# 
   765  0111                     	;# 
   766  0112                     	;# 
   767  0113                     	;# 
   768  0114                     	;# 
   769  0115                     	;# 
   770  0116                     	;# 
   771  0117                     	;# 
   772  0118                     	;# 
   773  0119                     	;# 
   774  011A                     	;# 
   775  011B                     	;# 
   776  011D                     	;# 
   777  011E                     	;# 
   778  011F                     	;# 
   779  018C                     	;# 
   780  0190                     	;# 
   781  0191                     	;# 
   782  0191                     	;# 
   783  0192                     	;# 
   784  0193                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0194                     	;# 
   788  0195                     	;# 
   789  0196                     	;# 
   790  0199                     	;# 
   791  0199                     	;# 
   792  019A                     	;# 
   793  019A                     	;# 
   794  019B                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019C                     	;# 
   799  019C                     	;# 
   800  019D                     	;# 
   801  019D                     	;# 
   802  019E                     	;# 
   803  019E                     	;# 
   804  019F                     	;# 
   805  020D                     	;# 
   806  0211                     	;# 
   807  0211                     	;# 
   808  0212                     	;# 
   809  0212                     	;# 
   810  0213                     	;# 
   811  0213                     	;# 
   812  0214                     	;# 
   813  0214                     	;# 
   814  0215                     	;# 
   815  0215                     	;# 
   816  0215                     	;# 
   817  0216                     	;# 
   818  0216                     	;# 
   819  0217                     	;# 
   820  0217                     	;# 
   821  0219                     	;# 
   822  021A                     	;# 
   823  021B                     	;# 
   824  021C                     	;# 
   825  021D                     	;# 
   826  021E                     	;# 
   827  021F                     	;# 
   828  028C                     	;# 
   829  028D                     	;# 
   830  0291                     	;# 
   831  0291                     	;# 
   832  0292                     	;# 
   833  0293                     	;# 
   834  0294                     	;# 
   835  0295                     	;# 
   836  0295                     	;# 
   837  0296                     	;# 
   838  0298                     	;# 
   839  0298                     	;# 
   840  0299                     	;# 
   841  029A                     	;# 
   842  029B                     	;# 
   843  029C                     	;# 
   844  029C                     	;# 
   845  029D                     	;# 
   846  029E                     	;# 
   847  029F                     	;# 
   848  030C                     	;# 
   849  030D                     	;# 
   850  0311                     	;# 
   851  0311                     	;# 
   852  0312                     	;# 
   853  0313                     	;# 
   854  0314                     	;# 
   855  0315                     	;# 
   856  0315                     	;# 
   857  0316                     	;# 
   858  0318                     	;# 
   859  0318                     	;# 
   860  0319                     	;# 
   861  031A                     	;# 
   862  031C                     	;# 
   863  031C                     	;# 
   864  031D                     	;# 
   865  031E                     	;# 
   866  038C                     	;# 
   867  038D                     	;# 
   868  0394                     	;# 
   869  0395                     	;# 
   870  0396                     	;# 
   871  040C                     	;# 
   872  040D                     	;# 
   873  0415                     	;# 
   874  0416                     	;# 
   875  0417                     	;# 
   876  041C                     	;# 
   877  041D                     	;# 
   878  041E                     	;# 
   879  048D                     	;# 
   880  0491                     	;# 
   881  0492                     	;# 
   882  0493                     	;# 
   883  0493                     	;# 
   884  0494                     	;# 
   885  0495                     	;# 
   886  0496                     	;# 
   887  0497                     	;# 
   888  0791                     	;# 
   889  0792                     	;# 
   890  0793                     	;# 
   891  0794                     	;# 
   892  0795                     	;# 
   893  0798                     	;# 
   894  0799                     	;# 
   895  079A                     	;# 
   896  079B                     	;# 
   897  079C                     	;# 
   898  079D                     	;# 
   899  07A0                     	;# 
   900  07A1                     	;# 
   901  07A2                     	;# 
   902  07A3                     	;# 
   903  07A4                     	;# 
   904  07A5                     	;# 
   905  07A6                     	;# 
   906  07A7                     	;# 
   907  07A8                     	;# 
   908  07A9                     	;# 
   909  07AA                     	;# 
   910  07AB                     	;# 
   911  07AC                     	;# 
   912  07AD                     	;# 
   913  07AE                     	;# 
   914  07AF                     	;# 
   915  07B0                     	;# 
   916  07B1                     	;# 
   917  07B2                     	;# 
   918  07B3                     	;# 
   919  07B4                     	;# 
   920  07B5                     	;# 
   921  07B6                     	;# 
   922  07B7                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000D                     	;# 
   948  000E                     	;# 
   949  000F                     	;# 
   950  0010                     	;# 
   951  0011                     	;# 
   952  0012                     	;# 
   953  0013                     	;# 
   954  0014                     	;# 
   955  0015                     	;# 
   956  0016                     	;# 
   957  0016                     	;# 
   958  0017                     	;# 
   959  0018                     	;# 
   960  0019                     	;# 
   961  001A                     	;# 
   962  001B                     	;# 
   963  001C                     	;# 
   964  001E                     	;# 
   965  001F                     	;# 
   966  008C                     	;# 
   967  008D                     	;# 
   968  008E                     	;# 
   969  008F                     	;# 
   970  0090                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0093                     	;# 
   974  0094                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0098                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  010F                     	;# 
   990  0110                     	;# 
   991  0111                     	;# 
   992  0112                     	;# 
   993  0113                     	;# 
   994  0114                     	;# 
   995  0115                     	;# 
   996  0116                     	;# 
   997  0117                     	;# 
   998  0118                     	;# 
   999  0119                     	;# 
  1000  011A                     	;# 
  1001  011B                     	;# 
  1002  011D                     	;# 
  1003  011E                     	;# 
  1004  011F                     	;# 
  1005  018C                     	;# 
  1006  0190                     	;# 
  1007  0191                     	;# 
  1008  0191                     	;# 
  1009  0192                     	;# 
  1010  0193                     	;# 
  1011  0193                     	;# 
  1012  0193                     	;# 
  1013  0194                     	;# 
  1014  0195                     	;# 
  1015  0196                     	;# 
  1016  0199                     	;# 
  1017  0199                     	;# 
  1018  019A                     	;# 
  1019  019A                     	;# 
  1020  019B                     	;# 
  1021  019B                     	;# 
  1022  019B                     	;# 
  1023  019B                     	;# 
  1024  019C                     	;# 
  1025  019C                     	;# 
  1026  019D                     	;# 
  1027  019D                     	;# 
  1028  019E                     	;# 
  1029  019E                     	;# 
  1030  019F                     	;# 
  1031  020D                     	;# 
  1032  0211                     	;# 
  1033  0211                     	;# 
  1034  0212                     	;# 
  1035  0212                     	;# 
  1036  0213                     	;# 
  1037  0213                     	;# 
  1038  0214                     	;# 
  1039  0214                     	;# 
  1040  0215                     	;# 
  1041  0215                     	;# 
  1042  0215                     	;# 
  1043  0216                     	;# 
  1044  0216                     	;# 
  1045  0217                     	;# 
  1046  0217                     	;# 
  1047  0219                     	;# 
  1048  021A                     	;# 
  1049  021B                     	;# 
  1050  021C                     	;# 
  1051  021D                     	;# 
  1052  021E                     	;# 
  1053  021F                     	;# 
  1054  028C                     	;# 
  1055  028D                     	;# 
  1056  0291                     	;# 
  1057  0291                     	;# 
  1058  0292                     	;# 
  1059  0293                     	;# 
  1060  0294                     	;# 
  1061  0295                     	;# 
  1062  0295                     	;# 
  1063  0296                     	;# 
  1064  0298                     	;# 
  1065  0298                     	;# 
  1066  0299                     	;# 
  1067  029A                     	;# 
  1068  029B                     	;# 
  1069  029C                     	;# 
  1070  029C                     	;# 
  1071  029D                     	;# 
  1072  029E                     	;# 
  1073  029F                     	;# 
  1074  030C                     	;# 
  1075  030D                     	;# 
  1076  0311                     	;# 
  1077  0311                     	;# 
  1078  0312                     	;# 
  1079  0313                     	;# 
  1080  0314                     	;# 
  1081  0315                     	;# 
  1082  0315                     	;# 
  1083  0316                     	;# 
  1084  0318                     	;# 
  1085  0318                     	;# 
  1086  0319                     	;# 
  1087  031A                     	;# 
  1088  031C                     	;# 
  1089  031C                     	;# 
  1090  031D                     	;# 
  1091  031E                     	;# 
  1092  038C                     	;# 
  1093  038D                     	;# 
  1094  0394                     	;# 
  1095  0395                     	;# 
  1096  0396                     	;# 
  1097  040C                     	;# 
  1098  040D                     	;# 
  1099  0415                     	;# 
  1100  0416                     	;# 
  1101  0417                     	;# 
  1102  041C                     	;# 
  1103  041D                     	;# 
  1104  041E                     	;# 
  1105  048D                     	;# 
  1106  0491                     	;# 
  1107  0492                     	;# 
  1108  0493                     	;# 
  1109  0493                     	;# 
  1110  0494                     	;# 
  1111  0495                     	;# 
  1112  0496                     	;# 
  1113  0497                     	;# 
  1114  0791                     	;# 
  1115  0792                     	;# 
  1116  0793                     	;# 
  1117  0794                     	;# 
  1118  0795                     	;# 
  1119  0798                     	;# 
  1120  0799                     	;# 
  1121  079A                     	;# 
  1122  079B                     	;# 
  1123  079C                     	;# 
  1124  079D                     	;# 
  1125  07A0                     	;# 
  1126  07A1                     	;# 
  1127  07A2                     	;# 
  1128  07A3                     	;# 
  1129  07A4                     	;# 
  1130  07A5                     	;# 
  1131  07A6                     	;# 
  1132  07A7                     	;# 
  1133  07A8                     	;# 
  1134  07A9                     	;# 
  1135  07AA                     	;# 
  1136  07AB                     	;# 
  1137  07AC                     	;# 
  1138  07AD                     	;# 
  1139  07AE                     	;# 
  1140  07AF                     	;# 
  1141  07B0                     	;# 
  1142  07B1                     	;# 
  1143  07B2                     	;# 
  1144  07B3                     	;# 
  1145  07B4                     	;# 
  1146  07B5                     	;# 
  1147  07B6                     	;# 
  1148  07B7                     	;# 
  1149  0FE4                     	;# 
  1150  0FE5                     	;# 
  1151  0FE6                     	;# 
  1152  0FE7                     	;# 
  1153  0FE8                     	;# 
  1154  0FE9                     	;# 
  1155  0FEA                     	;# 
  1156  0FEB                     	;# 
  1157  0FED                     	;# 
  1158  0FEE                     	;# 
  1159  0FEF                     	;# 
  1160  0000                     	;# 
  1161  0001                     	;# 
  1162  0002                     	;# 
  1163  0003                     	;# 
  1164  0004                     	;# 
  1165  0005                     	;# 
  1166  0006                     	;# 
  1167  0007                     	;# 
  1168  0008                     	;# 
  1169  0009                     	;# 
  1170  000A                     	;# 
  1171  000B                     	;# 
  1172  000C                     	;# 
  1173  000D                     	;# 
  1174  000E                     	;# 
  1175  000F                     	;# 
  1176  0010                     	;# 
  1177  0011                     	;# 
  1178  0012                     	;# 
  1179  0013                     	;# 
  1180  0014                     	;# 
  1181  0015                     	;# 
  1182  0016                     	;# 
  1183  0016                     	;# 
  1184  0017                     	;# 
  1185  0018                     	;# 
  1186  0019                     	;# 
  1187  001A                     	;# 
  1188  001B                     	;# 
  1189  001C                     	;# 
  1190  001E                     	;# 
  1191  001F                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  008F                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0093                     	;# 
  1200  0094                     	;# 
  1201  0095                     	;# 
  1202  0096                     	;# 
  1203  0097                     	;# 
  1204  0098                     	;# 
  1205  0099                     	;# 
  1206  009A                     	;# 
  1207  009B                     	;# 
  1208  009B                     	;# 
  1209  009C                     	;# 
  1210  009D                     	;# 
  1211  009E                     	;# 
  1212  010C                     	;# 
  1213  010D                     	;# 
  1214  010E                     	;# 
  1215  010F                     	;# 
  1216  0110                     	;# 
  1217  0111                     	;# 
  1218  0112                     	;# 
  1219  0113                     	;# 
  1220  0114                     	;# 
  1221  0115                     	;# 
  1222  0116                     	;# 
  1223  0117                     	;# 
  1224  0118                     	;# 
  1225  0119                     	;# 
  1226  011A                     	;# 
  1227  011B                     	;# 
  1228  011D                     	;# 
  1229  011E                     	;# 
  1230  011F                     	;# 
  1231  018C                     	;# 
  1232  0190                     	;# 
  1233  0191                     	;# 
  1234  0191                     	;# 
  1235  0192                     	;# 
  1236  0193                     	;# 
  1237  0193                     	;# 
  1238  0193                     	;# 
  1239  0194                     	;# 
  1240  0195                     	;# 
  1241  0196                     	;# 
  1242  0199                     	;# 
  1243  0199                     	;# 
  1244  019A                     	;# 
  1245  019A                     	;# 
  1246  019B                     	;# 
  1247  019B                     	;# 
  1248  019B                     	;# 
  1249  019B                     	;# 
  1250  019C                     	;# 
  1251  019C                     	;# 
  1252  019D                     	;# 
  1253  019D                     	;# 
  1254  019E                     	;# 
  1255  019E                     	;# 
  1256  019F                     	;# 
  1257  020D                     	;# 
  1258  0211                     	;# 
  1259  0211                     	;# 
  1260  0212                     	;# 
  1261  0212                     	;# 
  1262  0213                     	;# 
  1263  0213                     	;# 
  1264  0214                     	;# 
  1265  0214                     	;# 
  1266  0215                     	;# 
  1267  0215                     	;# 
  1268  0215                     	;# 
  1269  0216                     	;# 
  1270  0216                     	;# 
  1271  0217                     	;# 
  1272  0217                     	;# 
  1273  0219                     	;# 
  1274  021A                     	;# 
  1275  021B                     	;# 
  1276  021C                     	;# 
  1277  021D                     	;# 
  1278  021E                     	;# 
  1279  021F                     	;# 
  1280  028C                     	;# 
  1281  028D                     	;# 
  1282  0291                     	;# 
  1283  0291                     	;# 
  1284  0292                     	;# 
  1285  0293                     	;# 
  1286  0294                     	;# 
  1287  0295                     	;# 
  1288  0295                     	;# 
  1289  0296                     	;# 
  1290  0298                     	;# 
  1291  0298                     	;# 
  1292  0299                     	;# 
  1293  029A                     	;# 
  1294  029B                     	;# 
  1295  029C                     	;# 
  1296  029C                     	;# 
  1297  029D                     	;# 
  1298  029E                     	;# 
  1299  029F                     	;# 
  1300  030C                     	;# 
  1301  030D                     	;# 
  1302  0311                     	;# 
  1303  0311                     	;# 
  1304  0312                     	;# 
  1305  0313                     	;# 
  1306  0314                     	;# 
  1307  0315                     	;# 
  1308  0315                     	;# 
  1309  0316                     	;# 
  1310  0318                     	;# 
  1311  0318                     	;# 
  1312  0319                     	;# 
  1313  031A                     	;# 
  1314  031C                     	;# 
  1315  031C                     	;# 
  1316  031D                     	;# 
  1317  031E                     	;# 
  1318  038C                     	;# 
  1319  038D                     	;# 
  1320  0394                     	;# 
  1321  0395                     	;# 
  1322  0396                     	;# 
  1323  040C                     	;# 
  1324  040D                     	;# 
  1325  0415                     	;# 
  1326  0416                     	;# 
  1327  0417                     	;# 
  1328  041C                     	;# 
  1329  041D                     	;# 
  1330  041E                     	;# 
  1331  048D                     	;# 
  1332  0491                     	;# 
  1333  0492                     	;# 
  1334  0493                     	;# 
  1335  0493                     	;# 
  1336  0494                     	;# 
  1337  0495                     	;# 
  1338  0496                     	;# 
  1339  0497                     	;# 
  1340  0791                     	;# 
  1341  0792                     	;# 
  1342  0793                     	;# 
  1343  0794                     	;# 
  1344  0795                     	;# 
  1345  0798                     	;# 
  1346  0799                     	;# 
  1347  079A                     	;# 
  1348  079B                     	;# 
  1349  079C                     	;# 
  1350  079D                     	;# 
  1351  07A0                     	;# 
  1352  07A1                     	;# 
  1353  07A2                     	;# 
  1354  07A3                     	;# 
  1355  07A4                     	;# 
  1356  07A5                     	;# 
  1357  07A6                     	;# 
  1358  07A7                     	;# 
  1359  07A8                     	;# 
  1360  07A9                     	;# 
  1361  07AA                     	;# 
  1362  07AB                     	;# 
  1363  07AC                     	;# 
  1364  07AD                     	;# 
  1365  07AE                     	;# 
  1366  07AF                     	;# 
  1367  07B0                     	;# 
  1368  07B1                     	;# 
  1369  07B2                     	;# 
  1370  07B3                     	;# 
  1371  07B4                     	;# 
  1372  07B5                     	;# 
  1373  07B6                     	;# 
  1374  07B7                     	;# 
  1375  0FE4                     	;# 
  1376  0FE5                     	;# 
  1377  0FE6                     	;# 
  1378  0FE7                     	;# 
  1379  0FE8                     	;# 
  1380  0FE9                     	;# 
  1381  0FEA                     	;# 
  1382  0FEB                     	;# 
  1383  0FED                     	;# 
  1384  0FEE                     	;# 
  1385  0FEF                     	;# 
  1386  0000                     	;# 
  1387  0001                     	;# 
  1388  0002                     	;# 
  1389  0003                     	;# 
  1390  0004                     	;# 
  1391  0005                     	;# 
  1392  0006                     	;# 
  1393  0007                     	;# 
  1394  0008                     	;# 
  1395  0009                     	;# 
  1396  000A                     	;# 
  1397  000B                     	;# 
  1398  000C                     	;# 
  1399  000D                     	;# 
  1400  000E                     	;# 
  1401  000F                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0013                     	;# 
  1406  0014                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  001E                     	;# 
  1417  001F                     	;# 
  1418  008C                     	;# 
  1419  008D                     	;# 
  1420  008E                     	;# 
  1421  008F                     	;# 
  1422  0090                     	;# 
  1423  0091                     	;# 
  1424  0092                     	;# 
  1425  0093                     	;# 
  1426  0094                     	;# 
  1427  0095                     	;# 
  1428  0096                     	;# 
  1429  0097                     	;# 
  1430  0098                     	;# 
  1431  0099                     	;# 
  1432  009A                     	;# 
  1433  009B                     	;# 
  1434  009B                     	;# 
  1435  009C                     	;# 
  1436  009D                     	;# 
  1437  009E                     	;# 
  1438  010C                     	;# 
  1439  010D                     	;# 
  1440  010E                     	;# 
  1441  010F                     	;# 
  1442  0110                     	;# 
  1443  0111                     	;# 
  1444  0112                     	;# 
  1445  0113                     	;# 
  1446  0114                     	;# 
  1447  0115                     	;# 
  1448  0116                     	;# 
  1449  0117                     	;# 
  1450  0118                     	;# 
  1451  0119                     	;# 
  1452  011A                     	;# 
  1453  011B                     	;# 
  1454  011D                     	;# 
  1455  011E                     	;# 
  1456  011F                     	;# 
  1457  018C                     	;# 
  1458  0190                     	;# 
  1459  0191                     	;# 
  1460  0191                     	;# 
  1461  0192                     	;# 
  1462  0193                     	;# 
  1463  0193                     	;# 
  1464  0193                     	;# 
  1465  0194                     	;# 
  1466  0195                     	;# 
  1467  0196                     	;# 
  1468  0199                     	;# 
  1469  0199                     	;# 
  1470  019A                     	;# 
  1471  019A                     	;# 
  1472  019B                     	;# 
  1473  019B                     	;# 
  1474  019B                     	;# 
  1475  019B                     	;# 
  1476  019C                     	;# 
  1477  019C                     	;# 
  1478  019D                     	;# 
  1479  019D                     	;# 
  1480  019E                     	;# 
  1481  019E                     	;# 
  1482  019F                     	;# 
  1483  020D                     	;# 
  1484  0211                     	;# 
  1485  0211                     	;# 
  1486  0212                     	;# 
  1487  0212                     	;# 
  1488  0213                     	;# 
  1489  0213                     	;# 
  1490  0214                     	;# 
  1491  0214                     	;# 
  1492  0215                     	;# 
  1493  0215                     	;# 
  1494  0215                     	;# 
  1495  0216                     	;# 
  1496  0216                     	;# 
  1497  0217                     	;# 
  1498  0217                     	;# 
  1499  0219                     	;# 
  1500  021A                     	;# 
  1501  021B                     	;# 
  1502  021C                     	;# 
  1503  021D                     	;# 
  1504  021E                     	;# 
  1505  021F                     	;# 
  1506  028C                     	;# 
  1507  028D                     	;# 
  1508  0291                     	;# 
  1509  0291                     	;# 
  1510  0292                     	;# 
  1511  0293                     	;# 
  1512  0294                     	;# 
  1513  0295                     	;# 
  1514  0295                     	;# 
  1515  0296                     	;# 
  1516  0298                     	;# 
  1517  0298                     	;# 
  1518  0299                     	;# 
  1519  029A                     	;# 
  1520  029B                     	;# 
  1521  029C                     	;# 
  1522  029C                     	;# 
  1523  029D                     	;# 
  1524  029E                     	;# 
  1525  029F                     	;# 
  1526  030C                     	;# 
  1527  030D                     	;# 
  1528  0311                     	;# 
  1529  0311                     	;# 
  1530  0312                     	;# 
  1531  0313                     	;# 
  1532  0314                     	;# 
  1533  0315                     	;# 
  1534  0315                     	;# 
  1535  0316                     	;# 
  1536  0318                     	;# 
  1537  0318                     	;# 
  1538  0319                     	;# 
  1539  031A                     	;# 
  1540  031C                     	;# 
  1541  031C                     	;# 
  1542  031D                     	;# 
  1543  031E                     	;# 
  1544  038C                     	;# 
  1545  038D                     	;# 
  1546  0394                     	;# 
  1547  0395                     	;# 
  1548  0396                     	;# 
  1549  040C                     	;# 
  1550  040D                     	;# 
  1551  0415                     	;# 
  1552  0416                     	;# 
  1553  0417                     	;# 
  1554  041C                     	;# 
  1555  041D                     	;# 
  1556  041E                     	;# 
  1557  048D                     	;# 
  1558  0491                     	;# 
  1559  0492                     	;# 
  1560  0493                     	;# 
  1561  0493                     	;# 
  1562  0494                     	;# 
  1563  0495                     	;# 
  1564  0496                     	;# 
  1565  0497                     	;# 
  1566  0791                     	;# 
  1567  0792                     	;# 
  1568  0793                     	;# 
  1569  0794                     	;# 
  1570  0795                     	;# 
  1571  0798                     	;# 
  1572  0799                     	;# 
  1573  079A                     	;# 
  1574  079B                     	;# 
  1575  079C                     	;# 
  1576  079D                     	;# 
  1577  07A0                     	;# 
  1578  07A1                     	;# 
  1579  07A2                     	;# 
  1580  07A3                     	;# 
  1581  07A4                     	;# 
  1582  07A5                     	;# 
  1583  07A6                     	;# 
  1584  07A7                     	;# 
  1585  07A8                     	;# 
  1586  07A9                     	;# 
  1587  07AA                     	;# 
  1588  07AB                     	;# 
  1589  07AC                     	;# 
  1590  07AD                     	;# 
  1591  07AE                     	;# 
  1592  07AF                     	;# 
  1593  07B0                     	;# 
  1594  07B1                     	;# 
  1595  07B2                     	;# 
  1596  07B3                     	;# 
  1597  07B4                     	;# 
  1598  07B5                     	;# 
  1599  07B6                     	;# 
  1600  07B7                     	;# 
  1601  0FE4                     	;# 
  1602  0FE5                     	;# 
  1603  0FE6                     	;# 
  1604  0FE7                     	;# 
  1605  0FE8                     	;# 
  1606  0FE9                     	;# 
  1607  0FEA                     	;# 
  1608  0FEB                     	;# 
  1609  0FED                     	;# 
  1610  0FEE                     	;# 
  1611  0FEF                     	;# 
  1612  0000                     	;# 
  1613  0001                     	;# 
  1614  0002                     	;# 
  1615  0003                     	;# 
  1616  0004                     	;# 
  1617  0005                     	;# 
  1618  0006                     	;# 
  1619  0007                     	;# 
  1620  0008                     	;# 
  1621  0009                     	;# 
  1622  000A                     	;# 
  1623  000B                     	;# 
  1624  000C                     	;# 
  1625  000D                     	;# 
  1626  000E                     	;# 
  1627  000F                     	;# 
  1628  0010                     	;# 
  1629  0011                     	;# 
  1630  0012                     	;# 
  1631  0013                     	;# 
  1632  0014                     	;# 
  1633  0015                     	;# 
  1634  0016                     	;# 
  1635  0016                     	;# 
  1636  0017                     	;# 
  1637  0018                     	;# 
  1638  0019                     	;# 
  1639  001A                     	;# 
  1640  001B                     	;# 
  1641  001C                     	;# 
  1642  001E                     	;# 
  1643  001F                     	;# 
  1644  008C                     	;# 
  1645  008D                     	;# 
  1646  008E                     	;# 
  1647  008F                     	;# 
  1648  0090                     	;# 
  1649  0091                     	;# 
  1650  0092                     	;# 
  1651  0093                     	;# 
  1652  0094                     	;# 
  1653  0095                     	;# 
  1654  0096                     	;# 
  1655  0097                     	;# 
  1656  0098                     	;# 
  1657  0099                     	;# 
  1658  009A                     	;# 
  1659  009B                     	;# 
  1660  009B                     	;# 
  1661  009C                     	;# 
  1662  009D                     	;# 
  1663  009E                     	;# 
  1664  010C                     	;# 
  1665  010D                     	;# 
  1666  010E                     	;# 
  1667  010F                     	;# 
  1668  0110                     	;# 
  1669  0111                     	;# 
  1670  0112                     	;# 
  1671  0113                     	;# 
  1672  0114                     	;# 
  1673  0115                     	;# 
  1674  0116                     	;# 
  1675  0117                     	;# 
  1676  0118                     	;# 
  1677  0119                     	;# 
  1678  011A                     	;# 
  1679  011B                     	;# 
  1680  011D                     	;# 
  1681  011E                     	;# 
  1682  011F                     	;# 
  1683  018C                     	;# 
  1684  0190                     	;# 
  1685  0191                     	;# 
  1686  0191                     	;# 
  1687  0192                     	;# 
  1688  0193                     	;# 
  1689  0193                     	;# 
  1690  0193                     	;# 
  1691  0194                     	;# 
  1692  0195                     	;# 
  1693  0196                     	;# 
  1694  0199                     	;# 
  1695  0199                     	;# 
  1696  019A                     	;# 
  1697  019A                     	;# 
  1698  019B                     	;# 
  1699  019B                     	;# 
  1700  019B                     	;# 
  1701  019B                     	;# 
  1702  019C                     	;# 
  1703  019C                     	;# 
  1704  019D                     	;# 
  1705  019D                     	;# 
  1706  019E                     	;# 
  1707  019E                     	;# 
  1708  019F                     	;# 
  1709  020D                     	;# 
  1710  0211                     	;# 
  1711  0211                     	;# 
  1712  0212                     	;# 
  1713  0212                     	;# 
  1714  0213                     	;# 
  1715  0213                     	;# 
  1716  0214                     	;# 
  1717  0214                     	;# 
  1718  0215                     	;# 
  1719  0215                     	;# 
  1720  0215                     	;# 
  1721  0216                     	;# 
  1722  0216                     	;# 
  1723  0217                     	;# 
  1724  0217                     	;# 
  1725  0219                     	;# 
  1726  021A                     	;# 
  1727  021B                     	;# 
  1728  021C                     	;# 
  1729  021D                     	;# 
  1730  021E                     	;# 
  1731  021F                     	;# 
  1732  028C                     	;# 
  1733  028D                     	;# 
  1734  0291                     	;# 
  1735  0291                     	;# 
  1736  0292                     	;# 
  1737  0293                     	;# 
  1738  0294                     	;# 
  1739  0295                     	;# 
  1740  0295                     	;# 
  1741  0296                     	;# 
  1742  0298                     	;# 
  1743  0298                     	;# 
  1744  0299                     	;# 
  1745  029A                     	;# 
  1746  029B                     	;# 
  1747  029C                     	;# 
  1748  029C                     	;# 
  1749  029D                     	;# 
  1750  029E                     	;# 
  1751  029F                     	;# 
  1752  030C                     	;# 
  1753  030D                     	;# 
  1754  0311                     	;# 
  1755  0311                     	;# 
  1756  0312                     	;# 
  1757  0313                     	;# 
  1758  0314                     	;# 
  1759  0315                     	;# 
  1760  0315                     	;# 
  1761  0316                     	;# 
  1762  0318                     	;# 
  1763  0318                     	;# 
  1764  0319                     	;# 
  1765  031A                     	;# 
  1766  031C                     	;# 
  1767  031C                     	;# 
  1768  031D                     	;# 
  1769  031E                     	;# 
  1770  038C                     	;# 
  1771  038D                     	;# 
  1772  0394                     	;# 
  1773  0395                     	;# 
  1774  0396                     	;# 
  1775  040C                     	;# 
  1776  040D                     	;# 
  1777  0415                     	;# 
  1778  0416                     	;# 
  1779  0417                     	;# 
  1780  041C                     	;# 
  1781  041D                     	;# 
  1782  041E                     	;# 
  1783  048D                     	;# 
  1784  0491                     	;# 
  1785  0492                     	;# 
  1786  0493                     	;# 
  1787  0493                     	;# 
  1788  0494                     	;# 
  1789  0495                     	;# 
  1790  0496                     	;# 
  1791  0497                     	;# 
  1792  0791                     	;# 
  1793  0792                     	;# 
  1794  0793                     	;# 
  1795  0794                     	;# 
  1796  0795                     	;# 
  1797  0798                     	;# 
  1798  0799                     	;# 
  1799  079A                     	;# 
  1800  079B                     	;# 
  1801  079C                     	;# 
  1802  079D                     	;# 
  1803  07A0                     	;# 
  1804  07A1                     	;# 
  1805  07A2                     	;# 
  1806  07A3                     	;# 
  1807  07A4                     	;# 
  1808  07A5                     	;# 
  1809  07A6                     	;# 
  1810  07A7                     	;# 
  1811  07A8                     	;# 
  1812  07A9                     	;# 
  1813  07AA                     	;# 
  1814  07AB                     	;# 
  1815  07AC                     	;# 
  1816  07AD                     	;# 
  1817  07AE                     	;# 
  1818  07AF                     	;# 
  1819  07B0                     	;# 
  1820  07B1                     	;# 
  1821  07B2                     	;# 
  1822  07B3                     	;# 
  1823  07B4                     	;# 
  1824  07B5                     	;# 
  1825  07B6                     	;# 
  1826  07B7                     	;# 
  1827  0FE4                     	;# 
  1828  0FE5                     	;# 
  1829  0FE6                     	;# 
  1830  0FE7                     	;# 
  1831  0FE8                     	;# 
  1832  0FE9                     	;# 
  1833  0FEA                     	;# 
  1834  0FEB                     	;# 
  1835  0FED                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;# 
  1838                           
  1839                           	psect	eeprom_data
  1840  0000  0000 0003 0001     	db	0,3,1,255,255,255,255,255	;# 
      +       00FF 00FF 00FF     
      +       00FF 00FF          
  1841  0000                     	;# 
  1842  0001                     	;# 
  1843  0002                     	;# 
  1844  0003                     	;# 
  1845  0004                     	;# 
  1846  0005                     	;# 
  1847  0006                     	;# 
  1848  0007                     	;# 
  1849  0008                     	;# 
  1850  0009                     	;# 
  1851  000A                     	;# 
  1852  000B                     	;# 
  1853  000C                     	;# 
  1854  000D                     	;# 
  1855  000E                     	;# 
  1856  000F                     	;# 
  1857  0010                     	;# 
  1858  0011                     	;# 
  1859  0012                     	;# 
  1860  0013                     	;# 
  1861  0014                     	;# 
  1862  0015                     	;# 
  1863  0016                     	;# 
  1864  0016                     	;# 
  1865  0017                     	;# 
  1866  0018                     	;# 
  1867  0019                     	;# 
  1868  001A                     	;# 
  1869  001B                     	;# 
  1870  001C                     	;# 
  1871  001E                     	;# 
  1872  001F                     	;# 
  1873  008C                     	;# 
  1874  008D                     	;# 
  1875  008E                     	;# 
  1876  008F                     	;# 
  1877  0090                     	;# 
  1878  0091                     	;# 
  1879  0092                     	;# 
  1880  0093                     	;# 
  1881  0094                     	;# 
  1882  0095                     	;# 
  1883  0096                     	;# 
  1884  0097                     	;# 
  1885  0098                     	;# 
  1886  0099                     	;# 
  1887  009A                     	;# 
  1888  009B                     	;# 
  1889  009B                     	;# 
  1890  009C                     	;# 
  1891  009D                     	;# 
  1892  009E                     	;# 
  1893  010C                     	;# 
  1894  010D                     	;# 
  1895  010E                     	;# 
  1896  010F                     	;# 
  1897  0110                     	;# 
  1898  0111                     	;# 
  1899  0112                     	;# 
  1900  0113                     	;# 
  1901  0114                     	;# 
  1902  0115                     	;# 
  1903  0116                     	;# 
  1904  0117                     	;# 
  1905  0118                     	;# 
  1906  0119                     	;# 
  1907  011A                     	;# 
  1908  011B                     	;# 
  1909  011D                     	;# 
  1910  011E                     	;# 
  1911  011F                     	;# 
  1912  018C                     	;# 
  1913  0190                     	;# 
  1914  0191                     	;# 
  1915  0191                     	;# 
  1916  0192                     	;# 
  1917  0193                     	;# 
  1918  0193                     	;# 
  1919  0193                     	;# 
  1920  0194                     	;# 
  1921  0195                     	;# 
  1922  0196                     	;# 
  1923  0199                     	;# 
  1924  0199                     	;# 
  1925  019A                     	;# 
  1926  019A                     	;# 
  1927  019B                     	;# 
  1928  019B                     	;# 
  1929  019B                     	;# 
  1930  019B                     	;# 
  1931  019C                     	;# 
  1932  019C                     	;# 
  1933  019D                     	;# 
  1934  019D                     	;# 
  1935  019E                     	;# 
  1936  019E                     	;# 
  1937  019F                     	;# 
  1938  020D                     	;# 
  1939  0211                     	;# 
  1940  0211                     	;# 
  1941  0212                     	;# 
  1942  0212                     	;# 
  1943  0213                     	;# 
  1944  0213                     	;# 
  1945  0214                     	;# 
  1946  0214                     	;# 
  1947  0215                     	;# 
  1948  0215                     	;# 
  1949  0215                     	;# 
  1950  0216                     	;# 
  1951  0216                     	;# 
  1952  0217                     	;# 
  1953  0217                     	;# 
  1954  0219                     	;# 
  1955  021A                     	;# 
  1956  021B                     	;# 
  1957  021C                     	;# 
  1958  021D                     	;# 
  1959  021E                     	;# 
  1960  021F                     	;# 
  1961  028C                     	;# 
  1962  028D                     	;# 
  1963  0291                     	;# 
  1964  0291                     	;# 
  1965  0292                     	;# 
  1966  0293                     	;# 
  1967  0294                     	;# 
  1968  0295                     	;# 
  1969  0295                     	;# 
  1970  0296                     	;# 
  1971  0298                     	;# 
  1972  0298                     	;# 
  1973  0299                     	;# 
  1974  029A                     	;# 
  1975  029B                     	;# 
  1976  029C                     	;# 
  1977  029C                     	;# 
  1978  029D                     	;# 
  1979  029E                     	;# 
  1980  029F                     	;# 
  1981  030C                     	;# 
  1982  030D                     	;# 
  1983  0311                     	;# 
  1984  0311                     	;# 
  1985  0312                     	;# 
  1986  0313                     	;# 
  1987  0314                     	;# 
  1988  0315                     	;# 
  1989  0315                     	;# 
  1990  0316                     	;# 
  1991  0318                     	;# 
  1992  0318                     	;# 
  1993  0319                     	;# 
  1994  031A                     	;# 
  1995  031C                     	;# 
  1996  031C                     	;# 
  1997  031D                     	;# 
  1998  031E                     	;# 
  1999  038C                     	;# 
  2000  038D                     	;# 
  2001  0394                     	;# 
  2002  0395                     	;# 
  2003  0396                     	;# 
  2004  040C                     	;# 
  2005  040D                     	;# 
  2006  0415                     	;# 
  2007  0416                     	;# 
  2008  0417                     	;# 
  2009  041C                     	;# 
  2010  041D                     	;# 
  2011  041E                     	;# 
  2012  048D                     	;# 
  2013  0491                     	;# 
  2014  0492                     	;# 
  2015  0493                     	;# 
  2016  0493                     	;# 
  2017  0494                     	;# 
  2018  0495                     	;# 
  2019  0496                     	;# 
  2020  0497                     	;# 
  2021  0791                     	;# 
  2022  0792                     	;# 
  2023  0793                     	;# 
  2024  0794                     	;# 
  2025  0795                     	;# 
  2026  0798                     	;# 
  2027  0799                     	;# 
  2028  079A                     	;# 
  2029  079B                     	;# 
  2030  079C                     	;# 
  2031  079D                     	;# 
  2032  07A0                     	;# 
  2033  07A1                     	;# 
  2034  07A2                     	;# 
  2035  07A3                     	;# 
  2036  07A4                     	;# 
  2037  07A5                     	;# 
  2038  07A6                     	;# 
  2039  07A7                     	;# 
  2040  07A8                     	;# 
  2041  07A9                     	;# 
  2042  07AA                     	;# 
  2043  07AB                     	;# 
  2044  07AC                     	;# 
  2045  07AD                     	;# 
  2046  07AE                     	;# 
  2047  07AF                     	;# 
  2048  07B0                     	;# 
  2049  07B1                     	;# 
  2050  07B2                     	;# 
  2051  07B3                     	;# 
  2052  07B4                     	;# 
  2053  07B5                     	;# 
  2054  07B6                     	;# 
  2055  07B7                     	;# 
  2056  0FE4                     	;# 
  2057  0FE5                     	;# 
  2058  0FE6                     	;# 
  2059  0FE7                     	;# 
  2060  0FE8                     	;# 
  2061  0FE9                     	;# 
  2062  0FEA                     	;# 
  2063  0FEB                     	;# 
  2064  0FED                     	;# 
  2065  0FEE                     	;# 
  2066  0FEF                     	;# 
  2067  0000                     	;# 
  2068  0001                     	;# 
  2069  0002                     	;# 
  2070  0003                     	;# 
  2071  0004                     	;# 
  2072  0005                     	;# 
  2073  0006                     	;# 
  2074  0007                     	;# 
  2075  0008                     	;# 
  2076  0009                     	;# 
  2077  000A                     	;# 
  2078  000B                     	;# 
  2079  000C                     	;# 
  2080  000D                     	;# 
  2081  000E                     	;# 
  2082  000F                     	;# 
  2083  0010                     	;# 
  2084  0011                     	;# 
  2085  0012                     	;# 
  2086  0013                     	;# 
  2087  0014                     	;# 
  2088  0015                     	;# 
  2089  0016                     	;# 
  2090  0016                     	;# 
  2091  0017                     	;# 
  2092  0018                     	;# 
  2093  0019                     	;# 
  2094  001A                     	;# 
  2095  001B                     	;# 
  2096  001C                     	;# 
  2097  001E                     	;# 
  2098  001F                     	;# 
  2099  008C                     	;# 
  2100  008D                     	;# 
  2101  008E                     	;# 
  2102  008F                     	;# 
  2103  0090                     	;# 
  2104  0091                     	;# 
  2105  0092                     	;# 
  2106  0093                     	;# 
  2107  0094                     	;# 
  2108  0095                     	;# 
  2109  0096                     	;# 
  2110  0097                     	;# 
  2111  0098                     	;# 
  2112  0099                     	;# 
  2113  009A                     	;# 
  2114  009B                     	;# 
  2115  009B                     	;# 
  2116  009C                     	;# 
  2117  009D                     	;# 
  2118  009E                     	;# 
  2119  010C                     	;# 
  2120  010D                     	;# 
  2121  010E                     	;# 
  2122  010F                     	;# 
  2123  0110                     	;# 
  2124  0111                     	;# 
  2125  0112                     	;# 
  2126  0113                     	;# 
  2127  0114                     	;# 
  2128  0115                     	;# 
  2129  0116                     	;# 
  2130  0117                     	;# 
  2131  0118                     	;# 
  2132  0119                     	;# 
  2133  011A                     	;# 
  2134  011B                     	;# 
  2135  011D                     	;# 
  2136  011E                     	;# 
  2137  011F                     	;# 
  2138  018C                     	;# 
  2139  0190                     	;# 
  2140  0191                     	;# 
  2141  0191                     	;# 
  2142  0192                     	;# 
  2143  0193                     	;# 
  2144  0193                     	;# 
  2145  0193                     	;# 
  2146  0194                     	;# 
  2147  0195                     	;# 
  2148  0196                     	;# 
  2149  0199                     	;# 
  2150  0199                     	;# 
  2151  019A                     	;# 
  2152  019A                     	;# 
  2153  019B                     	;# 
  2154  019B                     	;# 
  2155  019B                     	;# 
  2156  019B                     	;# 
  2157  019C                     	;# 
  2158  019C                     	;# 
  2159  019D                     	;# 
  2160  019D                     	;# 
  2161  019E                     	;# 
  2162  019E                     	;# 
  2163  019F                     	;# 
  2164  020D                     	;# 
  2165  0211                     	;# 
  2166  0211                     	;# 
  2167  0212                     	;# 
  2168  0212                     	;# 
  2169  0213                     	;# 
  2170  0213                     	;# 
  2171  0214                     	;# 
  2172  0214                     	;# 
  2173  0215                     	;# 
  2174  0215                     	;# 
  2175  0215                     	;# 
  2176  0216                     	;# 
  2177  0216                     	;# 
  2178  0217                     	;# 
  2179  0217                     	;# 
  2180  0219                     	;# 
  2181  021A                     	;# 
  2182  021B                     	;# 
  2183  021C                     	;# 
  2184  021D                     	;# 
  2185  021E                     	;# 
  2186  021F                     	;# 
  2187  028C                     	;# 
  2188  028D                     	;# 
  2189  0291                     	;# 
  2190  0291                     	;# 
  2191  0292                     	;# 
  2192  0293                     	;# 
  2193  0294                     	;# 
  2194  0295                     	;# 
  2195  0295                     	;# 
  2196  0296                     	;# 
  2197  0298                     	;# 
  2198  0298                     	;# 
  2199  0299                     	;# 
  2200  029A                     	;# 
  2201  029B                     	;# 
  2202  029C                     	;# 
  2203  029C                     	;# 
  2204  029D                     	;# 
  2205  029E                     	;# 
  2206  029F                     	;# 
  2207  030C                     	;# 
  2208  030D                     	;# 
  2209  0311                     	;# 
  2210  0311                     	;# 
  2211  0312                     	;# 
  2212  0313                     	;# 
  2213  0314                     	;# 
  2214  0315                     	;# 
  2215  0315                     	;# 
  2216  0316                     	;# 
  2217  0318                     	;# 
  2218  0318                     	;# 
  2219  0319                     	;# 
  2220  031A                     	;# 
  2221  031C                     	;# 
  2222  031C                     	;# 
  2223  031D                     	;# 
  2224  031E                     	;# 
  2225  038C                     	;# 
  2226  038D                     	;# 
  2227  0394                     	;# 
  2228  0395                     	;# 
  2229  0396                     	;# 
  2230  040C                     	;# 
  2231  040D                     	;# 
  2232  0415                     	;# 
  2233  0416                     	;# 
  2234  0417                     	;# 
  2235  041C                     	;# 
  2236  041D                     	;# 
  2237  041E                     	;# 
  2238  048D                     	;# 
  2239  0491                     	;# 
  2240  0492                     	;# 
  2241  0493                     	;# 
  2242  0493                     	;# 
  2243  0494                     	;# 
  2244  0495                     	;# 
  2245  0496                     	;# 
  2246  0497                     	;# 
  2247  0791                     	;# 
  2248  0792                     	;# 
  2249  0793                     	;# 
  2250  0794                     	;# 
  2251  0795                     	;# 
  2252  0798                     	;# 
  2253  0799                     	;# 
  2254  079A                     	;# 
  2255  079B                     	;# 
  2256  079C                     	;# 
  2257  079D                     	;# 
  2258  07A0                     	;# 
  2259  07A1                     	;# 
  2260  07A2                     	;# 
  2261  07A3                     	;# 
  2262  07A4                     	;# 
  2263  07A5                     	;# 
  2264  07A6                     	;# 
  2265  07A7                     	;# 
  2266  07A8                     	;# 
  2267  07A9                     	;# 
  2268  07AA                     	;# 
  2269  07AB                     	;# 
  2270  07AC                     	;# 
  2271  07AD                     	;# 
  2272  07AE                     	;# 
  2273  07AF                     	;# 
  2274  07B0                     	;# 
  2275  07B1                     	;# 
  2276  07B2                     	;# 
  2277  07B3                     	;# 
  2278  07B4                     	;# 
  2279  07B5                     	;# 
  2280  07B6                     	;# 
  2281  07B7                     	;# 
  2282  0FE4                     	;# 
  2283  0FE5                     	;# 
  2284  0FE6                     	;# 
  2285  0FE7                     	;# 
  2286  0FE8                     	;# 
  2287  0FE9                     	;# 
  2288  0FEA                     	;# 
  2289  0FEB                     	;# 
  2290  0FED                     	;# 
  2291  0FEE                     	;# 
  2292  0FEF                     	;# 
  2293  0000                     	;# 
  2294  0001                     	;# 
  2295  0002                     	;# 
  2296  0003                     	;# 
  2297  0004                     	;# 
  2298  0005                     	;# 
  2299  0006                     	;# 
  2300  0007                     	;# 
  2301  0008                     	;# 
  2302  0009                     	;# 
  2303  000A                     	;# 
  2304  000B                     	;# 
  2305  000C                     	;# 
  2306  000D                     	;# 
  2307  000E                     	;# 
  2308  000F                     	;# 
  2309  0010                     	;# 
  2310  0011                     	;# 
  2311  0012                     	;# 
  2312  0013                     	;# 
  2313  0014                     	;# 
  2314  0015                     	;# 
  2315  0016                     	;# 
  2316  0016                     	;# 
  2317  0017                     	;# 
  2318  0018                     	;# 
  2319  0019                     	;# 
  2320  001A                     	;# 
  2321  001B                     	;# 
  2322  001C                     	;# 
  2323  001E                     	;# 
  2324  001F                     	;# 
  2325  008C                     	;# 
  2326  008D                     	;# 
  2327  008E                     	;# 
  2328  008F                     	;# 
  2329  0090                     	;# 
  2330  0091                     	;# 
  2331  0092                     	;# 
  2332  0093                     	;# 
  2333  0094                     	;# 
  2334  0095                     	;# 
  2335  0096                     	;# 
  2336  0097                     	;# 
  2337  0098                     	;# 
  2338  0099                     	;# 
  2339  009A                     	;# 
  2340  009B                     	;# 
  2341  009B                     	;# 
  2342  009C                     	;# 
  2343  009D                     	;# 
  2344  009E                     	;# 
  2345  010C                     	;# 
  2346  010D                     	;# 
  2347  010E                     	;# 
  2348  010F                     	;# 
  2349  0110                     	;# 
  2350  0111                     	;# 
  2351  0112                     	;# 
  2352  0113                     	;# 
  2353  0114                     	;# 
  2354  0115                     	;# 
  2355  0116                     	;# 
  2356  0117                     	;# 
  2357  0118                     	;# 
  2358  0119                     	;# 
  2359  011A                     	;# 
  2360  011B                     	;# 
  2361  011D                     	;# 
  2362  011E                     	;# 
  2363  011F                     	;# 
  2364  018C                     	;# 
  2365  0190                     	;# 
  2366  0191                     	;# 
  2367  0191                     	;# 
  2368  0192                     	;# 
  2369  0193                     	;# 
  2370  0193                     	;# 
  2371  0193                     	;# 
  2372  0194                     	;# 
  2373  0195                     	;# 
  2374  0196                     	;# 
  2375  0199                     	;# 
  2376  0199                     	;# 
  2377  019A                     	;# 
  2378  019A                     	;# 
  2379  019B                     	;# 
  2380  019B                     	;# 
  2381  019B                     	;# 
  2382  019B                     	;# 
  2383  019C                     	;# 
  2384  019C                     	;# 
  2385  019D                     	;# 
  2386  019D                     	;# 
  2387  019E                     	;# 
  2388  019E                     	;# 
  2389  019F                     	;# 
  2390  020D                     	;# 
  2391  0211                     	;# 
  2392  0211                     	;# 
  2393  0212                     	;# 
  2394  0212                     	;# 
  2395  0213                     	;# 
  2396  0213                     	;# 
  2397  0214                     	;# 
  2398  0214                     	;# 
  2399  0215                     	;# 
  2400  0215                     	;# 
  2401  0215                     	;# 
  2402  0216                     	;# 
  2403  0216                     	;# 
  2404  0217                     	;# 
  2405  0217                     	;# 
  2406  0219                     	;# 
  2407  021A                     	;# 
  2408  021B                     	;# 
  2409  021C                     	;# 
  2410  021D                     	;# 
  2411  021E                     	;# 
  2412  021F                     	;# 
  2413  028C                     	;# 
  2414  028D                     	;# 
  2415  0291                     	;# 
  2416  0291                     	;# 
  2417  0292                     	;# 
  2418  0293                     	;# 
  2419  0294                     	;# 
  2420  0295                     	;# 
  2421  0295                     	;# 
  2422  0296                     	;# 
  2423  0298                     	;# 
  2424  0298                     	;# 
  2425  0299                     	;# 
  2426  029A                     	;# 
  2427  029B                     	;# 
  2428  029C                     	;# 
  2429  029C                     	;# 
  2430  029D                     	;# 
  2431  029E                     	;# 
  2432  029F                     	;# 
  2433  030C                     	;# 
  2434  030D                     	;# 
  2435  0311                     	;# 
  2436  0311                     	;# 
  2437  0312                     	;# 
  2438  0313                     	;# 
  2439  0314                     	;# 
  2440  0315                     	;# 
  2441  0315                     	;# 
  2442  0316                     	;# 
  2443  0318                     	;# 
  2444  0318                     	;# 
  2445  0319                     	;# 
  2446  031A                     	;# 
  2447  031C                     	;# 
  2448  031C                     	;# 
  2449  031D                     	;# 
  2450  031E                     	;# 
  2451  038C                     	;# 
  2452  038D                     	;# 
  2453  0394                     	;# 
  2454  0395                     	;# 
  2455  0396                     	;# 
  2456  040C                     	;# 
  2457  040D                     	;# 
  2458  0415                     	;# 
  2459  0416                     	;# 
  2460  0417                     	;# 
  2461  041C                     	;# 
  2462  041D                     	;# 
  2463  041E                     	;# 
  2464  048D                     	;# 
  2465  0491                     	;# 
  2466  0492                     	;# 
  2467  0493                     	;# 
  2468  0493                     	;# 
  2469  0494                     	;# 
  2470  0495                     	;# 
  2471  0496                     	;# 
  2472  0497                     	;# 
  2473  0791                     	;# 
  2474  0792                     	;# 
  2475  0793                     	;# 
  2476  0794                     	;# 
  2477  0795                     	;# 
  2478  0798                     	;# 
  2479  0799                     	;# 
  2480  079A                     	;# 
  2481  079B                     	;# 
  2482  079C                     	;# 
  2483  079D                     	;# 
  2484  07A0                     	;# 
  2485  07A1                     	;# 
  2486  07A2                     	;# 
  2487  07A3                     	;# 
  2488  07A4                     	;# 
  2489  07A5                     	;# 
  2490  07A6                     	;# 
  2491  07A7                     	;# 
  2492  07A8                     	;# 
  2493  07A9                     	;# 
  2494  07AA                     	;# 
  2495  07AB                     	;# 
  2496  07AC                     	;# 
  2497  07AD                     	;# 
  2498  07AE                     	;# 
  2499  07AF                     	;# 
  2500  07B0                     	;# 
  2501  07B1                     	;# 
  2502  07B2                     	;# 
  2503  07B3                     	;# 
  2504  07B4                     	;# 
  2505  07B5                     	;# 
  2506  07B6                     	;# 
  2507  07B7                     	;# 
  2508  0FE4                     	;# 
  2509  0FE5                     	;# 
  2510  0FE6                     	;# 
  2511  0FE7                     	;# 
  2512  0FE8                     	;# 
  2513  0FE9                     	;# 
  2514  0FEA                     	;# 
  2515  0FEB                     	;# 
  2516  0FED                     	;# 
  2517  0FEE                     	;# 
  2518  0FEF                     	;# 
  2519  0000                     	;# 
  2520  0001                     	;# 
  2521  0002                     	;# 
  2522  0003                     	;# 
  2523  0004                     	;# 
  2524  0005                     	;# 
  2525  0006                     	;# 
  2526  0007                     	;# 
  2527  0008                     	;# 
  2528  0009                     	;# 
  2529  000A                     	;# 
  2530  000B                     	;# 
  2531  000C                     	;# 
  2532  000D                     	;# 
  2533  000E                     	;# 
  2534  000F                     	;# 
  2535  0010                     	;# 
  2536  0011                     	;# 
  2537  0012                     	;# 
  2538  0013                     	;# 
  2539  0014                     	;# 
  2540  0015                     	;# 
  2541  0016                     	;# 
  2542  0016                     	;# 
  2543  0017                     	;# 
  2544  0018                     	;# 
  2545  0019                     	;# 
  2546  001A                     	;# 
  2547  001B                     	;# 
  2548  001C                     	;# 
  2549  001E                     	;# 
  2550  001F                     	;# 
  2551  008C                     	;# 
  2552  008D                     	;# 
  2553  008E                     	;# 
  2554  008F                     	;# 
  2555  0090                     	;# 
  2556  0091                     	;# 
  2557  0092                     	;# 
  2558  0093                     	;# 
  2559  0094                     	;# 
  2560  0095                     	;# 
  2561  0096                     	;# 
  2562  0097                     	;# 
  2563  0098                     	;# 
  2564  0099                     	;# 
  2565  009A                     	;# 
  2566  009B                     	;# 
  2567  009B                     	;# 
  2568  009C                     	;# 
  2569  009D                     	;# 
  2570  009E                     	;# 
  2571  010C                     	;# 
  2572  010D                     	;# 
  2573  010E                     	;# 
  2574  010F                     	;# 
  2575  0110                     	;# 
  2576  0111                     	;# 
  2577  0112                     	;# 
  2578  0113                     	;# 
  2579  0114                     	;# 
  2580  0115                     	;# 
  2581  0116                     	;# 
  2582  0117                     	;# 
  2583  0118                     	;# 
  2584  0119                     	;# 
  2585  011A                     	;# 
  2586  011B                     	;# 
  2587  011D                     	;# 
  2588  011E                     	;# 
  2589  011F                     	;# 
  2590  018C                     	;# 
  2591  0190                     	;# 
  2592  0191                     	;# 
  2593  0191                     	;# 
  2594  0192                     	;# 
  2595  0193                     	;# 
  2596  0193                     	;# 
  2597  0193                     	;# 
  2598  0194                     	;# 
  2599  0195                     	;# 
  2600  0196                     	;# 
  2601  0199                     	;# 
  2602  0199                     	;# 
  2603  019A                     	;# 
  2604  019A                     	;# 
  2605  019B                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019C                     	;# 
  2610  019C                     	;# 
  2611  019D                     	;# 
  2612  019D                     	;# 
  2613  019E                     	;# 
  2614  019E                     	;# 
  2615  019F                     	;# 
  2616  020D                     	;# 
  2617  0211                     	;# 
  2618  0211                     	;# 
  2619  0212                     	;# 
  2620  0212                     	;# 
  2621  0213                     	;# 
  2622  0213                     	;# 
  2623  0214                     	;# 
  2624  0214                     	;# 
  2625  0215                     	;# 
  2626  0215                     	;# 
  2627  0215                     	;# 
  2628  0216                     	;# 
  2629  0216                     	;# 
  2630  0217                     	;# 
  2631  0217                     	;# 
  2632  0219                     	;# 
  2633  021A                     	;# 
  2634  021B                     	;# 
  2635  021C                     	;# 
  2636  021D                     	;# 
  2637  021E                     	;# 
  2638  021F                     	;# 
  2639  028C                     	;# 
  2640  028D                     	;# 
  2641  0291                     	;# 
  2642  0291                     	;# 
  2643  0292                     	;# 
  2644  0293                     	;# 
  2645  0294                     	;# 
  2646  0295                     	;# 
  2647  0295                     	;# 
  2648  0296                     	;# 
  2649  0298                     	;# 
  2650  0298                     	;# 
  2651  0299                     	;# 
  2652  029A                     	;# 
  2653  029B                     	;# 
  2654  029C                     	;# 
  2655  029C                     	;# 
  2656  029D                     	;# 
  2657  029E                     	;# 
  2658  029F                     	;# 
  2659  030C                     	;# 
  2660  030D                     	;# 
  2661  0311                     	;# 
  2662  0311                     	;# 
  2663  0312                     	;# 
  2664  0313                     	;# 
  2665  0314                     	;# 
  2666  0315                     	;# 
  2667  0315                     	;# 
  2668  0316                     	;# 
  2669  0318                     	;# 
  2670  0318                     	;# 
  2671  0319                     	;# 
  2672  031A                     	;# 
  2673  031C                     	;# 
  2674  031C                     	;# 
  2675  031D                     	;# 
  2676  031E                     	;# 
  2677  038C                     	;# 
  2678  038D                     	;# 
  2679  0394                     	;# 
  2680  0395                     	;# 
  2681  0396                     	;# 
  2682  040C                     	;# 
  2683  040D                     	;# 
  2684  0415                     	;# 
  2685  0416                     	;# 
  2686  0417                     	;# 
  2687  041C                     	;# 
  2688  041D                     	;# 
  2689  041E                     	;# 
  2690  048D                     	;# 
  2691  0491                     	;# 
  2692  0492                     	;# 
  2693  0493                     	;# 
  2694  0493                     	;# 
  2695  0494                     	;# 
  2696  0495                     	;# 
  2697  0496                     	;# 
  2698  0497                     	;# 
  2699  0791                     	;# 
  2700  0792                     	;# 
  2701  0793                     	;# 
  2702  0794                     	;# 
  2703  0795                     	;# 
  2704  0798                     	;# 
  2705  0799                     	;# 
  2706  079A                     	;# 
  2707  079B                     	;# 
  2708  079C                     	;# 
  2709  079D                     	;# 
  2710  07A0                     	;# 
  2711  07A1                     	;# 
  2712  07A2                     	;# 
  2713  07A3                     	;# 
  2714  07A4                     	;# 
  2715  07A5                     	;# 
  2716  07A6                     	;# 
  2717  07A7                     	;# 
  2718  07A8                     	;# 
  2719  07A9                     	;# 
  2720  07AA                     	;# 
  2721  07AB                     	;# 
  2722  07AC                     	;# 
  2723  07AD                     	;# 
  2724  07AE                     	;# 
  2725  07AF                     	;# 
  2726  07B0                     	;# 
  2727  07B1                     	;# 
  2728  07B2                     	;# 
  2729  07B3                     	;# 
  2730  07B4                     	;# 
  2731  07B5                     	;# 
  2732  07B6                     	;# 
  2733  07B7                     	;# 
  2734  0FE4                     	;# 
  2735  0FE5                     	;# 
  2736  0FE6                     	;# 
  2737  0FE7                     	;# 
  2738  0FE8                     	;# 
  2739  0FE9                     	;# 
  2740  0FEA                     	;# 
  2741  0FEB                     	;# 
  2742  0FED                     	;# 
  2743  0FEE                     	;# 
  2744  0FEF                     	;# 
  2745  0000                     	;# 
  2746  0001                     	;# 
  2747  0002                     	;# 
  2748  0003                     	;# 
  2749  0004                     	;# 
  2750  0005                     	;# 
  2751  0006                     	;# 
  2752  0007                     	;# 
  2753  0008                     	;# 
  2754  0009                     	;# 
  2755  000A                     	;# 
  2756  000B                     	;# 
  2757  000C                     	;# 
  2758  000D                     	;# 
  2759  000E                     	;# 
  2760  000F                     	;# 
  2761  0010                     	;# 
  2762  0011                     	;# 
  2763  0012                     	;# 
  2764  0013                     	;# 
  2765  0014                     	;# 
  2766  0015                     	;# 
  2767  0016                     	;# 
  2768  0016                     	;# 
  2769  0017                     	;# 
  2770  0018                     	;# 
  2771  0019                     	;# 
  2772  001A                     	;# 
  2773  001B                     	;# 
  2774  001C                     	;# 
  2775  001E                     	;# 
  2776  001F                     	;# 
  2777  008C                     	;# 
  2778  008D                     	;# 
  2779  008E                     	;# 
  2780  008F                     	;# 
  2781  0090                     	;# 
  2782  0091                     	;# 
  2783  0092                     	;# 
  2784  0093                     	;# 
  2785  0094                     	;# 
  2786  0095                     	;# 
  2787  0096                     	;# 
  2788  0097                     	;# 
  2789  0098                     	;# 
  2790  0099                     	;# 
  2791  009A                     	;# 
  2792  009B                     	;# 
  2793  009B                     	;# 
  2794  009C                     	;# 
  2795  009D                     	;# 
  2796  009E                     	;# 
  2797  010C                     	;# 
  2798  010D                     	;# 
  2799  010E                     	;# 
  2800  010F                     	;# 
  2801  0110                     	;# 
  2802  0111                     	;# 
  2803  0112                     	;# 
  2804  0113                     	;# 
  2805  0114                     	;# 
  2806  0115                     	;# 
  2807  0116                     	;# 
  2808  0117                     	;# 
  2809  0118                     	;# 
  2810  0119                     	;# 
  2811  011A                     	;# 
  2812  011B                     	;# 
  2813  011D                     	;# 
  2814  011E                     	;# 
  2815  011F                     	;# 
  2816  018C                     	;# 
  2817  0190                     	;# 
  2818  0191                     	;# 
  2819  0191                     	;# 
  2820  0192                     	;# 
  2821  0193                     	;# 
  2822  0193                     	;# 
  2823  0193                     	;# 
  2824  0194                     	;# 
  2825  0195                     	;# 
  2826  0196                     	;# 
  2827  0199                     	;# 
  2828  0199                     	;# 
  2829  019A                     	;# 
  2830  019A                     	;# 
  2831  019B                     	;# 
  2832  019B                     	;# 
  2833  019B                     	;# 
  2834  019B                     	;# 
  2835  019C                     	;# 
  2836  019C                     	;# 
  2837  019D                     	;# 
  2838  019D                     	;# 
  2839  019E                     	;# 
  2840  019E                     	;# 
  2841  019F                     	;# 
  2842  020D                     	;# 
  2843  0211                     	;# 
  2844  0211                     	;# 
  2845  0212                     	;# 
  2846  0212                     	;# 
  2847  0213                     	;# 
  2848  0213                     	;# 
  2849  0214                     	;# 
  2850  0214                     	;# 
  2851  0215                     	;# 
  2852  0215                     	;# 
  2853  0215                     	;# 
  2854  0216                     	;# 
  2855  0216                     	;# 
  2856  0217                     	;# 
  2857  0217                     	;# 
  2858  0219                     	;# 
  2859  021A                     	;# 
  2860  021B                     	;# 
  2861  021C                     	;# 
  2862  021D                     	;# 
  2863  021E                     	;# 
  2864  021F                     	;# 
  2865  028C                     	;# 
  2866  028D                     	;# 
  2867  0291                     	;# 
  2868  0291                     	;# 
  2869  0292                     	;# 
  2870  0293                     	;# 
  2871  0294                     	;# 
  2872  0295                     	;# 
  2873  0295                     	;# 
  2874  0296                     	;# 
  2875  0298                     	;# 
  2876  0298                     	;# 
  2877  0299                     	;# 
  2878  029A                     	;# 
  2879  029B                     	;# 
  2880  029C                     	;# 
  2881  029C                     	;# 
  2882  029D                     	;# 
  2883  029E                     	;# 
  2884  029F                     	;# 
  2885  030C                     	;# 
  2886  030D                     	;# 
  2887  0311                     	;# 
  2888  0311                     	;# 
  2889  0312                     	;# 
  2890  0313                     	;# 
  2891  0314                     	;# 
  2892  0315                     	;# 
  2893  0315                     	;# 
  2894  0316                     	;# 
  2895  0318                     	;# 
  2896  0318                     	;# 
  2897  0319                     	;# 
  2898  031A                     	;# 
  2899  031C                     	;# 
  2900  031C                     	;# 
  2901  031D                     	;# 
  2902  031E                     	;# 
  2903  038C                     	;# 
  2904  038D                     	;# 
  2905  0394                     	;# 
  2906  0395                     	;# 
  2907  0396                     	;# 
  2908  040C                     	;# 
  2909  040D                     	;# 
  2910  0415                     	;# 
  2911  0416                     	;# 
  2912  0417                     	;# 
  2913  041C                     	;# 
  2914  041D                     	;# 
  2915  041E                     	;# 
  2916  048D                     	;# 
  2917  0491                     	;# 
  2918  0492                     	;# 
  2919  0493                     	;# 
  2920  0493                     	;# 
  2921  0494                     	;# 
  2922  0495                     	;# 
  2923  0496                     	;# 
  2924  0497                     	;# 
  2925  0791                     	;# 
  2926  0792                     	;# 
  2927  0793                     	;# 
  2928  0794                     	;# 
  2929  0795                     	;# 
  2930  0798                     	;# 
  2931  0799                     	;# 
  2932  079A                     	;# 
  2933  079B                     	;# 
  2934  079C                     	;# 
  2935  079D                     	;# 
  2936  07A0                     	;# 
  2937  07A1                     	;# 
  2938  07A2                     	;# 
  2939  07A3                     	;# 
  2940  07A4                     	;# 
  2941  07A5                     	;# 
  2942  07A6                     	;# 
  2943  07A7                     	;# 
  2944  07A8                     	;# 
  2945  07A9                     	;# 
  2946  07AA                     	;# 
  2947  07AB                     	;# 
  2948  07AC                     	;# 
  2949  07AD                     	;# 
  2950  07AE                     	;# 
  2951  07AF                     	;# 
  2952  07B0                     	;# 
  2953  07B1                     	;# 
  2954  07B2                     	;# 
  2955  07B3                     	;# 
  2956  07B4                     	;# 
  2957  07B5                     	;# 
  2958  07B6                     	;# 
  2959  07B7                     	;# 
  2960  0FE4                     	;# 
  2961  0FE5                     	;# 
  2962  0FE6                     	;# 
  2963  0FE7                     	;# 
  2964  0FE8                     	;# 
  2965  0FE9                     	;# 
  2966  0FEA                     	;# 
  2967  0FEB                     	;# 
  2968  0FED                     	;# 
  2969  0FEE                     	;# 
  2970  0FEF                     	;# 
  2971  0000                     	;# 
  2972  0001                     	;# 
  2973  0002                     	;# 
  2974  0003                     	;# 
  2975  0004                     	;# 
  2976  0005                     	;# 
  2977  0006                     	;# 
  2978  0007                     	;# 
  2979  0008                     	;# 
  2980  0009                     	;# 
  2981  000A                     	;# 
  2982  000B                     	;# 
  2983  000C                     	;# 
  2984  000D                     	;# 
  2985  000E                     	;# 
  2986  000F                     	;# 
  2987  0010                     	;# 
  2988  0011                     	;# 
  2989  0012                     	;# 
  2990  0013                     	;# 
  2991  0014                     	;# 
  2992  0015                     	;# 
  2993  0016                     	;# 
  2994  0016                     	;# 
  2995  0017                     	;# 
  2996  0018                     	;# 
  2997  0019                     	;# 
  2998  001A                     	;# 
  2999  001B                     	;# 
  3000  001C                     	;# 
  3001  001E                     	;# 
  3002  001F                     	;# 
  3003  008C                     	;# 
  3004  008D                     	;# 
  3005  008E                     	;# 
  3006  008F                     	;# 
  3007  0090                     	;# 
  3008  0091                     	;# 
  3009  0092                     	;# 
  3010  0093                     	;# 
  3011  0094                     	;# 
  3012  0095                     	;# 
  3013  0096                     	;# 
  3014  0097                     	;# 
  3015  0098                     	;# 
  3016  0099                     	;# 
  3017  009A                     	;# 
  3018  009B                     	;# 
  3019  009B                     	;# 
  3020  009C                     	;# 
  3021  009D                     	;# 
  3022  009E                     	;# 
  3023  010C                     	;# 
  3024  010D                     	;# 
  3025  010E                     	;# 
  3026  010F                     	;# 
  3027  0110                     	;# 
  3028  0111                     	;# 
  3029  0112                     	;# 
  3030  0113                     	;# 
  3031  0114                     	;# 
  3032  0115                     	;# 
  3033  0116                     	;# 
  3034  0117                     	;# 
  3035  0118                     	;# 
  3036  0119                     	;# 
  3037  011A                     	;# 
  3038  011B                     	;# 
  3039  011D                     	;# 
  3040  011E                     	;# 
  3041  011F                     	;# 
  3042  018C                     	;# 
  3043  0190                     	;# 
  3044  0191                     	;# 
  3045  0191                     	;# 
  3046  0192                     	;# 
  3047  0193                     	;# 
  3048  0193                     	;# 
  3049  0193                     	;# 
  3050  0194                     	;# 
  3051  0195                     	;# 
  3052  0196                     	;# 
  3053  0199                     	;# 
  3054  0199                     	;# 
  3055  019A                     	;# 
  3056  019A                     	;# 
  3057  019B                     	;# 
  3058  019B                     	;# 
  3059  019B                     	;# 
  3060  019B                     	;# 
  3061  019C                     	;# 
  3062  019C                     	;# 
  3063  019D                     	;# 
  3064  019D                     	;# 
  3065  019E                     	;# 
  3066  019E                     	;# 
  3067  019F                     	;# 
  3068  020D                     	;# 
  3069  0211                     	;# 
  3070  0211                     	;# 
  3071  0212                     	;# 
  3072  0212                     	;# 
  3073  0213                     	;# 
  3074  0213                     	;# 
  3075  0214                     	;# 
  3076  0214                     	;# 
  3077  0215                     	;# 
  3078  0215                     	;# 
  3079  0215                     	;# 
  3080  0216                     	;# 
  3081  0216                     	;# 
  3082  0217                     	;# 
  3083  0217                     	;# 
  3084  0219                     	;# 
  3085  021A                     	;# 
  3086  021B                     	;# 
  3087  021C                     	;# 
  3088  021D                     	;# 
  3089  021E                     	;# 
  3090  021F                     	;# 
  3091  028C                     	;# 
  3092  028D                     	;# 
  3093  0291                     	;# 
  3094  0291                     	;# 
  3095  0292                     	;# 
  3096  0293                     	;# 
  3097  0294                     	;# 
  3098  0295                     	;# 
  3099  0295                     	;# 
  3100  0296                     	;# 
  3101  0298                     	;# 
  3102  0298                     	;# 
  3103  0299                     	;# 
  3104  029A                     	;# 
  3105  029B                     	;# 
  3106  029C                     	;# 
  3107  029C                     	;# 
  3108  029D                     	;# 
  3109  029E                     	;# 
  3110  029F                     	;# 
  3111  030C                     	;# 
  3112  030D                     	;# 
  3113  0311                     	;# 
  3114  0311                     	;# 
  3115  0312                     	;# 
  3116  0313                     	;# 
  3117  0314                     	;# 
  3118  0315                     	;# 
  3119  0315                     	;# 
  3120  0316                     	;# 
  3121  0318                     	;# 
  3122  0318                     	;# 
  3123  0319                     	;# 
  3124  031A                     	;# 
  3125  031C                     	;# 
  3126  031C                     	;# 
  3127  031D                     	;# 
  3128  031E                     	;# 
  3129  038C                     	;# 
  3130  038D                     	;# 
  3131  0394                     	;# 
  3132  0395                     	;# 
  3133  0396                     	;# 
  3134  040C                     	;# 
  3135  040D                     	;# 
  3136  0415                     	;# 
  3137  0416                     	;# 
  3138  0417                     	;# 
  3139  041C                     	;# 
  3140  041D                     	;# 
  3141  041E                     	;# 
  3142  048D                     	;# 
  3143  0491                     	;# 
  3144  0492                     	;# 
  3145  0493                     	;# 
  3146  0493                     	;# 
  3147  0494                     	;# 
  3148  0495                     	;# 
  3149  0496                     	;# 
  3150  0497                     	;# 
  3151  0791                     	;# 
  3152  0792                     	;# 
  3153  0793                     	;# 
  3154  0794                     	;# 
  3155  0795                     	;# 
  3156  0798                     	;# 
  3157  0799                     	;# 
  3158  079A                     	;# 
  3159  079B                     	;# 
  3160  079C                     	;# 
  3161  079D                     	;# 
  3162  07A0                     	;# 
  3163  07A1                     	;# 
  3164  07A2                     	;# 
  3165  07A3                     	;# 
  3166  07A4                     	;# 
  3167  07A5                     	;# 
  3168  07A6                     	;# 
  3169  07A7                     	;# 
  3170  07A8                     	;# 
  3171  07A9                     	;# 
  3172  07AA                     	;# 
  3173  07AB                     	;# 
  3174  07AC                     	;# 
  3175  07AD                     	;# 
  3176  07AE                     	;# 
  3177  07AF                     	;# 
  3178  07B0                     	;# 
  3179  07B1                     	;# 
  3180  07B2                     	;# 
  3181  07B3                     	;# 
  3182  07B4                     	;# 
  3183  07B5                     	;# 
  3184  07B6                     	;# 
  3185  07B7                     	;# 
  3186  0FE4                     	;# 
  3187  0FE5                     	;# 
  3188  0FE6                     	;# 
  3189  0FE7                     	;# 
  3190  0FE8                     	;# 
  3191  0FE9                     	;# 
  3192  0FEA                     	;# 
  3193  0FEB                     	;# 
  3194  0FED                     	;# 
  3195  0FEE                     	;# 
  3196  0FEF                     	;# 
  3197  0000                     	;# 
  3198  0001                     	;# 
  3199  0002                     	;# 
  3200  0003                     	;# 
  3201  0004                     	;# 
  3202  0005                     	;# 
  3203  0006                     	;# 
  3204  0007                     	;# 
  3205  0008                     	;# 
  3206  0009                     	;# 
  3207  000A                     	;# 
  3208  000B                     	;# 
  3209  000C                     	;# 
  3210  000D                     	;# 
  3211  000E                     	;# 
  3212  000F                     	;# 
  3213  0010                     	;# 
  3214  0011                     	;# 
  3215  0012                     	;# 
  3216  0013                     	;# 
  3217  0014                     	;# 
  3218  0015                     	;# 
  3219  0016                     	;# 
  3220  0016                     	;# 
  3221  0017                     	;# 
  3222  0018                     	;# 
  3223  0019                     	;# 
  3224  001A                     	;# 
  3225  001B                     	;# 
  3226  001C                     	;# 
  3227  001E                     	;# 
  3228  001F                     	;# 
  3229  008C                     	;# 
  3230  008D                     	;# 
  3231  008E                     	;# 
  3232  008F                     	;# 
  3233  0090                     	;# 
  3234  0091                     	;# 
  3235  0092                     	;# 
  3236  0093                     	;# 
  3237  0094                     	;# 
  3238  0095                     	;# 
  3239  0096                     	;# 
  3240  0097                     	;# 
  3241  0098                     	;# 
  3242  0099                     	;# 
  3243  009A                     	;# 
  3244  009B                     	;# 
  3245  009B                     	;# 
  3246  009C                     	;# 
  3247  009D                     	;# 
  3248  009E                     	;# 
  3249  010C                     	;# 
  3250  010D                     	;# 
  3251  010E                     	;# 
  3252  010F                     	;# 
  3253  0110                     	;# 
  3254  0111                     	;# 
  3255  0112                     	;# 
  3256  0113                     	;# 
  3257  0114                     	;# 
  3258  0115                     	;# 
  3259  0116                     	;# 
  3260  0117                     	;# 
  3261  0118                     	;# 
  3262  0119                     	;# 
  3263  011A                     	;# 
  3264  011B                     	;# 
  3265  011D                     	;# 
  3266  011E                     	;# 
  3267  011F                     	;# 
  3268  018C                     	;# 
  3269  0190                     	;# 
  3270  0191                     	;# 
  3271  0191                     	;# 
  3272  0192                     	;# 
  3273  0193                     	;# 
  3274  0193                     	;# 
  3275  0193                     	;# 
  3276  0194                     	;# 
  3277  0195                     	;# 
  3278  0196                     	;# 
  3279  0199                     	;# 
  3280  0199                     	;# 
  3281  019A                     	;# 
  3282  019A                     	;# 
  3283  019B                     	;# 
  3284  019B                     	;# 
  3285  019B                     	;# 
  3286  019B                     	;# 
  3287  019C                     	;# 
  3288  019C                     	;# 
  3289  019D                     	;# 
  3290  019D                     	;# 
  3291  019E                     	;# 
  3292  019E                     	;# 
  3293  019F                     	;# 
  3294  020D                     	;# 
  3295  0211                     	;# 
  3296  0211                     	;# 
  3297  0212                     	;# 
  3298  0212                     	;# 
  3299  0213                     	;# 
  3300  0213                     	;# 
  3301  0214                     	;# 
  3302  0214                     	;# 
  3303  0215                     	;# 
  3304  0215                     	;# 
  3305  0215                     	;# 
  3306  0216                     	;# 
  3307  0216                     	;# 
  3308  0217                     	;# 
  3309  0217                     	;# 
  3310  0219                     	;# 
  3311  021A                     	;# 
  3312  021B                     	;# 
  3313  021C                     	;# 
  3314  021D                     	;# 
  3315  021E                     	;# 
  3316  021F                     	;# 
  3317  028C                     	;# 
  3318  028D                     	;# 
  3319  0291                     	;# 
  3320  0291                     	;# 
  3321  0292                     	;# 
  3322  0293                     	;# 
  3323  0294                     	;# 
  3324  0295                     	;# 
  3325  0295                     	;# 
  3326  0296                     	;# 
  3327  0298                     	;# 
  3328  0298                     	;# 
  3329  0299                     	;# 
  3330  029A                     	;# 
  3331  029B                     	;# 
  3332  029C                     	;# 
  3333  029C                     	;# 
  3334  029D                     	;# 
  3335  029E                     	;# 
  3336  029F                     	;# 
  3337  030C                     	;# 
  3338  030D                     	;# 
  3339  0311                     	;# 
  3340  0311                     	;# 
  3341  0312                     	;# 
  3342  0313                     	;# 
  3343  0314                     	;# 
  3344  0315                     	;# 
  3345  0315                     	;# 
  3346  0316                     	;# 
  3347  0318                     	;# 
  3348  0318                     	;# 
  3349  0319                     	;# 
  3350  031A                     	;# 
  3351  031C                     	;# 
  3352  031C                     	;# 
  3353  031D                     	;# 
  3354  031E                     	;# 
  3355  038C                     	;# 
  3356  038D                     	;# 
  3357  0394                     	;# 
  3358  0395                     	;# 
  3359  0396                     	;# 
  3360  040C                     	;# 
  3361  040D                     	;# 
  3362  0415                     	;# 
  3363  0416                     	;# 
  3364  0417                     	;# 
  3365  041C                     	;# 
  3366  041D                     	;# 
  3367  041E                     	;# 
  3368  048D                     	;# 
  3369  0491                     	;# 
  3370  0492                     	;# 
  3371  0493                     	;# 
  3372  0493                     	;# 
  3373  0494                     	;# 
  3374  0495                     	;# 
  3375  0496                     	;# 
  3376  0497                     	;# 
  3377  0791                     	;# 
  3378  0792                     	;# 
  3379  0793                     	;# 
  3380  0794                     	;# 
  3381  0795                     	;# 
  3382  0798                     	;# 
  3383  0799                     	;# 
  3384  079A                     	;# 
  3385  079B                     	;# 
  3386  079C                     	;# 
  3387  079D                     	;# 
  3388  07A0                     	;# 
  3389  07A1                     	;# 
  3390  07A2                     	;# 
  3391  07A3                     	;# 
  3392  07A4                     	;# 
  3393  07A5                     	;# 
  3394  07A6                     	;# 
  3395  07A7                     	;# 
  3396  07A8                     	;# 
  3397  07A9                     	;# 
  3398  07AA                     	;# 
  3399  07AB                     	;# 
  3400  07AC                     	;# 
  3401  07AD                     	;# 
  3402  07AE                     	;# 
  3403  07AF                     	;# 
  3404  07B0                     	;# 
  3405  07B1                     	;# 
  3406  07B2                     	;# 
  3407  07B3                     	;# 
  3408  07B4                     	;# 
  3409  07B5                     	;# 
  3410  07B6                     	;# 
  3411  07B7                     	;# 
  3412  0FE4                     	;# 
  3413  0FE5                     	;# 
  3414  0FE6                     	;# 
  3415  0FE7                     	;# 
  3416  0FE8                     	;# 
  3417  0FE9                     	;# 
  3418  0FEA                     	;# 
  3419  0FEB                     	;# 
  3420  0FED                     	;# 
  3421  0FEE                     	;# 
  3422  0FEF                     	;# 
  3423  0000                     	;# 
  3424  0001                     	;# 
  3425  0002                     	;# 
  3426  0003                     	;# 
  3427  0004                     	;# 
  3428  0005                     	;# 
  3429  0006                     	;# 
  3430  0007                     	;# 
  3431  0008                     	;# 
  3432  0009                     	;# 
  3433  000A                     	;# 
  3434  000B                     	;# 
  3435  000C                     	;# 
  3436  000D                     	;# 
  3437  000E                     	;# 
  3438  000F                     	;# 
  3439  0010                     	;# 
  3440  0011                     	;# 
  3441  0012                     	;# 
  3442  0013                     	;# 
  3443  0014                     	;# 
  3444  0015                     	;# 
  3445  0016                     	;# 
  3446  0016                     	;# 
  3447  0017                     	;# 
  3448  0018                     	;# 
  3449  0019                     	;# 
  3450  001A                     	;# 
  3451  001B                     	;# 
  3452  001C                     	;# 
  3453  001E                     	;# 
  3454  001F                     	;# 
  3455  008C                     	;# 
  3456  008D                     	;# 
  3457  008E                     	;# 
  3458  008F                     	;# 
  3459  0090                     	;# 
  3460  0091                     	;# 
  3461  0092                     	;# 
  3462  0093                     	;# 
  3463  0094                     	;# 
  3464  0095                     	;# 
  3465  0096                     	;# 
  3466  0097                     	;# 
  3467  0098                     	;# 
  3468  0099                     	;# 
  3469  009A                     	;# 
  3470  009B                     	;# 
  3471  009B                     	;# 
  3472  009C                     	;# 
  3473  009D                     	;# 
  3474  009E                     	;# 
  3475  010C                     	;# 
  3476  010D                     	;# 
  3477  010E                     	;# 
  3478  010F                     	;# 
  3479  0110                     	;# 
  3480  0111                     	;# 
  3481  0112                     	;# 
  3482  0113                     	;# 
  3483  0114                     	;# 
  3484  0115                     	;# 
  3485  0116                     	;# 
  3486  0117                     	;# 
  3487  0118                     	;# 
  3488  0119                     	;# 
  3489  011A                     	;# 
  3490  011B                     	;# 
  3491  011D                     	;# 
  3492  011E                     	;# 
  3493  011F                     	;# 
  3494  018C                     	;# 
  3495  0190                     	;# 
  3496  0191                     	;# 
  3497  0191                     	;# 
  3498  0192                     	;# 
  3499  0193                     	;# 
  3500  0193                     	;# 
  3501  0193                     	;# 
  3502  0194                     	;# 
  3503  0195                     	;# 
  3504  0196                     	;# 
  3505  0199                     	;# 
  3506  0199                     	;# 
  3507  019A                     	;# 
  3508  019A                     	;# 
  3509  019B                     	;# 
  3510  019B                     	;# 
  3511  019B                     	;# 
  3512  019B                     	;# 
  3513  019C                     	;# 
  3514  019C                     	;# 
  3515  019D                     	;# 
  3516  019D                     	;# 
  3517  019E                     	;# 
  3518  019E                     	;# 
  3519  019F                     	;# 
  3520  020D                     	;# 
  3521  0211                     	;# 
  3522  0211                     	;# 
  3523  0212                     	;# 
  3524  0212                     	;# 
  3525  0213                     	;# 
  3526  0213                     	;# 
  3527  0214                     	;# 
  3528  0214                     	;# 
  3529  0215                     	;# 
  3530  0215                     	;# 
  3531  0215                     	;# 
  3532  0216                     	;# 
  3533  0216                     	;# 
  3534  0217                     	;# 
  3535  0217                     	;# 
  3536  0219                     	;# 
  3537  021A                     	;# 
  3538  021B                     	;# 
  3539  021C                     	;# 
  3540  021D                     	;# 
  3541  021E                     	;# 
  3542  021F                     	;# 
  3543  028C                     	;# 
  3544  028D                     	;# 
  3545  0291                     	;# 
  3546  0291                     	;# 
  3547  0292                     	;# 
  3548  0293                     	;# 
  3549  0294                     	;# 
  3550  0295                     	;# 
  3551  0295                     	;# 
  3552  0296                     	;# 
  3553  0298                     	;# 
  3554  0298                     	;# 
  3555  0299                     	;# 
  3556  029A                     	;# 
  3557  029B                     	;# 
  3558  029C                     	;# 
  3559  029C                     	;# 
  3560  029D                     	;# 
  3561  029E                     	;# 
  3562  029F                     	;# 
  3563  030C                     	;# 
  3564  030D                     	;# 
  3565  0311                     	;# 
  3566  0311                     	;# 
  3567  0312                     	;# 
  3568  0313                     	;# 
  3569  0314                     	;# 
  3570  0315                     	;# 
  3571  0315                     	;# 
  3572  0316                     	;# 
  3573  0318                     	;# 
  3574  0318                     	;# 
  3575  0319                     	;# 
  3576  031A                     	;# 
  3577  031C                     	;# 
  3578  031C                     	;# 
  3579  031D                     	;# 
  3580  031E                     	;# 
  3581  038C                     	;# 
  3582  038D                     	;# 
  3583  0394                     	;# 
  3584  0395                     	;# 
  3585  0396                     	;# 
  3586  040C                     	;# 
  3587  040D                     	;# 
  3588  0415                     	;# 
  3589  0416                     	;# 
  3590  0417                     	;# 
  3591  041C                     	;# 
  3592  041D                     	;# 
  3593  041E                     	;# 
  3594  048D                     	;# 
  3595  0491                     	;# 
  3596  0492                     	;# 
  3597  0493                     	;# 
  3598  0493                     	;# 
  3599  0494                     	;# 
  3600  0495                     	;# 
  3601  0496                     	;# 
  3602  0497                     	;# 
  3603  0791                     	;# 
  3604  0792                     	;# 
  3605  0793                     	;# 
  3606  0794                     	;# 
  3607  0795                     	;# 
  3608  0798                     	;# 
  3609  0799                     	;# 
  3610  079A                     	;# 
  3611  079B                     	;# 
  3612  079C                     	;# 
  3613  079D                     	;# 
  3614  07A0                     	;# 
  3615  07A1                     	;# 
  3616  07A2                     	;# 
  3617  07A3                     	;# 
  3618  07A4                     	;# 
  3619  07A5                     	;# 
  3620  07A6                     	;# 
  3621  07A7                     	;# 
  3622  07A8                     	;# 
  3623  07A9                     	;# 
  3624  07AA                     	;# 
  3625  07AB                     	;# 
  3626  07AC                     	;# 
  3627  07AD                     	;# 
  3628  07AE                     	;# 
  3629  07AF                     	;# 
  3630  07B0                     	;# 
  3631  07B1                     	;# 
  3632  07B2                     	;# 
  3633  07B3                     	;# 
  3634  07B4                     	;# 
  3635  07B5                     	;# 
  3636  07B6                     	;# 
  3637  07B7                     	;# 
  3638  0FE4                     	;# 
  3639  0FE5                     	;# 
  3640  0FE6                     	;# 
  3641  0FE7                     	;# 
  3642  0FE8                     	;# 
  3643  0FE9                     	;# 
  3644  0FEA                     	;# 
  3645  0FEB                     	;# 
  3646  0FED                     	;# 
  3647  0FEE                     	;# 
  3648  0FEF                     	;# 
  3649  0000                     	;# 
  3650  0001                     	;# 
  3651  0002                     	;# 
  3652  0003                     	;# 
  3653  0004                     	;# 
  3654  0005                     	;# 
  3655  0006                     	;# 
  3656  0007                     	;# 
  3657  0008                     	;# 
  3658  0009                     	;# 
  3659  000A                     	;# 
  3660  000B                     	;# 
  3661  000C                     	;# 
  3662  000D                     	;# 
  3663  000E                     	;# 
  3664  000F                     	;# 
  3665  0010                     	;# 
  3666  0011                     	;# 
  3667  0012                     	;# 
  3668  0013                     	;# 
  3669  0014                     	;# 
  3670  0015                     	;# 
  3671  0016                     	;# 
  3672  0016                     	;# 
  3673  0017                     	;# 
  3674  0018                     	;# 
  3675  0019                     	;# 
  3676  001A                     	;# 
  3677  001B                     	;# 
  3678  001C                     	;# 
  3679  001E                     	;# 
  3680  001F                     	;# 
  3681  008C                     	;# 
  3682  008D                     	;# 
  3683  008E                     	;# 
  3684  008F                     	;# 
  3685  0090                     	;# 
  3686  0091                     	;# 
  3687  0092                     	;# 
  3688  0093                     	;# 
  3689  0094                     	;# 
  3690  0095                     	;# 
  3691  0096                     	;# 
  3692  0097                     	;# 
  3693  0098                     	;# 
  3694  0099                     	;# 
  3695  009A                     	;# 
  3696  009B                     	;# 
  3697  009B                     	;# 
  3698  009C                     	;# 
  3699  009D                     	;# 
  3700  009E                     	;# 
  3701  010C                     	;# 
  3702  010D                     	;# 
  3703  010E                     	;# 
  3704  010F                     	;# 
  3705  0110                     	;# 
  3706  0111                     	;# 
  3707  0112                     	;# 
  3708  0113                     	;# 
  3709  0114                     	;# 
  3710  0115                     	;# 
  3711  0116                     	;# 
  3712  0117                     	;# 
  3713  0118                     	;# 
  3714  0119                     	;# 
  3715  011A                     	;# 
  3716  011B                     	;# 
  3717  011D                     	;# 
  3718  011E                     	;# 
  3719  011F                     	;# 
  3720  018C                     	;# 
  3721  0190                     	;# 
  3722  0191                     	;# 
  3723  0191                     	;# 
  3724  0192                     	;# 
  3725  0193                     	;# 
  3726  0193                     	;# 
  3727  0193                     	;# 
  3728  0194                     	;# 
  3729  0195                     	;# 
  3730  0196                     	;# 
  3731  0199                     	;# 
  3732  0199                     	;# 
  3733  019A                     	;# 
  3734  019A                     	;# 
  3735  019B                     	;# 
  3736  019B                     	;# 
  3737  019B                     	;# 
  3738  019B                     	;# 
  3739  019C                     	;# 
  3740  019C                     	;# 
  3741  019D                     	;# 
  3742  019D                     	;# 
  3743  019E                     	;# 
  3744  019E                     	;# 
  3745  019F                     	;# 
  3746  020D                     	;# 
  3747  0211                     	;# 
  3748  0211                     	;# 
  3749  0212                     	;# 
  3750  0212                     	;# 
  3751  0213                     	;# 
  3752  0213                     	;# 
  3753  0214                     	;# 
  3754  0214                     	;# 
  3755  0215                     	;# 
  3756  0215                     	;# 
  3757  0215                     	;# 
  3758  0216                     	;# 
  3759  0216                     	;# 
  3760  0217                     	;# 
  3761  0217                     	;# 
  3762  0219                     	;# 
  3763  021A                     	;# 
  3764  021B                     	;# 
  3765  021C                     	;# 
  3766  021D                     	;# 
  3767  021E                     	;# 
  3768  021F                     	;# 
  3769  028C                     	;# 
  3770  028D                     	;# 
  3771  0291                     	;# 
  3772  0291                     	;# 
  3773  0292                     	;# 
  3774  0293                     	;# 
  3775  0294                     	;# 
  3776  0295                     	;# 
  3777  0295                     	;# 
  3778  0296                     	;# 
  3779  0298                     	;# 
  3780  0298                     	;# 
  3781  0299                     	;# 
  3782  029A                     	;# 
  3783  029B                     	;# 
  3784  029C                     	;# 
  3785  029C                     	;# 
  3786  029D                     	;# 
  3787  029E                     	;# 
  3788  029F                     	;# 
  3789  030C                     	;# 
  3790  030D                     	;# 
  3791  0311                     	;# 
  3792  0311                     	;# 
  3793  0312                     	;# 
  3794  0313                     	;# 
  3795  0314                     	;# 
  3796  0315                     	;# 
  3797  0315                     	;# 
  3798  0316                     	;# 
  3799  0318                     	;# 
  3800  0318                     	;# 
  3801  0319                     	;# 
  3802  031A                     	;# 
  3803  031C                     	;# 
  3804  031C                     	;# 
  3805  031D                     	;# 
  3806  031E                     	;# 
  3807  038C                     	;# 
  3808  038D                     	;# 
  3809  0394                     	;# 
  3810  0395                     	;# 
  3811  0396                     	;# 
  3812  040C                     	;# 
  3813  040D                     	;# 
  3814  0415                     	;# 
  3815  0416                     	;# 
  3816  0417                     	;# 
  3817  041C                     	;# 
  3818  041D                     	;# 
  3819  041E                     	;# 
  3820  048D                     	;# 
  3821  0491                     	;# 
  3822  0492                     	;# 
  3823  0493                     	;# 
  3824  0493                     	;# 
  3825  0494                     	;# 
  3826  0495                     	;# 
  3827  0496                     	;# 
  3828  0497                     	;# 
  3829  0791                     	;# 
  3830  0792                     	;# 
  3831  0793                     	;# 
  3832  0794                     	;# 
  3833  0795                     	;# 
  3834  0798                     	;# 
  3835  0799                     	;# 
  3836  079A                     	;# 
  3837  079B                     	;# 
  3838  079C                     	;# 
  3839  079D                     	;# 
  3840  07A0                     	;# 
  3841  07A1                     	;# 
  3842  07A2                     	;# 
  3843  07A3                     	;# 
  3844  07A4                     	;# 
  3845  07A5                     	;# 
  3846  07A6                     	;# 
  3847  07A7                     	;# 
  3848  07A8                     	;# 
  3849  07A9                     	;# 
  3850  07AA                     	;# 
  3851  07AB                     	;# 
  3852  07AC                     	;# 
  3853  07AD                     	;# 
  3854  07AE                     	;# 
  3855  07AF                     	;# 
  3856  07B0                     	;# 
  3857  07B1                     	;# 
  3858  07B2                     	;# 
  3859  07B3                     	;# 
  3860  07B4                     	;# 
  3861  07B5                     	;# 
  3862  07B6                     	;# 
  3863  07B7                     	;# 
  3864  0FE4                     	;# 
  3865  0FE5                     	;# 
  3866  0FE6                     	;# 
  3867  0FE7                     	;# 
  3868  0FE8                     	;# 
  3869  0FE9                     	;# 
  3870  0FEA                     	;# 
  3871  0FEB                     	;# 
  3872  0FED                     	;# 
  3873  0FEE                     	;# 
  3874  0FEF                     	;# 
  3875  0000                     	;# 
  3876  0001                     	;# 
  3877  0002                     	;# 
  3878  0003                     	;# 
  3879  0004                     	;# 
  3880  0005                     	;# 
  3881  0006                     	;# 
  3882  0007                     	;# 
  3883  0008                     	;# 
  3884  0009                     	;# 
  3885  000A                     	;# 
  3886  000B                     	;# 
  3887  000C                     	;# 
  3888  000D                     	;# 
  3889  000E                     	;# 
  3890  000F                     	;# 
  3891  0010                     	;# 
  3892  0011                     	;# 
  3893  0012                     	;# 
  3894  0013                     	;# 
  3895  0014                     	;# 
  3896  0015                     	;# 
  3897  0016                     	;# 
  3898  0016                     	;# 
  3899  0017                     	;# 
  3900  0018                     	;# 
  3901  0019                     	;# 
  3902  001A                     	;# 
  3903  001B                     	;# 
  3904  001C                     	;# 
  3905  001E                     	;# 
  3906  001F                     	;# 
  3907  008C                     	;# 
  3908  008D                     	;# 
  3909  008E                     	;# 
  3910  008F                     	;# 
  3911  0090                     	;# 
  3912  0091                     	;# 
  3913  0092                     	;# 
  3914  0093                     	;# 
  3915  0094                     	;# 
  3916  0095                     	;# 
  3917  0096                     	;# 
  3918  0097                     	;# 
  3919  0098                     	;# 
  3920  0099                     	;# 
  3921  009A                     	;# 
  3922  009B                     	;# 
  3923  009B                     	;# 
  3924  009C                     	;# 
  3925  009D                     	;# 
  3926  009E                     	;# 
  3927  010C                     	;# 
  3928  010D                     	;# 
  3929  010E                     	;# 
  3930  010F                     	;# 
  3931  0110                     	;# 
  3932  0111                     	;# 
  3933  0112                     	;# 
  3934  0113                     	;# 
  3935  0114                     	;# 
  3936  0115                     	;# 
  3937  0116                     	;# 
  3938  0117                     	;# 
  3939  0118                     	;# 
  3940  0119                     	;# 
  3941  011A                     	;# 
  3942  011B                     	;# 
  3943  011D                     	;# 
  3944  011E                     	;# 
  3945  011F                     	;# 
  3946  018C                     	;# 
  3947  0190                     	;# 
  3948  0191                     	;# 
  3949  0191                     	;# 
  3950  0192                     	;# 
  3951  0193                     	;# 
  3952  0193                     	;# 
  3953  0193                     	;# 
  3954  0194                     	;# 
  3955  0195                     	;# 
  3956  0196                     	;# 
  3957  0199                     	;# 
  3958  0199                     	;# 
  3959  019A                     	;# 
  3960  019A                     	;# 
  3961  019B                     	;# 
  3962  019B                     	;# 
  3963  019B                     	;# 
  3964  019B                     	;# 
  3965  019C                     	;# 
  3966  019C                     	;# 
  3967  019D                     	;# 
  3968  019D                     	;# 
  3969  019E                     	;# 
  3970  019E                     	;# 
  3971  019F                     	;# 
  3972  020D                     	;# 
  3973  0211                     	;# 
  3974  0211                     	;# 
  3975  0212                     	;# 
  3976  0212                     	;# 
  3977  0213                     	;# 
  3978  0213                     	;# 
  3979  0214                     	;# 
  3980  0214                     	;# 
  3981  0215                     	;# 
  3982  0215                     	;# 
  3983  0215                     	;# 
  3984  0216                     	;# 
  3985  0216                     	;# 
  3986  0217                     	;# 
  3987  0217                     	;# 
  3988  0219                     	;# 
  3989  021A                     	;# 
  3990  021B                     	;# 
  3991  021C                     	;# 
  3992  021D                     	;# 
  3993  021E                     	;# 
  3994  021F                     	;# 
  3995  028C                     	;# 
  3996  028D                     	;# 
  3997  0291                     	;# 
  3998  0291                     	;# 
  3999  0292                     	;# 
  4000  0293                     	;# 
  4001  0294                     	;# 
  4002  0295                     	;# 
  4003  0295                     	;# 
  4004  0296                     	;# 
  4005  0298                     	;# 
  4006  0298                     	;# 
  4007  0299                     	;# 
  4008  029A                     	;# 
  4009  029B                     	;# 
  4010  029C                     	;# 
  4011  029C                     	;# 
  4012  029D                     	;# 
  4013  029E                     	;# 
  4014  029F                     	;# 
  4015  030C                     	;# 
  4016  030D                     	;# 
  4017  0311                     	;# 
  4018  0311                     	;# 
  4019  0312                     	;# 
  4020  0313                     	;# 
  4021  0314                     	;# 
  4022  0315                     	;# 
  4023  0315                     	;# 
  4024  0316                     	;# 
  4025  0318                     	;# 
  4026  0318                     	;# 
  4027  0319                     	;# 
  4028  031A                     	;# 
  4029  031C                     	;# 
  4030  031C                     	;# 
  4031  031D                     	;# 
  4032  031E                     	;# 
  4033  038C                     	;# 
  4034  038D                     	;# 
  4035  0394                     	;# 
  4036  0395                     	;# 
  4037  0396                     	;# 
  4038  040C                     	;# 
  4039  040D                     	;# 
  4040  0415                     	;# 
  4041  0416                     	;# 
  4042  0417                     	;# 
  4043  041C                     	;# 
  4044  041D                     	;# 
  4045  041E                     	;# 
  4046  048D                     	;# 
  4047  0491                     	;# 
  4048  0492                     	;# 
  4049  0493                     	;# 
  4050  0493                     	;# 
  4051  0494                     	;# 
  4052  0495                     	;# 
  4053  0496                     	;# 
  4054  0497                     	;# 
  4055  0791                     	;# 
  4056  0792                     	;# 
  4057  0793                     	;# 
  4058  0794                     	;# 
  4059  0795                     	;# 
  4060  0798                     	;# 
  4061  0799                     	;# 
  4062  079A                     	;# 
  4063  079B                     	;# 
  4064  079C                     	;# 
  4065  079D                     	;# 
  4066  07A0                     	;# 
  4067  07A1                     	;# 
  4068  07A2                     	;# 
  4069  07A3                     	;# 
  4070  07A4                     	;# 
  4071  07A5                     	;# 
  4072  07A6                     	;# 
  4073  07A7                     	;# 
  4074  07A8                     	;# 
  4075  07A9                     	;# 
  4076  07AA                     	;# 
  4077  07AB                     	;# 
  4078  07AC                     	;# 
  4079  07AD                     	;# 
  4080  07AE                     	;# 
  4081  07AF                     	;# 
  4082  07B0                     	;# 
  4083  07B1                     	;# 
  4084  07B2                     	;# 
  4085  07B3                     	;# 
  4086  07B4                     	;# 
  4087  07B5                     	;# 
  4088  07B6                     	;# 
  4089  07B7                     	;# 
  4090  0FE4                     	;# 
  4091  0FE5                     	;# 
  4092  0FE6                     	;# 
  4093  0FE7                     	;# 
  4094  0FE8                     	;# 
  4095  0FE9                     	;# 
  4096  0FEA                     	;# 
  4097  0FEB                     	;# 
  4098  0FED                     	;# 
  4099  0FEE                     	;# 
  4100  0FEF                     	;# 
  4101                           
  4102                           	psect	idataBANK1
  4103  0000                     __pidataBANK1:	
  4104                           
  4105                           	psect	stringtext
  4106  1800                     __pstringtext:	
  4107  1800                     __stringtab:	
  4108  1800  3400               	retlw	0
  4109  1801                     __end_of__stringtab:	
  4110  1801                     _PWD_TABLE:	
  4111  1801  34FF               	retlw	255
  4112  1802  34FD               	retlw	253
  4113  1803  34F9               	retlw	249
  4114  1804  34F3               	retlw	243
  4115  1805  34EB               	retlw	235
  4116  1806  34E1               	retlw	225
  4117  1807  34D5               	retlw	213
  4118  1808  34C7               	retlw	199
  4119  1809  34B7               	retlw	183
  4120  180A  34A5               	retlw	165
  4121  180B  3491               	retlw	145
  4122  180C  347B               	retlw	123
  4123  180D  3463               	retlw	99
  4124  180E  3449               	retlw	73
  4125  180F  342D               	retlw	45
  4126  1810  340F               	retlw	15
  4127  1811  34FC               	retlw	252
  4128  1812  34F8               	retlw	248
  4129  1813  34F2               	retlw	242
  4130  1814  34EA               	retlw	234
  4131  1815  34E0               	retlw	224
  4132  1816  34D4               	retlw	212
  4133  1817  34C6               	retlw	198
  4134  1818  34B6               	retlw	182
  4135  1819  34A4               	retlw	164
  4136  181A  3490               	retlw	144
  4137  181B  347A               	retlw	122
  4138  181C  3462               	retlw	98
  4139  181D  3448               	retlw	72
  4140  181E  342C               	retlw	44
  4141  181F  340E               	retlw	14
  4142  1820  3410               	retlw	16
  4143  1821  34F7               	retlw	247
  4144  1822  34F1               	retlw	241
  4145  1823  34E9               	retlw	233
  4146  1824  34DF               	retlw	223
  4147  1825  34D3               	retlw	211
  4148  1826  34C5               	retlw	197
  4149  1827  34B5               	retlw	181
  4150  1828  34A3               	retlw	163
  4151  1829  348F               	retlw	143
  4152  182A  3479               	retlw	121
  4153  182B  3461               	retlw	97
  4154  182C  3447               	retlw	71
  4155  182D  342B               	retlw	43
  4156  182E  340D               	retlw	13
  4157  182F  3411               	retlw	17
  4158  1830  342E               	retlw	46
  4159  1831  34F0               	retlw	240
  4160  1832  34E8               	retlw	232
  4161  1833  34DE               	retlw	222
  4162  1834  34D2               	retlw	210
  4163  1835  34C4               	retlw	196
  4164  1836  34B4               	retlw	180
  4165  1837  34A2               	retlw	162
  4166  1838  348E               	retlw	142
  4167  1839  3478               	retlw	120
  4168  183A  3460               	retlw	96
  4169  183B  3446               	retlw	70
  4170  183C  342A               	retlw	42
  4171  183D  340C               	retlw	12
  4172  183E  3412               	retlw	18
  4173  183F  342F               	retlw	47
  4174  1840  344A               	retlw	74
  4175  1841  34E7               	retlw	231
  4176  1842  34DD               	retlw	221
  4177  1843  34D1               	retlw	209
  4178  1844  34C3               	retlw	195
  4179  1845  34B3               	retlw	179
  4180  1846  34A1               	retlw	161
  4181  1847  348D               	retlw	141
  4182  1848  3477               	retlw	119
  4183  1849  345F               	retlw	95
  4184  184A  3445               	retlw	69
  4185  184B  3429               	retlw	41
  4186  184C  340B               	retlw	11
  4187  184D  3413               	retlw	19
  4188  184E  3430               	retlw	48
  4189  184F  344B               	retlw	75
  4190  1850  3464               	retlw	100
  4191  1851  34DC               	retlw	220
  4192  1852  34D0               	retlw	208
  4193  1853  34C2               	retlw	194
  4194  1854  34B2               	retlw	178
  4195  1855  34A0               	retlw	160
  4196  1856  348C               	retlw	140
  4197  1857  3476               	retlw	118
  4198  1858  345E               	retlw	94
  4199  1859  3444               	retlw	68
  4200  185A  3428               	retlw	40
  4201  185B  340A               	retlw	10
  4202  185C  3414               	retlw	20
  4203  185D  3431               	retlw	49
  4204  185E  344C               	retlw	76
  4205  185F  3465               	retlw	101
  4206  1860  347C               	retlw	124
  4207  1861  34CF               	retlw	207
  4208  1862  34C1               	retlw	193
  4209  1863  34B1               	retlw	177
  4210  1864  349F               	retlw	159
  4211  1865  348B               	retlw	139
  4212  1866  3475               	retlw	117
  4213  1867  345D               	retlw	93
  4214  1868  3443               	retlw	67
  4215  1869  3427               	retlw	39
  4216  186A  3409               	retlw	9
  4217  186B  3415               	retlw	21
  4218  186C  3432               	retlw	50
  4219  186D  344D               	retlw	77
  4220  186E  3466               	retlw	102
  4221  186F  347D               	retlw	125
  4222  1870  3492               	retlw	146
  4223  1871  34C0               	retlw	192
  4224  1872  34B0               	retlw	176
  4225  1873  349E               	retlw	158
  4226  1874  348A               	retlw	138
  4227  1875  3474               	retlw	116
  4228  1876  345C               	retlw	92
  4229  1877  3442               	retlw	66
  4230  1878  3426               	retlw	38
  4231  1879  3408               	retlw	8
  4232  187A  3416               	retlw	22
  4233  187B  3433               	retlw	51
  4234  187C  344E               	retlw	78
  4235  187D  3467               	retlw	103
  4236  187E  347E               	retlw	126
  4237  187F  3493               	retlw	147
  4238  1880  34A6               	retlw	166
  4239  1881  34AF               	retlw	175
  4240  1882  349D               	retlw	157
  4241  1883  3489               	retlw	137
  4242  1884  3473               	retlw	115
  4243  1885  345B               	retlw	91
  4244  1886  3441               	retlw	65
  4245  1887  3425               	retlw	37
  4246  1888  3407               	retlw	7
  4247  1889  3417               	retlw	23
  4248  188A  3434               	retlw	52
  4249  188B  344F               	retlw	79
  4250  188C  3468               	retlw	104
  4251  188D  347F               	retlw	127
  4252  188E  3494               	retlw	148
  4253  188F  34A7               	retlw	167
  4254  1890  34B8               	retlw	184
  4255  1891  349C               	retlw	156
  4256  1892  3488               	retlw	136
  4257  1893  3472               	retlw	114
  4258  1894  345A               	retlw	90
  4259  1895  3440               	retlw	64
  4260  1896  3424               	retlw	36
  4261  1897  3406               	retlw	6
  4262  1898  3418               	retlw	24
  4263  1899  3435               	retlw	53
  4264  189A  3450               	retlw	80
  4265  189B  3469               	retlw	105
  4266  189C  3480               	retlw	128
  4267  189D  3495               	retlw	149
  4268  189E  34A8               	retlw	168
  4269  189F  34B9               	retlw	185
  4270  18A0  34C8               	retlw	200
  4271  18A1  3487               	retlw	135
  4272  18A2  3471               	retlw	113
  4273  18A3  3459               	retlw	89
  4274  18A4  343F               	retlw	63
  4275  18A5  3423               	retlw	35
  4276  18A6  3405               	retlw	5
  4277  18A7  3419               	retlw	25
  4278  18A8  3436               	retlw	54
  4279  18A9  3451               	retlw	81
  4280  18AA  346A               	retlw	106
  4281  18AB  3481               	retlw	129
  4282  18AC  3496               	retlw	150
  4283  18AD  34A9               	retlw	169
  4284  18AE  34BA               	retlw	186
  4285  18AF  34C9               	retlw	201
  4286  18B0  34D6               	retlw	214
  4287  18B1  3470               	retlw	112
  4288  18B2  3458               	retlw	88
  4289  18B3  343E               	retlw	62
  4290  18B4  3422               	retlw	34
  4291  18B5  3404               	retlw	4
  4292  18B6  341A               	retlw	26
  4293  18B7  3437               	retlw	55
  4294  18B8  3452               	retlw	82
  4295  18B9  346B               	retlw	107
  4296  18BA  3482               	retlw	130
  4297  18BB  3497               	retlw	151
  4298  18BC  34AA               	retlw	170
  4299  18BD  34BB               	retlw	187
  4300  18BE  34CA               	retlw	202
  4301  18BF  34D7               	retlw	215
  4302  18C0  34E2               	retlw	226
  4303  18C1  3457               	retlw	87
  4304  18C2  343D               	retlw	61
  4305  18C3  3421               	retlw	33
  4306  18C4  3403               	retlw	3
  4307  18C5  341B               	retlw	27
  4308  18C6  3438               	retlw	56
  4309  18C7  3453               	retlw	83
  4310  18C8  346C               	retlw	108
  4311  18C9  3483               	retlw	131
  4312  18CA  3498               	retlw	152
  4313  18CB  34AB               	retlw	171
  4314  18CC  34BC               	retlw	188
  4315  18CD  34CB               	retlw	203
  4316  18CE  34D8               	retlw	216
  4317  18CF  34E3               	retlw	227
  4318  18D0  34EC               	retlw	236
  4319  18D1  343C               	retlw	60
  4320  18D2  3420               	retlw	32
  4321  18D3  3402               	retlw	2
  4322  18D4  341C               	retlw	28
  4323  18D5  3439               	retlw	57
  4324  18D6  3454               	retlw	84
  4325  18D7  346D               	retlw	109
  4326  18D8  3484               	retlw	132
  4327  18D9  3499               	retlw	153
  4328  18DA  34AC               	retlw	172
  4329  18DB  34BD               	retlw	189
  4330  18DC  34CC               	retlw	204
  4331  18DD  34D9               	retlw	217
  4332  18DE  34E4               	retlw	228
  4333  18DF  34ED               	retlw	237
  4334  18E0  34F4               	retlw	244
  4335  18E1  341F               	retlw	31
  4336  18E2  3401               	retlw	1
  4337  18E3  341D               	retlw	29
  4338  18E4  343A               	retlw	58
  4339  18E5  3455               	retlw	85
  4340  18E6  346E               	retlw	110
  4341  18E7  3485               	retlw	133
  4342  18E8  349A               	retlw	154
  4343  18E9  34AD               	retlw	173
  4344  18EA  34BE               	retlw	190
  4345  18EB  34CD               	retlw	205
  4346  18EC  34DA               	retlw	218
  4347  18ED  34E5               	retlw	229
  4348  18EE  34EE               	retlw	238
  4349  18EF  34F5               	retlw	245
  4350  18F0  34FA               	retlw	250
  4351  18F1  3400               	retlw	0
  4352  18F2  341E               	retlw	30
  4353  18F3  343B               	retlw	59
  4354  18F4  3456               	retlw	86
  4355  18F5  346F               	retlw	111
  4356  18F6  3486               	retlw	134
  4357  18F7  349B               	retlw	155
  4358  18F8  34AE               	retlw	174
  4359  18F9  34BF               	retlw	191
  4360  18FA  34CE               	retlw	206
  4361  18FB  34DB               	retlw	219
  4362  18FC  34E6               	retlw	230
  4363  18FD  34EF               	retlw	239
  4364  18FE  34F6               	retlw	246
  4365  18FF  34FB               	retlw	251
  4366  1900  34FE               	retlw	254
  4367  1901                     __end_of_PWD_TABLE:	
  4368  1901                     __stringdata:	
  4369  1901                     STR_1:	
  4370  1901  3430               	retlw	48	;'0'
  4371  1902  3430               	retlw	48	;'0'
  4372  1903  3430               	retlw	48	;'0'
  4373  1904  3430               	retlw	48	;'0'
  4374  1905  3400               	retlw	0
  4375  1906                     __end_of__stringdata:	
  4376                           
  4377                           ; #config settings
  4378  0000                     
  4379                           	psect	nvBANK0
  4380  006C                     __pnvBANK0:	
  4381  006C                     _day:	
  4382  006C                     	ds	1
  4383  006D                     _hour:	
  4384  006D                     	ds	1
  4385  006E                     _month:	
  4386  006E                     	ds	1
  4387  006F                     _year:	
  4388  006F                     	ds	1
  4389                           
  4390                           	psect	nvBANK1
  4391  00E6                     __pnvBANK1:	
  4392  00E6                     _minute:	
  4393  00E6                     	ds	1
  4394  00E7                     _second:	
  4395  00E7                     	ds	1
  4396  00E8                     _week:	
  4397  00E8                     	ds	1
  4398  000F                     _PORTD	set	15
  4399  0018                     _T1CON	set	24
  4400  0017                     _TMR1H	set	23
  4401  0016                     _TMR1L	set	22
  4402  005F                     _GIE	set	95
  4403  005E                     _PEIE	set	94
  4404  0060                     _RA0	set	96
  4405  0061                     _RA1	set	97
  4406  006C                     _RB4	set	108
  4407  006D                     _RB5	set	109
  4408  0070                     _RC0	set	112
  4409  0071                     _RC1	set	113
  4410  008D                     _RC1IF	set	141
  4411  0072                     _RC2	set	114
  4412  00A5                     _RC2IF	set	165
  4413  0073                     _RC3	set	115
  4414  0074                     _RC4	set	116
  4415  0075                     _RC5	set	117
  4416  0088                     _TMR1IF	set	136
  4417  0099                     _OSCCON	set	153
  4418  008C                     _TRISAbits	set	140
  4419  008E                     _TRISCbits	set	142
  4420  008F                     _TRISD	set	143
  4421  0090                     _TRISEbits	set	144
  4422  048D                     _RC1IE	set	1165
  4423  04A5                     _RC2IE	set	1189
  4424  0488                     _TMR1IE	set	1160
  4425  0110                     _LATEbits	set	272
  4426  0191                     _EEADR	set	401
  4427  018C                     _ANSELA	set	396
  4428  0190                     _ANSELE	set	400
  4429  019F                     _BAUD1CON	set	415
  4430  0193                     _EEDATA	set	403
  4431  0199                     _RC1REG	set	409
  4432  019D                     _RC1STA	set	413
  4433  019C                     _SP1BRGH	set	412
  4434  019B                     _SP1BRGL	set	411
  4435  019A                     _TX1REG	set	410
  4436  019E                     _TX1STA	set	414
  4437  019E                     _TX1STAbits	set	414
  4438  0CAF                     _EEPGD	set	3247
  4439  0CA8                     _RD	set	3240
  4440  030D                     _TRISGbits	set	781
  4441  038D                     _LATGbits	set	909
  4442  040C                     _ANSELF	set	1036
  4443  040D                     _ANSELG	set	1037
  4444  0497                     _BAUD2CON	set	1175
  4445  0491                     _RC2REG	set	1169
  4446  0495                     _RC2STA	set	1173
  4447  0494                     _SP2BRGH	set	1172
  4448  0493                     _SP2BRGL	set	1171
  4449  0496                     _TX2STA	set	1174
  4450                           
  4451                           	psect	cinit
  4452  0079                     start_initialization:	
  4453  0079                     __initialization:	
  4454                           
  4455                           ; Clear objects allocated to BANK0
  4456  0079  3047               	movlw	low __pbssBANK0
  4457  007A  0084               	movwf	4
  4458  007B  3000               	movlw	high __pbssBANK0
  4459  007C  0085               	movwf	5
  4460  007D  3025               	movlw	37
  4461  007E  3188  2018  3180   	fcall	clear_ram0
  4462                           
  4463                           ; Clear objects allocated to BANK1
  4464  0081  30A0               	movlw	low __pbssBANK1
  4465  0082  0084               	movwf	4
  4466  0083  3000               	movlw	high __pbssBANK1
  4467  0084  0085               	movwf	5
  4468  0085  3040               	movlw	64
  4469  0086  3188  2018  3180   	fcall	clear_ram0
  4470                           
  4471                           ; Clear objects allocated to BANK2
  4472  0089  3020               	movlw	low __pbssBANK2
  4473  008A  0084               	movwf	4
  4474  008B  3001               	movlw	high __pbssBANK2
  4475  008C  0085               	movwf	5
  4476  008D  3010               	movlw	16
  4477  008E  3188  2018         	fcall	clear_ram0
  4478                           
  4479                           ; Initialize objects allocated to BANK1
  4480  0090  0021               	movlb	1	; select bank1
  4481                           
  4482                           ;initializer for _keys_super
  4483  0091  30A1               	movlw	161
  4484  0092  00E0               	movwf	__pdataBANK1& (0+127)
  4485  0093  30A2               	movlw	162
  4486  0094  00E1               	movwf	(__pdataBANK1+1)& (0+127)
  4487  0095  30A3               	movlw	163
  4488  0096  00E2               	movwf	(__pdataBANK1+2)& (0+127)
  4489  0097  30B0               	movlw	176
  4490  0098  00E3               	movwf	(__pdataBANK1+3)& (0+127)
  4491  0099  30B1               	movlw	177
  4492  009A  00E4               	movwf	(__pdataBANK1+4)& (0+127)
  4493  009B  3000               	movlw	0
  4494  009C  00E5               	movwf	(__pdataBANK1+5)& (0+127)
  4495  009D                     end_of_initialization:	
  4496                           ;End of C runtime variable initialization code
  4497                           
  4498  009D                     __end_of__initialization:	
  4499  009D  0020               	movlb	0
  4500  009E  318B  2BC8         	ljmp	_main	;jump to C main() function
  4501                           
  4502                           	psect	bssBANK0
  4503  0047                     __pbssBANK0:	
  4504  0047                     _uart1_receive_buffer:	
  4505  0047                     	ds	8
  4506  004F                     _card_id:	
  4507  004F                     	ds	4
  4508  0053                     _MpIsrIn:	
  4509  0053                     	ds	1
  4510  0054                     _MpIsrInfo:	
  4511  0054                     	ds	1
  4512  0055                     _MpIsrOut:	
  4513  0055                     	ds	1
  4514  0056                     _card_type:	
  4515  0056                     	ds	1
  4516  0057                     _count:	
  4517  0057                     	ds	1
  4518  0058                     _count_uart1_receive:	
  4519  0058                     	ds	1
  4520  0059                     _count_uart2_receive:	
  4521  0059                     	ds	1
  4522  005A                     _flag_timer:	
  4523  005A                     	ds	1
  4524  005B                     _flag_uart1_cmd:	
  4525  005B                     	ds	1
  4526  005C                     _flag_uart2_cmd:	
  4527  005C                     	ds	1
  4528  005D                     _flag_user_card:	
  4529  005D                     	ds	1
  4530  005E                     _group:	
  4531  005E                     	ds	1
  4532  005F                     _is_enable:	
  4533  005F                     	ds	1
  4534  0060                     _sector_number:	
  4535  0060                     	ds	1
  4536  0061                     _uart1_cnt:	
  4537  0061                     	ds	1
  4538  0062                     _uart2_cnt:	
  4539  0062                     	ds	1
  4540  0063                     _user_card_count:	
  4541  0063                     	ds	1
  4542  0064                     _MInfo:	
  4543  0064                     	ds	8
  4544                           
  4545                           	psect	bssBANK1
  4546  00A0                     __pbssBANK1:	
  4547  00A0                     _ic_card:	
  4548  00A0                     	ds	4
  4549  00A4                     _timer_count:	
  4550  00A4                     	ds	2
  4551  00A6                     _MRcvBuffer:	
  4552  00A6                     	ds	16
  4553  00B6                     _MSndBuffer:	
  4554  00B6                     	ds	16
  4555  00C6                     _user_card:	
  4556  00C6                     	ds	14
  4557  00D4                     _keys:	
  4558  00D4                     	ds	6
  4559  00DA                     _snr_rc500:	
  4560  00DA                     	ds	4
  4561  00DE                     _tt1:	
  4562  00DE                     	ds	2
  4563                           
  4564                           	psect	dataBANK1
  4565  00E0                     __pdataBANK1:	
  4566  00E0                     _keys_super:	
  4567  00E0                     	ds	6
  4568                           
  4569                           	psect	bssBANK2
  4570  0120                     __pbssBANK2:	
  4571  0120                     _uart2_receive_buffer:	
  4572  0120                     	ds	16
  4573                           
  4574                           	psect	clrtext
  4575  0818                     clear_ram0:	
  4576                           ;	Called with FSR0 containing the base address, and
  4577                           ;	WREG with the size to clear
  4578                           
  4579  0818  0064               	clrwdt	;clear the watchdog before getting into this loop
  4580  0819                     clrloop0:	
  4581  0819  0180               	clrf	0	;clear RAM location pointed to by FSR
  4582  081A  3101               	addfsr 0,1
  4583  081B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4584  081C  2819               	goto	clrloop0	;have we reached the end yet?
  4585  081D  3400               	retlw	0	;all done for this memory range, return
  4586                           
  4587                           	psect	cstackCOMMON
  4588  0070                     __pcstackCOMMON:	
  4589  0070                     ?_delay_ms:	
  4590  0070                     ?_uart1_send_byte:	
  4591                           ; 0 bytes @ 0x0
  4592                           
  4593  0070                     ??_uart1_send_byte:	
  4594                           ; 0 bytes @ 0x0
  4595                           
  4596  0070                     ?_ds1302_set_time:	
  4597                           ; 0 bytes @ 0x0
  4598                           
  4599  0070                     ?_ds1302_get_time:	
  4600                           ; 0 bytes @ 0x0
  4601                           
  4602  0070                     ??_read_eeprom:	
  4603                           ; 0 bytes @ 0x0
  4604                           
  4605  0070                     ?_handle_beep:	
  4606                           ; 0 bytes @ 0x0
  4607                           
  4608  0070                     ??_find_project_key:	
  4609                           ; 0 bytes @ 0x0
  4610                           
  4611  0070                     ?_handle_config:	
  4612                           ; 0 bytes @ 0x0
  4613                           
  4614  0070                     ?_deal_floor:	
  4615                           ; 0 bytes @ 0x0
  4616                           
  4617  0070                     ??_same_id:	
  4618                           ; 0 bytes @ 0x0
  4619                           
  4620  0070                     ?_handle_ic_card:	
  4621                           ; 0 bytes @ 0x0
  4622                           
  4623  0070                     ?_handle_timer:	
  4624                           ; 0 bytes @ 0x0
  4625                           
  4626  0070                     ??_handle_timer:	
  4627                           ; 0 bytes @ 0x0
  4628                           
  4629  0070                     ?_init_i2c:	
  4630                           ; 0 bytes @ 0x0
  4631                           
  4632  0070                     ??_init_i2c:	
  4633                           ; 0 bytes @ 0x0
  4634                           
  4635  0070                     ?_start_i2c:	
  4636                           ; 0 bytes @ 0x0
  4637                           
  4638  0070                     ??_start_i2c:	
  4639                           ; 0 bytes @ 0x0
  4640                           
  4641  0070                     ?_stop_i2c:	
  4642                           ; 0 bytes @ 0x0
  4643                           
  4644  0070                     ??_stop_i2c:	
  4645                           ; 0 bytes @ 0x0
  4646                           
  4647  0070                     ??_rece_byte:	
  4648                           ; 0 bytes @ 0x0
  4649                           
  4650  0070                     ?_send_byte:	
  4651                           ; 0 bytes @ 0x0
  4652                           
  4653  0070                     ??_send_byte:	
  4654                           ; 0 bytes @ 0x0
  4655                           
  4656  0070                     ?_init_beep:	
  4657                           ; 0 bytes @ 0x0
  4658                           
  4659  0070                     ??_init_beep:	
  4660                           ; 0 bytes @ 0x0
  4661                           
  4662  0070                     ?_init_ds1302:	
  4663                           ; 0 bytes @ 0x0
  4664                           
  4665  0070                     ??_init_ds1302:	
  4666                           ; 0 bytes @ 0x0
  4667                           
  4668  0070                     ?_ds1302_write_byte:	
  4669                           ; 0 bytes @ 0x0
  4670                           
  4671  0070                     ??_ds1302_write_byte:	
  4672                           ; 0 bytes @ 0x0
  4673                           
  4674  0070                     ??_ds1302_read_byte:	
  4675                           ; 0 bytes @ 0x0
  4676                           
  4677  0070                     ?_isr:	
  4678                           ; 0 bytes @ 0x0
  4679                           
  4680  0070                     ??_isr:	
  4681                           ; 0 bytes @ 0x0
  4682                           
  4683  0070                     ?_init_interrupt:	
  4684                           ; 0 bytes @ 0x0
  4685                           
  4686  0070                     ??_init_interrupt:	
  4687                           ; 0 bytes @ 0x0
  4688                           
  4689  0070                     ?_init_led:	
  4690                           ; 0 bytes @ 0x0
  4691                           
  4692  0070                     ??_init_led:	
  4693                           ; 0 bytes @ 0x0
  4694                           
  4695  0070                     ?_init_mfrc500:	
  4696                           ; 0 bytes @ 0x0
  4697                           
  4698  0070                     ??_init_mfrc500:	
  4699                           ; 0 bytes @ 0x0
  4700                           
  4701  0070                     ?_PutRC500:	
  4702                           ; 0 bytes @ 0x0
  4703                           
  4704  0070                     ??_GetRC500:	
  4705                           ; 0 bytes @ 0x0
  4706                           
  4707  0070                     ?_FlushFIFO:	
  4708                           ; 0 bytes @ 0x0
  4709                           
  4710  0070                     ?_ISR_RC500:	
  4711                           ; 0 bytes @ 0x0
  4712                           
  4713  0070                     ?_init_timer1:	
  4714                           ; 0 bytes @ 0x0
  4715                           
  4716  0070                     ??_init_timer1:	
  4717                           ; 0 bytes @ 0x0
  4718                           
  4719  0070                     ?_init_uart1:	
  4720                           ; 0 bytes @ 0x0
  4721                           
  4722  0070                     ??_init_uart1:	
  4723                           ; 0 bytes @ 0x0
  4724                           
  4725  0070                     ?_init_uart2:	
  4726                           ; 0 bytes @ 0x0
  4727                           
  4728  0070                     ??_init_uart2:	
  4729                           ; 0 bytes @ 0x0
  4730                           
  4731  0070                     ?_init_osc:	
  4732                           ; 0 bytes @ 0x0
  4733                           
  4734  0070                     ??_init_osc:	
  4735                           ; 0 bytes @ 0x0
  4736                           
  4737  0070                     ?_init_port:	
  4738                           ; 0 bytes @ 0x0
  4739                           
  4740  0070                     ??_init_port:	
  4741                           ; 0 bytes @ 0x0
  4742                           
  4743  0070                     ?_init_hardware:	
  4744                           ; 0 bytes @ 0x0
  4745                           
  4746  0070                     ?_read_24c02:	
  4747                           ; 0 bytes @ 0x0
  4748                           
  4749  0070                     ?_read_eeprom:	
  4750                           ; 1 bytes @ 0x0
  4751                           
  4752  0070                     ?_checksum:	
  4753                           ; 1 bytes @ 0x0
  4754                           
  4755  0070                     ?_Mf500PiccSelect:	
  4756                           ; 1 bytes @ 0x0
  4757                           
  4758  0070                     ?_Mf500PiccLoadKey:	
  4759                           ; 1 bytes @ 0x0
  4760                           
  4761  0070                     ?_memcpy:	
  4762                           ; 1 bytes @ 0x0
  4763                           
  4764  0070                     ?_find_project_key:	
  4765                           ; 1 bytes @ 0x0
  4766                           
  4767  0070                     ?_check_user_card:	
  4768                           ; 1 bytes @ 0x0
  4769                           
  4770  0070                     ?_read_card_content:	
  4771                           ; 1 bytes @ 0x0
  4772                           
  4773  0070                     ?_rfcard:	
  4774                           ; 1 bytes @ 0x0
  4775                           
  4776  0070                     ?_read_id:	
  4777                           ; 1 bytes @ 0x0
  4778                           
  4779  0070                     ?_same_id:	
  4780                           ; 1 bytes @ 0x0
  4781                           
  4782  0070                     ?_checkpsw_super:	
  4783                           ; 1 bytes @ 0x0
  4784                           
  4785  0070                     ?_checkpsw:	
  4786                           ; 1 bytes @ 0x0
  4787                           
  4788  0070                     ?_rece_byte:	
  4789                           ; 1 bytes @ 0x0
  4790                           
  4791  0070                     ?_ds1302_read_byte:	
  4792                           ; 1 bytes @ 0x0
  4793                           
  4794  0070                     ?_ds1302_read:	
  4795                           ; 1 bytes @ 0x0
  4796                           
  4797  0070                     ?_GetRC500:	
  4798                           ; 1 bytes @ 0x0
  4799                           
  4800  0070                     ?_ReadRC:	
  4801                           ; 1 bytes @ 0x0
  4802                           
  4803  0070                     ?_PcdRfReset:	
  4804                           ; 1 bytes @ 0x0
  4805                           
  4806  0070                     ?_PcdReset:	
  4807                           ; 1 bytes @ 0x0
  4808                           
  4809  0070                     ?_RC500Config:	
  4810                           ; 1 bytes @ 0x0
  4811                           
  4812  0070                     ?_RC500OutSelect:	
  4813                           ; 1 bytes @ 0x0
  4814                           
  4815  0070                     ?_PcdSingleResponseCmd:	
  4816                           ; 1 bytes @ 0x0
  4817                           
  4818  0070                     ?_Mf500HostCodeKey:	
  4819                           ; 1 bytes @ 0x0
  4820                           
  4821  0070                     ?_main:	
  4822                           ; 1 bytes @ 0x0
  4823                           
  4824  0070                     ?___awdiv:	
  4825                           ; 2 bytes @ 0x0
  4826                           
  4827  0070                     find_project_key@data:	
  4828                           ; 2 bytes @ 0x0
  4829                           
  4830  0070                     checksum@length:	
  4831                           ; 1 bytes @ 0x0
  4832                           
  4833  0070                     rece_byte@read_data:	
  4834                           ; 1 bytes @ 0x0
  4835                           
  4836  0070                     send_byte@write_data:	
  4837                           ; 1 bytes @ 0x0
  4838                           
  4839  0070                     read_eeprom@address:	
  4840                           ; 1 bytes @ 0x0
  4841                           
  4842  0070                     ds1302_write_byte@data:	
  4843                           ; 1 bytes @ 0x0
  4844                           
  4845  0070                     ds1302_read_byte@data:	
  4846                           ; 1 bytes @ 0x0
  4847                           
  4848  0070                     PutRC500@data:	
  4849                           ; 1 bytes @ 0x0
  4850                           
  4851  0070                     GetRC500@address:	
  4852                           ; 1 bytes @ 0x0
  4853                           
  4854  0070                     Mf500HostCodeKey@coded:	
  4855                           ; 1 bytes @ 0x0
  4856                           
  4857  0070                     uart1_send_byte@data:	
  4858                           ; 1 bytes @ 0x0
  4859                           
  4860  0070                     delay_ms@count:	
  4861                           ; 1 bytes @ 0x0
  4862                           
  4863  0070                     ___awdiv@divisor:	
  4864                           ; 2 bytes @ 0x0
  4865                           
  4866  0070                     memcpy@s1:	
  4867                           ; 2 bytes @ 0x0
  4868                           
  4869                           
  4870                           ; 2 bytes @ 0x0
  4871  0070                     	ds	1
  4872  0071                     ??_checksum:	
  4873  0071                     ??_PutRC500:	
  4874                           ; 0 bytes @ 0x1
  4875                           
  4876  0071                     ??_Mf500HostCodeKey:	
  4877                           ; 0 bytes @ 0x1
  4878                           
  4879  0071                     rece_byte@i:	
  4880                           ; 0 bytes @ 0x1
  4881                           
  4882  0071                     send_byte@i:	
  4883                           ; 1 bytes @ 0x1
  4884                           
  4885  0071                     ds1302_write_byte@i:	
  4886                           ; 1 bytes @ 0x1
  4887                           
  4888  0071                     ds1302_read_byte@i:	
  4889                           ; 1 bytes @ 0x1
  4890                           
  4891  0071                     PutRC500@address:	
  4892                           ; 1 bytes @ 0x1
  4893                           
  4894  0071                     GetRC500@tmp:	
  4895                           ; 1 bytes @ 0x1
  4896                           
  4897  0071                     find_project_key@i:	
  4898                           ; 1 bytes @ 0x1
  4899                           
  4900                           
  4901                           ; 2 bytes @ 0x1
  4902  0071                     	ds	1
  4903  0072                     ??_delay_ms:	
  4904  0072                     ??_read_24c02:	
  4905                           ; 0 bytes @ 0x2
  4906                           
  4907  0072                     ??_ds1302_read:	
  4908                           ; 0 bytes @ 0x2
  4909                           
  4910  0072                     ?_ds1302_write:	
  4911                           ; 0 bytes @ 0x2
  4912                           
  4913  0072                     ?_WriteRC:	
  4914                           ; 0 bytes @ 0x2
  4915                           
  4916  0072                     ??_ReadRC:	
  4917                           ; 0 bytes @ 0x2
  4918                           
  4919  0072                     ??_ISR_RC500:	
  4920                           ; 0 bytes @ 0x2
  4921                           
  4922  0072                     ??_PcdReset:	
  4923                           ; 0 bytes @ 0x2
  4924                           
  4925  0072                     checksum@sum:	
  4926                           ; 0 bytes @ 0x2
  4927                           
  4928  0072                     read_24c02@address:	
  4929                           ; 1 bytes @ 0x2
  4930                           
  4931  0072                     ds1302_read@address:	
  4932                           ; 1 bytes @ 0x2
  4933                           
  4934  0072                     ds1302_write@data:	
  4935                           ; 1 bytes @ 0x2
  4936                           
  4937  0072                     WriteRC@data:	
  4938                           ; 1 bytes @ 0x2
  4939                           
  4940  0072                     Mf500HostCodeKey@an:	
  4941                           ; 1 bytes @ 0x2
  4942                           
  4943  0072                     delay_ms@i:	
  4944                           ; 1 bytes @ 0x2
  4945                           
  4946  0072                     ___awdiv@dividend:	
  4947                           ; 2 bytes @ 0x2
  4948                           
  4949  0072                     memcpy@n:	
  4950                           ; 2 bytes @ 0x2
  4951                           
  4952                           
  4953                           ; 2 bytes @ 0x2
  4954  0072                     	ds	1
  4955  0073                     ??_ds1302_write:	
  4956  0073                     ??_WriteRC:	
  4957                           ; 0 bytes @ 0x3
  4958                           
  4959  0073                     checksum@data:	
  4960                           ; 0 bytes @ 0x3
  4961                           
  4962  0073                     read_24c02@data:	
  4963                           ; 1 bytes @ 0x3
  4964                           
  4965  0073                     ds1302_read@temp:	
  4966                           ; 1 bytes @ 0x3
  4967                           
  4968  0073                     ds1302_write@address:	
  4969                           ; 1 bytes @ 0x3
  4970                           
  4971  0073                     ReadRC@address:	
  4972                           ; 1 bytes @ 0x3
  4973                           
  4974  0073                     Mf500HostCodeKey@uncoded:	
  4975                           ; 1 bytes @ 0x3
  4976                           
  4977  0073                     PcdReset@count01:	
  4978                           ; 1 bytes @ 0x3
  4979                           
  4980                           
  4981                           ; 2 bytes @ 0x3
  4982  0073                     	ds	1
  4983  0074                     ??_ds1302_set_time:	
  4984  0074                     ??_ds1302_get_time:	
  4985                           ; 0 bytes @ 0x4
  4986                           
  4987  0074                     ??_memcpy:	
  4988                           ; 0 bytes @ 0x4
  4989                           
  4990  0074                     ??_check_user_card:	
  4991                           ; 0 bytes @ 0x4
  4992                           
  4993  0074                     ??___awdiv:	
  4994                           ; 0 bytes @ 0x4
  4995                           
  4996  0074                     check_user_card@i:	
  4997                           ; 0 bytes @ 0x4
  4998                           
  4999  0074                     checksum@i:	
  5000                           ; 1 bytes @ 0x4
  5001                           
  5002  0074                     WriteRC@address:	
  5003                           ; 1 bytes @ 0x4
  5004                           
  5005  0074                     Mf500HostCodeKey@hn:	
  5006                           ; 1 bytes @ 0x4
  5007                           
  5008  0074                     ___awdiv@counter:	
  5009                           ; 1 bytes @ 0x4
  5010                           
  5011  0074                     delay_ms@j:	
  5012                           ; 1 bytes @ 0x4
  5013                           
  5014  0074                     memcpy@s:	
  5015                           ; 2 bytes @ 0x4
  5016                           
  5017                           
  5018                           ; 2 bytes @ 0x4
  5019  0074                     	ds	1
  5020  0075                     ?_SetBitMask:	
  5021  0075                     ?_ClearBitMask:	
  5022                           ; 0 bytes @ 0x5
  5023                           
  5024  0075                     ?_PcdSetTmo:	
  5025                           ; 0 bytes @ 0x5
  5026                           
  5027  0075                     ??_RC500OutSelect:	
  5028                           ; 0 bytes @ 0x5
  5029                           
  5030  0075                     SetBitMask@mask:	
  5031                           ; 0 bytes @ 0x5
  5032                           
  5033  0075                     ClearBitMask@mask:	
  5034                           ; 1 bytes @ 0x5
  5035                           
  5036  0075                     RC500OutSelect@type:	
  5037                           ; 1 bytes @ 0x5
  5038                           
  5039  0075                     Mf500HostCodeKey@ln:	
  5040                           ; 1 bytes @ 0x5
  5041                           
  5042  0075                     ___awdiv@sign:	
  5043                           ; 1 bytes @ 0x5
  5044                           
  5045  0075                     PcdSetTmo@tmoLength:	
  5046                           ; 1 bytes @ 0x5
  5047                           
  5048  0075                     PcdReset@count02:	
  5049                           ; 2 bytes @ 0x5
  5050                           
  5051                           
  5052                           ; 2 bytes @ 0x5
  5053  0075                     	ds	1
  5054  0076                     ?_write_24c02:	
  5055  0076                     ??_handle_beep:	
  5056                           ; 0 bytes @ 0x6
  5057                           
  5058  0076                     ??_deal_floor:	
  5059                           ; 0 bytes @ 0x6
  5060                           
  5061  0076                     ??_SetBitMask:	
  5062                           ; 0 bytes @ 0x6
  5063                           
  5064  0076                     ??_ClearBitMask:	
  5065                           ; 0 bytes @ 0x6
  5066                           
  5067  0076                     write_24c02@data:	
  5068                           ; 0 bytes @ 0x6
  5069                           
  5070  0076                     SetBitMask@tmp:	
  5071                           ; 1 bytes @ 0x6
  5072                           
  5073  0076                     ClearBitMask@tmp:	
  5074                           ; 1 bytes @ 0x6
  5075                           
  5076  0076                     ISR_RC500@irqMask:	
  5077                           ; 1 bytes @ 0x6
  5078                           
  5079  0076                     Mf500HostCodeKey@cnt:	
  5080                           ; 1 bytes @ 0x6
  5081                           
  5082  0076                     memcpy@d:	
  5083                           ; 1 bytes @ 0x6
  5084                           
  5085  0076                     ___awdiv@quotient:	
  5086                           ; 1 bytes @ 0x6
  5087                           
  5088                           
  5089                           ; 2 bytes @ 0x6
  5090  0076                     	ds	1
  5091  0077                     ??_write_24c02:	
  5092  0077                     ??_PcdSetTmo:	
  5093                           ; 0 bytes @ 0x7
  5094                           
  5095  0077                     write_24c02@address:	
  5096                           ; 0 bytes @ 0x7
  5097                           
  5098  0077                     SetBitMask@reg:	
  5099                           ; 1 bytes @ 0x7
  5100                           
  5101  0077                     ClearBitMask@reg:	
  5102                           ; 1 bytes @ 0x7
  5103                           
  5104  0077                     ISR_RC500@oldPageSelect:	
  5105                           ; 1 bytes @ 0x7
  5106                           
  5107  0077                     PcdReset@ret_status:	
  5108                           ; 1 bytes @ 0x7
  5109                           
  5110  0077                     memcpy@d1:	
  5111                           ; 1 bytes @ 0x7
  5112                           
  5113                           
  5114                           ; 1 bytes @ 0x7
  5115  0077                     	ds	1
  5116  0078                     ??_handle_config:	
  5117  0078                     ??_FlushFIFO:	
  5118                           ; 0 bytes @ 0x8
  5119                           
  5120  0078                     ??_PcdRfReset:	
  5121                           ; 0 bytes @ 0x8
  5122                           
  5123  0078                     ISR_RC500@cnt:	
  5124                           ; 0 bytes @ 0x8
  5125                           
  5126  0078                     PcdReset@i:	
  5127                           ; 1 bytes @ 0x8
  5128                           
  5129                           
  5130                           ; 2 bytes @ 0x8
  5131  0078                     	ds	1
  5132  0079                     PcdRfReset@ms:	
  5133  0079                     ISR_RC500@nbytes:	
  5134                           ; 1 bytes @ 0x9
  5135                           
  5136                           
  5137                           ; 1 bytes @ 0x9
  5138  0079                     	ds	1
  5139  007A                     ISR_RC500@irqBits:	
  5140  007A                     PcdRfReset@i:	
  5141                           ; 1 bytes @ 0xA
  5142                           
  5143                           
  5144                           ; 2 bytes @ 0xA
  5145  007A                     	ds	1
  5146  007B                     ??_Mf500PiccLoadKey:	
  5147  007B                     ??_PcdSingleResponseCmd:	
  5148                           ; 0 bytes @ 0xB
  5149                           
  5150  007B                     ?_Mf500PiccRead:	
  5151                           ; 0 bytes @ 0xB
  5152                           
  5153  007B                     ?_Mf500PiccWrite:	
  5154                           ; 1 bytes @ 0xB
  5155                           
  5156  007B                     ?_Mf500PiccAuthState:	
  5157                           ; 1 bytes @ 0xB
  5158                           
  5159  007B                     ?_Mf500PiccCommonRequest:	
  5160                           ; 1 bytes @ 0xB
  5161                           
  5162  007B                     ?_Mf500PiccCascAnticoll:	
  5163                           ; 1 bytes @ 0xB
  5164                           
  5165  007B                     ?_Mf500PiccCascSelect:	
  5166                           ; 1 bytes @ 0xB
  5167                           
  5168  007B                     Mf500PiccCommonRequest@atq:	
  5169                           ; 1 bytes @ 0xB
  5170                           
  5171  007B                     Mf500PiccCascAnticoll@bcnt:	
  5172                           ; 1 bytes @ 0xB
  5173                           
  5174  007B                     Mf500PiccCascSelect@snr:	
  5175                           ; 1 bytes @ 0xB
  5176                           
  5177  007B                     Mf500PiccAuthState@snr:	
  5178                           ; 1 bytes @ 0xB
  5179                           
  5180  007B                     Mf500PiccLoadKey@ret_status:	
  5181                           ; 1 bytes @ 0xB
  5182                           
  5183  007B                     Mf500PiccRead@data1:	
  5184                           ; 1 bytes @ 0xB
  5185                           
  5186  007B                     Mf500PiccWrite@data1:	
  5187                           ; 1 bytes @ 0xB
  5188                           
  5189                           
  5190                           ; 1 bytes @ 0xB
  5191  007B                     	ds	1
  5192  007C                     ??_Mf500PiccRead:	
  5193  007C                     ??_Mf500PiccWrite:	
  5194                           ; 0 bytes @ 0xC
  5195                           
  5196  007C                     ??_RC500Config:	
  5197                           ; 0 bytes @ 0xC
  5198                           
  5199  007C                     ??_Mf500PiccCommonRequest:	
  5200                           ; 0 bytes @ 0xC
  5201                           
  5202  007C                     ??_Mf500PiccCascSelect:	
  5203                           ; 0 bytes @ 0xC
  5204                           
  5205  007C                     RC500Config@ret_status:	
  5206                           ; 0 bytes @ 0xC
  5207                           
  5208  007C                     Mf500PiccCommonRequest@req_code:	
  5209                           ; 1 bytes @ 0xC
  5210                           
  5211  007C                     Mf500PiccCascAnticoll@snr:	
  5212                           ; 1 bytes @ 0xC
  5213                           
  5214  007C                     Mf500PiccCascSelect@select_code:	
  5215                           ; 1 bytes @ 0xC
  5216                           
  5217  007C                     Mf500PiccAuthState@block:	
  5218                           ; 1 bytes @ 0xC
  5219                           
  5220  007C                     Mf500PiccLoadKey@keys:	
  5221                           ; 1 bytes @ 0xC
  5222                           
  5223  007C                     Mf500PiccWrite@addr:	
  5224                           ; 1 bytes @ 0xC
  5225                           
  5226                           
  5227                           ; 1 bytes @ 0xC
  5228  007C                     	ds	1
  5229  007D                     ??_Mf500PiccAuthState:	
  5230  007D                     ??_checkpsw:	
  5231                           ; 0 bytes @ 0xD
  5232                           
  5233  007D                     ?_Mf500PiccAnticoll:	
  5234                           ; 0 bytes @ 0xD
  5235                           
  5236  007D                     RC500Config@i:	
  5237                           ; 1 bytes @ 0xD
  5238                           
  5239  007D                     Mf500PiccCommonRequest@ret_status:	
  5240                           ; 1 bytes @ 0xD
  5241                           
  5242  007D                     Mf500PiccAnticoll@snr:	
  5243                           ; 1 bytes @ 0xD
  5244                           
  5245  007D                     Mf500PiccCascSelect@ret_status:	
  5246                           ; 1 bytes @ 0xD
  5247                           
  5248  007D                     Mf500PiccWrite@ret_status:	
  5249                           ; 1 bytes @ 0xD
  5250                           
  5251                           
  5252                           ; 1 bytes @ 0xD
  5253  007D                     	ds	1
  5254  007E                     ??_Mf500PiccRequest:	
  5255  007E                     ??_Mf500PiccAnticoll:	
  5256                           ; 0 bytes @ 0xE
  5257                           
  5258  007E                     ??_Mf500PiccSelect:	
  5259                           ; 0 bytes @ 0xE
  5260                           
  5261  007E                     ??_rfcard:	
  5262                           ; 0 bytes @ 0xE
  5263                           
  5264  007E                     ??_read_id:	
  5265                           ; 0 bytes @ 0xE
  5266                           
  5267  007E                     ??_checkpsw_super:	
  5268                           ; 0 bytes @ 0xE
  5269                           
  5270  007E                     ??_handle_ic_card:	
  5271                           ; 0 bytes @ 0xE
  5272                           
  5273  007E                     ??_init_hardware:	
  5274                           ; 0 bytes @ 0xE
  5275                           
  5276  007E                     ??_main:	
  5277                           ; 0 bytes @ 0xE
  5278                           
  5279                           
  5280                           	psect	cstackBANK0
  5281  0020                     __pcstackBANK0:	
  5282                           ; 0 bytes @ 0xE
  5283                           
  5284  0020                     deal_floor@data:	
  5285  0020                     PcdSingleResponseCmd@count01:	
  5286                           ; 1 bytes @ 0x0
  5287                           
  5288  0020                     handle_config@tmp_buffer:	
  5289                           ; 2 bytes @ 0x0
  5290                           
  5291                           
  5292                           ; 6 bytes @ 0x0
  5293  0020                     	ds	1
  5294  0021                     deal_floor@i:	
  5295                           
  5296                           ; 1 bytes @ 0x1
  5297  0021                     	ds	1
  5298  0022                     PcdSingleResponseCmd@count02:	
  5299  0022                     deal_floor@floor:	
  5300                           ; 2 bytes @ 0x2
  5301                           
  5302                           
  5303                           ; 8 bytes @ 0x2
  5304  0022                     	ds	2
  5305  0024                     PcdSingleResponseCmd@lastBits:	
  5306                           
  5307                           ; 1 bytes @ 0x4
  5308  0024                     	ds	1
  5309  0025                     PcdSingleResponseCmd@cmd:	
  5310                           
  5311                           ; 1 bytes @ 0x5
  5312  0025                     	ds	1
  5313  0026                     handle_config@report_the_loss_count:	
  5314  0026                     PcdSingleResponseCmd@irqEn:	
  5315                           ; 1 bytes @ 0x6
  5316                           
  5317                           
  5318                           ; 1 bytes @ 0x6
  5319  0026                     	ds	1
  5320  0027                     PcdSingleResponseCmd@waitFor:	
  5321  0027                     handle_config@i:	
  5322                           ; 1 bytes @ 0x7
  5323                           
  5324                           
  5325                           ; 2 bytes @ 0x7
  5326  0027                     	ds	1
  5327  0028                     PcdSingleResponseCmd@ret_status:	
  5328                           
  5329                           ; 1 bytes @ 0x8
  5330  0028                     	ds	1
  5331  0029                     PcdSingleResponseCmd@tmpStatus:	
  5332                           
  5333                           ; 1 bytes @ 0x9
  5334  0029                     	ds	1
  5335  002A                     ??_Mf500PiccCascAnticoll:	
  5336  002A                     ?_Mf500PiccRequest:	
  5337                           ; 0 bytes @ 0xA
  5338                           
  5339  002A                     Mf500PiccRequest@atq:	
  5340                           ; 1 bytes @ 0xA
  5341                           
  5342  002A                     Mf500PiccSelect@snr:	
  5343                           ; 1 bytes @ 0xA
  5344                           
  5345  002A                     Mf500PiccAuthState@auth_mode:	
  5346                           ; 1 bytes @ 0xA
  5347                           
  5348  002A                     Mf500PiccRead@addr:	
  5349                           ; 1 bytes @ 0xA
  5350                           
  5351                           
  5352                           ; 1 bytes @ 0xA
  5353  002A                     	ds	1
  5354  002B                     Mf500PiccRequest@req_code:	
  5355  002B                     Mf500PiccAuthState@ret_status:	
  5356                           ; 1 bytes @ 0xB
  5357                           
  5358  002B                     Mf500PiccRead@ret_status:	
  5359                           ; 1 bytes @ 0xB
  5360                           
  5361                           
  5362                           ; 1 bytes @ 0xB
  5363  002B                     	ds	1
  5364  002C                     Mf500PiccRead@i:	
  5365                           
  5366                           ; 1 bytes @ 0xC
  5367  002C                     	ds	1
  5368  002D                     ??_read_card_content:	
  5369                           
  5370                           ; 0 bytes @ 0xD
  5371  002D                     	ds	1
  5372  002E                     Mf500PiccCascAnticoll@select_code:	
  5373  002E                     read_card_content@data:	
  5374                           ; 1 bytes @ 0xE
  5375                           
  5376                           
  5377                           ; 16 bytes @ 0xE
  5378  002E                     	ds	1
  5379  002F                     Mf500PiccCascAnticoll@snr_crc:	
  5380                           
  5381                           ; 1 bytes @ 0xF
  5382  002F                     	ds	1
  5383  0030                     Mf500PiccCascAnticoll@snr_check:	
  5384                           
  5385                           ; 1 bytes @ 0x10
  5386  0030                     	ds	1
  5387  0031                     Mf500PiccCascAnticoll@dummyShift2:	
  5388                           
  5389                           ; 1 bytes @ 0x11
  5390  0031                     	ds	1
  5391  0032                     Mf500PiccCascAnticoll@dummyShift1:	
  5392                           
  5393                           ; 1 bytes @ 0x12
  5394  0032                     	ds	1
  5395  0033                     Mf500PiccCascAnticoll@complete:	
  5396                           
  5397                           ; 1 bytes @ 0x13
  5398  0033                     	ds	1
  5399  0034                     Mf500PiccCascAnticoll@byteOffset:	
  5400                           
  5401                           ; 1 bytes @ 0x14
  5402  0034                     	ds	1
  5403  0035                     Mf500PiccCascAnticoll@snr_in:	
  5404                           
  5405                           ; 4 bytes @ 0x15
  5406  0035                     	ds	4
  5407  0039                     Mf500PiccCascAnticoll@nbytes:	
  5408                           
  5409                           ; 1 bytes @ 0x19
  5410  0039                     	ds	1
  5411  003A                     Mf500PiccCascAnticoll@ret_status:	
  5412                           
  5413                           ; 1 bytes @ 0x1A
  5414  003A                     	ds	1
  5415  003B                     Mf500PiccCascAnticoll@nbits:	
  5416                           
  5417                           ; 1 bytes @ 0x1B
  5418  003B                     	ds	1
  5419  003C                     Mf500PiccCascAnticoll@i:	
  5420                           
  5421                           ; 1 bytes @ 0x1C
  5422  003C                     	ds	1
  5423  003D                     Mf500PiccAnticoll@bcnt:	
  5424                           
  5425                           ; 1 bytes @ 0x1D
  5426  003D                     	ds	1
  5427  003E                     rfcard@ret:	
  5428  003E                     read_card_content@user_count:	
  5429                           ; 1 bytes @ 0x1E
  5430                           
  5431                           
  5432                           ; 2 bytes @ 0x1E
  5433  003E                     	ds	2
  5434  0040                     read_card_content@i:	
  5435                           
  5436                           ; 1 bytes @ 0x20
  5437  0040                     	ds	1
  5438  0041                     read_card_content@ret:	
  5439                           
  5440                           ; 1 bytes @ 0x21
  5441  0041                     	ds	1
  5442  0042                     main@pwd:	
  5443                           
  5444                           ; 1 bytes @ 0x22
  5445  0042                     	ds	1
  5446  0043                     main@i:	
  5447                           
  5448                           ; 1 bytes @ 0x23
  5449  0043                     	ds	1
  5450  0044                     main@i_954:	
  5451                           
  5452                           ; 2 bytes @ 0x24
  5453  0044                     	ds	2
  5454  0046                     main@j:	
  5455                           
  5456                           ; 1 bytes @ 0x26
  5457  0046                     	ds	1
  5458                           
  5459                           	psect	text1
  5460  106B                     __ptext1:	
  5461 ;; *************** function _init_hardware *****************
  5462 ;; Defined at:
  5463 ;;		line 247 in file "../../source/main/main.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;		None
  5466 ;; Auto vars:     Size  Location     Type
  5467 ;;		None
  5468 ;; Return value:  Size  Location     Type
  5469 ;;		None               void
  5470 ;; Registers used:
  5471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5472 ;; Tracked objects:
  5473 ;;		On entry : 17F/0
  5474 ;;		On exit  : 1F/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;Total ram usage:        0 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; Hardware stack levels required when called:    6
  5484 ;; This function calls:
  5485 ;;		_RC500Config
  5486 ;;		_RC500OutSelect
  5487 ;;		_init_beep
  5488 ;;		_init_ds1302
  5489 ;;		_init_i2c
  5490 ;;		_init_interrupt
  5491 ;;		_init_led
  5492 ;;		_init_mfrc500
  5493 ;;		_init_osc
  5494 ;;		_init_port
  5495 ;;		_init_timer1
  5496 ;;		_init_uart1
  5497 ;;		_init_uart2
  5498 ;; This function is called by:
  5499 ;;		_main
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           
  5504                           ;psect for function _init_hardware
  5505  106B                     _init_hardware:	
  5506                           
  5507                           ;main.c: 251: init_osc();
  5508                           
  5509                           ;incstack = 0
  5510                           ; Regs used in _init_hardware: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5511  106B  20C1  3190         	fcall	_init_osc
  5512                           
  5513                           ;main.c: 252: init_port();
  5514  106D  20C5  3190         	fcall	_init_port
  5515                           
  5516                           ;main.c: 253: init_led();
  5517  106F  20AB  3190         	fcall	_init_led
  5518                           
  5519                           ;main.c: 254: init_timer1();
  5520  1071  20CC  3190         	fcall	_init_timer1
  5521                           
  5522                           ;main.c: 255: init_beep();
  5523  1073  208A  3190         	fcall	_init_beep
  5524                           
  5525                           ;main.c: 256: init_uart1();
  5526  1075  20D5  3190         	fcall	_init_uart1
  5527                           
  5528                           ;main.c: 257: init_uart2();
  5529  1077  20E6  3190         	fcall	_init_uart2
  5530                           
  5531                           ;main.c: 258: init_ds1302();
  5532  1079  208E  3190         	fcall	_init_ds1302
  5533                           
  5534                           ;main.c: 259: init_i2c();
  5535  107B  20A2  3190         	fcall	_init_i2c
  5536                           
  5537                           ;main.c: 260: init_interrupt();
  5538  107D  20A8  3190         	fcall	_init_interrupt
  5539                           
  5540                           ;main.c: 261: init_mfrc500();
  5541  107F  20B2               	fcall	_init_mfrc500
  5542                           
  5543                           ;main.c: 262: RC500Config();
  5544  1080  3197  271B  3190   	fcall	_RC500Config
  5545                           
  5546                           ;main.c: 263: RC500OutSelect(0x02);
  5547  1083  3002               	movlw	2
  5548  1084  20FB               	fcall	_RC500OutSelect
  5549  1085  0064               	clrwdt	;# 
  5550                           
  5551                           ;main.c: 265: RB4 = 0x01;
  5552  1086  0020               	movlb	0	; select bank0
  5553  1087  160D               	bsf	13,4	;volatile
  5554                           
  5555                           ;main.c: 266: RB5 = 0x01;
  5556  1088  168D               	bsf	13,5	;volatile
  5557  1089  0008               	return
  5558  108A                     __end_of_init_hardware:	
  5559  108A                     __ptext12:	
  5560 ;; *************** function _init_beep *****************
  5561 ;; Defined at:
  5562 ;;		line 53 in file "../../source/driver/beep.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;		None
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;		None
  5567 ;; Return value:  Size  Location     Type
  5568 ;;		None               void
  5569 ;; Registers used:
  5570 ;;		None
  5571 ;; Tracked objects:
  5572 ;;		On entry : 17F/1
  5573 ;;		On exit  : 17F/0
  5574 ;;		Unchanged: 160/0
  5575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;Total ram usage:        0 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    1
  5583 ;; This function calls:
  5584 ;;		Nothing
  5585 ;; This function is called by:
  5586 ;;		_init_hardware
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           
  5591                           ;psect for function _init_beep
  5592  108A                     _init_beep:	
  5593                           
  5594                           ;beep.c: 57: (TRISCbits.TRISC5) = 0x00;
  5595                           
  5596                           ;incstack = 0
  5597                           ; Regs used in _init_beep: []
  5598  108A  128E               	bcf	14,5	;volatile
  5599                           
  5600                           ;beep.c: 58: (RC5 = 0x01);
  5601  108B  0020               	movlb	0	; select bank0
  5602  108C  168E               	bsf	14,5	;volatile
  5603  108D  0008               	return
  5604  108E                     __end_of_init_beep:	
  5605  108E                     __ptext11:	
  5606 ;; *************** function _init_ds1302 *****************
  5607 ;; Defined at:
  5608 ;;		line 44 in file "../../source/driver/ds1302.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;		None
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;		None
  5613 ;; Return value:  Size  Location     Type
  5614 ;;		None               void
  5615 ;; Registers used:
  5616 ;;		wreg
  5617 ;; Tracked objects:
  5618 ;;		On entry : 1F/1
  5619 ;;		On exit  : 1F/1
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5626 ;;Total ram usage:        0 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:    1
  5629 ;; This function calls:
  5630 ;;		Nothing
  5631 ;; This function is called by:
  5632 ;;		_init_hardware
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           
  5637                           ;psect for function _init_ds1302
  5638  108E                     _init_ds1302:	
  5639                           
  5640                           ;ds1302.c: 48: (RC0) = 0x00;
  5641                           
  5642                           ;incstack = 0
  5643                           ; Regs used in _init_ds1302: [wreg]
  5644  108E  0020               	movlb	0	; select bank0
  5645  108F  100E               	bcf	14,0	;volatile
  5646                           
  5647                           ;ds1302.c: 49: (RC2) = 0x01;
  5648  1090  150E               	bsf	14,2	;volatile
  5649                           
  5650                           ;ds1302.c: 50: (RC1) = 0x01;
  5651  1091  148E               	bsf	14,1	;volatile
  5652                           
  5653                           ;ds1302.c: 51: (TRISCbits.TRISC0) = 0x00;
  5654  1092  0021               	movlb	1	; select bank1
  5655  1093  100E               	bcf	14,0	;volatile
  5656                           
  5657                           ;ds1302.c: 52: (TRISCbits.TRISC2) = 0x00;
  5658  1094  110E               	bcf	14,2	;volatile
  5659                           
  5660                           ;ds1302.c: 53: (TRISCbits.TRISC1) = 0x00;
  5661  1095  108E               	bcf	14,1	;volatile
  5662                           
  5663                           ;ds1302.c: 56: year = 0x08;
  5664  1096  3008               	movlw	8
  5665  1097  0020               	movlb	0	; select bank0
  5666  1098  00EF               	movwf	_year
  5667                           
  5668                           ;ds1302.c: 57: month = 0x08;
  5669  1099  00EE               	movwf	_month
  5670                           
  5671                           ;ds1302.c: 58: day = 0x08;
  5672  109A  00EC               	movwf	_day
  5673                           
  5674                           ;ds1302.c: 59: hour = 0x08;
  5675  109B  00ED               	movwf	_hour
  5676                           
  5677                           ;ds1302.c: 60: minute = 0x08;
  5678  109C  0021               	movlb	1	; select bank1
  5679  109D  00E6               	movwf	_minute^(0+128)
  5680                           
  5681                           ;ds1302.c: 61: second = 0x08;
  5682  109E  00E7               	movwf	_second^(0+128)
  5683                           
  5684                           ;ds1302.c: 62: week = 0x01;
  5685  109F  01E8               	clrf	_week^(0+128)
  5686  10A0  0AE8               	incf	_week^(0+128),f
  5687  10A1  0008               	return
  5688  10A2                     __end_of_init_ds1302:	
  5689  10A2                     __ptext10:	
  5690 ;; *************** function _init_i2c *****************
  5691 ;; Defined at:
  5692 ;;		line 45 in file "../../source/driver/24c02.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;		None
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;		None
  5697 ;; Return value:  Size  Location     Type
  5698 ;;		None               void
  5699 ;; Registers used:
  5700 ;;		None
  5701 ;; Tracked objects:
  5702 ;;		On entry : 1F/1
  5703 ;;		On exit  : 1F/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;Total ram usage:        0 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    1
  5713 ;; This function calls:
  5714 ;;		Nothing
  5715 ;; This function is called by:
  5716 ;;		_init_hardware
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           
  5721                           ;psect for function _init_i2c
  5722  10A2                     _init_i2c:	
  5723                           
  5724                           ;24c02.c: 49: (TRISCbits.TRISC3) = 0x00;
  5725                           
  5726                           ;incstack = 0
  5727                           ; Regs used in _init_i2c: []
  5728  10A2  118E               	bcf	14,3	;volatile
  5729                           
  5730                           ;24c02.c: 50: (TRISCbits.TRISC4) = 0x00;
  5731  10A3  120E               	bcf	14,4	;volatile
  5732                           
  5733                           ;24c02.c: 52: RC3 = 0x01;
  5734  10A4  0020               	movlb	0	; select bank0
  5735  10A5  158E               	bsf	14,3	;volatile
  5736                           
  5737                           ;24c02.c: 53: RC4 = 0x01;
  5738  10A6  160E               	bsf	14,4	;volatile
  5739  10A7  0008               	return
  5740  10A8                     __end_of_init_i2c:	
  5741  10A8                     __ptext9:	
  5742 ;; *************** function _init_interrupt *****************
  5743 ;; Defined at:
  5744 ;;		line 217 in file "../../source/driver/interrupt.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;		None
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;		None               void
  5751 ;; Registers used:
  5752 ;;		None
  5753 ;; Tracked objects:
  5754 ;;		On entry : 1F/0
  5755 ;;		On exit  : 1F/0
  5756 ;;		Unchanged: 1F/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;Total ram usage:        0 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    1
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_init_hardware
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _init_interrupt
  5774  10A8                     _init_interrupt:	
  5775                           
  5776                           ;interrupt.c: 221: PEIE = 0x01;
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in _init_interrupt: []
  5780  10A8  170B               	bsf	11,6	;volatile
  5781                           
  5782                           ;interrupt.c: 222: GIE = 0x01;
  5783  10A9  178B               	bsf	11,7	;volatile
  5784  10AA  0008               	return
  5785  10AB                     __end_of_init_interrupt:	
  5786  10AB                     __ptext8:	
  5787 ;; *************** function _init_led *****************
  5788 ;; Defined at:
  5789 ;;		line 44 in file "../../source/driver/led.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;		None
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;		None
  5794 ;; Return value:  Size  Location     Type
  5795 ;;		None               void
  5796 ;; Registers used:
  5797 ;;		None
  5798 ;; Tracked objects:
  5799 ;;		On entry : 17F/8
  5800 ;;		On exit  : 17F/0
  5801 ;;		Unchanged: 160/0
  5802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;Total ram usage:        0 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    1
  5810 ;; This function calls:
  5811 ;;		Nothing
  5812 ;; This function is called by:
  5813 ;;		_init_hardware
  5814 ;; This function uses a non-reentrant model
  5815 ;;
  5816                           
  5817                           
  5818                           ;psect for function _init_led
  5819  10AB                     _init_led:	
  5820                           
  5821                           ;led.c: 48: (TRISAbits.TRISA0) = 0x00;
  5822                           
  5823                           ;incstack = 0
  5824                           ; Regs used in _init_led: []
  5825  10AB  0021               	movlb	1	; select bank1
  5826  10AC  100C               	bcf	12,0	;volatile
  5827                           
  5828                           ;led.c: 49: (TRISAbits.TRISA1) = 0x00;
  5829  10AD  108C               	bcf	12,1	;volatile
  5830                           
  5831                           ;led.c: 50: (RA0 = 0x01);
  5832  10AE  0020               	movlb	0	; select bank0
  5833  10AF  140C               	bsf	12,0	;volatile
  5834                           
  5835                           ;led.c: 51: (RA1 = 0x01);
  5836  10B0  148C               	bsf	12,1	;volatile
  5837  10B1  0008               	return
  5838  10B2                     __end_of_init_led:	
  5839  10B2                     __ptext7:	
  5840 ;; *************** function _init_mfrc500 *****************
  5841 ;; Defined at:
  5842 ;;		line 55 in file "../../source/driver/mfrc500.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;		None
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;		None               void
  5849 ;; Registers used:
  5850 ;;		wreg
  5851 ;; Tracked objects:
  5852 ;;		On entry : 1F/0
  5853 ;;		On exit  : 1F/2
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;Total ram usage:        0 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    1
  5863 ;; This function calls:
  5864 ;;		Nothing
  5865 ;; This function is called by:
  5866 ;;		_init_hardware
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           
  5871                           ;psect for function _init_mfrc500
  5872  10B2                     _init_mfrc500:	
  5873                           
  5874                           ;mfrc500.c: 59: (TRISEbits.TRISE3) = 0x00;
  5875                           
  5876                           ;incstack = 0
  5877                           ; Regs used in _init_mfrc500: [wreg]
  5878  10B2  0021               	movlb	1	; select bank1
  5879  10B3  1190               	bcf	16,3	;volatile
  5880                           
  5881                           ;mfrc500.c: 60: (TRISEbits.TRISE4) = 0x00;
  5882  10B4  1210               	bcf	16,4	;volatile
  5883                           
  5884                           ;mfrc500.c: 61: (TRISEbits.TRISE6) = 0x00;
  5885  10B5  1310               	bcf	16,6	;volatile
  5886                           
  5887                           ;mfrc500.c: 62: (TRISEbits.TRISE7) = 0x00;
  5888  10B6  1390               	bcf	16,7	;volatile
  5889                           
  5890                           ;mfrc500.c: 63: (TRISEbits.TRISE5) = 0x00;
  5891  10B7  1290               	bcf	16,5	;volatile
  5892                           
  5893                           ;mfrc500.c: 64: TRISD = 0xFF;
  5894  10B8  30FF               	movlw	255
  5895  10B9  008F               	movwf	15	;volatile
  5896                           
  5897                           ;mfrc500.c: 66: (LATEbits.LATE3 = 0x00);
  5898  10BA  0022               	movlb	2	; select bank2
  5899  10BB  1190               	bcf	16,3	;volatile
  5900                           
  5901                           ;mfrc500.c: 67: (LATEbits.LATE4 = 0x01);
  5902  10BC  1610               	bsf	16,4	;volatile
  5903                           
  5904                           ;mfrc500.c: 68: (LATEbits.LATE5 = 0x01);
  5905  10BD  1690               	bsf	16,5	;volatile
  5906                           
  5907                           ;mfrc500.c: 69: (LATEbits.LATE6 = 0x01);
  5908  10BE  1710               	bsf	16,6	;volatile
  5909                           
  5910                           ;mfrc500.c: 70: (LATEbits.LATE7 = 0x00);
  5911  10BF  1390               	bcf	16,7	;volatile
  5912  10C0  0008               	return
  5913  10C1                     __end_of_init_mfrc500:	
  5914  10C1                     __ptext6:	
  5915 ;; *************** function _init_osc *****************
  5916 ;; Defined at:
  5917 ;;		line 206 in file "../../source/main/main.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;		None
  5920 ;; Auto vars:     Size  Location     Type
  5921 ;;		None
  5922 ;; Return value:  Size  Location     Type
  5923 ;;		None               void
  5924 ;; Registers used:
  5925 ;;		wreg
  5926 ;; Tracked objects:
  5927 ;;		On entry : 17F/0
  5928 ;;		On exit  : 17F/1
  5929 ;;		Unchanged: 160/0
  5930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5935 ;;Total ram usage:        0 bytes
  5936 ;; Hardware stack levels used:    1
  5937 ;; Hardware stack levels required when called:    1
  5938 ;; This function calls:
  5939 ;;		Nothing
  5940 ;; This function is called by:
  5941 ;;		_init_hardware
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           
  5946                           ;psect for function _init_osc
  5947  10C1                     _init_osc:	
  5948                           
  5949                           ;main.c: 210: OSCCON = 0x70;
  5950                           
  5951                           ;incstack = 0
  5952                           ; Regs used in _init_osc: [wreg]
  5953  10C1  3070               	movlw	112
  5954  10C2  0021               	movlb	1	; select bank1
  5955  10C3  0099               	movwf	25	;volatile
  5956  10C4  0008               	return
  5957  10C5                     __end_of_init_osc:	
  5958  10C5                     __ptext5:	
  5959 ;; *************** function _init_port *****************
  5960 ;; Defined at:
  5961 ;;		line 225 in file "../../source/main/main.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;		None
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;		None
  5966 ;; Return value:  Size  Location     Type
  5967 ;;		None               void
  5968 ;; Registers used:
  5969 ;;		status,2
  5970 ;; Tracked objects:
  5971 ;;		On entry : 17F/1
  5972 ;;		On exit  : 17F/8
  5973 ;;		Unchanged: 160/0
  5974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;Total ram usage:        0 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    1
  5982 ;; This function calls:
  5983 ;;		Nothing
  5984 ;; This function is called by:
  5985 ;;		_init_hardware
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           
  5990                           ;psect for function _init_port
  5991  10C5                     _init_port:	
  5992                           
  5993                           ;main.c: 229: ANSELA = 0x00;
  5994                           
  5995                           ;incstack = 0
  5996                           ; Regs used in _init_port: [status,2]
  5997  10C5  0023               	movlb	3	; select bank3
  5998  10C6  018C               	clrf	12	;volatile
  5999                           
  6000                           ;main.c: 230: ANSELE = 0x00;
  6001  10C7  0190               	clrf	16	;volatile
  6002                           
  6003                           ;main.c: 231: ANSELF = 0x00;
  6004  10C8  0028               	movlb	8	; select bank8
  6005  10C9  018C               	clrf	12	;volatile
  6006                           
  6007                           ;main.c: 232: ANSELG = 0x00;
  6008  10CA  018D               	clrf	13	;volatile
  6009  10CB  0008               	return
  6010  10CC                     __end_of_init_port:	
  6011  10CC                     __ptext4:	
  6012 ;; *************** function _init_timer1 *****************
  6013 ;; Defined at:
  6014 ;;		line 38 in file "../../source/driver/timer.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;		None               void
  6021 ;; Registers used:
  6022 ;;		wreg
  6023 ;; Tracked objects:
  6024 ;;		On entry : 17F/0
  6025 ;;		On exit  : 17F/1
  6026 ;;		Unchanged: 160/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;Total ram usage:        0 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    1
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_init_hardware
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           
  6043                           ;psect for function _init_timer1
  6044  10CC                     _init_timer1:	
  6045                           
  6046                           ;timer.c: 42: TMR1H = 0xE0;
  6047                           
  6048                           ;incstack = 0
  6049                           ; Regs used in _init_timer1: [wreg]
  6050  10CC  30E0               	movlw	224
  6051  10CD  0097               	movwf	23	;volatile
  6052                           
  6053                           ;timer.c: 43: TMR1L = 0xC0;
  6054  10CE  30C0               	movlw	192
  6055  10CF  0096               	movwf	22	;volatile
  6056                           
  6057                           ;timer.c: 44: T1CON = 0x41;
  6058  10D0  3041               	movlw	65
  6059  10D1  0098               	movwf	24	;volatile
  6060                           
  6061                           ;timer.c: 49: TMR1IE = 0x01;
  6062  10D2  0021               	movlb	1	; select bank1
  6063  10D3  1411               	bsf	17,0	;volatile
  6064  10D4  0008               	return
  6065  10D5                     __end_of_init_timer1:	
  6066  10D5                     __ptext3:	
  6067 ;; *************** function _init_uart1 *****************
  6068 ;; Defined at:
  6069 ;;		line 56 in file "../../source/driver/uart.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;		None
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;		None
  6074 ;; Return value:  Size  Location     Type
  6075 ;;		None               void
  6076 ;; Registers used:
  6077 ;;		wreg, status,2
  6078 ;; Tracked objects:
  6079 ;;		On entry : 17F/0
  6080 ;;		On exit  : 17F/1
  6081 ;;		Unchanged: 160/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;Total ram usage:        0 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    1
  6090 ;; This function calls:
  6091 ;;		Nothing
  6092 ;; This function is called by:
  6093 ;;		_init_hardware
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           
  6098                           ;psect for function _init_uart1
  6099  10D5                     _init_uart1:	
  6100                           
  6101                           ;uart.c: 60: SP1BRGL = 51;
  6102                           
  6103                           ;incstack = 0
  6104                           ; Regs used in _init_uart1: [wreg+status,2]
  6105  10D5  3033               	movlw	51
  6106  10D6  0023               	movlb	3	; select bank3
  6107  10D7  009B               	movwf	27	;volatile
  6108                           
  6109                           ;uart.c: 61: SP1BRGH = 0;
  6110  10D8  019C               	clrf	28	;volatile
  6111                           
  6112                           ;uart.c: 62: BAUD1CON = 0x08;
  6113  10D9  3008               	movlw	8
  6114  10DA  009F               	movwf	31	;volatile
  6115                           
  6116                           ;uart.c: 72: (TRISCbits.TRISC6) = 0x00;
  6117  10DB  0021               	movlb	1	; select bank1
  6118  10DC  130E               	bcf	14,6	;volatile
  6119                           
  6120                           ;uart.c: 73: (TRISCbits.TRISC7) = 0x01;
  6121  10DD  178E               	bsf	14,7	;volatile
  6122                           
  6123                           ;uart.c: 74: TX1STA = 0x20;
  6124  10DE  3020               	movlw	32
  6125  10DF  0023               	movlb	3	; select bank3
  6126  10E0  009E               	movwf	30	;volatile
  6127                           
  6128                           ;uart.c: 83: RC1STA = 0x90;
  6129  10E1  3090               	movlw	144
  6130  10E2  009D               	movwf	29	;volatile
  6131                           
  6132                           ;uart.c: 84: RC1IE = 0x01;
  6133  10E3  0021               	movlb	1	; select bank1
  6134  10E4  1691               	bsf	17,5	;volatile
  6135  10E5  0008               	return
  6136  10E6                     __end_of_init_uart1:	
  6137  10E6                     __ptext2:	
  6138 ;; *************** function _init_uart2 *****************
  6139 ;; Defined at:
  6140 ;;		line 197 in file "../../source/driver/uart.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;		None
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;		None
  6145 ;; Return value:  Size  Location     Type
  6146 ;;		None               void
  6147 ;; Registers used:
  6148 ;;		wreg, status,2
  6149 ;; Tracked objects:
  6150 ;;		On entry : 1F/1
  6151 ;;		On exit  : 1F/1
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;Total ram usage:        0 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    1
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_init_hardware
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           
  6169                           ;psect for function _init_uart2
  6170  10E6                     _init_uart2:	
  6171                           
  6172                           ;uart.c: 201: (TRISGbits.TRISG0) = 0x00;
  6173                           
  6174                           ;incstack = 0
  6175                           ; Regs used in _init_uart2: [wreg+status,2]
  6176  10E6  0026               	movlb	6	; select bank6
  6177  10E7  100D               	bcf	13,0	;volatile
  6178                           
  6179                           ;uart.c: 202: (LATGbits.LATG0 = 0);
  6180  10E8  0027               	movlb	7	; select bank7
  6181  10E9  100D               	bcf	13,0	;volatile
  6182                           
  6183                           ;uart.c: 203: SP2BRGL = 51;
  6184  10EA  3033               	movlw	51
  6185  10EB  0029               	movlb	9	; select bank9
  6186  10EC  0093               	movwf	19	;volatile
  6187                           
  6188                           ;uart.c: 204: SP2BRGH = 0;
  6189  10ED  0194               	clrf	20	;volatile
  6190                           
  6191                           ;uart.c: 205: BAUD2CON = 0x08;
  6192  10EE  3008               	movlw	8
  6193  10EF  0097               	movwf	23	;volatile
  6194                           
  6195                           ;uart.c: 215: (TRISGbits.TRISG1) = 0x00;
  6196  10F0  0026               	movlb	6	; select bank6
  6197  10F1  108D               	bcf	13,1	;volatile
  6198                           
  6199                           ;uart.c: 216: (TRISGbits.TRISG2) = 0x01;
  6200  10F2  150D               	bsf	13,2	;volatile
  6201                           
  6202                           ;uart.c: 217: TX2STA = 0x20;
  6203  10F3  3020               	movlw	32
  6204  10F4  0029               	movlb	9	; select bank9
  6205  10F5  0096               	movwf	22	;volatile
  6206                           
  6207                           ;uart.c: 226: RC2STA = 0x90;
  6208  10F6  3090               	movlw	144
  6209  10F7  0095               	movwf	21	;volatile
  6210                           
  6211                           ;uart.c: 227: RC2IE = 0x01;
  6212  10F8  0021               	movlb	1	; select bank1
  6213  10F9  1694               	bsf	20,5	;volatile
  6214  10FA  0008               	return
  6215  10FB                     __end_of_init_uart2:	
  6216  10FB                     __ptext13:	
  6217 ;; *************** function _RC500OutSelect *****************
  6218 ;; Defined at:
  6219 ;;		line 402 in file "../../source/driver/mfrc500.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;  type            1    wreg     unsigned char 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;  type            1    5[COMMON] unsigned char 
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  1    wreg      unsigned char 
  6226 ;; Registers used:
  6227 ;;		wreg, status,2, status,0, pclath, cstack
  6228 ;; Tracked objects:
  6229 ;;		On entry : 1C/2
  6230 ;;		On exit  : 1F/1
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6237 ;;Total ram usage:        1 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; Hardware stack levels required when called:    3
  6240 ;; This function calls:
  6241 ;;		_WriteRC
  6242 ;; This function is called by:
  6243 ;;		_init_hardware
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           
  6248                           ;psect for function _RC500OutSelect
  6249  10FB                     _RC500OutSelect:	
  6250                           
  6251                           ;incstack = 0
  6252                           ; Regs used in _RC500OutSelect: [wreg+status,2+status,0+pclath+cstack]
  6253                           ;RC500OutSelect@type stored from wreg
  6254  10FB  00F5               	movwf	RC500OutSelect@type
  6255                           
  6256                           ;mfrc500.c: 406: WriteRC(0x26, type & 0x7);
  6257  10FC  00F2               	movwf	WriteRC@data
  6258  10FD  3007               	movlw	7
  6259  10FE  05F2               	andwf	WriteRC@data,f
  6260  10FF  3026               	movlw	38
  6261  1100  3197  2F67         	ljmp	_WriteRC
  6262  1102                     __end_of_RC500OutSelect:	
  6263                           
  6264                           	psect	text16
  6265  1270                     __ptext16:	
  6266 ;; *************** function _PcdReset *****************
  6267 ;; Defined at:
  6268 ;;		line 294 in file "../../source/driver/mfrc500.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  i               2    8[COMMON] unsigned int 
  6273 ;;  count02         2    5[COMMON] unsigned int 
  6274 ;;  count01         2    3[COMMON] unsigned int 
  6275 ;;  ret_status      1    7[COMMON] unsigned char 
  6276 ;; Return value:  Size  Location     Type
  6277 ;;                  1    wreg      unsigned char 
  6278 ;; Registers used:
  6279 ;;		wreg, status,2, status,0, pclath, cstack
  6280 ;; Tracked objects:
  6281 ;;		On entry : 1F/2
  6282 ;;		On exit  : 1C/0
  6283 ;;		Unchanged: 0/0
  6284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6288 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;Total ram usage:        8 bytes
  6290 ;; Hardware stack levels used:    1
  6291 ;; Hardware stack levels required when called:    2
  6292 ;; This function calls:
  6293 ;;		_GetRC500
  6294 ;;		_PutRC500
  6295 ;; This function is called by:
  6296 ;;		_RC500Config
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           
  6301                           ;psect for function _PcdReset
  6302  1270                     _PcdReset:	
  6303                           
  6304                           ;mfrc500.c: 299: unsigned int i, count01, count02;
  6305                           ;mfrc500.c: 300: char ret_status = 0;
  6306                           
  6307                           ;incstack = 0
  6308                           ; Regs used in _PcdReset: [wreg+status,2+status,0+pclath+cstack]
  6309  1270  01F7               	clrf	PcdReset@ret_status
  6310                           
  6311                           ;mfrc500.c: 302: (LATEbits.LATE3 = 0x00);
  6312  1271  1190               	bcf	16,3	;volatile
  6313                           
  6314                           ;mfrc500.c: 304: for (i = 0; i < 16500; i++)
  6315  1272  01F8               	clrf	PcdReset@i
  6316  1273  01F9               	clrf	PcdReset@i+1
  6317  1274                     l910:	
  6318  1274  0064               	clrwdt	;# 
  6319  1275  0AF8               	incf	PcdReset@i,f
  6320  1276  1903               	skipnz
  6321  1277  0AF9               	incf	PcdReset@i+1,f
  6322  1278  3040               	movlw	64
  6323  1279  0279               	subwf	PcdReset@i+1,w
  6324  127A  3074               	movlw	116
  6325  127B  1903               	skipnz
  6326  127C  0278               	subwf	PcdReset@i,w
  6327  127D  1C03               	skipc
  6328  127E  2A74               	goto	l910
  6329                           
  6330                           ;mfrc500.c: 307: }
  6331                           ;mfrc500.c: 308: (LATEbits.LATE3 = 0x01);
  6332  127F  0022               	movlb	2	; select bank2
  6333  1280  1590               	bsf	16,3	;volatile
  6334                           
  6335                           ;mfrc500.c: 310: for (i = 0; i < 1650; i++)
  6336  1281  01F8               	clrf	PcdReset@i
  6337  1282  01F9               	clrf	PcdReset@i+1
  6338  1283                     l912:	
  6339  1283  0064               	clrwdt	;# 
  6340  1284  0AF8               	incf	PcdReset@i,f
  6341  1285  1903               	skipnz
  6342  1286  0AF9               	incf	PcdReset@i+1,f
  6343  1287  3006               	movlw	6
  6344  1288  0279               	subwf	PcdReset@i+1,w
  6345  1289  3072               	movlw	114
  6346  128A  1903               	skipnz
  6347  128B  0278               	subwf	PcdReset@i,w
  6348  128C  1C03               	skipc
  6349  128D  2A83               	goto	l912
  6350                           
  6351                           ;mfrc500.c: 313: }
  6352                           ;mfrc500.c: 314: (LATEbits.LATE3 = 0x00);
  6353  128E  0022               	movlb	2	; select bank2
  6354  128F  1190               	bcf	16,3	;volatile
  6355                           
  6356                           ;mfrc500.c: 315: (LATEbits.LATE4 = 0x00);
  6357  1290  1210               	bcf	16,4	;volatile
  6358                           
  6359                           ;mfrc500.c: 316: (LATEbits.LATE5 = 0x01);
  6360  1291  1690               	bsf	16,5	;volatile
  6361                           
  6362                           ;mfrc500.c: 317: (LATEbits.LATE6 = 0x01);
  6363  1292  1710               	bsf	16,6	;volatile
  6364                           
  6365                           ;mfrc500.c: 318: (LATEbits.LATE7 = 0x00);
  6366  1293  1390               	bcf	16,7	;volatile
  6367                           
  6368                           ;mfrc500.c: 320: count01 = 10000;
  6369  1294  3010               	movlw	16
  6370  1295  00F3               	movwf	PcdReset@count01
  6371  1296  3027               	movlw	39
  6372  1297  00F4               	movwf	PcdReset@count01+1
  6373                           
  6374                           ;mfrc500.c: 321: count02 = 21;
  6375  1298  3015               	movlw	21
  6376  1299  00F5               	movwf	PcdReset@count02
  6377  129A  01F6               	clrf	PcdReset@count02+1
  6378  129B                     l6588:	
  6379                           ;mfrc500.c: 323: while (((GetRC500(0x01) & 0x3F) != 0x3F) && (!(count02 == 0)))
  6380                           
  6381  129B  3001               	movlw	1
  6382  129C  23E5  3192         	fcall	_GetRC500
  6383  129E  00F2               	movwf	??_PcdReset
  6384  129F  393F               	andlw	63
  6385  12A0  3A3F               	xorlw	63
  6386  12A1  1903               	skipnz
  6387  12A2  2ABB               	goto	l6598
  6388  12A3  0876               	movf	PcdReset@count02+1,w
  6389  12A4  0475               	iorwf	PcdReset@count02,w
  6390                           
  6391                           ;mfrc500.c: 324: {
  6392                           ;mfrc500.c: 325: count01--;
  6393  12A5  3001               	movlw	1
  6394  12A6  1903               	btfsc	3,2
  6395  12A7  2ABC               	goto	L2
  6396  12A8  02F3               	subwf	PcdReset@count01,f
  6397                           
  6398                           ;mfrc500.c: 326: if (count01 == 0)
  6399  12A9  240F  3192         	fcall	PL28	;call to abstracted procedure
  6400  12AB  1D03               	skipz
  6401  12AC  2A9B               	goto	l6588
  6402                           
  6403                           ;mfrc500.c: 327: {
  6404                           ;mfrc500.c: 328: count01 = 10000;
  6405  12AD  3010               	movlw	16
  6406                           
  6407                           ;mfrc500.c: 329: count02--;
  6408  12AE  23FB  3192         	fcall	PL12	;call to abstracted procedure
  6409  12B0  2A9B               	goto	l6588
  6410  12B1                     l921:	
  6411  12B1  0064               	clrwdt	;# 
  6412                           
  6413                           ;mfrc500.c: 336: count01--;
  6414  12B2  3001               	movlw	1
  6415  12B3  02F3               	subwf	PcdReset@count01,f
  6416                           
  6417                           ;mfrc500.c: 337: if (count01 == 0)
  6418  12B4  240F  3192         	fcall	PL28	;call to abstracted procedure
  6419  12B6  1D03               	skipz
  6420  12B7  2ABB               	goto	l6598
  6421                           
  6422                           ;mfrc500.c: 338: {
  6423                           ;mfrc500.c: 339: count01 = 10000;
  6424  12B8  3010               	movlw	16
  6425                           
  6426                           ;mfrc500.c: 340: count02--;
  6427  12B9  23FB  3192         	fcall	PL12	;call to abstracted procedure
  6428  12BB                     l6598:	
  6429  12BB  3001               	movlw	1
  6430  12BC                     L2:	
  6431  12BC  23E5  3192         	fcall	_GetRC500
  6432  12BE  393F               	andlw	63
  6433  12BF  1903               	btfsc	3,2
  6434  12C0  2AC5               	goto	l6602
  6435  12C1  0876               	movf	PcdReset@count02+1,w
  6436  12C2  0475               	iorwf	PcdReset@count02,w
  6437  12C3  1D03               	skipz
  6438  12C4  2AB1               	goto	l921
  6439  12C5                     l6602:	
  6440                           
  6441                           ;mfrc500.c: 341: }
  6442                           ;mfrc500.c: 342: };
  6443                           ;mfrc500.c: 343: if (count02 == 0)
  6444  12C5  0876               	movf	PcdReset@count02+1,w
  6445  12C6  0475               	iorwf	PcdReset@count02,w
  6446  12C7  1D03               	skipz
  6447  12C8  2ACB               	goto	l6606
  6448                           
  6449                           ;mfrc500.c: 344: {
  6450                           ;mfrc500.c: 345: ret_status = (-25);
  6451  12C9  30E7               	movlw	231
  6452  12CA  00F7               	movwf	PcdReset@ret_status
  6453  12CB                     l6606:	
  6454                           
  6455                           ;mfrc500.c: 346: }
  6456                           ;mfrc500.c: 348: if (ret_status == 0)
  6457  12CB  08F7               	movf	PcdReset@ret_status,f
  6458  12CC  1D03               	skipz
  6459  12CD  2AE2               	goto	l6620
  6460                           
  6461                           ;mfrc500.c: 349: {
  6462                           ;mfrc500.c: 350: PutRC500(0x00, 0x80);
  6463  12CE  3080               	movlw	128
  6464  12CF  00F0               	movwf	PutRC500@data
  6465  12D0  3000               	movlw	0
  6466  12D1  23CC  3192         	fcall	_PutRC500
  6467                           
  6468                           ;mfrc500.c: 351: (LATEbits.LATE7 = 0x00);
  6469  12D3  0022               	movlb	2	; select bank2
  6470  12D4  1390               	bcf	16,7	;volatile
  6471                           
  6472                           ;mfrc500.c: 352: ret_status = GetRC500(0x01);
  6473  12D5  3001               	movlw	1
  6474  12D6  23E5  3192         	fcall	_GetRC500
  6475  12D8  00F7               	movwf	PcdReset@ret_status
  6476                           
  6477                           ;mfrc500.c: 353: if (ret_status != 0)
  6478  12D9  0877               	movf	PcdReset@ret_status,w
  6479  12DA  1903               	btfsc	3,2
  6480  12DB  2ADF               	goto	l6618
  6481                           
  6482                           ;mfrc500.c: 354: {
  6483                           ;mfrc500.c: 355: ret_status = (-26);
  6484  12DC  30E6               	movlw	230
  6485  12DD  00F7               	movwf	PcdReset@ret_status
  6486                           
  6487                           ;mfrc500.c: 356: }
  6488  12DE  2AE2               	goto	l6620
  6489  12DF                     l6618:	
  6490  12DF  3000               	movlw	0
  6491                           
  6492                           ;mfrc500.c: 357: else
  6493                           ;mfrc500.c: 358: {
  6494                           ;mfrc500.c: 359: PutRC500(0x00, 0x00);
  6495  12E0  01F0               	clrf	PutRC500@data
  6496  12E1  23CC               	fcall	_PutRC500
  6497  12E2                     l6620:	
  6498                           
  6499                           ;mfrc500.c: 360: }
  6500                           ;mfrc500.c: 361: }
  6501                           ;mfrc500.c: 363: return ret_status;
  6502  12E2  0877               	movf	PcdReset@ret_status,w
  6503  12E3  0008               	return
  6504  12E4                     __end_of_PcdReset:	
  6505  12E4                     __ptext44:	
  6506 ;; *************** function _ISR_RC500 *****************
  6507 ;; Defined at:
  6508 ;;		line 221 in file "../../source/driver/mfrc500.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;		None
  6511 ;; Auto vars:     Size  Location     Type
  6512 ;;  irqBits         1   10[COMMON] unsigned char 
  6513 ;;  nbytes          1    9[COMMON] unsigned char 
  6514 ;;  cnt             1    8[COMMON] unsigned char 
  6515 ;;  oldPageSelec    1    7[COMMON] unsigned char 
  6516 ;;  irqMask         1    6[COMMON] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;		None               void
  6519 ;; Registers used:
  6520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 1F/0
  6523 ;;		On exit  : 1E/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;Total ram usage:        9 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    2
  6533 ;; This function calls:
  6534 ;;		_GetRC500
  6535 ;;		_PutRC500
  6536 ;; This function is called by:
  6537 ;;		_PcdSingleResponseCmd
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           
  6542                           ;psect for function _ISR_RC500
  6543  12E4                     _ISR_RC500:	
  6544                           
  6545                           ;mfrc500.c: 225: unsigned char irqBits;
  6546                           ;mfrc500.c: 226: unsigned char irqMask;
  6547                           ;mfrc500.c: 227: unsigned char oldPageSelect;
  6548                           ;mfrc500.c: 228: unsigned char nbytes;
  6549                           ;mfrc500.c: 229: unsigned char cnt;
  6550                           ;mfrc500.c: 231: if (MpIsrInfo && MpIsrOut && MpIsrIn)
  6551                           
  6552                           ;incstack = 0
  6553                           ; Regs used in _ISR_RC500: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6554  12E4  0854               	movf	_MpIsrInfo,w
  6555  12E5  1903               	btfsc	3,2
  6556  12E6  0008               	return
  6557  12E7  0855               	movf	_MpIsrOut,w
  6558  12E8  1903               	btfsc	3,2
  6559  12E9  0008               	return
  6560  12EA  0853               	movf	_MpIsrIn,w
  6561  12EB  1903               	btfsc	3,2
  6562  12EC  0008               	return
  6563                           
  6564                           ;mfrc500.c: 232: {
  6565                           ;mfrc500.c: 233: oldPageSelect = GetRC500(0x00);
  6566  12ED  3000               	movlw	0
  6567  12EE  23E5  3192         	fcall	_GetRC500
  6568  12F0  00F7               	movwf	ISR_RC500@oldPageSelect
  6569                           
  6570                           ;mfrc500.c: 234: PutRC500(0x00, 0x80);
  6571  12F1  3080               	movlw	128
  6572  12F2  00F0               	movwf	PutRC500@data
  6573  12F3  3000               	movlw	0
  6574  12F4  23CC  3192         	fcall	_PutRC500
  6575  12F6                     l4894:	
  6576                           ;mfrc500.c: 235: while ((GetRC500(0x03) & 0x08))
  6577                           
  6578  12F6  3003               	movlw	3
  6579  12F7  23E5  3192         	fcall	_GetRC500
  6580  12F9  3908               	andlw	8
  6581  12FA  1903               	btfsc	3,2
  6582  12FB  2BC7               	goto	l4896
  6583                           
  6584                           ;mfrc500.c: 236: {
  6585                           ;mfrc500.c: 237: irqMask = GetRC500(0x06);
  6586  12FC  3006               	movlw	6
  6587  12FD  23E5  3192         	fcall	_GetRC500
  6588  12FF  00F6               	movwf	ISR_RC500@irqMask
  6589                           
  6590                           ;mfrc500.c: 238: irqBits = GetRC500(0x07) & irqMask;
  6591  1300  3007               	movlw	7
  6592  1301  23E5  3192         	fcall	_GetRC500
  6593  1303  00FA               	movwf	ISR_RC500@irqBits
  6594  1304  0876               	movf	ISR_RC500@irqMask,w
  6595  1305  05FA               	andwf	ISR_RC500@irqBits,f
  6596                           
  6597                           ;mfrc500.c: 239: MpIsrInfo->irqSource |= irqBits;
  6598  1306  0020               	movlb	0	; select bank0
  6599  1307  0854               	movf	_MpIsrInfo,w
  6600  1308  3E06               	addlw	6
  6601  1309  0086               	movwf	6
  6602  130A  0187               	clrf	7
  6603  130B  087A               	movf	ISR_RC500@irqBits,w
  6604  130C  0481               	iorwf	1,f
  6605                           
  6606                           ;mfrc500.c: 240: if (irqBits & 0x01)
  6607  130D  1C7A               	btfss	ISR_RC500@irqBits,0
  6608  130E  2B5B               	goto	l4854
  6609                           
  6610                           ;mfrc500.c: 241: {
  6611                           ;mfrc500.c: 242: nbytes = 0x40 - GetRC500(0x04);
  6612  130F  3004               	movlw	4
  6613  1310  23E5  3192         	fcall	_GetRC500
  6614  1312  3C40               	sublw	64
  6615  1313  00F9               	movwf	ISR_RC500@nbytes
  6616                           
  6617                           ;mfrc500.c: 243: if ((MpIsrInfo->nBytesToSend - MpIsrInfo->nBytesSent) <= nbytes)
  6618  1314  2403  3192         	fcall	PL24	;call to abstracted procedure
  6619  1316  0854               	movf	_MpIsrInfo,w
  6620  1317  3E03               	addlw	3
  6621  1318  0084               	movwf	4
  6622  1319  0185               	clrf	5
  6623  131A  0800               	movf	0,w
  6624  131B  00F2               	movwf	??_ISR_RC500
  6625  131C  01F3               	clrf	??_ISR_RC500+1
  6626  131D  0873               	movf	??_ISR_RC500+1,w
  6627  131E  00F5               	movwf	??_ISR_RC500+3
  6628  131F  0801               	movf	1,w
  6629  1320  0272               	subwf	??_ISR_RC500,w
  6630  1321  00F4               	movwf	??_ISR_RC500+2
  6631  1322  1C03               	skipc
  6632  1323  03F5               	decf	??_ISR_RC500+3,f
  6633  1324  0875               	movf	??_ISR_RC500+3,w
  6634  1325  3A80               	xorlw	128
  6635  1326  3C80               	sublw	128
  6636  1327  1D03               	skipz
  6637  1328  2B2B               	goto	u4305
  6638  1329  0874               	movf	??_ISR_RC500+2,w
  6639  132A  0279               	subwf	ISR_RC500@nbytes,w
  6640  132B                     u4305:	
  6641  132B  1C03               	skipc
  6642  132C  2B3E               	goto	l4842
  6643                           
  6644                           ;mfrc500.c: 244: {
  6645                           ;mfrc500.c: 245: nbytes = MpIsrInfo->nBytesToSend - MpIsrInfo->nBytesSent;
  6646  132D  0020               	movlb	0	; select bank0
  6647  132E  0854               	movf	_MpIsrInfo,w
  6648  132F  3E03               	addlw	3
  6649  1330  0086               	movwf	6
  6650  1331  0187               	clrf	7
  6651  1332  0854               	movf	_MpIsrInfo,w
  6652  1333  3E02               	addlw	2
  6653  1334  0084               	movwf	4
  6654  1335  0185               	clrf	5
  6655  1336  0800               	movf	0,w
  6656  1337  0201               	subwf	1,w
  6657  1338  00F9               	movwf	ISR_RC500@nbytes
  6658  1339  3006               	movlw	6
  6659                           
  6660                           ;mfrc500.c: 246: PutRC500(0x06, 0x01);
  6661  133A  01F0               	clrf	PutRC500@data
  6662  133B  0AF0               	incf	PutRC500@data,f
  6663  133C  23CC  3192         	fcall	_PutRC500
  6664  133E                     l4842:	
  6665                           
  6666                           ;mfrc500.c: 247: }
  6667                           ;mfrc500.c: 248: for (cnt = 0; cnt < nbytes; cnt++)
  6668  133E  01F8               	clrf	ISR_RC500@cnt
  6669  133F                     l4850:	
  6670  133F  0879               	movf	ISR_RC500@nbytes,w
  6671  1340  0278               	subwf	ISR_RC500@cnt,w
  6672  1341  1803               	btfsc	3,0
  6673  1342  2B56               	goto	l4852
  6674                           
  6675                           ;mfrc500.c: 249: {
  6676                           ;mfrc500.c: 250: PutRC500(0x02, MpIsrOut[MpIsrInfo->nBytesSent]);
  6677  1343  0020               	movlb	0	; select bank0
  6678  1344  0854               	movf	_MpIsrInfo,w
  6679  1345  3E02               	addlw	2
  6680  1346  0086               	movwf	6
  6681  1347  0187               	clrf	7
  6682  1348  0801               	movf	1,w
  6683  1349  0755               	addwf	_MpIsrOut,w
  6684  134A  00F2               	movwf	??_ISR_RC500
  6685  134B  0086               	movwf	6
  6686  134C  0801               	movf	1,w
  6687  134D  00F0               	movwf	PutRC500@data
  6688  134E  3002               	movlw	2
  6689  134F  23CC  3192         	fcall	_PutRC500
  6690                           
  6691                           ;mfrc500.c: 251: MpIsrInfo->nBytesSent++;
  6692  1351  2403  3192         	fcall	PL24	;call to abstracted procedure
  6693  1353  0A81               	incf	1,f
  6694  1354  0AF8               	incf	ISR_RC500@cnt,f
  6695  1355  2B3F               	goto	l4850
  6696  1356                     l4852:	
  6697  1356  3007               	movlw	7
  6698                           
  6699                           ;mfrc500.c: 252: }
  6700                           ;mfrc500.c: 253: PutRC500(0x07, 0x01);
  6701  1357  01F0               	clrf	PutRC500@data
  6702  1358  0AF0               	incf	PutRC500@data,f
  6703  1359  23CC  3192         	fcall	_PutRC500
  6704  135B                     l4854:	
  6705                           
  6706                           ;mfrc500.c: 254: }
  6707                           ;mfrc500.c: 255: if (irqBits & 0x10)
  6708  135B  1E7A               	btfss	ISR_RC500@irqBits,4
  6709  135C  2B78               	goto	l4862
  6710                           
  6711                           ;mfrc500.c: 256: {
  6712                           ;mfrc500.c: 257: PutRC500(0x07, 0x10);
  6713  135D  3010               	movlw	16
  6714  135E  00F0               	movwf	PutRC500@data
  6715  135F  3007               	movlw	7
  6716  1360  23CC  3192         	fcall	_PutRC500
  6717                           
  6718                           ;mfrc500.c: 258: PutRC500(0x06, 0x82);
  6719  1362  3082               	movlw	130
  6720  1363  00F0               	movwf	PutRC500@data
  6721  1364  3006               	movlw	6
  6722  1365  23CC  3192         	fcall	_PutRC500
  6723                           
  6724                           ;mfrc500.c: 259: if (MpIsrInfo->cmd == 0x93)
  6725  1367  0020               	movlb	0	; select bank0
  6726  1368  0854               	movf	_MpIsrInfo,w
  6727  1369  0086               	movwf	6
  6728  136A  0187               	clrf	7
  6729  136B  0801               	movf	1,w
  6730  136C  3A93               	xorlw	147
  6731  136D  1D03               	skipz
  6732  136E  2B78               	goto	l4862
  6733                           
  6734                           ;mfrc500.c: 260: {
  6735                           ;mfrc500.c: 261: PutRC500(0x22, 0x02);
  6736  136F  3002               	movlw	2
  6737  1370  00F0               	movwf	PutRC500@data
  6738  1371  3022               	movlw	34
  6739  1372  23CC  3192         	fcall	_PutRC500
  6740  1374  3000               	movlw	0
  6741                           
  6742                           ;mfrc500.c: 262: PutRC500(0x00, 0x00);
  6743  1375  01F0               	clrf	PutRC500@data
  6744  1376  23CC  3192         	fcall	_PutRC500
  6745  1378                     l4862:	
  6746                           
  6747                           ;mfrc500.c: 263: }
  6748                           ;mfrc500.c: 264: }
  6749                           ;mfrc500.c: 265: if (irqBits & 0x0E)
  6750  1378  087A               	movf	ISR_RC500@irqBits,w
  6751  1379  390E               	andlw	14
  6752  137A  1903               	btfsc	3,2
  6753  137B  2BA1               	goto	l4878
  6754                           
  6755                           ;mfrc500.c: 266: {
  6756                           ;mfrc500.c: 267: nbytes = GetRC500(0x04);
  6757  137C  3004               	movlw	4
  6758  137D  23E5  3192         	fcall	_GetRC500
  6759  137F  00F9               	movwf	ISR_RC500@nbytes
  6760                           
  6761                           ;mfrc500.c: 268: for (cnt = 0; cnt < nbytes; cnt++)
  6762  1380  01F8               	clrf	ISR_RC500@cnt
  6763  1381                     l4874:	
  6764  1381  0879               	movf	ISR_RC500@nbytes,w
  6765  1382  0278               	subwf	ISR_RC500@cnt,w
  6766  1383  1803               	btfsc	3,0
  6767  1384  2B9A               	goto	l4876
  6768                           
  6769                           ;mfrc500.c: 269: {
  6770                           ;mfrc500.c: 270: MpIsrIn[MpIsrInfo->nBytesReceived] = GetRC500(0x02);
  6771  1385  0020               	movlb	0	; select bank0
  6772  1386  0854               	movf	_MpIsrInfo,w
  6773  1387  3E04               	addlw	4
  6774  1388  0086               	movwf	6
  6775  1389  0187               	clrf	7
  6776  138A  0801               	movf	1,w
  6777  138B  0753               	addwf	_MpIsrIn,w
  6778  138C  00F2               	movwf	??_ISR_RC500
  6779  138D  0086               	movwf	6
  6780  138E  3002               	movlw	2
  6781  138F  23E5  3192         	fcall	_GetRC500
  6782  1391  0081               	movwf	1
  6783                           
  6784                           ;mfrc500.c: 271: MpIsrInfo->nBytesReceived++;
  6785  1392  0020               	movlb	0	; select bank0
  6786  1393  0854               	movf	_MpIsrInfo,w
  6787  1394  3E04               	addlw	4
  6788  1395  0086               	movwf	6
  6789  1396  0187               	clrf	7
  6790  1397  0A81               	incf	1,f
  6791  1398  0AF8               	incf	ISR_RC500@cnt,f
  6792  1399  2B81               	goto	l4874
  6793  139A                     l4876:	
  6794                           
  6795                           ;mfrc500.c: 272: }
  6796                           ;mfrc500.c: 273: PutRC500(0x07, 0x0A & irqBits);
  6797  139A  087A               	movf	ISR_RC500@irqBits,w
  6798  139B  00F0               	movwf	PutRC500@data
  6799  139C  300A               	movlw	10
  6800  139D  05F0               	andwf	PutRC500@data,f
  6801  139E  3007               	movlw	7
  6802  139F  23CC  3192         	fcall	_PutRC500
  6803  13A1                     l4878:	
  6804                           
  6805                           ;mfrc500.c: 274: }
  6806                           ;mfrc500.c: 275: if (irqBits & 0x04)
  6807  13A1  1D7A               	btfss	ISR_RC500@irqBits,2
  6808  13A2  2BB9               	goto	l4888
  6809                           
  6810                           ;mfrc500.c: 276: {
  6811                           ;mfrc500.c: 277: PutRC500(0x06, 0x20);
  6812  13A3  3020               	movlw	32
  6813  13A4  00F0               	movwf	PutRC500@data
  6814  13A5  3006               	movlw	6
  6815  13A6  23CC  3192         	fcall	_PutRC500
  6816                           
  6817                           ;mfrc500.c: 278: PutRC500(0x07, 0x20);
  6818  13A8  3020               	movlw	32
  6819  13A9  00F0               	movwf	PutRC500@data
  6820  13AA  3007               	movlw	7
  6821  13AB  23CC  3192         	fcall	_PutRC500
  6822                           
  6823                           ;mfrc500.c: 279: irqBits &= ~0x20;
  6824  13AD  12FA               	bcf	ISR_RC500@irqBits,5
  6825                           
  6826                           ;mfrc500.c: 280: MpIsrInfo->irqSource &= ~0x20;
  6827  13AE  0020               	movlb	0	; select bank0
  6828  13AF  0854               	movf	_MpIsrInfo,w
  6829  13B0  3E06               	addlw	6
  6830  13B1  0086               	movwf	6
  6831  13B2  3004               	movlw	4
  6832  13B3  0187               	clrf	7
  6833  13B4  1281               	bcf	1,5
  6834                           
  6835                           ;mfrc500.c: 281: PutRC500(0x07,0x04);
  6836  13B5  00F0               	movwf	PutRC500@data
  6837  13B6  3007               	movlw	7
  6838  13B7  23CC  3192         	fcall	_PutRC500
  6839  13B9                     l4888:	
  6840                           
  6841                           ;mfrc500.c: 282: }
  6842                           ;mfrc500.c: 283: if (irqBits & 0x20)
  6843  13B9  1EFA               	btfss	ISR_RC500@irqBits,5
  6844  13BA  2AF6               	goto	l4894
  6845                           
  6846                           ;mfrc500.c: 284: {
  6847                           ;mfrc500.c: 285: PutRC500(0x07, 0x20);
  6848  13BB  3020               	movlw	32
  6849  13BC  00F0               	movwf	PutRC500@data
  6850  13BD  3007               	movlw	7
  6851  13BE  23CC  3192         	fcall	_PutRC500
  6852                           
  6853                           ;mfrc500.c: 286: MpIsrInfo->status = (-1);
  6854  13C0  0020               	movlb	0	; select bank0
  6855  13C1  0A54               	incf	_MpIsrInfo,w
  6856  13C2  0086               	movwf	6
  6857  13C3  30FF               	movlw	255
  6858  13C4  0187               	clrf	7
  6859  13C5  0081               	movwf	1
  6860  13C6  2AF6               	goto	l4894
  6861  13C7                     l4896:	
  6862                           
  6863                           ;mfrc500.c: 287: }
  6864                           ;mfrc500.c: 288: }
  6865                           ;mfrc500.c: 289: PutRC500(0x00, oldPageSelect | 0x80);
  6866  13C7  0877               	movf	ISR_RC500@oldPageSelect,w
  6867  13C8  3880               	iorlw	128
  6868  13C9  00F0               	movwf	PutRC500@data
  6869  13CA  3000               	movlw	0
  6870  13CB  2BCC               	ljmp	_PutRC500
  6871  13CC                     __end_of_ISR_RC500:	
  6872  13CC                     __ptext51:	
  6873 ;; *************** function _PutRC500 *****************
  6874 ;; Defined at:
  6875 ;;		line 74 in file "../../source/driver/mfrc500.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;  address         1    wreg     unsigned char 
  6878 ;;  data            1    0[COMMON] unsigned char 
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;  address         1    1[COMMON] unsigned char 
  6881 ;; Return value:  Size  Location     Type
  6882 ;;		None               void
  6883 ;; Registers used:
  6884 ;;		wreg, status,2
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/2
  6887 ;;		On exit  : 1F/1
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6890 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;Total ram usage:        2 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:    1
  6897 ;; This function calls:
  6898 ;;		Nothing
  6899 ;; This function is called by:
  6900 ;;		_WriteRC
  6901 ;;		_ReadRC
  6902 ;;		_ISR_RC500
  6903 ;;		_PcdReset
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           
  6908                           ;psect for function _PutRC500
  6909  13CC                     _PutRC500:	
  6910                           
  6911                           ;incstack = 0
  6912                           ; Regs used in _PutRC500: [wreg+status,2]
  6913                           ;PutRC500@address stored from wreg
  6914  13CC  00F1               	movwf	PutRC500@address
  6915                           
  6916                           ;mfrc500.c: 79: (LATEbits.LATE4 = 0x01);
  6917  13CD  0022               	movlb	2	; select bank2
  6918  13CE  1610               	bsf	16,4	;volatile
  6919                           
  6920                           ;mfrc500.c: 80: TRISD = 0x00;
  6921  13CF  0021               	movlb	1	; select bank1
  6922  13D0  018F               	clrf	15	;volatile
  6923                           
  6924                           ;mfrc500.c: 81: PORTD = address;
  6925  13D1  0871               	movf	PutRC500@address,w
  6926                           
  6927                           ;mfrc500.c: 82: (LATEbits.LATE7 = 0x01);
  6928                           
  6929                           ;mfrc500.c: 83: (LATEbits.LATE7 = 0x00);
  6930  13D2  2409               	fcall	PL26	;call to abstracted procedure
  6931                           
  6932                           ;mfrc500.c: 84: (LATEbits.LATE5 = 0x00);
  6933  13D3  1290               	bcf	16,5	;volatile
  6934                           
  6935                           ;mfrc500.c: 85: (LATEbits.LATE4 = 0x00);
  6936  13D4  1210               	bcf	16,4	;volatile
  6937                           
  6938                           ;mfrc500.c: 86: PORTD = data;
  6939  13D5  0870               	movf	PutRC500@data,w
  6940  13D6  0020               	movlb	0	; select bank0
  6941  13D7  008F               	movwf	15	;volatile
  6942                           
  6943                           ;mfrc500.c: 87: (LATEbits.LATE6 = 0x00);
  6944  13D8  0022               	movlb	2	; select bank2
  6945  13D9  1310               	bcf	16,6	;volatile
  6946                           
  6947                           ;mfrc500.c: 88: __nop();
  6948  13DA  0000               	nop
  6949                           
  6950                           ;mfrc500.c: 89: __nop();
  6951  13DB  0000               	nop
  6952                           
  6953                           ;mfrc500.c: 90: __nop();
  6954  13DC  0000               	nop
  6955                           
  6956                           ;mfrc500.c: 91: (LATEbits.LATE6 = 0x01);
  6957  13DD  0022               	movlb	2	; select bank2
  6958  13DE  1710               	bsf	16,6	;volatile
  6959                           
  6960                           ;mfrc500.c: 92: (LATEbits.LATE4 = 0x01);
  6961  13DF  1610               	bsf	16,4	;volatile
  6962                           
  6963                           ;mfrc500.c: 93: (LATEbits.LATE5 = 0x01);
  6964  13E0  1690               	bsf	16,5	;volatile
  6965                           
  6966                           ;mfrc500.c: 94: TRISD = 0xFF;
  6967  13E1  30FF               	movlw	255
  6968  13E2  0021               	movlb	1	; select bank1
  6969  13E3  008F               	movwf	15	;volatile
  6970  13E4  0008               	return
  6971  13E5                     __end_of_PutRC500:	
  6972  13E5                     __ptext48:	
  6973 ;; *************** function _GetRC500 *****************
  6974 ;; Defined at:
  6975 ;;		line 99 in file "../../source/driver/mfrc500.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  address         1    wreg     unsigned char 
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  address         1    0[COMMON] unsigned char 
  6980 ;;  tmp             1    1[COMMON] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  1    wreg      unsigned char 
  6983 ;; Registers used:
  6984 ;;		wreg, status,2
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/2
  6987 ;;		On exit  : 1F/2
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;Total ram usage:        2 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    1
  6997 ;; This function calls:
  6998 ;;		Nothing
  6999 ;; This function is called by:
  7000 ;;		_ReadRC
  7001 ;;		_ISR_RC500
  7002 ;;		_PcdReset
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           
  7007                           ;psect for function _GetRC500
  7008  13E5                     _GetRC500:	
  7009                           
  7010                           ;incstack = 0
  7011                           ; Regs used in _GetRC500: [wreg+status,2]
  7012                           ;GetRC500@address stored from wreg
  7013  13E5  00F0               	movwf	GetRC500@address
  7014                           
  7015                           ;mfrc500.c: 103: BYTE tmp;
  7016                           ;mfrc500.c: 105: (LATEbits.LATE4 = 0x01);
  7017  13E6  0022               	movlb	2	; select bank2
  7018  13E7  1610               	bsf	16,4	;volatile
  7019                           
  7020                           ;mfrc500.c: 106: TRISD = 0x00;
  7021  13E8  0021               	movlb	1	; select bank1
  7022  13E9  018F               	clrf	15	;volatile
  7023                           
  7024                           ;mfrc500.c: 107: PORTD = address;
  7025  13EA  0870               	movf	GetRC500@address,w
  7026                           
  7027                           ;mfrc500.c: 108: (LATEbits.LATE7 = 0x01);
  7028                           
  7029                           ;mfrc500.c: 109: (LATEbits.LATE7 = 0x00);
  7030  13EB  2409               	fcall	PL26	;call to abstracted procedure
  7031                           
  7032                           ;mfrc500.c: 110: TRISD = 0xFF;
  7033  13EC  30FF               	movlw	255
  7034  13ED  0021               	movlb	1	; select bank1
  7035  13EE  008F               	movwf	15	;volatile
  7036                           
  7037                           ;mfrc500.c: 111: (LATEbits.LATE5 = 0x01);
  7038  13EF  0022               	movlb	2	; select bank2
  7039  13F0  1690               	bsf	16,5	;volatile
  7040                           
  7041                           ;mfrc500.c: 112: (LATEbits.LATE4 = 0x00);
  7042  13F1  1210               	bcf	16,4	;volatile
  7043                           
  7044                           ;mfrc500.c: 113: (LATEbits.LATE6 = 0x00);
  7045  13F2  1310               	bcf	16,6	;volatile
  7046                           
  7047                           ;mfrc500.c: 114: tmp = PORTD;
  7048  13F3  0020               	movlb	0	; select bank0
  7049  13F4  080F               	movf	15,w	;volatile
  7050  13F5  00F1               	movwf	GetRC500@tmp
  7051                           
  7052                           ;mfrc500.c: 115: (LATEbits.LATE6 = 0x01);
  7053  13F6  0022               	movlb	2	; select bank2
  7054  13F7  1710               	bsf	16,6	;volatile
  7055                           
  7056                           ;mfrc500.c: 116: (LATEbits.LATE4 = 0x01);
  7057  13F8  1610               	bsf	16,4	;volatile
  7058                           
  7059                           ;mfrc500.c: 118: return tmp;
  7060  13F9  0871               	movf	GetRC500@tmp,w
  7061  13FA  0008               	return
  7062  13FB                     __end_of_GetRC500:	
  7063  13FB                     PL12:	
  7064  13FB  00F3               	movwf	PcdReset@count01
  7065  13FC  3027               	movlw	39
  7066  13FD  00F4               	movwf	PcdReset@count01+1
  7067  13FE  3001               	movlw	1
  7068  13FF  02F5               	subwf	PcdReset@count02,f
  7069  1400  3000               	movlw	0
  7070  1401  3BF6               	subwfb	PcdReset@count02+1,f
  7071  1402  0008               	return
  7072  1403                     __end_ofPL12:	
  7073  1403                     PL24:	
  7074  1403  0020               	movlb	0	; select bank0
  7075  1404  0854               	movf	_MpIsrInfo,w
  7076  1405  3E02               	addlw	2
  7077  1406  0086               	movwf	6
  7078  1407  0187               	clrf	7
  7079  1408  0008               	return
  7080  1409                     __end_ofPL24:	
  7081  1409                     PL26:	
  7082  1409  0020               	movlb	0	; select bank0
  7083  140A  008F               	movwf	15	;volatile
  7084  140B  0022               	movlb	2	; select bank2
  7085  140C  1790               	bsf	16,7	;volatile
  7086  140D  1390               	bcf	16,7	;volatile
  7087  140E  0008               	return
  7088  140F                     __end_ofPL26:	
  7089  140F                     PL28:	
  7090  140F  3000               	movlw	0
  7091  1410  3BF4               	subwfb	PcdReset@count01+1,f
  7092  1411  0874               	movf	PcdReset@count01+1,w
  7093  1412  0473               	iorwf	PcdReset@count01,w
  7094  1413  0008               	return
  7095  1414                     __end_ofPL28:	
  7096                           
  7097                           	psect	text20
  7098  081E                     __ptext20:	
  7099 ;; *************** function _read_card_content *****************
  7100 ;; Defined at:
  7101 ;;		line 144 in file "../../source/application/handle_ic_card.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;		None
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;  user_count      2   30[BANK0 ] unsigned short 
  7106 ;;  data           16   14[BANK0 ] unsigned char [16]
  7107 ;;  ret             1   33[BANK0 ] unsigned char 
  7108 ;;  i               1   32[BANK0 ] unsigned char 
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  1    wreg      unsigned char 
  7111 ;; Registers used:
  7112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 1E/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7120 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7121 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;Total ram usage:       21 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; Hardware stack levels required when called:    7
  7125 ;; This function calls:
  7126 ;;		_Mf500PiccRead
  7127 ;;		_Mf500PiccWrite
  7128 ;;		_check_user_card
  7129 ;;		_checksum
  7130 ;;		_deal_floor
  7131 ;;		_ds1302_get_time
  7132 ;;		_ds1302_set_time
  7133 ;;		_read_24c02
  7134 ;;		_uart1_send_byte
  7135 ;;		_write_24c02
  7136 ;; This function is called by:
  7137 ;;		_handle_ic_card
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           
  7142                           ;psect for function _read_card_content
  7143  081E                     _read_card_content:	
  7144                           
  7145                           ;handle_ic_card.c: 149: BYTE ret = 0x00;
  7146                           
  7147                           ;incstack = 0
  7148                           ; Regs used in _read_card_content: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7149  081E  0020               	movlb	0	; select bank0
  7150  081F  302E               	movlw	low read_card_content@data
  7151  0820  01C1               	clrf	read_card_content@ret
  7152                           
  7153                           ;handle_ic_card.c: 150: BYTE data[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      +                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  7154  0821  0086               	movwf	6
  7155  0822  3000               	movlw	high read_card_content@data
  7156  0823  0087               	movwf	7
  7157  0824  3010               	movlw	16
  7158  0825  00AD               	movwf	??_read_card_content
  7159  0826  3000               	movlw	0
  7160  0827                     u7230:	
  7161  0827  001E               	movwi fsr1++
  7162  0828  0BAD               	decfsz	??_read_card_content,f
  7163  0829  2827               	goto	u7230
  7164                           
  7165                           ;handle_ic_card.c: 220: ret = Mf500PiccRead(0x04 * sector_number + 0x00, data);
  7166  082A  302E               	movlw	read_card_content@data& (0+255)
  7167  082B  00FB               	movwf	Mf500PiccRead@data1
  7168  082C  0860               	movf	_sector_number,w
  7169  082D  0709               	addwf	9,w
  7170  082E  0709               	addwf	9,w
  7171  082F  3187  2786  3188   	fcall	_Mf500PiccRead
  7172  0832  00C1               	movwf	read_card_content@ret
  7173                           
  7174                           ;handle_ic_card.c: 221: if (ret == 0)
  7175  0833  08C1               	movf	read_card_content@ret,f
  7176  0834  1D03               	skipz
  7177  0835  2861               	goto	l6690
  7178                           
  7179                           ;handle_ic_card.c: 222: {
  7180                           ;handle_ic_card.c: 241: if (data[15] == checksum(data, 15))
  7181  0836  300F               	movlw	15
  7182  0837  00F0               	movwf	checksum@length
  7183  0838  302E               	movlw	read_card_content@data& (0+255)
  7184  0839  2685  3188         	fcall	_checksum
  7185  083B  063D               	xorwf	read_card_content@data+15,w
  7186  083C  1D03               	skipz
  7187  083D  2861               	goto	l6690
  7188                           
  7189                           ;handle_ic_card.c: 242: {
  7190                           ;handle_ic_card.c: 243: if (data[0] == 0xA0)
  7191  083E  082E               	movf	read_card_content@data,w
  7192  083F  3AA0               	xorlw	160
  7193  0840  1D03               	skipz
  7194  0841  287D               	goto	l6706
  7195                           
  7196                           ;handle_ic_card.c: 244: {
  7197                           ;handle_ic_card.c: 245: card_type = 0x03;
  7198  0842  3003               	movlw	3
  7199  0843  00D6               	movwf	_card_type
  7200                           
  7201                           ;handle_ic_card.c: 246: if (is_enable)
  7202  0844  085F               	movf	_is_enable,w
  7203  0845  1903               	btfsc	3,2
  7204  0846  2863               	goto	l6692
  7205                           
  7206                           ;handle_ic_card.c: 247: {
  7207                           ;handle_ic_card.c: 248: if (!check_user_card())
  7208  0847  25B2  3188         	fcall	_check_user_card
  7209  0849  3800               	iorlw	0
  7210  084A  1D03               	skipz
  7211  084B  2861               	goto	l6690
  7212                           
  7213                           ;handle_ic_card.c: 249: {
  7214                           ;handle_ic_card.c: 250: write_24c02(0x00, 0x55);
  7215  084C  3055               	movlw	85
  7216  084D  00F6               	movwf	write_24c02@data
  7217  084E  3000               	movlw	0
  7218  084F  23AC  3188         	fcall	_write_24c02
  7219                           
  7220                           ;handle_ic_card.c: 251: is_enable = 0x00;
  7221  0851  0020               	movlb	0	; select bank0
  7222  0852  30F0               	movlw	240
  7223  0853  01DF               	clrf	_is_enable
  7224                           
  7225                           ;handle_ic_card.c: 252: uart1_send_byte(0xF0);
  7226  0854  23A3  3188         	fcall	_uart1_send_byte
  7227                           
  7228                           ;handle_ic_card.c: 253: uart1_send_byte(0xF1);
  7229  0856  30F1               	movlw	241
  7230  0857  23A3  3188         	fcall	_uart1_send_byte
  7231                           
  7232                           ;handle_ic_card.c: 254: uart1_send_byte(0xFE);
  7233  0859  30FE               	movlw	254
  7234  085A  23A3  3188         	fcall	_uart1_send_byte
  7235                           
  7236                           ;handle_ic_card.c: 255: (RA0 = 0x01);
  7237  085C  0020               	movlb	0	; select bank0
  7238  085D  140C               	bsf	12,0	;volatile
  7239  085E                     l6684:	
  7240                           
  7241                           ;handle_ic_card.c: 256: RB4 = 0x00;
  7242  085E  120D               	bcf	13,4	;volatile
  7243                           
  7244                           ;handle_ic_card.c: 257: RB5 = 0x00;
  7245  085F  128D               	bcf	13,5	;volatile
  7246                           
  7247                           ;handle_ic_card.c: 259: }
  7248  0860  29AB               	goto	l6688
  7249  0861                     l6690:	
  7250                           
  7251                           ;handle_ic_card.c: 260: else
  7252                           ;handle_ic_card.c: 261: {
  7253                           ;handle_ic_card.c: 262: ret = 0x00;
  7254  0861  01C1               	clrf	read_card_content@ret
  7255  0862  29AE               	goto	l6890
  7256  0863                     l6692:	
  7257                           
  7258                           ;handle_ic_card.c: 265: else
  7259                           ;handle_ic_card.c: 266: {
  7260                           ;handle_ic_card.c: 267: if (!check_user_card())
  7261  0863  25B2  3188         	fcall	_check_user_card
  7262  0865  3800               	iorlw	0
  7263  0866  1D03               	skipz
  7264  0867  2861               	goto	l6690
  7265                           
  7266                           ;handle_ic_card.c: 268: {
  7267                           ;handle_ic_card.c: 269: write_24c02(0x00, 0xAA);
  7268  0868  30AA               	movlw	170
  7269  0869  00F6               	movwf	write_24c02@data
  7270  086A  3000               	movlw	0
  7271  086B  23AC  3188         	fcall	_write_24c02
  7272                           
  7273                           ;handle_ic_card.c: 270: is_enable = 0x01;
  7274  086D  0020               	movlb	0	; select bank0
  7275  086E  30F0               	movlw	240
  7276  086F  01DF               	clrf	_is_enable
  7277  0870  0ADF               	incf	_is_enable,f
  7278                           
  7279                           ;handle_ic_card.c: 271: uart1_send_byte(0xF0);
  7280  0871  23A3  3188         	fcall	_uart1_send_byte
  7281                           
  7282                           ;handle_ic_card.c: 272: uart1_send_byte(0xF1);
  7283  0873  30F1               	movlw	241
  7284  0874  23A3  3188         	fcall	_uart1_send_byte
  7285                           
  7286                           ;handle_ic_card.c: 273: uart1_send_byte(0xFF);
  7287  0876  30FF               	movlw	255
  7288  0877  23A3  3188         	fcall	_uart1_send_byte
  7289                           
  7290                           ;handle_ic_card.c: 274: RB4 = 0x01;
  7291  0879  0020               	movlb	0	; select bank0
  7292  087A  160D               	bsf	13,4	;volatile
  7293                           
  7294                           ;handle_ic_card.c: 275: RB5 = 0x01;
  7295  087B  168D               	bsf	13,5	;volatile
  7296  087C  29AB               	goto	l6688
  7297  087D                     l6706:	
  7298                           
  7299                           ;handle_ic_card.c: 284: else if (data[0] == 0xA1)
  7300  087D  082E               	movf	read_card_content@data,w
  7301  087E  3AA1               	xorlw	161
  7302  087F  1D03               	skipz
  7303  0880  2890               	goto	l6722
  7304                           
  7305                           ;handle_ic_card.c: 285: {
  7306                           ;handle_ic_card.c: 286: card_type = 0x02;
  7307  0881  3002               	movlw	2
  7308  0882  00D6               	movwf	_card_type
  7309                           
  7310                           ;handle_ic_card.c: 287: if (is_enable)
  7311  0883  085F               	movf	_is_enable,w
  7312  0884  1903               	btfsc	3,2
  7313  0885  2861               	goto	l6690
  7314                           
  7315                           ;handle_ic_card.c: 288: {
  7316                           ;handle_ic_card.c: 289: if (!check_user_card())
  7317  0886  25B2  3188         	fcall	_check_user_card
  7318  0888  3800               	iorlw	0
  7319  0889  1D03               	skipz
  7320  088A  2861               	goto	l6690
  7321                           
  7322                           ;handle_ic_card.c: 290: {
  7323                           ;handle_ic_card.c: 291: group = data[1];
  7324  088B  082F               	movf	read_card_content@data+1,w
  7325  088C  00DE               	movwf	_group
  7326                           
  7327                           ;handle_ic_card.c: 292: write_24c02(0x01, group);
  7328  088D  00F6               	movwf	write_24c02@data
  7329  088E  3001               	movlw	1
  7330  088F  29AA               	goto	L5
  7331  0890                     l6722:	
  7332                           
  7333                           ;handle_ic_card.c: 305: else if (data[0] == 0xA2)
  7334  0890  082E               	movf	read_card_content@data,w
  7335  0891  3AA2               	xorlw	162
  7336  0892  1D03               	skipz
  7337  0893  28B4               	goto	l6738
  7338                           
  7339                           ;handle_ic_card.c: 306: {
  7340                           ;handle_ic_card.c: 307: card_type = 0x06;
  7341  0894  3006               	movlw	6
  7342  0895  00D6               	movwf	_card_type
  7343                           
  7344                           ;handle_ic_card.c: 308: if (is_enable)
  7345  0896  085F               	movf	_is_enable,w
  7346  0897  1903               	btfsc	3,2
  7347  0898  2861               	goto	l6690
  7348                           
  7349                           ;handle_ic_card.c: 309: {
  7350                           ;handle_ic_card.c: 310: if (!check_user_card())
  7351  0899  25B2  3188         	fcall	_check_user_card
  7352  089B  3800               	iorlw	0
  7353  089C  1D03               	skipz
  7354  089D  2861               	goto	l6690
  7355                           
  7356                           ;handle_ic_card.c: 311: {
  7357                           ;handle_ic_card.c: 312: year = data[1];
  7358  089E  082F               	movf	read_card_content@data+1,w
  7359  089F  00EF               	movwf	_year
  7360                           
  7361                           ;handle_ic_card.c: 313: month = data[2];
  7362  08A0  0830               	movf	read_card_content@data+2,w
  7363  08A1  00EE               	movwf	_month
  7364                           
  7365                           ;handle_ic_card.c: 314: day = data[3];
  7366  08A2  0831               	movf	read_card_content@data+3,w
  7367  08A3  00EC               	movwf	_day
  7368                           
  7369                           ;handle_ic_card.c: 315: hour = data[4];
  7370  08A4  0832               	movf	read_card_content@data+4,w
  7371  08A5  00ED               	movwf	_hour
  7372                           
  7373                           ;handle_ic_card.c: 316: minute = data[5];
  7374  08A6  0833               	movf	read_card_content@data+5,w
  7375  08A7  0021               	movlb	1	; select bank1
  7376  08A8  00E6               	movwf	_minute^(0+128)
  7377                           
  7378                           ;handle_ic_card.c: 317: second = data[6];
  7379  08A9  0020               	movlb	0	; select bank0
  7380  08AA  0834               	movf	read_card_content@data+6,w
  7381  08AB  0021               	movlb	1	; select bank1
  7382  08AC  00E7               	movwf	_second^(0+128)
  7383                           
  7384                           ;handle_ic_card.c: 318: week = data[7];
  7385  08AD  0020               	movlb	0	; select bank0
  7386  08AE  0835               	movf	read_card_content@data+7,w
  7387  08AF  0021               	movlb	1	; select bank1
  7388  08B0  00E8               	movwf	_week^(0+128)
  7389                           
  7390                           ;handle_ic_card.c: 319: ds1302_set_time();
  7391  08B1  261E  3188         	fcall	_ds1302_set_time
  7392  08B3  29AB               	goto	l6688
  7393  08B4                     l6738:	
  7394                           
  7395                           ;handle_ic_card.c: 332: else if (data[0] == 0xA3)
  7396  08B4  082E               	movf	read_card_content@data,w
  7397  08B5  3AA3               	xorlw	163
  7398  08B6  1D03               	skipz
  7399  08B7  28CF               	goto	l6758
  7400                           
  7401                           ;handle_ic_card.c: 333: {
  7402                           ;handle_ic_card.c: 334: card_type = 0x04;
  7403  08B8  3004               	movlw	4
  7404  08B9  00D6               	movwf	_card_type
  7405                           
  7406                           ;handle_ic_card.c: 335: if (is_enable)
  7407  08BA  085F               	movf	_is_enable,w
  7408  08BB  1903               	btfsc	3,2
  7409  08BC  2861               	goto	l6690
  7410                           
  7411                           ;handle_ic_card.c: 336: {
  7412                           ;handle_ic_card.c: 337: if (!check_user_card())
  7413  08BD  25B2  3188         	fcall	_check_user_card
  7414  08BF  3800               	iorlw	0
  7415  08C0  1D03               	skipz
  7416  08C1  2861               	goto	l6690
  7417                           
  7418                           ;handle_ic_card.c: 338: {
  7419                           ;handle_ic_card.c: 339: uart1_send_byte(0xF0);
  7420  08C2  30F0               	movlw	240
  7421  08C3  23A3  3188         	fcall	_uart1_send_byte
  7422                           
  7423                           ;handle_ic_card.c: 340: uart1_send_byte(0xF1);
  7424  08C5  30F1               	movlw	241
  7425  08C6  23A3  3188         	fcall	_uart1_send_byte
  7426                           
  7427                           ;handle_ic_card.c: 341: uart1_send_byte(0xFC);
  7428  08C8  30FC               	movlw	252
  7429  08C9  23A3  3188         	fcall	_uart1_send_byte
  7430                           
  7431                           ;handle_ic_card.c: 342: flag_user_card = 0x01;
  7432  08CB  0020               	movlb	0	; select bank0
  7433  08CC  01DD               	clrf	_flag_user_card
  7434  08CD  0ADD               	incf	_flag_user_card,f
  7435  08CE  285E               	goto	l6684
  7436  08CF                     l6758:	
  7437                           
  7438                           ;handle_ic_card.c: 357: else if (data[0] == 0xA4)
  7439  08CF  082E               	movf	read_card_content@data,w
  7440  08D0  3AA4               	xorlw	164
  7441  08D1  1D03               	skipz
  7442  08D2  2998               	goto	l6868
  7443                           
  7444                           ;handle_ic_card.c: 358: {
  7445                           ;handle_ic_card.c: 359: card_type = 0x01;
  7446  08D3  01D6               	clrf	_card_type
  7447  08D4  0AD6               	incf	_card_type,f
  7448                           
  7449                           ;handle_ic_card.c: 360: if (is_enable)
  7450  08D5  085F               	movf	_is_enable,w
  7451  08D6  1903               	btfsc	3,2
  7452  08D7  298B               	goto	l6854
  7453                           
  7454                           ;handle_ic_card.c: 361: {
  7455                           ;handle_ic_card.c: 362: if (!check_user_card())
  7456  08D8  25B2  3188         	fcall	_check_user_card
  7457  08DA  3800               	iorlw	0
  7458  08DB  1D03               	skipz
  7459  08DC  298B               	goto	l6854
  7460                           
  7461                           ;handle_ic_card.c: 363: {
  7462                           ;handle_ic_card.c: 364: user_card[0] = data[1];
  7463  08DD  082F               	movf	read_card_content@data+1,w
  7464  08DE  0021               	movlb	1	; select bank1
  7465  08DF  00C6               	movwf	_user_card^(0+128)
  7466                           
  7467                           ;handle_ic_card.c: 365: if (user_card[0] == read_24c02(0x01))
  7468  08E0  3001               	movlw	1
  7469  08E1  2472  3188         	fcall	_read_24c02
  7470  08E3  0021               	movlb	1	; select bank1
  7471  08E4  0646               	xorwf	_user_card^(0+128),w
  7472  08E5  1D03               	skipz
  7473  08E6  3400               	retlw	0
  7474                           
  7475                           ;handle_ic_card.c: 366: {
  7476                           ;handle_ic_card.c: 367: user_card[1] = data[2];
  7477  08E7  0020               	movlb	0	; select bank0
  7478  08E8  0830               	movf	read_card_content@data+2,w
  7479  08E9  0021               	movlb	1	; select bank1
  7480  08EA  00C7               	movwf	(_user_card^(0+128)+1)
  7481                           
  7482                           ;handle_ic_card.c: 368: if (user_card[1] == 0x01)
  7483  08EB  0B47               	decfsz	(_user_card^(0+128)+1),w
  7484  08EC  290B               	goto	l6790
  7485                           
  7486                           ;handle_ic_card.c: 371: user_count = data[3] << 0x08 | data[4];
  7487  08ED  0020               	movlb	0	; select bank0
  7488  08EE  0831               	movf	read_card_content@data+3,w
  7489  08EF  00BF               	movwf	read_card_content@user_count+1
  7490  08F0  0832               	movf	read_card_content@data+4,w
  7491  08F1  00BE               	movwf	read_card_content@user_count
  7492                           
  7493                           ;handle_ic_card.c: 372: if (user_count == 0x00)
  7494  08F2  043F               	iorwf	read_card_content@user_count+1,w
  7495  08F3  1903               	btfsc	3,2
  7496                           
  7497                           ;handle_ic_card.c: 373: {
  7498                           ;handle_ic_card.c: 374: return 0x00;
  7499  08F4  3400               	retlw	0
  7500                           
  7501                           ;handle_ic_card.c: 376: else
  7502                           ;handle_ic_card.c: 377: {
  7503                           ;handle_ic_card.c: 378: user_count--;
  7504  08F5  3001               	movlw	1
  7505  08F6  02BE               	subwf	read_card_content@user_count,f
  7506  08F7  3000               	movlw	0
  7507  08F8  3BBF               	subwfb	read_card_content@user_count+1,f
  7508                           
  7509                           ;handle_ic_card.c: 379: data[3] = user_count / 256;
  7510  08F9  083F               	movf	read_card_content@user_count+1,w
  7511  08FA  00B1               	movwf	read_card_content@data+3
  7512                           
  7513                           ;handle_ic_card.c: 380: data[4] = user_count % 256;
  7514  08FB  083E               	movf	read_card_content@user_count,w
  7515  08FC  00B2               	movwf	read_card_content@data+4
  7516                           
  7517                           ;handle_ic_card.c: 381: data[15] = checksum(data, 15);
  7518  08FD  300F               	movlw	15
  7519  08FE  00F0               	movwf	checksum@length
  7520  08FF  302E               	movlw	read_card_content@data& (0+255)
  7521  0900  2685               	fcall	_checksum
  7522  0901  00BD               	movwf	read_card_content@data+15
  7523                           
  7524                           ;handle_ic_card.c: 382: Mf500PiccWrite(0x04 * sector_number + 0x00, data);
  7525  0902  302E               	movlw	read_card_content@data& (0+255)
  7526  0903  00FB               	movwf	Mf500PiccWrite@data1
  7527  0904  0860               	movf	_sector_number,w
  7528  0905  0709               	addwf	9,w
  7529  0906  0709               	addwf	9,w
  7530  0907  3194  2414  3188   	fcall	_Mf500PiccWrite
  7531  090A  295F               	goto	l6824
  7532  090B                     l6790:	
  7533                           
  7534                           ;handle_ic_card.c: 385: else if (user_card[1] == 0x02)
  7535  090B  0847               	movf	(_user_card^(0+128)+1),w
  7536  090C  3A02               	xorlw	2
  7537  090D  1D03               	skipz
  7538  090E  295B               	goto	l6822
  7539                           
  7540                           ;handle_ic_card.c: 386: {
  7541                           ;handle_ic_card.c: 387: user_card[2] = data[3];
  7542  090F  0020               	movlb	0	; select bank0
  7543  0910  0831               	movf	read_card_content@data+3,w
  7544  0911  0021               	movlb	1	; select bank1
  7545  0912  00C8               	movwf	(_user_card^(0+128)+2)
  7546                           
  7547                           ;handle_ic_card.c: 388: user_card[3] = data[4];
  7548  0913  0020               	movlb	0	; select bank0
  7549  0914  0832               	movf	read_card_content@data+4,w
  7550  0915  0021               	movlb	1	; select bank1
  7551  0916  00C9               	movwf	(_user_card^(0+128)+3)
  7552                           
  7553                           ;handle_ic_card.c: 389: user_card[4] = data[5];
  7554  0917  0020               	movlb	0	; select bank0
  7555  0918  0833               	movf	read_card_content@data+5,w
  7556  0919  0021               	movlb	1	; select bank1
  7557  091A  00CA               	movwf	(_user_card^(0+128)+4)
  7558                           
  7559                           ;handle_ic_card.c: 390: user_card[5] = data[6];
  7560  091B  0020               	movlb	0	; select bank0
  7561  091C  0834               	movf	read_card_content@data+6,w
  7562  091D  0021               	movlb	1	; select bank1
  7563  091E  00CB               	movwf	(_user_card^(0+128)+5)
  7564                           
  7565                           ;handle_ic_card.c: 391: ds1302_get_time();
  7566  091F  25E1  3188         	fcall	_ds1302_get_time
  7567                           
  7568                           ;handle_ic_card.c: 392: if ((year > user_card[2]) ||
  7569                           ;handle_ic_card.c: 393: ((year == user_card[2]) && (month > user_card[3])) ||
  7570                           ;handle_ic_card.c: 394: ((year == user_card[2]) && (month == user_card[3]) && (day > use
      +                          r_card[4])) ||
  7571                           ;handle_ic_card.c: 395: ((year == user_card[2]) && (month == user_card[3]) && (day == us
      +                          er_card[4]) && (hour >= user_card[5])))
  7572  0921  0020               	movlb	0	; select bank0
  7573  0922  086F               	movf	_year,w
  7574  0923  0021               	movlb	1	; select bank1
  7575  0924  0248               	subwf	(_user_card^(0+128)+2),w
  7576  0925  1C03               	skipc
  7577  0926  3400               	retlw	0
  7578  0927  0848               	movf	(_user_card^(0+128)+2),w
  7579  0928  0020               	movlb	0	; select bank0
  7580  0929  066F               	xorwf	_year,w
  7581  092A  1D03               	skipz
  7582  092B  2931               	goto	l6802
  7583  092C  086E               	movf	_month,w
  7584  092D  0021               	movlb	1	; select bank1
  7585  092E  0249               	subwf	(_user_card^(0+128)+3),w
  7586  092F  1C03               	skipc
  7587  0930  3400               	retlw	0
  7588  0931                     l6802:	
  7589  0931  0021               	movlb	1	; select bank1
  7590  0932  0848               	movf	(_user_card^(0+128)+2),w
  7591  0933  0020               	movlb	0	; select bank0
  7592  0934  066F               	xorwf	_year,w
  7593  0935  1D03               	skipz
  7594  0936  2942               	goto	l6808
  7595  0937  0021               	movlb	1	; select bank1
  7596  0938  0849               	movf	(_user_card^(0+128)+3),w
  7597  0939  0020               	movlb	0	; select bank0
  7598  093A  066E               	xorwf	_month,w
  7599  093B  1D03               	skipz
  7600  093C  2942               	goto	l6808
  7601  093D  086C               	movf	_day,w
  7602  093E  0021               	movlb	1	; select bank1
  7603  093F  024A               	subwf	(_user_card^(0+128)+4),w
  7604  0940  1C03               	skipc
  7605  0941  3400               	retlw	0
  7606  0942                     l6808:	
  7607  0942  0021               	movlb	1	; select bank1
  7608  0943  0848               	movf	(_user_card^(0+128)+2),w
  7609  0944  0020               	movlb	0	; select bank0
  7610  0945  066F               	xorwf	_year,w
  7611  0946  1D03               	skipz
  7612  0947  295F               	goto	l6824
  7613  0948  0021               	movlb	1	; select bank1
  7614  0949  0849               	movf	(_user_card^(0+128)+3),w
  7615  094A  0020               	movlb	0	; select bank0
  7616  094B  066E               	xorwf	_month,w
  7617  094C  1D03               	skipz
  7618  094D  295F               	goto	l6824
  7619  094E  0021               	movlb	1	; select bank1
  7620  094F  084A               	movf	(_user_card^(0+128)+4),w
  7621  0950  0020               	movlb	0	; select bank0
  7622  0951  066C               	xorwf	_day,w
  7623  0952  1D03               	skipz
  7624  0953  295F               	goto	l6824
  7625  0954  0021               	movlb	1	; select bank1
  7626  0955  084B               	movf	(_user_card^(0+128)+5),w
  7627  0956  0020               	movlb	0	; select bank0
  7628  0957  026D               	subwf	_hour,w
  7629  0958  1803               	btfsc	3,0
  7630  0959  3400               	retlw	0
  7631  095A  295F               	goto	l6824
  7632  095B                     l6822:	
  7633                           
  7634                           ;handle_ic_card.c: 404: else
  7635                           ;handle_ic_card.c: 405: {
  7636                           ;handle_ic_card.c: 406: user_card[2] = 0x00;
  7637  095B  01C8               	clrf	(_user_card^(0+128)+2)
  7638                           
  7639                           ;handle_ic_card.c: 407: user_card[3] = 0x00;
  7640  095C  01C9               	clrf	(_user_card^(0+128)+3)
  7641                           
  7642                           ;handle_ic_card.c: 408: user_card[4] = 0x00;
  7643  095D  01CA               	clrf	(_user_card^(0+128)+4)
  7644                           
  7645                           ;handle_ic_card.c: 409: user_card[5] = 0x00;
  7646  095E  01CB               	clrf	(_user_card^(0+128)+5)
  7647  095F                     l6824:	
  7648                           
  7649                           ;handle_ic_card.c: 410: }
  7650                           ;handle_ic_card.c: 411: user_card[6] = data[14];
  7651  095F  0020               	movlb	0	; select bank0
  7652  0960  083C               	movf	read_card_content@data+14,w
  7653  0961  0021               	movlb	1	; select bank1
  7654  0962  00CC               	movwf	(_user_card^(0+128)+6)
  7655                           
  7656                           ;handle_ic_card.c: 412: user_card[7] = data[13];
  7657  0963  0020               	movlb	0	; select bank0
  7658  0964  083B               	movf	read_card_content@data+13,w
  7659  0965  0021               	movlb	1	; select bank1
  7660  0966  00CD               	movwf	(_user_card^(0+128)+7)
  7661                           
  7662                           ;handle_ic_card.c: 413: user_card[8] = data[12];
  7663  0967  0020               	movlb	0	; select bank0
  7664  0968  083A               	movf	read_card_content@data+12,w
  7665  0969  0021               	movlb	1	; select bank1
  7666  096A  00CE               	movwf	(_user_card^(0+128)+8)
  7667                           
  7668                           ;handle_ic_card.c: 414: user_card[9] = data[11];
  7669  096B  0020               	movlb	0	; select bank0
  7670  096C  0839               	movf	read_card_content@data+11,w
  7671  096D  0021               	movlb	1	; select bank1
  7672  096E  00CF               	movwf	(_user_card^(0+128)+9)
  7673                           
  7674                           ;handle_ic_card.c: 415: user_card[10] = data[10];
  7675  096F  0020               	movlb	0	; select bank0
  7676  0970  0838               	movf	read_card_content@data+10,w
  7677  0971  0021               	movlb	1	; select bank1
  7678  0972  00D0               	movwf	(_user_card^(0+128)+10)
  7679                           
  7680                           ;handle_ic_card.c: 416: user_card[11] = data[9];
  7681  0973  0020               	movlb	0	; select bank0
  7682  0974  0837               	movf	read_card_content@data+9,w
  7683  0975  0021               	movlb	1	; select bank1
  7684  0976  00D1               	movwf	(_user_card^(0+128)+11)
  7685                           
  7686                           ;handle_ic_card.c: 417: user_card[12] = data[8];
  7687  0977  0020               	movlb	0	; select bank0
  7688  0978  0836               	movf	read_card_content@data+8,w
  7689  0979  0021               	movlb	1	; select bank1
  7690  097A  00D2               	movwf	(_user_card^(0+128)+12)
  7691                           
  7692                           ;handle_ic_card.c: 418: user_card[13] = data[7];
  7693  097B  0020               	movlb	0	; select bank0
  7694  097C  0835               	movf	read_card_content@data+7,w
  7695  097D  0021               	movlb	1	; select bank1
  7696  097E  00D3               	movwf	(_user_card^(0+128)+13)
  7697                           
  7698                           ;handle_ic_card.c: 419: deal_floor(user_card);
  7699  097F  30C6               	movlw	_user_card& (0+255)
  7700  0980  3191  2102  3188   	fcall	_deal_floor
  7701                           
  7702                           ;handle_ic_card.c: 420: flag_user_card = 0x01;
  7703  0983  0020               	movlb	0	; select bank0
  7704  0984  01DD               	clrf	_flag_user_card
  7705  0985  0ADD               	incf	_flag_user_card,f
  7706                           
  7707                           ;handle_ic_card.c: 421: RB4 = 0x00;
  7708  0986  120D               	bcf	13,4	;volatile
  7709                           
  7710                           ;handle_ic_card.c: 422: RB5 = 0x00;
  7711  0987  128D               	bcf	13,5	;volatile
  7712                           
  7713                           ;handle_ic_card.c: 423: ret = 0x01;
  7714  0988  01C1               	clrf	read_card_content@ret
  7715  0989  0AC1               	incf	read_card_content@ret,f
  7716                           
  7717                           ;handle_ic_card.c: 424: }
  7718  098A  298C               	goto	l433
  7719  098B                     l6854:	
  7720                           
  7721                           ;handle_ic_card.c: 430: else
  7722                           ;handle_ic_card.c: 431: {
  7723                           ;handle_ic_card.c: 432: ret = 0x00;
  7724  098B  01C1               	clrf	read_card_content@ret
  7725  098C                     l433:	
  7726                           
  7727                           ;handle_ic_card.c: 438: }
  7728                           ;handle_ic_card.c: 439: for (i = 0x00; i < 14; i++)
  7729  098C  01C0               	clrf	read_card_content@i
  7730  098D                     l6862:	
  7731                           
  7732                           ;handle_ic_card.c: 440: {
  7733                           ;handle_ic_card.c: 441: user_card[i] = 0x00;
  7734  098D  0840               	movf	read_card_content@i,w
  7735  098E  3EC6               	addlw	_user_card& (0+255)
  7736  098F  0086               	movwf	6
  7737  0990  300E               	movlw	14
  7738  0991  0187               	clrf	7
  7739  0992  0181               	clrf	1
  7740  0993  0AC0               	incf	read_card_content@i,f
  7741  0994  0240               	subwf	read_card_content@i,w
  7742  0995  1803               	btfsc	3,0
  7743  0996  29AE               	goto	l6890
  7744  0997  298D               	goto	l6862
  7745  0998                     l6868:	
  7746                           
  7747                           ;handle_ic_card.c: 444: else if (data[0] == 0xA8)
  7748  0998  082E               	movf	read_card_content@data,w
  7749  0999  3AA8               	xorlw	168
  7750  099A  1D03               	skipz
  7751  099B  2861               	goto	l6690
  7752                           
  7753                           ;handle_ic_card.c: 445: {
  7754                           ;handle_ic_card.c: 446: card_type = 0x08;
  7755  099C  3008               	movlw	8
  7756  099D  00D6               	movwf	_card_type
  7757                           
  7758                           ;handle_ic_card.c: 447: if (is_enable)
  7759  099E  085F               	movf	_is_enable,w
  7760  099F  1903               	btfsc	3,2
  7761  09A0  2861               	goto	l6690
  7762                           
  7763                           ;handle_ic_card.c: 448: {
  7764                           ;handle_ic_card.c: 449: if (!check_user_card())
  7765  09A1  25B2  3188         	fcall	_check_user_card
  7766  09A3  3800               	iorlw	0
  7767  09A4  1D03               	skipz
  7768  09A5  2861               	goto	l6690
  7769                           
  7770                           ;handle_ic_card.c: 450: {
  7771                           ;handle_ic_card.c: 451: sector_number = data[1];
  7772  09A6  082F               	movf	read_card_content@data+1,w
  7773  09A7  00E0               	movwf	_sector_number
  7774                           
  7775                           ;handle_ic_card.c: 452: write_24c02(0x09, sector_number);
  7776  09A8  00F6               	movwf	write_24c02@data
  7777  09A9  3009               	movlw	9
  7778  09AA                     L5:	
  7779  09AA  23AC               	fcall	_write_24c02
  7780  09AB                     l6688:	
  7781                           
  7782                           ;handle_ic_card.c: 258: ret = 0x01;
  7783  09AB  0020               	movlb	0	; select bank0
  7784  09AC  01C1               	clrf	read_card_content@ret
  7785  09AD  0AC1               	incf	read_card_content@ret,f
  7786  09AE                     l6890:	
  7787                           
  7788                           ;handle_ic_card.c: 478: }
  7789                           ;handle_ic_card.c: 480: return ret;
  7790  09AE  0841               	movf	read_card_content@ret,w
  7791  09AF  0008               	return
  7792  09B0                     __end_of_read_card_content:	
  7793  09B0                     __ptext52:	
  7794 ;; *************** function _handle_config *****************
  7795 ;; Defined at:
  7796 ;;		line 69 in file "../../source/application/handle_config.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;		None
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;  tmp_buffer      6    0[BANK0 ] unsigned char [6]
  7801 ;;  i               2    7[BANK0 ] unsigned short 
  7802 ;;  report_the_l    1    6[BANK0 ] unsigned char 
  7803 ;; Return value:  Size  Location     Type
  7804 ;;		None               void
  7805 ;; Registers used:
  7806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7807 ;; Tracked objects:
  7808 ;;		On entry : 1F/0
  7809 ;;		On exit  : 1F/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7813 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;Total ram usage:       11 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    4
  7819 ;; This function calls:
  7820 ;;		_delay_ms
  7821 ;;		_ds1302_get_time
  7822 ;;		_ds1302_set_time
  7823 ;;		_find_project_key
  7824 ;;		_read_24c02
  7825 ;;		_read_eeprom
  7826 ;;		_uart1_send_byte
  7827 ;;		_write_24c02
  7828 ;; This function is called by:
  7829 ;;		_main
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           
  7834                           ;psect for function _handle_config
  7835  09B0                     _handle_config:	
  7836                           
  7837                           ;handle_config.c: 74: BYTE tmp_buffer[6];
  7838                           ;handle_config.c: 75: BYTE report_the_loss_count = 0x00;
  7839                           
  7840                           ;incstack = 0
  7841                           ; Regs used in _handle_config: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7842  09B0  01A6               	clrf	handle_config@report_the_loss_count
  7843                           
  7844                           ;handle_config.c: 77: if (uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7] == 
      +                          0xAA)
  7845  09B1  0847               	movf	_uart1_receive_buffer,w
  7846  09B2  3A55               	xorlw	85
  7847  09B3  1D03               	skipz
  7848  09B4  29C7               	goto	l7122
  7849  09B5  084E               	movf	_uart1_receive_buffer+7,w
  7850  09B6  3AAA               	xorlw	170
  7851  09B7  1D03               	skipz
  7852  09B8  29C7               	goto	l7122
  7853                           
  7854                           ;handle_config.c: 78: {
  7855                           ;handle_config.c: 79: for (i = 0x00; i < 0x100; i++)
  7856  09B9  01A7               	clrf	handle_config@i
  7857  09BA  01A8               	clrf	handle_config@i+1
  7858  09BB                     l7112:	
  7859                           
  7860                           ;handle_config.c: 80: {
  7861                           ;handle_config.c: 81: write_24c02(i, 0xFF);
  7862  09BB  30FF               	movlw	255
  7863  09BC  00F6               	movwf	write_24c02@data
  7864  09BD  0827               	movf	handle_config@i,w
  7865  09BE  23AC  3188         	fcall	_write_24c02
  7866  09C0  27D5  3188         	fcall	PL14	;call to abstracted procedure
  7867  09C2  1903               	skipnz
  7868  09C3  0227               	subwf	handle_config@i,w
  7869  09C4  1C03               	skipc
  7870  09C5  29BB               	goto	l7112
  7871                           
  7872                           ;handle_config.c: 86: }
  7873  09C6  2B8E               	goto	l51
  7874  09C7                     l7122:	
  7875                           
  7876                           ;handle_config.c: 87: else if (uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xAB)
  7877  09C7  0847               	movf	_uart1_receive_buffer,w
  7878  09C8  3A55               	xorlw	85
  7879  09C9  1D03               	skipz
  7880  09CA  29D5               	goto	l7132
  7881  09CB  084E               	movf	_uart1_receive_buffer+7,w
  7882  09CC  3AAB               	xorlw	171
  7883  09CD  1D03               	skipz
  7884  09CE  29D5               	goto	l7132
  7885                           
  7886                           ;handle_config.c: 88: {
  7887                           ;handle_config.c: 89: write_24c02(uart1_receive_buffer[1], uart1_receive_buffer[2]);
  7888  09CF  0849               	movf	_uart1_receive_buffer+2,w
  7889  09D0  00F6               	movwf	write_24c02@data
  7890  09D1  0848               	movf	_uart1_receive_buffer+1,w
  7891  09D2  23AC  3188         	fcall	_write_24c02
  7892  09D4  2B8E               	goto	l51
  7893  09D5                     l7132:	
  7894                           ;handle_config.c: 91: delay_ms(100);
  7895                           
  7896                           ;handle_config.c: 90: (RC5 = 0x00);
  7897                           
  7898                           
  7899                           ;handle_config.c: 94: else if(uart1_receive_buffer[0] == 0xAA && uart1_receive_buffer[7]
      +                           == 0x55)
  7900  09D5  0847               	movf	_uart1_receive_buffer,w
  7901  09D6  3AAA               	xorlw	170
  7902  09D7  1D03               	skipz
  7903  09D8  29EB               	goto	l7152
  7904  09D9  084E               	movf	_uart1_receive_buffer+7,w
  7905  09DA  3A55               	xorlw	85
  7906  09DB  1D03               	skipz
  7907  09DC  29EB               	goto	l7152
  7908                           
  7909                           ;handle_config.c: 95: {
  7910                           ;handle_config.c: 96: for (i = 0x00; i < 0x100; i++)
  7911  09DD  01A7               	clrf	handle_config@i
  7912  09DE  01A8               	clrf	handle_config@i+1
  7913  09DF                     l7142:	
  7914                           
  7915                           ;handle_config.c: 97: {
  7916                           ;handle_config.c: 98: uart1_send_byte(read_24c02(i));
  7917  09DF  0827               	movf	handle_config@i,w
  7918  09E0  2472  3188         	fcall	_read_24c02
  7919  09E2  23A3  3188         	fcall	_uart1_send_byte
  7920  09E4  27D5  3188         	fcall	PL14	;call to abstracted procedure
  7921  09E6  1903               	skipnz
  7922  09E7  0227               	subwf	handle_config@i,w
  7923  09E8  1803               	btfsc	3,0
  7924  09E9  2B8E               	goto	l51
  7925  09EA  29DF               	goto	l7142
  7926  09EB                     l7152:	
  7927                           
  7928                           ;handle_config.c: 104: else if(uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xBB)
  7929  09EB  0847               	movf	_uart1_receive_buffer,w
  7930  09EC  3A55               	xorlw	85
  7931  09ED  1D03               	skipz
  7932  09EE  2A06               	goto	l7170
  7933  09EF  084E               	movf	_uart1_receive_buffer+7,w
  7934  09F0  3ABB               	xorlw	187
  7935  09F1  1D03               	skipz
  7936  09F2  2A06               	goto	l7170
  7937                           
  7938                           ;handle_config.c: 105: {
  7939                           ;handle_config.c: 106: year = uart1_receive_buffer[1];
  7940  09F3  0848               	movf	_uart1_receive_buffer+1,w
  7941  09F4  00EF               	movwf	_year
  7942                           
  7943                           ;handle_config.c: 107: month = uart1_receive_buffer[2];
  7944  09F5  0849               	movf	_uart1_receive_buffer+2,w
  7945  09F6  00EE               	movwf	_month
  7946                           
  7947                           ;handle_config.c: 108: day = uart1_receive_buffer[3];
  7948  09F7  084A               	movf	_uart1_receive_buffer+3,w
  7949  09F8  00EC               	movwf	_day
  7950                           
  7951                           ;handle_config.c: 109: hour = uart1_receive_buffer[4];
  7952  09F9  084B               	movf	_uart1_receive_buffer+4,w
  7953  09FA  00ED               	movwf	_hour
  7954                           
  7955                           ;handle_config.c: 110: minute = uart1_receive_buffer[5];
  7956  09FB  084C               	movf	_uart1_receive_buffer+5,w
  7957  09FC  0021               	movlb	1	; select bank1
  7958  09FD  00E6               	movwf	_minute^(0+128)
  7959                           
  7960                           ;handle_config.c: 111: second = 0x00;
  7961  09FE  01E7               	clrf	_second^(0+128)
  7962                           
  7963                           ;handle_config.c: 112: week = uart1_receive_buffer[6];
  7964  09FF  0020               	movlb	0	; select bank0
  7965  0A00  084D               	movf	_uart1_receive_buffer+6,w
  7966  0A01  0021               	movlb	1	; select bank1
  7967  0A02  00E8               	movwf	_week^(0+128)
  7968                           
  7969                           ;handle_config.c: 113: ds1302_set_time();
  7970  0A03  261E  3188         	fcall	_ds1302_set_time
  7971  0A05  2B8E               	goto	l51
  7972  0A06                     l7170:	
  7973                           
  7974                           ;handle_config.c: 118: else if(uart1_receive_buffer[0] == 0xBB && uart1_receive_buffer[7
      +                          ] == 0x55)
  7975  0A06  0847               	movf	_uart1_receive_buffer,w
  7976  0A07  3ABB               	xorlw	187
  7977  0A08  1D03               	skipz
  7978  0A09  2A33               	goto	l7180
  7979  0A0A  084E               	movf	_uart1_receive_buffer+7,w
  7980  0A0B  3A55               	xorlw	85
  7981  0A0C  1D03               	skipz
  7982  0A0D  2A33               	goto	l7180
  7983                           
  7984                           ;handle_config.c: 119: {
  7985                           ;handle_config.c: 120: ds1302_get_time();
  7986  0A0E  25E1  3188         	fcall	_ds1302_get_time
  7987                           
  7988                           ;handle_config.c: 121: uart1_send_byte(0xBB);
  7989  0A10  30BB               	movlw	187
  7990  0A11  23A3  3188         	fcall	_uart1_send_byte
  7991                           
  7992                           ;handle_config.c: 122: uart1_send_byte(0x06);
  7993  0A13  3006               	movlw	6
  7994  0A14  23A3  3188         	fcall	_uart1_send_byte
  7995                           
  7996                           ;handle_config.c: 123: uart1_send_byte(year);
  7997  0A16  0020               	movlb	0	; select bank0
  7998  0A17  086F               	movf	_year,w
  7999  0A18  23A3  3188         	fcall	_uart1_send_byte
  8000                           
  8001                           ;handle_config.c: 124: uart1_send_byte(month);
  8002  0A1A  0020               	movlb	0	; select bank0
  8003  0A1B  086E               	movf	_month,w
  8004  0A1C  23A3  3188         	fcall	_uart1_send_byte
  8005                           
  8006                           ;handle_config.c: 125: uart1_send_byte(day);
  8007  0A1E  0020               	movlb	0	; select bank0
  8008  0A1F  086C               	movf	_day,w
  8009  0A20  23A3  3188         	fcall	_uart1_send_byte
  8010                           
  8011                           ;handle_config.c: 126: uart1_send_byte(hour);
  8012  0A22  0020               	movlb	0	; select bank0
  8013  0A23  086D               	movf	_hour,w
  8014  0A24  23A3  3188         	fcall	_uart1_send_byte
  8015                           
  8016                           ;handle_config.c: 127: uart1_send_byte(minute);
  8017  0A26  0021               	movlb	1	; select bank1
  8018  0A27  0866               	movf	_minute^(0+128),w
  8019  0A28  23A3  3188         	fcall	_uart1_send_byte
  8020                           
  8021                           ;handle_config.c: 128: uart1_send_byte(second);
  8022  0A2A  0021               	movlb	1	; select bank1
  8023  0A2B  0867               	movf	_second^(0+128),w
  8024  0A2C  23A3  3188         	fcall	_uart1_send_byte
  8025                           
  8026                           ;handle_config.c: 129: uart1_send_byte(week);
  8027  0A2E  0021               	movlb	1	; select bank1
  8028  0A2F  0868               	movf	_week^(0+128),w
  8029  0A30  23A3  3188         	fcall	_uart1_send_byte
  8030  0A32  2B75               	goto	l7318
  8031  0A33                     l7180:	
  8032                           ;handle_config.c: 130: uart1_send_byte(0x55);
  8033                           
  8034                           
  8035                           ;handle_config.c: 135: else if(uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xCC)
  8036  0A33  0847               	movf	_uart1_receive_buffer,w
  8037  0A34  3A55               	xorlw	85
  8038  0A35  1D03               	skipz
  8039  0A36  2A4D               	goto	l7196
  8040  0A37  084E               	movf	_uart1_receive_buffer+7,w
  8041  0A38  3ACC               	xorlw	204
  8042  0A39  1D03               	skipz
  8043  0A3A  2A4D               	goto	l7196
  8044                           
  8045                           ;handle_config.c: 136: {
  8046                           ;handle_config.c: 137: if (uart1_receive_buffer[1] == 0x01)
  8047  0A3B  0B48               	decfsz	_uart1_receive_buffer+1,w
  8048  0A3C  2A43               	goto	l7188
  8049                           
  8050                           ;handle_config.c: 138: {
  8051                           ;handle_config.c: 139: write_24c02(0x00, 0xAA);
  8052  0A3D  30AA               	movlw	170
  8053  0A3E  00F6               	movwf	write_24c02@data
  8054  0A3F  3000               	movlw	0
  8055  0A40  23AC  3188         	fcall	_write_24c02
  8056                           
  8057                           ;handle_config.c: 140: }
  8058  0A42  2B8E               	goto	l51
  8059  0A43                     l7188:	
  8060                           
  8061                           ;handle_config.c: 141: else if (uart1_receive_buffer[1] == 0x02)
  8062  0A43  0848               	movf	_uart1_receive_buffer+1,w
  8063  0A44  3A02               	xorlw	2
  8064  0A45  1D03               	skipz
  8065  0A46  2B8E               	goto	l51
  8066                           
  8067                           ;handle_config.c: 142: {
  8068                           ;handle_config.c: 143: write_24c02(0x00, 0x55);
  8069  0A47  3055               	movlw	85
  8070  0A48  00F6               	movwf	write_24c02@data
  8071  0A49  3000               	movlw	0
  8072  0A4A  23AC  3188         	fcall	_write_24c02
  8073                           
  8074                           ;handle_config.c: 144: }
  8075  0A4C  2B8E               	goto	l51
  8076  0A4D                     l7196:	
  8077                           
  8078                           ;handle_config.c: 153: else if(uart1_receive_buffer[0] == 0xCC && uart1_receive_buffer[7
      +                          ] == 0x55)
  8079  0A4D  0847               	movf	_uart1_receive_buffer,w
  8080  0A4E  3ACC               	xorlw	204
  8081  0A4F  1D03               	skipz
  8082  0A50  2A61               	goto	l7206
  8083  0A51  084E               	movf	_uart1_receive_buffer+7,w
  8084  0A52  3A55               	xorlw	85
  8085  0A53  1D03               	skipz
  8086  0A54  2A61               	goto	l7206
  8087                           
  8088                           ;handle_config.c: 154: {
  8089                           ;handle_config.c: 155: uart1_send_byte(0xCC);
  8090  0A55  30CC               	movlw	204
  8091  0A56  23A3  3188         	fcall	_uart1_send_byte
  8092                           
  8093                           ;handle_config.c: 156: uart1_send_byte(0x04);
  8094  0A58  3004               	movlw	4
  8095  0A59  23A3  3188         	fcall	_uart1_send_byte
  8096                           
  8097                           ;handle_config.c: 157: uart1_send_byte(read_24c02(0x00));
  8098  0A5B  3000               	movlw	0
  8099  0A5C  2472  3188         	fcall	_read_24c02
  8100  0A5E  23A3  3188         	fcall	_uart1_send_byte
  8101  0A60  2B75               	goto	l7318
  8102  0A61                     l7206:	
  8103                           ;handle_config.c: 158: uart1_send_byte(0x55);
  8104                           
  8105                           
  8106                           ;handle_config.c: 164: else if(uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xDD)
  8107  0A61  0847               	movf	_uart1_receive_buffer,w
  8108  0A62  3A55               	xorlw	85
  8109  0A63  1D03               	skipz
  8110  0A64  2A6F               	goto	l7216
  8111  0A65  084E               	movf	_uart1_receive_buffer+7,w
  8112  0A66  3ADD               	xorlw	221
  8113  0A67  1D03               	skipz
  8114  0A68  2A6F               	goto	l7216
  8115                           
  8116                           ;handle_config.c: 165: {
  8117                           ;handle_config.c: 166: write_24c02(0x09, uart1_receive_buffer[1]);
  8118  0A69  0848               	movf	_uart1_receive_buffer+1,w
  8119  0A6A  00F6               	movwf	write_24c02@data
  8120  0A6B  3009               	movlw	9
  8121  0A6C  23AC  3188         	fcall	_write_24c02
  8122  0A6E  2B8E               	goto	l51
  8123  0A6F                     l7216:	
  8124                           
  8125                           ;handle_config.c: 171: else if(uart1_receive_buffer[0] == 0xDD && uart1_receive_buffer[7
      +                          ] == 0x55)
  8126  0A6F  0847               	movf	_uart1_receive_buffer,w
  8127  0A70  3ADD               	xorlw	221
  8128  0A71  1D03               	skipz
  8129  0A72  2A83               	goto	l7226
  8130  0A73  084E               	movf	_uart1_receive_buffer+7,w
  8131  0A74  3A55               	xorlw	85
  8132  0A75  1D03               	skipz
  8133  0A76  2A83               	goto	l7226
  8134                           
  8135                           ;handle_config.c: 172: {
  8136                           ;handle_config.c: 173: uart1_send_byte(0xDD);
  8137  0A77  30DD               	movlw	221
  8138  0A78  23A3  3188         	fcall	_uart1_send_byte
  8139                           
  8140                           ;handle_config.c: 174: uart1_send_byte(0x04);
  8141  0A7A  3004               	movlw	4
  8142  0A7B  23A3  3188         	fcall	_uart1_send_byte
  8143                           
  8144                           ;handle_config.c: 175: uart1_send_byte(read_24c02(0x09));
  8145  0A7D  3009               	movlw	9
  8146  0A7E  2472  3188         	fcall	_read_24c02
  8147  0A80  23A3  3188         	fcall	_uart1_send_byte
  8148  0A82  2B75               	goto	l7318
  8149  0A83                     l7226:	
  8150                           ;handle_config.c: 176: uart1_send_byte(0x55);
  8151                           
  8152                           
  8153                           ;handle_config.c: 182: else if(uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xEE)
  8154  0A83  0847               	movf	_uart1_receive_buffer,w
  8155  0A84  3A55               	xorlw	85
  8156  0A85  1D03               	skipz
  8157  0A86  2A91               	goto	l7236
  8158  0A87  084E               	movf	_uart1_receive_buffer+7,w
  8159  0A88  3AEE               	xorlw	238
  8160  0A89  1D03               	skipz
  8161  0A8A  2A91               	goto	l7236
  8162                           
  8163                           ;handle_config.c: 183: {
  8164                           ;handle_config.c: 184: write_24c02(0x01, uart1_receive_buffer[1]);
  8165  0A8B  0848               	movf	_uart1_receive_buffer+1,w
  8166  0A8C  00F6               	movwf	write_24c02@data
  8167  0A8D  3001               	movlw	1
  8168  0A8E  23AC  3188         	fcall	_write_24c02
  8169  0A90  2B8E               	goto	l51
  8170  0A91                     l7236:	
  8171                           
  8172                           ;handle_config.c: 189: else if(uart1_receive_buffer[0] == 0xEE && uart1_receive_buffer[7
      +                          ] == 0x55)
  8173  0A91  0847               	movf	_uart1_receive_buffer,w
  8174  0A92  3AEE               	xorlw	238
  8175  0A93  1D03               	skipz
  8176  0A94  2AA5               	goto	l7246
  8177  0A95  084E               	movf	_uart1_receive_buffer+7,w
  8178  0A96  3A55               	xorlw	85
  8179  0A97  1D03               	skipz
  8180  0A98  2AA5               	goto	l7246
  8181                           
  8182                           ;handle_config.c: 190: {
  8183                           ;handle_config.c: 191: uart1_send_byte(0xEE);
  8184  0A99  30EE               	movlw	238
  8185  0A9A  23A3  3188         	fcall	_uart1_send_byte
  8186                           
  8187                           ;handle_config.c: 192: uart1_send_byte(0x04);
  8188  0A9C  3004               	movlw	4
  8189  0A9D  23A3  3188         	fcall	_uart1_send_byte
  8190                           
  8191                           ;handle_config.c: 193: uart1_send_byte(read_24c02(0x01));
  8192  0A9F  3001               	movlw	1
  8193  0AA0  2472  3188         	fcall	_read_24c02
  8194  0AA2  23A3  3188         	fcall	_uart1_send_byte
  8195  0AA4  2B75               	goto	l7318
  8196  0AA5                     l7246:	
  8197                           ;handle_config.c: 194: uart1_send_byte(0x55);
  8198                           
  8199                           
  8200                           ;handle_config.c: 200: else if(uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xFF)
  8201  0AA5  0847               	movf	_uart1_receive_buffer,w
  8202  0AA6  3A55               	xorlw	85
  8203  0AA7  1D03               	skipz
  8204  0AA8  2ADD               	goto	l7268
  8205  0AA9  084E               	movf	_uart1_receive_buffer+7,w
  8206  0AAA  3AFF               	xorlw	255
  8207  0AAB  1D03               	skipz
  8208  0AAC  2ADD               	goto	l7268
  8209                           
  8210                           ;handle_config.c: 201: {
  8211                           ;handle_config.c: 202: write_24c02(0x02, 0xEF);
  8212  0AAD  30EF               	movlw	239
  8213  0AAE  00F6               	movwf	write_24c02@data
  8214  0AAF  3002               	movlw	2
  8215  0AB0  23AC  3188         	fcall	_write_24c02
  8216                           
  8217                           ;handle_config.c: 203: write_24c02(0x03 + 0x00, PWD_TABLE[uart1_receive_buffer[1]]);
  8218  0AB2  0020               	movlb	0	; select bank0
  8219  0AB3  0848               	movf	_uart1_receive_buffer+1,w
  8220  0AB4  27C3  3188         	fcall	PL4	;call to abstracted procedure
  8221  0AB6  3003               	movlw	3
  8222  0AB7  23AC  3188         	fcall	_write_24c02
  8223                           
  8224                           ;handle_config.c: 204: write_24c02(0x03 + 0x01, PWD_TABLE[uart1_receive_buffer[2]]);
  8225  0AB9  0020               	movlb	0	; select bank0
  8226  0ABA  0849               	movf	_uart1_receive_buffer+2,w
  8227  0ABB  27C3  3188         	fcall	PL4	;call to abstracted procedure
  8228  0ABD  3004               	movlw	4
  8229  0ABE  23AC  3188         	fcall	_write_24c02
  8230                           
  8231                           ;handle_config.c: 205: write_24c02(0x03 + 0x02, PWD_TABLE[uart1_receive_buffer[3]]);
  8232  0AC0  0020               	movlb	0	; select bank0
  8233  0AC1  084A               	movf	_uart1_receive_buffer+3,w
  8234  0AC2  27C3  3188         	fcall	PL4	;call to abstracted procedure
  8235  0AC4  3005               	movlw	5
  8236  0AC5  23AC  3188         	fcall	_write_24c02
  8237                           
  8238                           ;handle_config.c: 206: write_24c02(0x03 + 0x03, PWD_TABLE[uart1_receive_buffer[4]]);
  8239  0AC7  0020               	movlb	0	; select bank0
  8240  0AC8  084B               	movf	_uart1_receive_buffer+4,w
  8241  0AC9  27C3  3188         	fcall	PL4	;call to abstracted procedure
  8242  0ACB  3006               	movlw	6
  8243  0ACC  23AC  3188         	fcall	_write_24c02
  8244                           
  8245                           ;handle_config.c: 207: write_24c02(0x03 + 0x04, PWD_TABLE[uart1_receive_buffer[5]]);
  8246  0ACE  0020               	movlb	0	; select bank0
  8247  0ACF  084C               	movf	_uart1_receive_buffer+5,w
  8248  0AD0  27C3  3188         	fcall	PL4	;call to abstracted procedure
  8249  0AD2  3007               	movlw	7
  8250  0AD3  23AC  3188         	fcall	_write_24c02
  8251                           
  8252                           ;handle_config.c: 208: write_24c02(0x03 + 0x05, PWD_TABLE[uart1_receive_buffer[6]]);
  8253  0AD5  0020               	movlb	0	; select bank0
  8254  0AD6  084D               	movf	_uart1_receive_buffer+6,w
  8255  0AD7  27C3  3188         	fcall	PL4	;call to abstracted procedure
  8256  0AD9  3008               	movlw	8
  8257  0ADA  23AC  3188         	fcall	_write_24c02
  8258  0ADC  2B8E               	goto	l51
  8259  0ADD                     l7268:	
  8260                           
  8261                           ;handle_config.c: 213: else if(uart1_receive_buffer[0] == 0xFF && uart1_receive_buffer[7
      +                          ] == 0x55)
  8262  0ADD  0847               	movf	_uart1_receive_buffer,w
  8263  0ADE  3AFF               	xorlw	255
  8264  0ADF  1D03               	skipz
  8265  0AE0  2B2B               	goto	l7304
  8266  0AE1  084E               	movf	_uart1_receive_buffer+7,w
  8267  0AE2  3A55               	xorlw	85
  8268  0AE3  1D03               	skipz
  8269  0AE4  2B2B               	goto	l7304
  8270                           
  8271                           ;handle_config.c: 214: {
  8272                           ;handle_config.c: 215: uart1_send_byte(0xFF);
  8273  0AE5  30FF               	movlw	255
  8274  0AE6  23A3  3188         	fcall	_uart1_send_byte
  8275                           
  8276                           ;handle_config.c: 216: uart1_send_byte(0x09);
  8277  0AE8  3009               	movlw	9
  8278  0AE9  23A3  3188         	fcall	_uart1_send_byte
  8279                           
  8280                           ;handle_config.c: 217: for (i = 0x00; i < 0x06; i++)
  8281  0AEB  0020               	movlb	0	; select bank0
  8282  0AEC  01A7               	clrf	handle_config@i
  8283  0AED  01A8               	clrf	handle_config@i+1
  8284  0AEE                     l7280:	
  8285                           
  8286                           ;handle_config.c: 218: {
  8287                           ;handle_config.c: 219: tmp_buffer[i] = find_project_key(read_24c02(0x03 + i));
  8288  0AEE  0827               	movf	handle_config@i,w
  8289  0AEF  3E20               	addlw	handle_config@tmp_buffer& (0+255)
  8290  0AF0  0086               	movwf	6
  8291  0AF1  0187               	clrf	7
  8292  0AF2  0827               	movf	handle_config@i,w
  8293  0AF3  3E03               	addlw	3
  8294  0AF4  2472  3188         	fcall	_read_24c02
  8295  0AF6  26A9  3188         	fcall	_find_project_key
  8296  0AF8  0081               	movwf	1
  8297  0AF9  0020               	movlb	0	; select bank0
  8298  0AFA  0AA7               	incf	handle_config@i,f
  8299  0AFB  1903               	skipnz
  8300  0AFC  0AA8               	incf	handle_config@i+1,f
  8301  0AFD  3000               	movlw	0
  8302  0AFE  0228               	subwf	handle_config@i+1,w
  8303  0AFF  3006               	movlw	6
  8304  0B00  1903               	skipnz
  8305  0B01  0227               	subwf	handle_config@i,w
  8306  0B02  1C03               	skipc
  8307  0B03  2AEE               	goto	l7280
  8308                           
  8309                           ;handle_config.c: 220: }
  8310                           ;handle_config.c: 221: uart1_send_byte(tmp_buffer[0]);
  8311  0B04  0820               	movf	handle_config@tmp_buffer,w
  8312  0B05  23A3  3188         	fcall	_uart1_send_byte
  8313                           
  8314                           ;handle_config.c: 222: uart1_send_byte(tmp_buffer[1]);
  8315  0B07  0020               	movlb	0	; select bank0
  8316  0B08  0821               	movf	handle_config@tmp_buffer+1,w
  8317  0B09  23A3  3188         	fcall	_uart1_send_byte
  8318                           
  8319                           ;handle_config.c: 223: uart1_send_byte(tmp_buffer[2]);
  8320  0B0B  0020               	movlb	0	; select bank0
  8321  0B0C  0822               	movf	handle_config@tmp_buffer+2,w
  8322  0B0D  23A3  3188         	fcall	_uart1_send_byte
  8323                           
  8324                           ;handle_config.c: 224: uart1_send_byte(tmp_buffer[3]);
  8325  0B0F  0020               	movlb	0	; select bank0
  8326  0B10  0823               	movf	handle_config@tmp_buffer+3,w
  8327  0B11  23A3  3188         	fcall	_uart1_send_byte
  8328                           
  8329                           ;handle_config.c: 225: uart1_send_byte(tmp_buffer[4]);
  8330  0B13  0020               	movlb	0	; select bank0
  8331  0B14  0824               	movf	handle_config@tmp_buffer+4,w
  8332  0B15  23A3  3188         	fcall	_uart1_send_byte
  8333                           
  8334                           ;handle_config.c: 226: uart1_send_byte(tmp_buffer[5]);
  8335  0B17  0020               	movlb	0	; select bank0
  8336  0B18  0825               	movf	handle_config@tmp_buffer+5,w
  8337  0B19  23A3  3188         	fcall	_uart1_send_byte
  8338                           
  8339                           ;handle_config.c: 227: uart1_send_byte(0x55);
  8340  0B1B  3055               	movlw	85
  8341  0B1C  23A3  3188         	fcall	_uart1_send_byte
  8342                           
  8343                           ;handle_config.c: 228: for (i = 0x00; i < 0x06; i++)
  8344  0B1E  0020               	movlb	0	; select bank0
  8345  0B1F  01A7               	clrf	handle_config@i
  8346  0B20  01A8               	clrf	handle_config@i+1
  8347  0B21                     l7294:	
  8348                           
  8349                           ;handle_config.c: 229: {
  8350                           ;handle_config.c: 230: tmp_buffer[i] = 0x00;
  8351  0B21  0827               	movf	handle_config@i,w
  8352  0B22  3E20               	addlw	handle_config@tmp_buffer& (0+255)
  8353  0B23  27CC  3188         	fcall	PL8	;call to abstracted procedure
  8354  0B25  3006               	movlw	6
  8355  0B26  1903               	skipnz
  8356  0B27  0227               	subwf	handle_config@i,w
  8357  0B28  1803               	btfsc	3,0
  8358  0B29  2B8E               	goto	l51
  8359  0B2A  2B21               	goto	l7294
  8360  0B2B                     l7304:	
  8361                           
  8362                           ;handle_config.c: 255: else if(uart1_receive_buffer[0] == 0x99 && uart1_receive_buffer[7
      +                          ] == 0x55)
  8363  0B2B  0847               	movf	_uart1_receive_buffer,w
  8364  0B2C  3A99               	xorlw	153
  8365  0B2D  1D03               	skipz
  8366  0B2E  2B77               	goto	l7324
  8367  0B2F  084E               	movf	_uart1_receive_buffer+7,w
  8368  0B30  3A55               	xorlw	85
  8369  0B31  1D03               	skipz
  8370  0B32  2B77               	goto	l7324
  8371                           
  8372                           ;handle_config.c: 256: {
  8373                           ;handle_config.c: 257: report_the_loss_count = read_24c02(0xFF);
  8374  0B33  30FF               	movlw	255
  8375  0B34  2472  3188         	fcall	_read_24c02
  8376  0B36  0020               	movlb	0	; select bank0
  8377  0B37  00A6               	movwf	handle_config@report_the_loss_count
  8378                           
  8379                           ;handle_config.c: 258: uart1_send_byte(0x99);
  8380  0B38  3099               	movlw	153
  8381  0B39  23A3  3188         	fcall	_uart1_send_byte
  8382                           
  8383                           ;handle_config.c: 259: for (i = 0x01; i < (report_the_loss_count + 0x01); i++)
  8384  0B3B  0020               	movlb	0	; select bank0
  8385  0B3C  01A7               	clrf	handle_config@i
  8386  0B3D  0AA7               	incf	handle_config@i,f
  8387  0B3E  01A8               	clrf	handle_config@i+1
  8388  0B3F                     l7316:	
  8389  0B3F  0826               	movf	handle_config@report_the_loss_count,w
  8390  0B40  3E01               	addlw	1
  8391  0B41  00F8               	movwf	??_handle_config
  8392  0B42  3000               	movlw	0
  8393  0B43  1803               	skipnc
  8394  0B44  3001               	movlw	1
  8395  0B45  00F9               	movwf	??_handle_config+1
  8396  0B46  0228               	subwf	handle_config@i+1,w
  8397  0B47  1D03               	skipz
  8398  0B48  2B4B               	goto	u8075
  8399  0B49  0878               	movf	??_handle_config,w
  8400  0B4A  0227               	subwf	handle_config@i,w
  8401  0B4B                     u8075:	
  8402  0B4B  1803               	btfsc	3,0
  8403  0B4C  2B75               	goto	l7318
  8404                           
  8405                           ;handle_config.c: 260: {
  8406                           ;handle_config.c: 261: uart1_send_byte(read_24c02(0x40 + (i - 0x01) * 0x04 + 0x00));
  8407  0B4D  0827               	movf	handle_config@i,w
  8408  0B4E  0709               	addwf	9,w
  8409  0B4F  0709               	addwf	9,w
  8410  0B50  3E3C               	addlw	60
  8411  0B51  2472  3188         	fcall	_read_24c02
  8412  0B53  23A3  3188         	fcall	_uart1_send_byte
  8413                           
  8414                           ;handle_config.c: 262: uart1_send_byte(read_24c02(0x40 + (i - 0x01) * 0x04 + 0x01));
  8415  0B55  0020               	movlb	0	; select bank0
  8416  0B56  0827               	movf	handle_config@i,w
  8417  0B57  0709               	addwf	9,w
  8418  0B58  0709               	addwf	9,w
  8419  0B59  3E3D               	addlw	61
  8420  0B5A  2472  3188         	fcall	_read_24c02
  8421  0B5C  23A3  3188         	fcall	_uart1_send_byte
  8422                           
  8423                           ;handle_config.c: 263: uart1_send_byte(read_24c02(0x40 + (i - 0x01) * 0x04 + 0x02));
  8424  0B5E  0020               	movlb	0	; select bank0
  8425  0B5F  0827               	movf	handle_config@i,w
  8426  0B60  0709               	addwf	9,w
  8427  0B61  0709               	addwf	9,w
  8428  0B62  3E3E               	addlw	62
  8429  0B63  2472  3188         	fcall	_read_24c02
  8430  0B65  23A3  3188         	fcall	_uart1_send_byte
  8431                           
  8432                           ;handle_config.c: 264: uart1_send_byte(read_24c02(0x40 + (i - 0x01) * 0x04 + 0x03));
  8433  0B67  0020               	movlb	0	; select bank0
  8434  0B68  0827               	movf	handle_config@i,w
  8435  0B69  0709               	addwf	9,w
  8436  0B6A  0709               	addwf	9,w
  8437  0B6B  3E3F               	addlw	63
  8438  0B6C  2472  3188         	fcall	_read_24c02
  8439  0B6E  23A3  3188         	fcall	_uart1_send_byte
  8440  0B70  0020               	movlb	0	; select bank0
  8441  0B71  0AA7               	incf	handle_config@i,f
  8442  0B72  1903               	skipnz
  8443  0B73  0AA8               	incf	handle_config@i+1,f
  8444  0B74  2B3F               	goto	l7316
  8445  0B75                     l7318:	
  8446                           
  8447                           ;handle_config.c: 265: }
  8448                           ;handle_config.c: 266: uart1_send_byte(0x55);
  8449  0B75  3055               	movlw	85
  8450  0B76  2B8C               	goto	L23
  8451  0B77                     l7324:	
  8452                           
  8453                           ;handle_config.c: 272: else if (uart1_receive_buffer[0] == 0x88 && uart1_receive_buffer[
      +                          7] == 0x55)
  8454  0B77  0847               	movf	_uart1_receive_buffer,w
  8455  0B78  3A88               	xorlw	136
  8456  0B79  1D03               	skipz
  8457  0B7A  2B97               	goto	l7334
  8458  0B7B  084E               	movf	_uart1_receive_buffer+7,w
  8459  0B7C  3A55               	xorlw	85
  8460  0B7D  1D03               	skipz
  8461  0B7E  2B97               	goto	l7334
  8462                           
  8463                           ;handle_config.c: 273: {
  8464                           ;handle_config.c: 274: uart1_send_byte(read_eeprom(0x00));
  8465  0B7F  3000               	movlw	0
  8466  0B80  23BE  3188         	fcall	_read_eeprom
  8467  0B82  23A3  3188         	fcall	_uart1_send_byte
  8468                           
  8469                           ;handle_config.c: 275: uart1_send_byte(read_eeprom(0x01));
  8470  0B84  3001               	movlw	1
  8471  0B85  23BE  3188         	fcall	_read_eeprom
  8472  0B87  23A3  3188         	fcall	_uart1_send_byte
  8473                           
  8474                           ;handle_config.c: 276: uart1_send_byte(read_eeprom(0x02));
  8475  0B89  3002               	movlw	2
  8476  0B8A  23BE  3188         	fcall	_read_eeprom
  8477  0B8C                     L23:	
  8478  0B8C  23A3  3188         	fcall	_uart1_send_byte
  8479  0B8E                     l51:	
  8480                           
  8481                           ;handle_config.c: 82: }
  8482                           ;handle_config.c: 83: (RC5 = 0x00);
  8483  0B8E  0020               	movlb	0	; select bank0
  8484  0B8F  128E               	bcf	14,5	;volatile
  8485                           
  8486                           ;handle_config.c: 84: delay_ms(100);
  8487  0B90  3064               	movlw	100
  8488  0B91  00F0               	movwf	delay_ms@count
  8489  0B92  01F1               	clrf	delay_ms@count+1
  8490  0B93  24C6  3188         	fcall	_delay_ms
  8491                           
  8492                           ;handle_config.c: 85: (RC5 = 0x01);
  8493  0B95  0020               	movlb	0	; select bank0
  8494  0B96  168E               	bsf	14,5	;volatile
  8495  0B97                     l7334:	
  8496                           
  8497                           ;handle_config.c: 284: }
  8498                           ;handle_config.c: 285: for (i = 0x00; i < 0x08; i++)
  8499  0B97  01A7               	clrf	handle_config@i
  8500  0B98  01A8               	clrf	handle_config@i+1
  8501  0B99                     l7340:	
  8502                           
  8503                           ;handle_config.c: 286: {
  8504                           ;handle_config.c: 287: uart1_receive_buffer[i] = 0x00;
  8505  0B99  0827               	movf	handle_config@i,w
  8506  0B9A  3E47               	addlw	_uart1_receive_buffer& (0+255)
  8507  0B9B  27CC  3188         	fcall	PL8	;call to abstracted procedure
  8508  0B9D  3008               	movlw	8
  8509  0B9E  1903               	skipnz
  8510  0B9F  0227               	subwf	handle_config@i,w
  8511  0BA0  1803               	btfsc	3,0
  8512  0BA1  0008               	return
  8513  0BA2  2B99               	goto	l7340
  8514  0BA3                     __end_of_handle_config:	
  8515  0BA3                     __ptext55:	
  8516 ;; *************** function _uart1_send_byte *****************
  8517 ;; Defined at:
  8518 ;;		line 99 in file "../../source/driver/uart.c"
  8519 ;; Parameters:    Size  Location     Type
  8520 ;;  data            1    wreg     unsigned char 
  8521 ;; Auto vars:     Size  Location     Type
  8522 ;;  data            1    0[COMMON] unsigned char 
  8523 ;; Return value:  Size  Location     Type
  8524 ;;		None               void
  8525 ;; Registers used:
  8526 ;;		wreg
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 1F/3
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;Total ram usage:        1 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; Hardware stack levels required when called:    1
  8539 ;; This function calls:
  8540 ;;		Nothing
  8541 ;; This function is called by:
  8542 ;;		_handle_config
  8543 ;;		_deal_floor
  8544 ;;		_read_card_content
  8545 ;;		_main
  8546 ;; This function uses a non-reentrant model
  8547 ;;
  8548                           
  8549                           
  8550                           ;psect for function _uart1_send_byte
  8551  0BA3                     _uart1_send_byte:	
  8552                           
  8553                           ;incstack = 0
  8554                           ; Regs used in _uart1_send_byte: [wreg]
  8555                           ;uart1_send_byte@data stored from wreg
  8556  0BA3  00F0               	movwf	uart1_send_byte@data
  8557  0BA4                     l1174:	
  8558                           ;uart.c: 103: while (!TX1STAbits.TRMT);
  8559                           
  8560  0BA4  0023               	movlb	3	; select bank3
  8561  0BA5  1C9E               	btfss	30,1	;volatile
  8562  0BA6  2BA4               	goto	l1174
  8563                           
  8564                           ;uart.c: 104: TX1REG = data;
  8565  0BA7  0870               	movf	uart1_send_byte@data,w
  8566  0BA8  009A               	movwf	26	;volatile
  8567  0BA9                     l1177:	
  8568                           ;uart.c: 105: while (!TX1STAbits.TRMT);
  8569                           
  8570  0BA9  189E               	btfsc	30,1	;volatile
  8571  0BAA  0008               	return
  8572  0BAB  2BA9               	goto	l1177
  8573  0BAC                     __end_of_uart1_send_byte:	
  8574  0BAC                     __ptext53:	
  8575 ;; *************** function _write_24c02 *****************
  8576 ;; Defined at:
  8577 ;;		line 144 in file "../../source/driver/24c02.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;  address         1    wreg     unsigned char 
  8580 ;;  data            1    6[COMMON] unsigned char 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  address         1    7[COMMON] unsigned char 
  8583 ;; Return value:  Size  Location     Type
  8584 ;;		None               void
  8585 ;; Registers used:
  8586 ;;		wreg, status,2, status,0, pclath, cstack
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8592 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8593 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;Total ram usage:        2 bytes
  8597 ;; Hardware stack levels used:    1
  8598 ;; Hardware stack levels required when called:    2
  8599 ;; This function calls:
  8600 ;;		_delay_ms
  8601 ;;		_send_byte
  8602 ;;		_start_i2c
  8603 ;;		_stop_i2c
  8604 ;; This function is called by:
  8605 ;;		_handle_config
  8606 ;;		_read_card_content
  8607 ;;		_main
  8608 ;; This function uses a non-reentrant model
  8609 ;;
  8610                           
  8611                           
  8612                           ;psect for function _write_24c02
  8613  0BAC                     _write_24c02:	
  8614                           
  8615                           ;incstack = 0
  8616                           ; Regs used in _write_24c02: [wreg+status,2+status,0+pclath+cstack]
  8617                           ;write_24c02@address stored from wreg
  8618  0BAC  00F7               	movwf	write_24c02@address
  8619                           
  8620                           ;24c02.c: 149: start_i2c();
  8621  0BAD  24B0  3188         	fcall	_start_i2c
  8622                           
  8623                           ;24c02.c: 150: send_byte(0xA0);
  8624  0BAF  30A0               	movlw	160
  8625  0BB0  2486  3188         	fcall	_send_byte
  8626                           
  8627                           ;24c02.c: 151: send_byte(address);
  8628  0BB2  0877               	movf	write_24c02@address,w
  8629  0BB3  2486  3188         	fcall	_send_byte
  8630                           
  8631                           ;24c02.c: 152: send_byte(data);
  8632  0BB5  0876               	movf	write_24c02@data,w
  8633  0BB6  2486  3188         	fcall	_send_byte
  8634                           
  8635                           ;24c02.c: 153: stop_i2c();
  8636  0BB8  2698  3188         	fcall	_stop_i2c
  8637                           
  8638                           ;24c02.c: 154: delay_ms(0x05);
  8639  0BBA  3005               	movlw	5
  8640  0BBB  00F0               	movwf	delay_ms@count
  8641  0BBC  01F1               	clrf	delay_ms@count+1
  8642  0BBD  2CC6               	ljmp	l5402
  8643  0BBE                     __end_of_write_24c02:	
  8644  0BBE                     __ptext56:	
  8645 ;; *************** function _read_eeprom *****************
  8646 ;; Defined at:
  8647 ;;		line 176 in file "../../source/driver/24c02.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;  address         1    wreg     unsigned char 
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;  address         1    0[COMMON] unsigned char 
  8652 ;; Return value:  Size  Location     Type
  8653 ;;                  1    wreg      unsigned char 
  8654 ;; Registers used:
  8655 ;;		wreg
  8656 ;; Tracked objects:
  8657 ;;		On entry : 1C/0
  8658 ;;		On exit  : 1F/3
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;Total ram usage:        1 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; Hardware stack levels required when called:    1
  8668 ;; This function calls:
  8669 ;;		Nothing
  8670 ;; This function is called by:
  8671 ;;		_handle_config
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           
  8676                           ;psect for function _read_eeprom
  8677  0BBE                     _read_eeprom:	
  8678                           
  8679                           ;incstack = 0
  8680                           ; Regs used in _read_eeprom: [wreg]
  8681                           ;read_eeprom@address stored from wreg
  8682  0BBE  00F0               	movwf	read_eeprom@address
  8683                           
  8684                           ;24c02.c: 180: GIE = 0x00;
  8685  0BBF  138B               	bcf	11,7	;volatile
  8686                           
  8687                           ;24c02.c: 181: EEADR = address;
  8688  0BC0  0023               	movlb	3	; select bank3
  8689  0BC1  0091               	movwf	17	;volatile
  8690  0BC2  0192               	clrf	18	;volatile
  8691                           
  8692                           ;24c02.c: 182: EEPGD = 0x00;
  8693  0BC3  1395               	bcf	21,7	;volsfr
  8694                           
  8695                           ;24c02.c: 183: RD = 0x01;
  8696  0BC4  1415               	bsf	21,0	;volsfr
  8697                           
  8698                           ;24c02.c: 184: GIE = 0x01;
  8699  0BC5  178B               	bsf	11,7	;volatile
  8700                           
  8701                           ;24c02.c: 186: return EEDATA;
  8702  0BC6  0813               	movf	19,w	;volatile
  8703  0BC7  0008               	return
  8704  0BC8                     __end_of_read_eeprom:	
  8705  0BC8                     __pmaintext:	
  8706 ;;
  8707 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  8708 ;;
  8709 ;; *************** function _main *****************
  8710 ;; Defined at:
  8711 ;;		line 281 in file "../../source/main/main.c"
  8712 ;; Parameters:    Size  Location     Type
  8713 ;;		None
  8714 ;; Auto vars:     Size  Location     Type
  8715 ;;  i               2   36[BANK0 ] unsigned short 
  8716 ;;  j               1   38[BANK0 ] unsigned char 
  8717 ;;  i               1   35[BANK0 ] unsigned char 
  8718 ;;  pwd             1   34[BANK0 ] unsigned char 
  8719 ;; Return value:  Size  Location     Type
  8720 ;;                  2  1332[COMMON] int 
  8721 ;; Registers used:
  8722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8723 ;; Tracked objects:
  8724 ;;		On entry : 17F/0
  8725 ;;		On exit  : 1E/0
  8726 ;;		Unchanged: 0/0
  8727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8731 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;Total ram usage:        5 bytes
  8733 ;; Hardware stack levels required when called:   11
  8734 ;; This function calls:
  8735 ;;		_delay_ms
  8736 ;;		_handle_config
  8737 ;;		_handle_ic_card
  8738 ;;		_handle_timer
  8739 ;;		_init_hardware
  8740 ;;		_read_24c02
  8741 ;;		_uart1_send_byte
  8742 ;;		_write_24c02
  8743 ;; This function is called by:
  8744 ;;		Startup code after reset
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           
  8749                           ;psect for function _main
  8750  0BC8                     _main:	
  8751                           
  8752                           ;main.c: 287: init_hardware();
  8753                           
  8754                           ;incstack = 0
  8755                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8756  0BC8  3190  206B  3188   	fcall	_init_hardware
  8757                           
  8758                           ;main.c: 288: (RA0 = 0x00);
  8759  0BCB  100C               	bcf	12,0	;volatile
  8760                           
  8761                           ;main.c: 289: (RA1 = 0x00);
  8762  0BCC  108C               	bcf	12,1	;volatile
  8763                           
  8764                           ;main.c: 290: (RC5 = 0x00);
  8765                           
  8766                           ;main.c: 291: delay_ms(500);
  8767  0BCD  27E2  3188         	fcall	PL22	;call to abstracted procedure
  8768  0BCF  24C6  3188         	fcall	_delay_ms
  8769                           
  8770                           ;main.c: 292: (RC5 = 0x01);
  8771  0BD1  0020               	movlb	0	; select bank0
  8772  0BD2  168E               	bsf	14,5	;volatile
  8773                           
  8774                           ;main.c: 293: (RA0 = 0x01);
  8775  0BD3  140C               	bsf	12,0	;volatile
  8776                           
  8777                           ;main.c: 294: (RA1 = 0x01);
  8778  0BD4  148C               	bsf	12,1	;volatile
  8779                           
  8780                           ;main.c: 296: for (BYTE i = 0x00; i < 0x04; i++)
  8781  0BD5  01C3               	clrf	main@i
  8782  0BD6                     l7526:	
  8783                           
  8784                           ;main.c: 297: {
  8785                           ;main.c: 298: card_id[i] = 0x00;
  8786  0BD6  0843               	movf	main@i,w
  8787  0BD7  3E4F               	addlw	_card_id& (0+255)
  8788  0BD8  0086               	movwf	6
  8789  0BD9  3004               	movlw	4
  8790  0BDA  0187               	clrf	7
  8791  0BDB  0181               	clrf	1
  8792  0BDC  0AC3               	incf	main@i,f
  8793  0BDD  0243               	subwf	main@i,w
  8794  0BDE  1C03               	skipc
  8795  0BDF  2BD6               	goto	l7526
  8796                           
  8797                           ;main.c: 299: }
  8798                           ;main.c: 301: sector_number = read_24c02(0x09);
  8799  0BE0  3009               	movlw	9
  8800  0BE1  2472  3188         	fcall	_read_24c02
  8801  0BE3  0020               	movlb	0	; select bank0
  8802  0BE4  00E0               	movwf	_sector_number
  8803                           
  8804                           ;main.c: 302: group = read_24c02(0x01);
  8805  0BE5  3001               	movlw	1
  8806  0BE6  2472  3188         	fcall	_read_24c02
  8807  0BE8  0020               	movlb	0	; select bank0
  8808  0BE9  00DE               	movwf	_group
  8809                           
  8810                           ;main.c: 303: if (read_24c02(0x00) == 0xAA)
  8811  0BEA  3000               	movlw	0
  8812  0BEB  2472  3188         	fcall	_read_24c02
  8813  0BED  3AAA               	xorlw	170
  8814  0BEE  1D03               	skipz
  8815  0BEF  2BF4               	goto	l7536
  8816                           
  8817                           ;main.c: 304: {
  8818                           ;main.c: 305: is_enable = 0x01;
  8819  0BF0  0020               	movlb	0	; select bank0
  8820  0BF1  01DF               	clrf	_is_enable
  8821  0BF2  0ADF               	incf	_is_enable,f
  8822                           
  8823                           ;main.c: 307: }
  8824  0BF3  2BF6               	goto	l7538
  8825  0BF4                     l7536:	
  8826                           
  8827                           ;main.c: 308: else
  8828                           ;main.c: 309: {
  8829                           ;main.c: 310: is_enable = 0x00;
  8830  0BF4  0020               	movlb	0	; select bank0
  8831  0BF5  01DF               	clrf	_is_enable
  8832  0BF6                     l7538:	
  8833                           
  8834                           ;main.c: 311: }
  8835                           ;main.c: 313: if (read_24c02(0xFF) == 0xFF)
  8836  0BF6  30FF               	movlw	255
  8837  0BF7  2472  3188         	fcall	_read_24c02
  8838  0BF9  3AFF               	xorlw	255
  8839  0BFA  1D03               	skipz
  8840  0BFB  2C00               	goto	l7542
  8841  0BFC  30FF               	movlw	255
  8842                           
  8843                           ;main.c: 314: {
  8844                           ;main.c: 315: write_24c02(0xFF, 0x00);
  8845  0BFD  01F6               	clrf	write_24c02@data
  8846  0BFE  23AC  3188         	fcall	_write_24c02
  8847  0C00                     l7542:	
  8848                           
  8849                           ;main.c: 316: }
  8850                           ;main.c: 318: if (is_enable)
  8851  0C00  0020               	movlb	0	; select bank0
  8852  0C01  085F               	movf	_is_enable,w
  8853  0C02  1903               	btfsc	3,2
  8854  0C03  2C0C               	goto	l1338
  8855                           
  8856                           ;main.c: 319: {
  8857                           ;main.c: 320: uart1_send_byte(0xF0);
  8858  0C04  30F0               	movlw	240
  8859  0C05  23A3  3188         	fcall	_uart1_send_byte
  8860                           
  8861                           ;main.c: 321: uart1_send_byte(0xF1);
  8862  0C07  30F1               	movlw	241
  8863  0C08  23A3  3188         	fcall	_uart1_send_byte
  8864                           
  8865                           ;main.c: 322: uart1_send_byte(0xFF);
  8866  0C0A  30FF               	movlw	255
  8867  0C0B  2C14               	goto	L1
  8868  0C0C                     l1338:	
  8869                           ;main.c: 323: }
  8870                           
  8871                           
  8872                           ;main.c: 324: else
  8873                           ;main.c: 325: {
  8874                           ;main.c: 326: (RA0 = 0x01);
  8875  0C0C  140C               	bsf	12,0	;volatile
  8876                           
  8877                           ;main.c: 327: uart1_send_byte(0xF0);
  8878  0C0D  30F0               	movlw	240
  8879  0C0E  23A3  3188         	fcall	_uart1_send_byte
  8880                           
  8881                           ;main.c: 328: uart1_send_byte(0xF1);
  8882  0C10  30F1               	movlw	241
  8883  0C11  23A3  3188         	fcall	_uart1_send_byte
  8884                           
  8885                           ;main.c: 329: uart1_send_byte(0xFE);
  8886  0C13  30FE               	movlw	254
  8887  0C14                     L1:	
  8888  0C14  23A3  3188         	fcall	_uart1_send_byte
  8889                           
  8890                           ;main.c: 330: }
  8891                           ;main.c: 332: if (read_24c02(0x02) == 0xEF)
  8892  0C16  3002               	movlw	2
  8893  0C17  2472  3188         	fcall	_read_24c02
  8894  0C19  3AEF               	xorlw	239
  8895  0C1A  1D03               	skipz
  8896  0C1B  2C46               	goto	l1348
  8897                           
  8898                           ;main.c: 333: {
  8899                           ;main.c: 334: for (BYTE j = 0x00; j < 0x06; j++)
  8900  0C1C  0020               	movlb	0	; select bank0
  8901  0C1D  01C6               	clrf	main@j
  8902  0C1E                     l7554:	
  8903                           
  8904                           ;main.c: 335: {
  8905                           ;main.c: 336: pwd = read_24c02(0x03 + j);
  8906  0C1E  0846               	movf	main@j,w
  8907  0C1F  3E03               	addlw	3
  8908  0C20  2472  3188         	fcall	_read_24c02
  8909  0C22  0020               	movlb	0	; select bank0
  8910  0C23  00C2               	movwf	main@pwd
  8911                           
  8912                           ;main.c: 337: for (WORD i = 0x00; i < 0x100; i++)
  8913  0C24  01C4               	clrf	main@i_954
  8914  0C25  01C5               	clrf	main@i_954+1
  8915  0C26                     l7562:	
  8916                           
  8917                           ;main.c: 338: {
  8918                           ;main.c: 339: if (PWD_TABLE[i] == pwd)
  8919  0C26  3001               	movlw	low (_PWD_TABLE| (0+32768))
  8920  0C27  0744               	addwf	main@i_954,w
  8921  0C28  0084               	movwf	4
  8922  0C29  3098               	movlw	high (_PWD_TABLE| (0+32768))
  8923  0C2A  3D45               	addwfc	main@i_954+1,w
  8924  0C2B  0085               	movwf	5
  8925  0C2C  0800               	movf	0,w	;code access
  8926  0C2D  0642               	xorwf	main@pwd,w
  8927  0C2E  1D03               	skipz
  8928  0C2F  2C37               	goto	l7568
  8929                           
  8930                           ;main.c: 340: {
  8931                           ;main.c: 341: keys[j] = i;
  8932  0C30  0846               	movf	main@j,w
  8933  0C31  3ED4               	addlw	_keys& (0+255)
  8934  0C32  0086               	movwf	6
  8935  0C33  0187               	clrf	7
  8936  0C34  0844               	movf	main@i_954,w
  8937  0C35  0081               	movwf	1
  8938                           
  8939                           ;main.c: 342: break;
  8940  0C36  2C41               	goto	l7572
  8941  0C37                     l7568:	
  8942  0C37  0AC4               	incf	main@i_954,f
  8943  0C38  1903               	skipnz
  8944  0C39  0AC5               	incf	main@i_954+1,f
  8945  0C3A  3001               	movlw	1
  8946  0C3B  0245               	subwf	main@i_954+1,w
  8947  0C3C  3000               	movlw	0
  8948  0C3D  1903               	skipnz
  8949  0C3E  0244               	subwf	main@i_954,w
  8950  0C3F  1C03               	skipc
  8951  0C40  2C26               	goto	l7562
  8952  0C41                     l7572:	
  8953  0C41  3006               	movlw	6
  8954  0C42  0AC6               	incf	main@j,f
  8955  0C43  0246               	subwf	main@j,w
  8956  0C44  1C03               	skipc
  8957  0C45  2C1E               	goto	l7554
  8958  0C46                     l1348:	
  8959                           ;main.c: 354: }
  8960                           ;main.c: 357: do {
  8961                           
  8962  0C46  0064               	clrwdt	;# 
  8963                           
  8964                           ;main.c: 359: if (flag_uart1_cmd)
  8965  0C47  0020               	movlb	0	; select bank0
  8966  0C48  085B               	movf	_flag_uart1_cmd,w
  8967  0C49  1903               	btfsc	3,2
  8968  0C4A  2C4E               	goto	l7582
  8969                           
  8970                           ;main.c: 360: {
  8971                           ;main.c: 361: flag_uart1_cmd = 0x00;
  8972  0C4B  01DB               	clrf	_flag_uart1_cmd
  8973                           
  8974                           ;main.c: 362: handle_config();
  8975  0C4C  21B0  3188         	fcall	_handle_config
  8976  0C4E                     l7582:	
  8977                           
  8978                           ;main.c: 363: }
  8979                           ;main.c: 364: if (flag_uart2_cmd)
  8980  0C4E  085C               	movf	_flag_uart2_cmd,w
  8981  0C4F  1903               	btfsc	3,2
  8982  0C50  2C69               	goto	l7596
  8983                           
  8984                           ;main.c: 365: {
  8985                           ;main.c: 366: flag_uart2_cmd = 0x00;
  8986  0C51  01DC               	clrf	_flag_uart2_cmd
  8987                           
  8988                           ;main.c: 368: if(uart2_receive_buffer[1]==0xf0)
  8989  0C52  0022               	movlb	2	; select bank2
  8990  0C53  0821               	movf	(_uart2_receive_buffer^(0+256)+1),w
  8991  0C54  3AF0               	xorlw	240
  8992  0C55  1D03               	skipz
  8993  0C56  2C5F               	goto	l7590
  8994                           
  8995                           ;main.c: 369: {
  8996                           ;main.c: 370: uart1_send_byte(uart2_receive_buffer[1]);
  8997  0C57  0821               	movf	(_uart2_receive_buffer^(0+256)+1),w
  8998  0C58  23A3  3188         	fcall	_uart1_send_byte
  8999                           
  9000                           ;main.c: 372: uart1_send_byte(uart2_receive_buffer[2]);
  9001  0C5A  0022               	movlb	2	; select bank2
  9002  0C5B  0822               	movf	(_uart2_receive_buffer^(0+256)+2),w
  9003  0C5C  23A3  3188         	fcall	_uart1_send_byte
  9004                           
  9005                           ;main.c: 374: uart1_send_byte(uart2_receive_buffer[3]);
  9006  0C5E  0022               	movlb	2	; select bank2
  9007  0C5F                     l7590:	
  9008                           ;main.c: 375: }
  9009                           
  9010                           
  9011                           ;main.c: 376: else
  9012                           ;main.c: 377: {
  9013                           ;main.c: 378: uart1_send_byte(uart2_receive_buffer[3]);
  9014  0C5F  0823               	movf	(_uart2_receive_buffer^(0+256)+3),w
  9015  0C60  23A3  3188         	fcall	_uart1_send_byte
  9016                           
  9017                           ;main.c: 379: }
  9018                           ;main.c: 380: (RC5 = 0x00);
  9019  0C62  0020               	movlb	0	; select bank0
  9020                           
  9021                           ;main.c: 381: delay_ms(500);
  9022  0C63  27E2  3188         	fcall	PL22	;call to abstracted procedure
  9023  0C65  24C6  3188         	fcall	_delay_ms
  9024                           
  9025                           ;main.c: 382: (RC5 = 0x01);
  9026  0C67  0020               	movlb	0	; select bank0
  9027  0C68  168E               	bsf	14,5	;volatile
  9028  0C69                     l7596:	
  9029                           
  9030                           ;main.c: 385: }
  9031                           ;main.c: 386: if (flag_timer)
  9032  0C69  085A               	movf	_flag_timer,w
  9033  0C6A  1903               	btfsc	3,2
  9034  0C6B  2C6F               	goto	l7602
  9035                           
  9036                           ;main.c: 387: {
  9037                           ;main.c: 388: flag_timer = 0x00;
  9038  0C6C  01DA               	clrf	_flag_timer
  9039                           
  9040                           ;main.c: 389: handle_timer();
  9041  0C6D  2786  3188         	fcall	_handle_timer
  9042  0C6F                     l7602:	
  9043                           
  9044                           ;main.c: 390: }
  9045                           ;main.c: 391: handle_ic_card();
  9046  0C6F  24FC  3188         	fcall	_handle_ic_card
  9047                           
  9048                           ;main.c: 392: } while (1);
  9049  0C71  2C46               	goto	l1348
  9050  0C72                     __end_of_main:	
  9051  0C72                     __ptext57:	
  9052 ;; *************** function _read_24c02 *****************
  9053 ;; Defined at:
  9054 ;;		line 158 in file "../../source/driver/24c02.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;  address         1    wreg     unsigned char 
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;  address         1    2[COMMON] unsigned char 
  9059 ;;  data            1    3[COMMON] unsigned char 
  9060 ;; Return value:  Size  Location     Type
  9061 ;;                  1    wreg      unsigned char 
  9062 ;; Registers used:
  9063 ;;		wreg, status,2, status,0, pclath, cstack
  9064 ;; Tracked objects:
  9065 ;;		On entry : 1C/0
  9066 ;;		On exit  : 0/0
  9067 ;;		Unchanged: 0/0
  9068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;Total ram usage:        2 bytes
  9074 ;; Hardware stack levels used:    1
  9075 ;; Hardware stack levels required when called:    2
  9076 ;; This function calls:
  9077 ;;		_rece_byte
  9078 ;;		_send_byte
  9079 ;;		_start_i2c
  9080 ;;		_stop_i2c
  9081 ;; This function is called by:
  9082 ;;		_handle_config
  9083 ;;		_check_user_card
  9084 ;;		_read_card_content
  9085 ;;		_main
  9086 ;; This function uses a non-reentrant model
  9087 ;;
  9088                           
  9089                           
  9090                           ;psect for function _read_24c02
  9091  0C72                     _read_24c02:	
  9092                           
  9093                           ;incstack = 0
  9094                           ; Regs used in _read_24c02: [wreg+status,2+status,0+pclath+cstack]
  9095                           ;read_24c02@address stored from wreg
  9096  0C72  00F2               	movwf	read_24c02@address
  9097                           
  9098                           ;24c02.c: 164: start_i2c();
  9099  0C73  24B0  3188         	fcall	_start_i2c
  9100                           
  9101                           ;24c02.c: 165: send_byte(0xa0);
  9102  0C75  30A0               	movlw	160
  9103  0C76  2486  3188         	fcall	_send_byte
  9104                           
  9105                           ;24c02.c: 166: send_byte(address);
  9106  0C78  0872               	movf	read_24c02@address,w
  9107  0C79  2486  3188         	fcall	_send_byte
  9108                           
  9109                           ;24c02.c: 167: start_i2c();
  9110  0C7B  24B0  3188         	fcall	_start_i2c
  9111                           
  9112                           ;24c02.c: 168: send_byte(0xa1);
  9113  0C7D  30A1               	movlw	161
  9114  0C7E  2486  3188         	fcall	_send_byte
  9115                           
  9116                           ;24c02.c: 169: data = rece_byte();
  9117  0C80  24E1  3188         	fcall	_rece_byte
  9118  0C82  00F3               	movwf	read_24c02@data
  9119                           
  9120                           ;24c02.c: 170: stop_i2c();
  9121  0C83  2698               	fcall	_stop_i2c
  9122                           
  9123                           ;24c02.c: 172: return data;
  9124  0C84  0873               	movf	read_24c02@data,w
  9125  0C85  0008               	return
  9126  0C86                     __end_of_read_24c02:	
  9127  0C86                     __ptext60:	
  9128 ;; *************** function _send_byte *****************
  9129 ;; Defined at:
  9130 ;;		line 111 in file "../../source/driver/24c02.c"
  9131 ;; Parameters:    Size  Location     Type
  9132 ;;  write_data      1    wreg     unsigned char 
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;  write_data      1    0[COMMON] unsigned char 
  9135 ;;  i               1    1[COMMON] unsigned char 
  9136 ;; Return value:  Size  Location     Type
  9137 ;;		None               void
  9138 ;; Registers used:
  9139 ;;		wreg, status,2, status,0
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;Total ram usage:        2 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    1
  9152 ;; This function calls:
  9153 ;;		Nothing
  9154 ;; This function is called by:
  9155 ;;		_write_24c02
  9156 ;;		_read_24c02
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           
  9161                           ;psect for function _send_byte
  9162  0C86                     _send_byte:	
  9163                           
  9164                           ;incstack = 0
  9165                           ; Regs used in _send_byte: [wreg+status,2+status,0]
  9166                           ;send_byte@write_data stored from wreg
  9167  0C86  00F0               	movwf	send_byte@write_data
  9168                           
  9169                           ;24c02.c: 115: BYTE i;
  9170                           ;24c02.c: 117: for (i = 0x00; i < 0x08; i++)
  9171  0C87  01F1               	clrf	send_byte@i
  9172  0C88                     l638:	
  9173                           
  9174                           ;24c02.c: 118: {
  9175                           ;24c02.c: 119: if (write_data & 0x80)
  9176  0C88  1FF0               	btfss	send_byte@write_data,7
  9177  0C89  2C8D               	goto	l640
  9178                           
  9179                           ;24c02.c: 120: {
  9180                           ;24c02.c: 121: RC4 = 0x01;
  9181  0C8A  0020               	movlb	0	; select bank0
  9182  0C8B  160E               	bsf	14,4	;volatile
  9183                           
  9184                           ;24c02.c: 122: }
  9185  0C8C  2C8F               	goto	l641
  9186  0C8D                     l640:	
  9187                           
  9188                           ;24c02.c: 123: else
  9189                           ;24c02.c: 124: {
  9190                           ;24c02.c: 125: RC4 = 0x00;
  9191  0C8D  0020               	movlb	0	; select bank0
  9192  0C8E  120E               	bcf	14,4	;volatile
  9193  0C8F                     l641:	
  9194                           
  9195                           ;24c02.c: 126: }
  9196                           ;24c02.c: 127: __nop();
  9197  0C8F  0000               	nop
  9198                           
  9199                           ;24c02.c: 128: RC3 = 0x01;
  9200  0C90  0020               	movlb	0	; select bank0
  9201  0C91  158E               	bsf	14,3	;volatile
  9202                           
  9203                           ;24c02.c: 129: __nop();__nop();__nop();__nop();__nop();
  9204  0C92  0000               	nop
  9205  0C93  0000               	nop
  9206  0C94  0000               	nop
  9207  0C95  0000               	nop
  9208  0C96  0000               	nop
  9209                           
  9210                           ;24c02.c: 130: RC3 = 0x00;
  9211  0C97  0020               	movlb	0	; select bank0
  9212  0C98  118E               	bcf	14,3	;volatile
  9213                           
  9214                           ;24c02.c: 131: __nop();
  9215  0C99  0000               	nop
  9216  0C9A  3008               	movlw	8
  9217                           
  9218                           ;24c02.c: 132: write_data <<= 0x01;
  9219  0C9B  35F0               	lslf	send_byte@write_data,f
  9220  0C9C  0AF1               	incf	send_byte@i,f
  9221  0C9D  0271               	subwf	send_byte@i,w
  9222  0C9E  1C03               	skipc
  9223  0C9F  2C88               	goto	l638
  9224                           
  9225                           ;24c02.c: 133: }
  9226                           ;24c02.c: 134: __nop();__nop();
  9227  0CA0  0000               	nop
  9228  0CA1  0000               	nop
  9229                           
  9230                           ;24c02.c: 135: RC4 = 0x01;
  9231  0CA2  0020               	movlb	0	; select bank0
  9232  0CA3  160E               	bsf	14,4	;volatile
  9233                           
  9234                           ;24c02.c: 136: __nop();__nop();
  9235  0CA4  0000               	nop
  9236  0CA5  0000               	nop
  9237                           
  9238                           ;24c02.c: 137: RC3 = 0x01;
  9239  0CA6  0020               	movlb	0	; select bank0
  9240  0CA7  158E               	bsf	14,3	;volatile
  9241                           
  9242                           ;24c02.c: 138: __nop();__nop();__nop();
  9243  0CA8  0000               	nop
  9244  0CA9  0000               	nop
  9245  0CAA  0000               	nop
  9246                           
  9247                           ;24c02.c: 139: RC3 = 0x00;
  9248  0CAB  0020               	movlb	0	; select bank0
  9249  0CAC  118E               	bcf	14,3	;volatile
  9250                           
  9251                           ;24c02.c: 140: __nop();__nop();
  9252  0CAD  0000               	nop
  9253  0CAE  0000               	nop
  9254  0CAF  0008               	return
  9255  0CB0                     __end_of_send_byte:	
  9256  0CB0                     __ptext59:	
  9257 ;; *************** function _start_i2c *****************
  9258 ;; Defined at:
  9259 ;;		line 57 in file "../../source/driver/24c02.c"
  9260 ;; Parameters:    Size  Location     Type
  9261 ;;		None
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;		None
  9264 ;; Return value:  Size  Location     Type
  9265 ;;		None               void
  9266 ;; Registers used:
  9267 ;;		None
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;Total ram usage:        0 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    1
  9280 ;; This function calls:
  9281 ;;		Nothing
  9282 ;; This function is called by:
  9283 ;;		_write_24c02
  9284 ;;		_read_24c02
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           
  9289                           ;psect for function _start_i2c
  9290  0CB0                     _start_i2c:	
  9291                           
  9292                           ;24c02.c: 61: RC4 = 0x01;
  9293                           
  9294                           ;incstack = 0
  9295                           ; Regs used in _start_i2c: []
  9296  0CB0  0020               	movlb	0	; select bank0
  9297  0CB1  160E               	bsf	14,4	;volatile
  9298                           
  9299                           ;24c02.c: 62: __nop();
  9300  0CB2  0000               	nop
  9301                           
  9302                           ;24c02.c: 63: RC3 = 0x01;
  9303  0CB3  0020               	movlb	0	; select bank0
  9304  0CB4  158E               	bsf	14,3	;volatile
  9305                           
  9306                           ;24c02.c: 64: __nop();__nop();__nop();__nop();__nop();
  9307  0CB5  0000               	nop
  9308  0CB6  0000               	nop
  9309  0CB7  0000               	nop
  9310  0CB8  0000               	nop
  9311  0CB9  0000               	nop
  9312                           
  9313                           ;24c02.c: 65: RC4 = 0x00;
  9314  0CBA  0020               	movlb	0	; select bank0
  9315  0CBB  120E               	bcf	14,4	;volatile
  9316                           
  9317                           ;24c02.c: 66: __nop();__nop();__nop();__nop();__nop();
  9318  0CBC  0000               	nop
  9319  0CBD  0000               	nop
  9320  0CBE  0000               	nop
  9321  0CBF  0000               	nop
  9322  0CC0  0000               	nop
  9323                           
  9324                           ;24c02.c: 67: RC3 = 0x00;
  9325  0CC1  0020               	movlb	0	; select bank0
  9326  0CC2  118E               	bcf	14,3	;volatile
  9327                           
  9328                           ;24c02.c: 68: __nop();__nop();
  9329  0CC3  0000               	nop
  9330  0CC4  0000               	nop
  9331  0CC5  0008               	return
  9332  0CC6                     __end_of_start_i2c:	
  9333  0CC6                     __ptext54:	
  9334 ;; *************** function _delay_ms *****************
  9335 ;; Defined at:
  9336 ;;		line 70 in file "../../source/driver/delay.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;  count           2    0[COMMON] unsigned short 
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;  j               2    4[COMMON] unsigned short 
  9341 ;;  i               2    2[COMMON] unsigned short 
  9342 ;; Return value:  Size  Location     Type
  9343 ;;		None               void
  9344 ;; Registers used:
  9345 ;;		wreg, status,2, status,0
  9346 ;; Tracked objects:
  9347 ;;		On entry : 0/0
  9348 ;;		On exit  : 0/0
  9349 ;;		Unchanged: 0/0
  9350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;Total ram usage:        6 bytes
  9356 ;; Hardware stack levels used:    1
  9357 ;; Hardware stack levels required when called:    1
  9358 ;; This function calls:
  9359 ;;		Nothing
  9360 ;; This function is called by:
  9361 ;;		_handle_config
  9362 ;;		_deal_floor
  9363 ;;		_write_24c02
  9364 ;;		_handle_beep
  9365 ;;		_main
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           
  9370                           ;psect for function _delay_ms
  9371  0CC6                     _delay_ms:	
  9372  0CC6                     l5402:	
  9373                           ;incstack = 0
  9374                           ; Regs used in _delay_ms: [wreg+status,2+status,0]
  9375                           
  9376                           
  9377                           ;delay.c: 74: WORD i, j;
  9378                           ;delay.c: 76: for (i = 0; i < count; i++)
  9379  0CC6  01F2               	clrf	delay_ms@i
  9380  0CC7  01F3               	clrf	delay_ms@i+1
  9381  0CC8                     l5416:	
  9382  0CC8  0871               	movf	delay_ms@count+1,w
  9383  0CC9  0273               	subwf	delay_ms@i+1,w
  9384  0CCA  1D03               	skipz
  9385  0CCB  2CCE               	goto	u4935
  9386  0CCC  0870               	movf	delay_ms@count,w
  9387  0CCD  0272               	subwf	delay_ms@i,w
  9388  0CCE                     u4935:	
  9389  0CCE  1803               	btfsc	3,0
  9390  0CCF  0008               	return
  9391                           
  9392                           ;delay.c: 77: {
  9393                           ;delay.c: 78: for (j = 0; j < 150; j++)
  9394  0CD0  01F4               	clrf	delay_ms@j
  9395  0CD1  01F5               	clrf	delay_ms@j+1
  9396  0CD2                     l686:	
  9397  0CD2  0064               	clrwdt	;# 
  9398  0CD3  0AF4               	incf	delay_ms@j,f
  9399  0CD4  1903               	skipnz
  9400  0CD5  0AF5               	incf	delay_ms@j+1,f
  9401  0CD6  3000               	movlw	0
  9402  0CD7  0275               	subwf	delay_ms@j+1,w
  9403  0CD8  3096               	movlw	150
  9404  0CD9  1903               	skipnz
  9405  0CDA  0274               	subwf	delay_ms@j,w
  9406  0CDB  1C03               	skipc
  9407  0CDC  2CD2               	goto	l686
  9408  0CDD  0AF2               	incf	delay_ms@i,f
  9409  0CDE  1903               	skipnz
  9410  0CDF  0AF3               	incf	delay_ms@i+1,f
  9411  0CE0  2CC8               	goto	l5416
  9412  0CE1                     __end_of_delay_ms:	
  9413  0CE1                     __ptext61:	
  9414 ;; *************** function _rece_byte *****************
  9415 ;; Defined at:
  9416 ;;		line 85 in file "../../source/driver/24c02.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;		None
  9419 ;; Auto vars:     Size  Location     Type
  9420 ;;  i               1    1[COMMON] unsigned char 
  9421 ;;  read_data       1    0[COMMON] unsigned char 
  9422 ;; Return value:  Size  Location     Type
  9423 ;;                  1    wreg      unsigned char 
  9424 ;; Registers used:
  9425 ;;		wreg, status,2, status,0
  9426 ;; Tracked objects:
  9427 ;;		On entry : 0/0
  9428 ;;		On exit  : 1F/1
  9429 ;;		Unchanged: 0/0
  9430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;Total ram usage:        2 bytes
  9436 ;; Hardware stack levels used:    1
  9437 ;; Hardware stack levels required when called:    1
  9438 ;; This function calls:
  9439 ;;		Nothing
  9440 ;; This function is called by:
  9441 ;;		_read_24c02
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           
  9446                           ;psect for function _rece_byte
  9447  0CE1                     _rece_byte:	
  9448                           
  9449                           ;24c02.c: 90: BYTE read_data = 0x00;
  9450                           
  9451                           ;incstack = 0
  9452                           ; Regs used in _rece_byte: [wreg+status,2+status,0]
  9453  0CE1  01F0               	clrf	rece_byte@read_data
  9454                           
  9455                           ;24c02.c: 92: (TRISCbits.TRISC4) = 0x01;
  9456  0CE2  0021               	movlb	1	; select bank1
  9457  0CE3  160E               	bsf	14,4	;volatile
  9458                           
  9459                           ;24c02.c: 93: for (i = 0x00; i < 0x08; i++)
  9460  0CE4  01F1               	clrf	rece_byte@i
  9461  0CE5                     l632:	
  9462                           
  9463                           ;24c02.c: 94: {
  9464                           ;24c02.c: 95: __nop();__nop();__nop();
  9465  0CE5  0000               	nop
  9466  0CE6  0000               	nop
  9467  0CE7  0000               	nop
  9468                           
  9469                           ;24c02.c: 96: RC3 = 0x01;
  9470  0CE8  0020               	movlb	0	; select bank0
  9471  0CE9  158E               	bsf	14,3	;volatile
  9472                           
  9473                           ;24c02.c: 97: __nop();__nop();
  9474  0CEA  0000               	nop
  9475  0CEB  0000               	nop
  9476                           
  9477                           ;24c02.c: 98: read_data <<= 0x01;
  9478  0CEC  35F0               	lslf	rece_byte@read_data,f
  9479                           
  9480                           ;24c02.c: 99: if (RC4 == 0x01)
  9481  0CED  0020               	movlb	0	; select bank0
  9482  0CEE  1A0E               	btfsc	14,4	;volatile
  9483                           
  9484                           ;24c02.c: 100: {
  9485                           ;24c02.c: 101: read_data = read_data + 0x01;
  9486  0CEF  0AF0               	incf	rece_byte@read_data,f
  9487                           
  9488                           ;24c02.c: 102: }
  9489                           ;24c02.c: 103: __nop();
  9490  0CF0  0000               	nop
  9491                           
  9492                           ;24c02.c: 104: RC3 = 0x00;
  9493  0CF1  0020               	movlb	0	; select bank0
  9494  0CF2  118E               	bcf	14,3	;volatile
  9495  0CF3  3008               	movlw	8
  9496  0CF4  0AF1               	incf	rece_byte@i,f
  9497  0CF5  0271               	subwf	rece_byte@i,w
  9498  0CF6  1C03               	skipc
  9499  0CF7  2CE5               	goto	l632
  9500                           
  9501                           ;24c02.c: 105: }
  9502                           ;24c02.c: 106: (TRISCbits.TRISC4) = 0x00;
  9503  0CF8  0021               	movlb	1	; select bank1
  9504  0CF9  120E               	bcf	14,4	;volatile
  9505                           
  9506                           ;24c02.c: 107: return read_data;
  9507  0CFA  0870               	movf	rece_byte@read_data,w
  9508  0CFB  0008               	return
  9509  0CFC                     __end_of_rece_byte:	
  9510  0CFC                     __ptext18:	
  9511 ;; *************** function _handle_ic_card *****************
  9512 ;; Defined at:
  9513 ;;		line 595 in file "../../source/application/handle_ic_card.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;		None
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;		None
  9518 ;; Return value:  Size  Location     Type
  9519 ;;		None               void
  9520 ;; Registers used:
  9521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9522 ;; Tracked objects:
  9523 ;;		On entry : 1F/0
  9524 ;;		On exit  : 1E/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;Total ram usage:        0 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; Hardware stack levels required when called:   10
  9534 ;; This function calls:
  9535 ;;		_checkpsw
  9536 ;;		_checkpsw_super
  9537 ;;		_handle_beep
  9538 ;;		_read_card_content
  9539 ;;		_read_id
  9540 ;;		_rfcard
  9541 ;;		_same_id
  9542 ;; This function is called by:
  9543 ;;		_main
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           
  9548                           ;psect for function _handle_ic_card
  9549  0CFC                     _handle_ic_card:	
  9550                           
  9551                           ;handle_ic_card.c: 599: if (!rfcard())
  9552                           
  9553                           ;incstack = 0
  9554                           ; Regs used in _handle_ic_card: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9555  0CFC  2737  3188         	fcall	_rfcard
  9556  0CFE  3800               	iorlw	0
  9557  0CFF  1D03               	skipz
  9558  0D00  2D44               	goto	l7380
  9559                           
  9560                           ;handle_ic_card.c: 600: {
  9561                           ;handle_ic_card.c: 601: count = 0x05;
  9562  0D01  3005               	movlw	5
  9563  0D02  00D7               	movwf	_count
  9564                           
  9565                           ;handle_ic_card.c: 602: if (read_id())
  9566  0D03  272B  3188         	fcall	_read_id
  9567  0D05  3A00               	xorlw	0
  9568  0D06  1903               	skipnz
  9569  0D07  0008               	return
  9570                           
  9571                           ;handle_ic_card.c: 603: {
  9572                           ;handle_ic_card.c: 604: if (!same_id())
  9573  0D08  276E  3188         	fcall	_same_id
  9574  0D0A  3800               	iorlw	0
  9575  0D0B  1D03               	skipz
  9576  0D0C  0008               	return
  9577  0D0D  0064               	clrwdt	;# 
  9578                           
  9579                           ;handle_ic_card.c: 607: card_id[0] = snr_rc500[0];
  9580  0D0E  0021               	movlb	1	; select bank1
  9581  0D0F  085A               	movf	_snr_rc500^(0+128),w
  9582  0D10  0020               	movlb	0	; select bank0
  9583  0D11  00CF               	movwf	_card_id
  9584                           
  9585                           ;handle_ic_card.c: 608: card_id[1] = snr_rc500[1];
  9586  0D12  0021               	movlb	1	; select bank1
  9587  0D13  085B               	movf	(_snr_rc500^(0+128)+1),w
  9588  0D14  0020               	movlb	0	; select bank0
  9589  0D15  00D0               	movwf	_card_id+1
  9590                           
  9591                           ;handle_ic_card.c: 609: card_id[2] = snr_rc500[2];
  9592  0D16  0021               	movlb	1	; select bank1
  9593  0D17  085C               	movf	(_snr_rc500^(0+128)+2),w
  9594  0D18  0020               	movlb	0	; select bank0
  9595  0D19  00D1               	movwf	_card_id+2
  9596                           
  9597                           ;handle_ic_card.c: 610: card_id[3] = snr_rc500[3];
  9598  0D1A  0021               	movlb	1	; select bank1
  9599  0D1B  085D               	movf	(_snr_rc500^(0+128)+3),w
  9600  0D1C  0020               	movlb	0	; select bank0
  9601  0D1D  00D2               	movwf	_card_id+3
  9602                           
  9603                           ;handle_ic_card.c: 611: ic_card[0] = card_id[3];
  9604  0D1E  0021               	movlb	1	; select bank1
  9605  0D1F  00A0               	movwf	_ic_card^(0+128)
  9606                           
  9607                           ;handle_ic_card.c: 612: ic_card[1] = card_id[2];
  9608  0D20  0020               	movlb	0	; select bank0
  9609  0D21  0851               	movf	_card_id+2,w
  9610  0D22  0021               	movlb	1	; select bank1
  9611  0D23  00A1               	movwf	(_ic_card^(0+128)+1)
  9612                           
  9613                           ;handle_ic_card.c: 613: ic_card[2] = card_id[1];
  9614  0D24  0020               	movlb	0	; select bank0
  9615  0D25  0850               	movf	_card_id+1,w
  9616  0D26  0021               	movlb	1	; select bank1
  9617  0D27  00A2               	movwf	(_ic_card^(0+128)+2)
  9618                           
  9619                           ;handle_ic_card.c: 614: ic_card[3] = card_id[0];
  9620  0D28  0020               	movlb	0	; select bank0
  9621  0D29  084F               	movf	_card_id,w
  9622  0D2A  0021               	movlb	1	; select bank1
  9623  0D2B  00A3               	movwf	(_ic_card^(0+128)+3)
  9624                           
  9625                           ;handle_ic_card.c: 619: if (checkpsw())
  9626  0D2C  2551  3188         	fcall	_checkpsw
  9627  0D2E  3A00               	xorlw	0
  9628  0D2F  1903               	skipnz
  9629  0D30  2D3D               	goto	l483
  9630  0D31  0064               	clrwdt	;# 
  9631  0D32                     L4:	
  9632                           
  9633                           ;handle_ic_card.c: 623: {
  9634                           ;handle_ic_card.c: 624: flag_record = 0x01;
  9635  0D32  201E  3188         	fcall	_read_card_content
  9636  0D34  3A00               	xorlw	0
  9637  0D35  1903               	skipnz
  9638  0D36  2D3A               	goto	l7368
  9639                           
  9640                           ;handle_ic_card.c: 625: handle_beep();
  9641  0D37  27E8               	fcall	_handle_beep
  9642                           
  9643                           ;handle_ic_card.c: 626: count = 0x05;
  9644  0D38  3005               	movlw	5
  9645  0D39  00D7               	movwf	_count
  9646  0D3A                     l7368:	
  9647                           ;handle_ic_card.c: 627: }
  9648                           
  9649                           
  9650                           ;handle_ic_card.c: 631: }
  9651                           ;handle_ic_card.c: 632: card_type = 0x00;
  9652  0D3A  0020               	movlb	0	; select bank0
  9653  0D3B  01D6               	clrf	_card_type
  9654                           
  9655                           ;handle_ic_card.c: 633: }
  9656  0D3C  0008               	return
  9657  0D3D                     l483:	
  9658  0D3D  0064               	clrwdt	;# 
  9659                           
  9660                           ;handle_ic_card.c: 637: if (checkpsw_super())
  9661  0D3E  2755  3188         	fcall	_checkpsw_super
  9662  0D40  3A00               	xorlw	0
  9663  0D41  1903               	skipnz
  9664  0D42  0008               	return
  9665  0D43  2D32               	goto	L4
  9666  0D44                     l7380:	
  9667                           ;handle_ic_card.c: 659: }
  9668                           ;handle_ic_card.c: 660: }
  9669                           
  9670                           ;handle_ic_card.c: 656: else
  9671                           ;handle_ic_card.c: 657: {
  9672                           
  9673                           ;handle_ic_card.c: 638: {
  9674                           ;handle_ic_card.c: 639: if (read_card_content())
  9675                           
  9676                           
  9677                           ;handle_ic_card.c: 666: else
  9678                           ;handle_ic_card.c: 667: {
  9679                           ;handle_ic_card.c: 668: if (count > 0x0A)
  9680  0D44  300B               	movlw	11
  9681  0D45  0257               	subwf	_count,w
  9682  0D46  1C03               	skipc
  9683  0D47  2D4F               	goto	l7386
  9684  0D48  3005               	movlw	5
  9685                           
  9686                           ;handle_ic_card.c: 669: {
  9687                           ;handle_ic_card.c: 670: card_id[0] = 0x00;
  9688  0D49  01CF               	clrf	_card_id
  9689                           
  9690                           ;handle_ic_card.c: 671: card_id[1] = 0x00;
  9691  0D4A  01D0               	clrf	_card_id+1
  9692                           
  9693                           ;handle_ic_card.c: 672: card_id[2] = 0x00;
  9694  0D4B  01D1               	clrf	_card_id+2
  9695                           
  9696                           ;handle_ic_card.c: 673: card_id[3] = 0x00;
  9697  0D4C  01D2               	clrf	_card_id+3
  9698                           
  9699                           ;handle_ic_card.c: 674: count = 0x05;
  9700  0D4D  00D7               	movwf	_count
  9701                           
  9702                           ;handle_ic_card.c: 675: }
  9703  0D4E  0008               	return
  9704  0D4F                     l7386:	
  9705                           
  9706                           ;handle_ic_card.c: 676: else
  9707                           ;handle_ic_card.c: 677: {
  9708                           ;handle_ic_card.c: 678: count++;
  9709  0D4F  0AD7               	incf	_count,f
  9710  0D50  0008               	return
  9711  0D51                     __end_of_handle_ic_card:	
  9712  0D51                     __ptext38:	
  9713 ;; *************** function _checkpsw *****************
  9714 ;; Defined at:
  9715 ;;		line 573 in file "../../source/application/handle_ic_card.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      unsigned char 
  9722 ;; Registers used:
  9723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 1F/1
  9726 ;;		On exit  : 1F/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;Total ram usage:        0 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    7
  9736 ;; This function calls:
  9737 ;;		_Mf500PiccAuthState
  9738 ;;		_Mf500PiccLoadKey
  9739 ;; This function is called by:
  9740 ;;		_handle_ic_card
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           
  9745                           ;psect for function _checkpsw
  9746  0D51                     _checkpsw:	
  9747                           
  9748                           ;handle_ic_card.c: 577: if (Mf500PiccLoadKey(keys) == 0)
  9749                           
  9750                           ;incstack = 0
  9751                           ; Regs used in _checkpsw: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9752  0D51  30D4               	movlw	_keys& (0+255)
  9753  0D52  26E1  3188         	fcall	_Mf500PiccLoadKey
  9754  0D54  3800               	iorlw	0
  9755  0D55  1D03               	skipz
  9756  0D56  3400               	retlw	0
  9757                           
  9758                           ;handle_ic_card.c: 578: {
  9759                           ;handle_ic_card.c: 579: if (Mf500PiccAuthState(0x60, snr_rc500, 4 * sector_number) == 0)
  9760  0D57  30DA               	movlw	_snr_rc500& (0+255)
  9761  0D58  27DC  3188         	fcall	PL16	;call to abstracted procedure
  9762  0D5A  2560  3188         	fcall	_Mf500PiccAuthState
  9763  0D5C  3800               	iorlw	0
  9764  0D5D  1903               	btfsc	3,2
  9765                           
  9766                           ;handle_ic_card.c: 580: {
  9767                           ;handle_ic_card.c: 581: return 0x01;
  9768  0D5E  3401               	retlw	1
  9769                           
  9770                           ;handle_ic_card.c: 583: else
  9771                           ;handle_ic_card.c: 584: {
  9772                           ;handle_ic_card.c: 585: return 0x00;
  9773  0D5F  3400               	retlw	0
  9774  0D60                     __end_of_checkpsw:	
  9775  0D60                     __ptext41:	
  9776 ;; *************** function _Mf500PiccAuthState *****************
  9777 ;; Defined at:
  9778 ;;		line 818 in file "../../source/driver/mfrc500.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;  auth_mode       1    wreg     unsigned char 
  9781 ;;  snr             1   11[COMMON] PTR unsigned char 
  9782 ;;		 -> snr_rc500(4), 
  9783 ;;  block           1   12[COMMON] unsigned char 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  auth_mode       1   10[BANK0 ] unsigned char 
  9786 ;;  ret_status      1   11[BANK0 ] unsigned char 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  1    wreg      unsigned char 
  9789 ;; Registers used:
  9790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9791 ;; Tracked objects:
  9792 ;;		On entry : 1F/0
  9793 ;;		On exit  : 1F/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;Total ram usage:        4 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    6
  9803 ;; This function calls:
  9804 ;;		_PcdSetTmo
  9805 ;;		_PcdSingleResponseCmd
  9806 ;;		_ReadRC
  9807 ;;		_memcpy
  9808 ;; This function is called by:
  9809 ;;		_checkpsw_super
  9810 ;;		_checkpsw
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814                           
  9815                           ;psect for function _Mf500PiccAuthState
  9816  0D60                     _Mf500PiccAuthState:	
  9817                           
  9818                           ;incstack = 0
  9819                           ; Regs used in _Mf500PiccAuthState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9820                           ;Mf500PiccAuthState@auth_mode stored from wreg
  9821  0D60  00AA               	movwf	Mf500PiccAuthState@auth_mode
  9822                           
  9823                           ;mfrc500.c: 826: ret_status = ReadRC(0x0A);
  9824  0D61  300A               	movlw	10
  9825  0D62  3197  2778  3188   	fcall	_ReadRC
  9826  0D65  0020               	movlb	0	; select bank0
  9827  0D66  00AB               	movwf	Mf500PiccAuthState@ret_status
  9828                           
  9829                           ;mfrc500.c: 827: if (ret_status != 0)
  9830  0D67  082B               	movf	Mf500PiccAuthState@ret_status,w
  9831  0D68  1903               	btfsc	3,2
  9832  0D69  2D70               	goto	l6490
  9833                           
  9834                           ;mfrc500.c: 828: {
  9835                           ;mfrc500.c: 829: if (ret_status & 0x40)
  9836  0D6A  1F2B               	btfss	Mf500PiccAuthState@ret_status,6
  9837  0D6B  2D6E               	goto	l6488
  9838                           
  9839                           ;mfrc500.c: 830: {
  9840                           ;mfrc500.c: 831: ret_status = (-9);
  9841  0D6C  30F7               	movlw	247
  9842  0D6D  2D9A               	goto	L13
  9843  0D6E                     l6488:	
  9844                           ;mfrc500.c: 832: }
  9845                           
  9846                           
  9847                           ;mfrc500.c: 833: else
  9848                           ;mfrc500.c: 834: {
  9849                           ;mfrc500.c: 835: ret_status = (-4);
  9850  0D6E  30FC               	movlw	252
  9851  0D6F  2D99               	goto	L14
  9852  0D70                     l6490:	
  9853                           
  9854                           ;mfrc500.c: 838: else
  9855                           ;mfrc500.c: 839: {
  9856                           ;mfrc500.c: 840: PcdSetTmo(4);
  9857  0D70  3004               	movlw	4
  9858  0D71  00F5               	movwf	PcdSetTmo@tmoLength
  9859  0D72  01F6               	clrf	PcdSetTmo@tmoLength+1
  9860  0D73  3195  25D1  3188   	fcall	_PcdSetTmo
  9861                           
  9862                           ;mfrc500.c: 841: MSndBuffer[0] = auth_mode;
  9863  0D76  0020               	movlb	0	; select bank0
  9864  0D77  082A               	movf	Mf500PiccAuthState@auth_mode,w
  9865  0D78  0021               	movlb	1	; select bank1
  9866  0D79  00B6               	movwf	_MSndBuffer^(0+128)
  9867                           
  9868                           ;mfrc500.c: 842: MSndBuffer[1] = block;
  9869  0D7A  087C               	movf	Mf500PiccAuthState@block,w
  9870  0D7B  00B7               	movwf	(_MSndBuffer^(0+128)+1)
  9871                           
  9872                           ;mfrc500.c: 843: memcpy(MSndBuffer + 2, snr, 4);
  9873  0D7C  087B               	movf	Mf500PiccAuthState@snr,w
  9874  0D7D  00F0               	movwf	memcpy@s1
  9875  0D7E  3004               	movlw	4
  9876  0D7F  01F1               	clrf	memcpy@s1+1
  9877  0D80  00F2               	movwf	memcpy@n
  9878  0D81  30B8               	movlw	(_MSndBuffer+2)& (0+255)
  9879  0D82  01F3               	clrf	memcpy@n+1
  9880  0D83  26C3  3188         	fcall	_memcpy
  9881                           
  9882                           ;mfrc500.c: 844: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
  9883  0D85  0020               	movlb	0	; select bank0
  9884  0D86  3006               	movlw	6
  9885  0D87  27BA               	fcall	PL2	;call to abstracted procedure
  9886                           
  9887                           ;mfrc500.c: 845: MInfo.nBytesToSend = 0x06;
  9888  0D88  00E7               	movwf	_MInfo+3
  9889                           
  9890                           ;mfrc500.c: 846: ret_status = PcdSingleResponseCmd(0x0C);
  9891  0D89  300C               	movlw	12
  9892  0D8A  3196  2612  3188   	fcall	_PcdSingleResponseCmd
  9893  0D8D  00AB               	movwf	Mf500PiccAuthState@ret_status
  9894                           
  9895                           ;mfrc500.c: 847: if (ret_status == 0)
  9896  0D8E  08AB               	movf	Mf500PiccAuthState@ret_status,f
  9897  0D8F  1D03               	skipz
  9898  0D90  2DB0               	goto	l1048
  9899                           
  9900                           ;mfrc500.c: 848: {
  9901                           ;mfrc500.c: 849: if (ReadRC(0x05) & 0x07)
  9902  0D91  3005               	movlw	5
  9903  0D92  3197  2778  3188   	fcall	_ReadRC
  9904  0D95  3907               	andlw	7
  9905  0D96  1903               	btfsc	3,2
  9906  0D97  2D9C               	goto	l6524
  9907                           
  9908                           ;mfrc500.c: 850: {
  9909                           ;mfrc500.c: 851: ret_status = (-11);
  9910  0D98  30F5               	movlw	245
  9911  0D99                     L14:	
  9912  0D99  0020               	movlb	0	; select bank0
  9913  0D9A                     L13:	
  9914  0D9A  00AB               	movwf	Mf500PiccAuthState@ret_status
  9915                           
  9916                           ;mfrc500.c: 852: }
  9917  0D9B  2DB0               	goto	l1048
  9918  0D9C                     l6524:	
  9919                           
  9920                           ;mfrc500.c: 853: else
  9921                           ;mfrc500.c: 854: {
  9922                           ;mfrc500.c: 855: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
  9923  0D9C  0020               	movlb	0	; select bank0
  9924  0D9D  3014               	movlw	20
  9925  0D9E  27BA               	fcall	PL2	;call to abstracted procedure
  9926                           
  9927                           ;mfrc500.c: 856: MInfo.nBytesToSend = 0x00;
  9928  0D9F  01E7               	clrf	_MInfo+3
  9929                           
  9930                           ;mfrc500.c: 857: ret_status = PcdSingleResponseCmd(0x14);
  9931  0DA0  3196  2612  3188   	fcall	_PcdSingleResponseCmd
  9932  0DA3  00AB               	movwf	Mf500PiccAuthState@ret_status
  9933                           
  9934                           ;mfrc500.c: 858: if (ret_status == 0)
  9935  0DA4  08AB               	movf	Mf500PiccAuthState@ret_status,f
  9936  0DA5  1D03               	skipz
  9937  0DA6  2DB0               	goto	l1048
  9938                           
  9939                           ;mfrc500.c: 859: {
  9940                           ;mfrc500.c: 860: if (ReadRC(0x09) & 0x08)
  9941  0DA7  3009               	movlw	9
  9942  0DA8  3197  2778  3188   	fcall	_ReadRC
  9943  0DAB  3908               	andlw	8
  9944  0DAC  1903               	btfsc	3,2
  9945  0DAD  2D6E               	goto	l6488
  9946                           
  9947                           ;mfrc500.c: 861: {
  9948                           ;mfrc500.c: 862: ret_status = 0;
  9949  0DAE  0020               	movlb	0	; select bank0
  9950  0DAF  01AB               	clrf	Mf500PiccAuthState@ret_status
  9951  0DB0                     l1048:	
  9952                           ;mfrc500.c: 863: }
  9953                           
  9954                           
  9955                           ;mfrc500.c: 867: }
  9956                           ;mfrc500.c: 868: }
  9957                           ;mfrc500.c: 869: }
  9958                           ;mfrc500.c: 870: }
  9959                           ;mfrc500.c: 871: }
  9960                           ;mfrc500.c: 873: return ret_status;
  9961  0DB0  082B               	movf	Mf500PiccAuthState@ret_status,w
  9962  0DB1  0008               	return
  9963  0DB2                     __end_of_Mf500PiccAuthState:	
  9964  0DB2                     __ptext23:	
  9965 ;; *************** function _check_user_card *****************
  9966 ;; Defined at:
  9967 ;;		line 123 in file "../../source/application/handle_ic_card.c"
  9968 ;; Parameters:    Size  Location     Type
  9969 ;;		None
  9970 ;; Auto vars:     Size  Location     Type
  9971 ;;  i               1    4[COMMON] unsigned char 
  9972 ;; Return value:  Size  Location     Type
  9973 ;;                  1    wreg      unsigned char 
  9974 ;; Registers used:
  9975 ;;		wreg, status,2, status,0, pclath, cstack
  9976 ;; Tracked objects:
  9977 ;;		On entry : 1F/0
  9978 ;;		On exit  : 1F/0
  9979 ;;		Unchanged: 0/0
  9980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;Total ram usage:        1 bytes
  9986 ;; Hardware stack levels used:    1
  9987 ;; Hardware stack levels required when called:    3
  9988 ;; This function calls:
  9989 ;;		_read_24c02
  9990 ;; This function is called by:
  9991 ;;		_read_card_content
  9992 ;; This function uses a non-reentrant model
  9993 ;;
  9994                           
  9995                           
  9996                           ;psect for function _check_user_card
  9997  0DB2                     _check_user_card:	
  9998                           
  9999                           ;handle_ic_card.c: 127: BYTE i;
 10000                           ;handle_ic_card.c: 129: for (i = 0x00; i < 0x2C; i++)
 10001                           
 10002                           ;incstack = 0
 10003                           ; Regs used in _check_user_card: [wreg+status,2+status,0+pclath+cstack]
 10004  0DB2  01F4               	clrf	check_user_card@i
 10005  0DB3                     l6202:	
 10006                           
 10007                           ;handle_ic_card.c: 130: {
 10008                           ;handle_ic_card.c: 131: if ((card_id[3] == read_24c02(0x40 + (i * 0x04) + 0x00)) &&
 10009                           ;handle_ic_card.c: 132: (card_id[2] == read_24c02(0x40 + (i * 0x04) + 0x01)) &&
 10010                           ;handle_ic_card.c: 133: (card_id[1] == read_24c02(0x40 + (i * 0x04) + 0x02)) &&
 10011                           ;handle_ic_card.c: 134: (card_id[0] == read_24c02(0x40 + (i * 0x04) + 0x03)))
 10012  0DB3  0874               	movf	check_user_card@i,w
 10013  0DB4  0709               	addwf	9,w
 10014  0DB5  0709               	addwf	9,w
 10015  0DB6  3E40               	addlw	64
 10016  0DB7  2472  3188         	fcall	_read_24c02
 10017  0DB9  0020               	movlb	0	; select bank0
 10018  0DBA  0652               	xorwf	_card_id+3,w
 10019  0DBB  1D03               	skipz
 10020  0DBC  2DDB               	goto	l6214
 10021  0DBD  0874               	movf	check_user_card@i,w
 10022  0DBE  0709               	addwf	9,w
 10023  0DBF  0709               	addwf	9,w
 10024  0DC0  3E41               	addlw	65
 10025  0DC1  2472  3188         	fcall	_read_24c02
 10026  0DC3  0020               	movlb	0	; select bank0
 10027  0DC4  0651               	xorwf	_card_id+2,w
 10028  0DC5  1D03               	skipz
 10029  0DC6  2DDB               	goto	l6214
 10030  0DC7  0874               	movf	check_user_card@i,w
 10031  0DC8  0709               	addwf	9,w
 10032  0DC9  0709               	addwf	9,w
 10033  0DCA  3E42               	addlw	66
 10034  0DCB  2472  3188         	fcall	_read_24c02
 10035  0DCD  0020               	movlb	0	; select bank0
 10036  0DCE  0650               	xorwf	_card_id+1,w
 10037  0DCF  1D03               	skipz
 10038  0DD0  2DDB               	goto	l6214
 10039  0DD1  0874               	movf	check_user_card@i,w
 10040  0DD2  0709               	addwf	9,w
 10041  0DD3  0709               	addwf	9,w
 10042  0DD4  3E43               	addlw	67
 10043  0DD5  2472  3188         	fcall	_read_24c02
 10044  0DD7  0020               	movlb	0	; select bank0
 10045  0DD8  064F               	xorwf	_card_id,w
 10046  0DD9  1903               	btfsc	3,2
 10047                           
 10048                           ;handle_ic_card.c: 135: {
 10049                           ;handle_ic_card.c: 136: return 0x01;
 10050  0DDA  3401               	retlw	1
 10051  0DDB                     l6214:	
 10052  0DDB  302C               	movlw	44
 10053  0DDC  0AF4               	incf	check_user_card@i,f
 10054  0DDD  0274               	subwf	check_user_card@i,w
 10055  0DDE  1803               	btfsc	3,0
 10056                           
 10057                           ;handle_ic_card.c: 137: }
 10058                           ;handle_ic_card.c: 138: }
 10059                           ;handle_ic_card.c: 140: return 0x00;
 10060  0DDF  3400               	retlw	0
 10061  0DE0  2DB3               	goto	l6202
 10062  0DE1                     __end_of_check_user_card:	
 10063  0DE1                     __ptext65:	
 10064 ;; *************** function _ds1302_get_time *****************
 10065 ;; Defined at:
 10066 ;;		line 173 in file "../../source/driver/ds1302.c"
 10067 ;; Parameters:    Size  Location     Type
 10068 ;;		None
 10069 ;; Auto vars:     Size  Location     Type
 10070 ;;		None
 10071 ;; Return value:  Size  Location     Type
 10072 ;;		None               void
 10073 ;; Registers used:
 10074 ;;		wreg, status,2, status,0, pclath, cstack
 10075 ;; Tracked objects:
 10076 ;;		On entry : 1E/1
 10077 ;;		On exit  : 1F/1
 10078 ;;		Unchanged: 0/0
 10079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;Total ram usage:        0 bytes
 10085 ;; Hardware stack levels used:    1
 10086 ;; Hardware stack levels required when called:    3
 10087 ;; This function calls:
 10088 ;;		_ds1302_read
 10089 ;; This function is called by:
 10090 ;;		_handle_config
 10091 ;;		_read_card_content
 10092 ;; This function uses a non-reentrant model
 10093 ;;
 10094                           
 10095                           
 10096                           ;psect for function _ds1302_get_time
 10097  0DE1                     _ds1302_get_time:	
 10098                           
 10099                           ;ds1302.c: 177: year = ds1302_read(0x8D);
 10100                           
 10101                           ;incstack = 0
 10102                           ; Regs used in _ds1302_get_time: [wreg+status,2+status,0+pclath+cstack]
 10103  0DE1  308D               	movlw	141
 10104  0DE2  2605  3188         	fcall	_ds1302_read
 10105  0DE4  0020               	movlb	0	; select bank0
 10106  0DE5  00EF               	movwf	_year
 10107                           
 10108                           ;ds1302.c: 178: month = ds1302_read(0x89);
 10109  0DE6  3089               	movlw	137
 10110  0DE7  2605  3188         	fcall	_ds1302_read
 10111  0DE9  0020               	movlb	0	; select bank0
 10112  0DEA  00EE               	movwf	_month
 10113                           
 10114                           ;ds1302.c: 179: day = ds1302_read(0x87);
 10115  0DEB  3087               	movlw	135
 10116  0DEC  2605  3188         	fcall	_ds1302_read
 10117  0DEE  0020               	movlb	0	; select bank0
 10118  0DEF  00EC               	movwf	_day
 10119                           
 10120                           ;ds1302.c: 180: hour = ds1302_read(0x85);
 10121  0DF0  3085               	movlw	133
 10122  0DF1  2605  3188         	fcall	_ds1302_read
 10123  0DF3  0020               	movlb	0	; select bank0
 10124  0DF4  00ED               	movwf	_hour
 10125  0DF5  3083               	movlw	131
 10126                           
 10127                           ;ds1302.c: 181: hour &= 0x7F;
 10128  0DF6  13ED               	bcf	_hour,7
 10129                           
 10130                           ;ds1302.c: 182: minute = ds1302_read(0x83);
 10131  0DF7  2605  3188         	fcall	_ds1302_read
 10132  0DF9  0021               	movlb	1	; select bank1
 10133  0DFA  00E6               	movwf	_minute^(0+128)
 10134                           
 10135                           ;ds1302.c: 183: second = ds1302_read(0x81);
 10136  0DFB  3081               	movlw	129
 10137  0DFC  2605  3188         	fcall	_ds1302_read
 10138  0DFE  0021               	movlb	1	; select bank1
 10139  0DFF  00E7               	movwf	_second^(0+128)
 10140                           
 10141                           ;ds1302.c: 184: week = ds1302_read(0x8B);
 10142  0E00  308B               	movlw	139
 10143  0E01  2605               	fcall	_ds1302_read
 10144  0E02  0021               	movlb	1	; select bank1
 10145  0E03  00E8               	movwf	_week^(0+128)
 10146  0E04  0008               	return
 10147  0E05                     __end_of_ds1302_get_time:	
 10148  0E05                     __ptext66:	
 10149 ;; *************** function _ds1302_read *****************
 10150 ;; Defined at:
 10151 ;;		line 124 in file "../../source/driver/ds1302.c"
 10152 ;; Parameters:    Size  Location     Type
 10153 ;;  address         1    wreg     unsigned char 
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;  address         1    2[COMMON] unsigned char 
 10156 ;;  temp            1    3[COMMON] unsigned char 
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  1    wreg      unsigned char 
 10159 ;; Registers used:
 10160 ;;		wreg, status,2, status,0, pclath, cstack
 10161 ;; Tracked objects:
 10162 ;;		On entry : 1E/1
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;Total ram usage:        2 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    2
 10173 ;; This function calls:
 10174 ;;		_ds1302_read_byte
 10175 ;;		_ds1302_write_byte
 10176 ;; This function is called by:
 10177 ;;		_ds1302_get_time
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           
 10182                           ;psect for function _ds1302_read
 10183  0E05                     _ds1302_read:	
 10184                           
 10185                           ;incstack = 0
 10186                           ; Regs used in _ds1302_read: [wreg+status,2+status,0+pclath+cstack]
 10187                           ;ds1302_read@address stored from wreg
 10188  0E05  00F2               	movwf	ds1302_read@address
 10189                           
 10190                           ;ds1302.c: 128: BYTE temp;
 10191                           ;ds1302.c: 130: (RC0) = 0x00;
 10192  0E06  0020               	movlb	0	; select bank0
 10193  0E07  100E               	bcf	14,0	;volatile
 10194                           
 10195                           ;ds1302.c: 131: __nop();
 10196  0E08  0000               	nop
 10197                           
 10198                           ;ds1302.c: 132: __nop();
 10199  0E09  0000               	nop
 10200                           
 10201                           ;ds1302.c: 133: (RC2) = 0x00;
 10202  0E0A  0020               	movlb	0	; select bank0
 10203  0E0B  110E               	bcf	14,2	;volatile
 10204                           
 10205                           ;ds1302.c: 134: __nop();
 10206  0E0C  0000               	nop
 10207                           
 10208                           ;ds1302.c: 135: __nop();
 10209  0E0D  0000               	nop
 10210                           
 10211                           ;ds1302.c: 136: (RC0) = 0x01;
 10212  0E0E  0020               	movlb	0	; select bank0
 10213  0E0F  140E               	bsf	14,0	;volatile
 10214                           
 10215                           ;ds1302.c: 137: __nop();
 10216  0E10  0000               	nop
 10217                           
 10218                           ;ds1302.c: 138: __nop();
 10219  0E11  0000               	nop
 10220                           
 10221                           ;ds1302.c: 139: ds1302_write_byte(address);
 10222  0E12  0872               	movf	ds1302_read@address,w
 10223  0E13  266B  3188         	fcall	_ds1302_write_byte
 10224                           
 10225                           ;ds1302.c: 140: temp = ds1302_read_byte();
 10226  0E15  2798               	fcall	_ds1302_read_byte
 10227  0E16  00F3               	movwf	ds1302_read@temp
 10228                           
 10229                           ;ds1302.c: 141: (RC0) = 0x00;
 10230  0E17  0020               	movlb	0	; select bank0
 10231  0E18  100E               	bcf	14,0	;volatile
 10232                           
 10233                           ;ds1302.c: 142: (RC2) = 0x01;
 10234  0E19  150E               	bsf	14,2	;volatile
 10235                           
 10236                           ;ds1302.c: 143: __nop();
 10237  0E1A  0000               	nop
 10238                           
 10239                           ;ds1302.c: 144: __nop();
 10240  0E1B  0000               	nop
 10241                           
 10242                           ;ds1302.c: 146: return temp;
 10243  0E1C  0873               	movf	ds1302_read@temp,w
 10244  0E1D  0008               	return
 10245  0E1E                     __end_of_ds1302_read:	
 10246  0E1E                     __ptext63:	
 10247 ;; *************** function _ds1302_set_time *****************
 10248 ;; Defined at:
 10249 ;;		line 188 in file "../../source/driver/ds1302.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;		None
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;		None
 10254 ;; Return value:  Size  Location     Type
 10255 ;;		None               void
 10256 ;; Registers used:
 10257 ;;		wreg, status,2, status,0, pclath, cstack
 10258 ;; Tracked objects:
 10259 ;;		On entry : 1F/1
 10260 ;;		On exit  : 0/0
 10261 ;;		Unchanged: 0/0
 10262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;Total ram usage:        0 bytes
 10268 ;; Hardware stack levels used:    1
 10269 ;; Hardware stack levels required when called:    3
 10270 ;; This function calls:
 10271 ;;		_ds1302_write
 10272 ;; This function is called by:
 10273 ;;		_handle_config
 10274 ;;		_read_card_content
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           
 10279                           ;psect for function _ds1302_set_time
 10280  0E1E                     _ds1302_set_time:	
 10281                           
 10282                           ;incstack = 0
 10283                           ; Regs used in _ds1302_set_time: [wreg+status,2+status,0+pclath+cstack]
 10284  0E1E  308E               	movlw	142
 10285                           
 10286                           ;ds1302.c: 193: ds1302_write(0x8E, 0x00);
 10287  0E1F  01F2               	clrf	ds1302_write@data
 10288  0E20  2653  3188         	fcall	_ds1302_write
 10289                           
 10290                           ;ds1302.c: 196: ds1302_write(0x80, second & 0x7F);
 10291  0E22  0021               	movlb	1	; select bank1
 10292  0E23  0867               	movf	_second^(0+128),w
 10293  0E24  00F2               	movwf	ds1302_write@data
 10294  0E25  3080               	movlw	128
 10295  0E26  13F2               	bcf	ds1302_write@data,7
 10296  0E27  2653  3188         	fcall	_ds1302_write
 10297                           
 10298                           ;ds1302.c: 197: ds1302_write(0x82, minute );
 10299  0E29  0021               	movlb	1	; select bank1
 10300  0E2A  0866               	movf	_minute^(0+128),w
 10301  0E2B  00F2               	movwf	ds1302_write@data
 10302  0E2C  3082               	movlw	130
 10303  0E2D  2653  3188         	fcall	_ds1302_write
 10304                           
 10305                           ;ds1302.c: 198: ds1302_write(0x84, hour & 0x3F);
 10306  0E2F  0020               	movlb	0	; select bank0
 10307  0E30  086D               	movf	_hour,w
 10308  0E31  00F2               	movwf	ds1302_write@data
 10309  0E32  303F               	movlw	63
 10310  0E33  05F2               	andwf	ds1302_write@data,f
 10311  0E34  3084               	movlw	132
 10312  0E35  2653  3188         	fcall	_ds1302_write
 10313                           
 10314                           ;ds1302.c: 199: ds1302_write(0x86, day);
 10315  0E37  0020               	movlb	0	; select bank0
 10316  0E38  086C               	movf	_day,w
 10317  0E39  00F2               	movwf	ds1302_write@data
 10318  0E3A  3086               	movlw	134
 10319  0E3B  2653  3188         	fcall	_ds1302_write
 10320                           
 10321                           ;ds1302.c: 200: ds1302_write(0x88, month);
 10322  0E3D  0020               	movlb	0	; select bank0
 10323  0E3E  086E               	movf	_month,w
 10324  0E3F  00F2               	movwf	ds1302_write@data
 10325  0E40  3088               	movlw	136
 10326  0E41  2653  3188         	fcall	_ds1302_write
 10327                           
 10328                           ;ds1302.c: 201: ds1302_write(0x8C, year);
 10329  0E43  0020               	movlb	0	; select bank0
 10330  0E44  086F               	movf	_year,w
 10331  0E45  00F2               	movwf	ds1302_write@data
 10332  0E46  308C               	movlw	140
 10333  0E47  2653  3188         	fcall	_ds1302_write
 10334                           
 10335                           ;ds1302.c: 202: ds1302_write(0x8A, week);
 10336  0E49  0021               	movlb	1	; select bank1
 10337  0E4A  0868               	movf	_week^(0+128),w
 10338  0E4B  00F2               	movwf	ds1302_write@data
 10339  0E4C  308A               	movlw	138
 10340  0E4D  2653  3188         	fcall	_ds1302_write
 10341                           
 10342                           ;ds1302.c: 205: ds1302_write(0x8E, 0x80);
 10343  0E4F  3080               	movlw	128
 10344  0E50  00F2               	movwf	ds1302_write@data
 10345  0E51  308E               	movlw	142
 10346  0E52  2E53               	ljmp	_ds1302_write
 10347  0E53                     __end_of_ds1302_set_time:	
 10348  0E53                     __ptext64:	
 10349 ;; *************** function _ds1302_write *****************
 10350 ;; Defined at:
 10351 ;;		line 150 in file "../../source/driver/ds1302.c"
 10352 ;; Parameters:    Size  Location     Type
 10353 ;;  address         1    wreg     unsigned char 
 10354 ;;  data            1    2[COMMON] unsigned char 
 10355 ;; Auto vars:     Size  Location     Type
 10356 ;;  address         1    3[COMMON] unsigned char 
 10357 ;; Return value:  Size  Location     Type
 10358 ;;		None               void
 10359 ;; Registers used:
 10360 ;;		wreg, status,2, status,0, pclath, cstack
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/1
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10366 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;Total ram usage:        2 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    2
 10373 ;; This function calls:
 10374 ;;		_ds1302_write_byte
 10375 ;; This function is called by:
 10376 ;;		_ds1302_set_time
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           
 10381                           ;psect for function _ds1302_write
 10382  0E53                     _ds1302_write:	
 10383                           
 10384                           ;incstack = 0
 10385                           ; Regs used in _ds1302_write: [wreg+status,2+status,0+pclath+cstack]
 10386                           ;ds1302_write@address stored from wreg
 10387  0E53  00F3               	movwf	ds1302_write@address
 10388                           
 10389                           ;ds1302.c: 155: (RC0) = 0x00;
 10390  0E54  0020               	movlb	0	; select bank0
 10391  0E55  100E               	bcf	14,0	;volatile
 10392                           
 10393                           ;ds1302.c: 156: __nop();
 10394  0E56  0000               	nop
 10395                           
 10396                           ;ds1302.c: 157: __nop();
 10397  0E57  0000               	nop
 10398                           
 10399                           ;ds1302.c: 158: (RC2) = 0x00;
 10400  0E58  0020               	movlb	0	; select bank0
 10401  0E59  110E               	bcf	14,2	;volatile
 10402                           
 10403                           ;ds1302.c: 159: __nop();
 10404  0E5A  0000               	nop
 10405                           
 10406                           ;ds1302.c: 160: __nop();
 10407  0E5B  0000               	nop
 10408                           
 10409                           ;ds1302.c: 161: (RC0) = 0x01;
 10410  0E5C  0020               	movlb	0	; select bank0
 10411  0E5D  140E               	bsf	14,0	;volatile
 10412                           
 10413                           ;ds1302.c: 162: __nop();
 10414  0E5E  0000               	nop
 10415                           
 10416                           ;ds1302.c: 163: __nop();
 10417  0E5F  0000               	nop
 10418                           
 10419                           ;ds1302.c: 164: ds1302_write_byte(address);
 10420  0E60  0873               	movf	ds1302_write@address,w
 10421  0E61  266B  3188         	fcall	_ds1302_write_byte
 10422                           
 10423                           ;ds1302.c: 165: ds1302_write_byte(data);
 10424  0E63  0872               	movf	ds1302_write@data,w
 10425  0E64  266B               	fcall	_ds1302_write_byte
 10426                           
 10427                           ;ds1302.c: 166: (RC0) = 0x00;
 10428  0E65  0020               	movlb	0	; select bank0
 10429  0E66  100E               	bcf	14,0	;volatile
 10430                           
 10431                           ;ds1302.c: 167: (RC2) = 0x01;
 10432  0E67  150E               	bsf	14,2	;volatile
 10433                           
 10434                           ;ds1302.c: 168: __nop();
 10435  0E68  0000               	nop
 10436                           
 10437                           ;ds1302.c: 169: __nop();
 10438  0E69  0000               	nop
 10439  0E6A  0008               	return
 10440  0E6B                     __end_of_ds1302_write:	
 10441  0E6B                     __ptext67:	
 10442 ;; *************** function _ds1302_write_byte *****************
 10443 ;; Defined at:
 10444 ;;		line 66 in file "../../source/driver/ds1302.c"
 10445 ;; Parameters:    Size  Location     Type
 10446 ;;  data            1    wreg     unsigned char 
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;  data            1    0[COMMON] unsigned char 
 10449 ;;  i               1    1[COMMON] unsigned char 
 10450 ;; Return value:  Size  Location     Type
 10451 ;;		None               void
 10452 ;; Registers used:
 10453 ;;		wreg, status,2, status,0
 10454 ;; Tracked objects:
 10455 ;;		On entry : 0/1
 10456 ;;		On exit  : 0/0
 10457 ;;		Unchanged: 0/0
 10458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;Total ram usage:        2 bytes
 10464 ;; Hardware stack levels used:    1
 10465 ;; Hardware stack levels required when called:    1
 10466 ;; This function calls:
 10467 ;;		Nothing
 10468 ;; This function is called by:
 10469 ;;		_ds1302_read
 10470 ;;		_ds1302_write
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           
 10475                           ;psect for function _ds1302_write_byte
 10476  0E6B                     _ds1302_write_byte:	
 10477                           
 10478                           ;incstack = 0
 10479                           ; Regs used in _ds1302_write_byte: [wreg+status,2+status,0]
 10480                           ;ds1302_write_byte@data stored from wreg
 10481  0E6B  00F0               	movwf	ds1302_write_byte@data
 10482                           
 10483                           ;ds1302.c: 70: BYTE i;
 10484                           ;ds1302.c: 72: for (i = 8; i > 0; i--)
 10485  0E6C  3008               	movlw	8
 10486  0E6D  00F1               	movwf	ds1302_write_byte@i
 10487  0E6E                     l719:	
 10488                           
 10489                           ;ds1302.c: 73: {
 10490                           ;ds1302.c: 74: if (data & 0x01)
 10491  0E6E  1C70               	btfss	ds1302_write_byte@data,0
 10492  0E6F  2E75               	goto	l721
 10493                           
 10494                           ;ds1302.c: 75: {
 10495                           ;ds1302.c: 76: (RC1) = 0x01;
 10496  0E70  0020               	movlb	0	; select bank0
 10497  0E71  148E               	bsf	14,1	;volatile
 10498                           
 10499                           ;ds1302.c: 77: __nop();
 10500  0E72  0000               	nop
 10501                           
 10502                           ;ds1302.c: 78: __nop();
 10503  0E73  0000               	nop
 10504                           
 10505                           ;ds1302.c: 79: }
 10506  0E74  2E79               	goto	l722
 10507  0E75                     l721:	
 10508                           
 10509                           ;ds1302.c: 80: else
 10510                           ;ds1302.c: 81: {
 10511                           ;ds1302.c: 82: (RC1) = 0x00;
 10512  0E75  0020               	movlb	0	; select bank0
 10513  0E76  108E               	bcf	14,1	;volatile
 10514                           
 10515                           ;ds1302.c: 83: __nop();
 10516  0E77  0000               	nop
 10517                           
 10518                           ;ds1302.c: 84: __nop();
 10519  0E78  0000               	nop
 10520  0E79                     l722:	
 10521                           
 10522                           ;ds1302.c: 85: }
 10523                           ;ds1302.c: 86: (RC2) = 0x00;
 10524  0E79  0020               	movlb	0	; select bank0
 10525  0E7A  110E               	bcf	14,2	;volatile
 10526                           
 10527                           ;ds1302.c: 87: __nop();
 10528  0E7B  0000               	nop
 10529                           
 10530                           ;ds1302.c: 88: __nop();
 10531  0E7C  0000               	nop
 10532                           
 10533                           ;ds1302.c: 89: (RC2) = 0x01;
 10534  0E7D  0020               	movlb	0	; select bank0
 10535  0E7E  150E               	bsf	14,2	;volatile
 10536                           
 10537                           ;ds1302.c: 90: __nop();
 10538  0E7F  0000               	nop
 10539                           
 10540                           ;ds1302.c: 91: __nop();
 10541  0E80  0000               	nop
 10542                           
 10543                           ;ds1302.c: 92: data = data >> 1;
 10544  0E81  36F0               	lsrf	ds1302_write_byte@data,f
 10545  0E82  0BF1               	decfsz	ds1302_write_byte@i,f
 10546  0E83  2E6E               	goto	l719
 10547  0E84  0008               	return
 10548  0E85                     __end_of_ds1302_write_byte:	
 10549  0E85                     __ptext22:	
 10550 ;; *************** function _checksum *****************
 10551 ;; Defined at:
 10552 ;;		line 113 in file "../../source/application/other.c"
 10553 ;; Parameters:    Size  Location     Type
 10554 ;;  data            1    wreg     PTR unsigned char 
 10555 ;;		 -> read_card_content@data(16), 
 10556 ;;  length          1    0[COMMON] unsigned char 
 10557 ;; Auto vars:     Size  Location     Type
 10558 ;;  data            1    3[COMMON] PTR unsigned char 
 10559 ;;		 -> read_card_content@data(16), 
 10560 ;;  i               1    4[COMMON] unsigned char 
 10561 ;;  sum             1    2[COMMON] unsigned char 
 10562 ;; Return value:  Size  Location     Type
 10563 ;;                  1    wreg      unsigned char 
 10564 ;; Registers used:
 10565 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10566 ;; Tracked objects:
 10567 ;;		On entry : 1F/0
 10568 ;;		On exit  : 1F/0
 10569 ;;		Unchanged: 1F/0
 10570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10571 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;Total ram usage:        5 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    1
 10578 ;; This function calls:
 10579 ;;		Nothing
 10580 ;; This function is called by:
 10581 ;;		_read_card_content
 10582 ;; This function uses a non-reentrant model
 10583 ;;
 10584                           
 10585                           
 10586                           ;psect for function _checksum
 10587  0E85                     _checksum:	
 10588                           
 10589                           ;incstack = 0
 10590                           ; Regs used in _checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
 10591                           ;checksum@data stored from wreg
 10592  0E85  00F3               	movwf	checksum@data
 10593                           
 10594                           ;other.c: 118: BYTE i = 0x00;
 10595  0E86  01F4               	clrf	checksum@i
 10596                           
 10597                           ;other.c: 119: BYTE sum = 0x00;
 10598  0E87  01F2               	clrf	checksum@sum
 10599                           
 10600                           ;other.c: 121: for (i = 0x00; i < length; i++)
 10601  0E88  01F4               	clrf	checksum@i
 10602  0E89                     l6310:	
 10603  0E89  0870               	movf	checksum@length,w
 10604  0E8A  0274               	subwf	checksum@i,w
 10605  0E8B  1803               	btfsc	3,0
 10606  0E8C  2E96               	goto	l6312
 10607                           
 10608                           ;other.c: 122: {
 10609                           ;other.c: 123: sum += data[i];
 10610  0E8D  0874               	movf	checksum@i,w
 10611  0E8E  0773               	addwf	checksum@data,w
 10612  0E8F  00F1               	movwf	??_checksum
 10613  0E90  0086               	movwf	6
 10614  0E91  0187               	clrf	7
 10615  0E92  0801               	movf	1,w
 10616  0E93  07F2               	addwf	checksum@sum,f
 10617  0E94  0AF4               	incf	checksum@i,f
 10618  0E95  2E89               	goto	l6310
 10619  0E96                     l6312:	
 10620                           
 10621                           ;other.c: 124: }
 10622                           ;other.c: 126: return sum;
 10623  0E96  0872               	movf	checksum@sum,w
 10624  0E97  0008               	return
 10625  0E98                     __end_of_checksum:	
 10626  0E98                     __ptext58:	
 10627 ;; *************** function _stop_i2c *****************
 10628 ;; Defined at:
 10629 ;;		line 72 in file "../../source/driver/24c02.c"
 10630 ;; Parameters:    Size  Location     Type
 10631 ;;		None
 10632 ;; Auto vars:     Size  Location     Type
 10633 ;;		None
 10634 ;; Return value:  Size  Location     Type
 10635 ;;		None               void
 10636 ;; Registers used:
 10637 ;;		None
 10638 ;; Tracked objects:
 10639 ;;		On entry : 0/0
 10640 ;;		On exit  : 0/0
 10641 ;;		Unchanged: 0/0
 10642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;Total ram usage:        0 bytes
 10648 ;; Hardware stack levels used:    1
 10649 ;; Hardware stack levels required when called:    1
 10650 ;; This function calls:
 10651 ;;		Nothing
 10652 ;; This function is called by:
 10653 ;;		_write_24c02
 10654 ;;		_read_24c02
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           
 10659                           ;psect for function _stop_i2c
 10660  0E98                     _stop_i2c:	
 10661                           
 10662                           ;24c02.c: 76: RC4 = 0x00;
 10663                           
 10664                           ;incstack = 0
 10665                           ; Regs used in _stop_i2c: []
 10666  0E98  0020               	movlb	0	; select bank0
 10667  0E99  120E               	bcf	14,4	;volatile
 10668                           
 10669                           ;24c02.c: 77: __nop();
 10670  0E9A  0000               	nop
 10671                           
 10672                           ;24c02.c: 78: RC3 = 0x01;
 10673  0E9B  0020               	movlb	0	; select bank0
 10674  0E9C  158E               	bsf	14,3	;volatile
 10675                           
 10676                           ;24c02.c: 79: __nop();__nop();__nop();__nop();__nop();
 10677  0E9D  0000               	nop
 10678  0E9E  0000               	nop
 10679  0E9F  0000               	nop
 10680  0EA0  0000               	nop
 10681  0EA1  0000               	nop
 10682                           
 10683                           ;24c02.c: 80: RC4 = 0x01;
 10684  0EA2  0020               	movlb	0	; select bank0
 10685  0EA3  160E               	bsf	14,4	;volatile
 10686                           
 10687                           ;24c02.c: 81: __nop();__nop();__nop();__nop();
 10688  0EA4  0000               	nop
 10689  0EA5  0000               	nop
 10690  0EA6  0000               	nop
 10691  0EA7  0000               	nop
 10692  0EA8  0008               	return
 10693  0EA9                     __end_of_stop_i2c:	
 10694  0EA9                     __ptext62:	
 10695 ;; *************** function _find_project_key *****************
 10696 ;; Defined at:
 10697 ;;		line 51 in file "../../source/application/handle_config.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  data            1    wreg     unsigned char 
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;  data            1    0[COMMON] unsigned char 
 10702 ;;  i               2    1[COMMON] unsigned short 
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      unsigned char 
 10705 ;; Registers used:
 10706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;Total ram usage:        3 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:    1
 10719 ;; This function calls:
 10720 ;;		Nothing
 10721 ;; This function is called by:
 10722 ;;		_handle_config
 10723 ;; This function uses a non-reentrant model
 10724 ;;
 10725                           
 10726                           
 10727                           ;psect for function _find_project_key
 10728  0EA9                     _find_project_key:	
 10729                           
 10730                           ;incstack = 0
 10731                           ; Regs used in _find_project_key: [wreg-fsr0h+status,2+status,0+pclath]
 10732                           ;find_project_key@data stored from wreg
 10733  0EA9  00F0               	movwf	find_project_key@data
 10734                           
 10735                           ;handle_config.c: 55: WORD i;
 10736                           ;handle_config.c: 57: for (i = 0x00; i < 0x100; i++)
 10737  0EAA  01F1               	clrf	find_project_key@i
 10738  0EAB  01F2               	clrf	find_project_key@i+1
 10739  0EAC                     l6630:	
 10740                           
 10741                           ;handle_config.c: 58: {
 10742                           ;handle_config.c: 59: if (data == PWD_TABLE[i])
 10743  0EAC  3001               	movlw	low (_PWD_TABLE| (0+32768))
 10744  0EAD  0771               	addwf	find_project_key@i,w
 10745  0EAE  0084               	movwf	4
 10746  0EAF  3098               	movlw	high (_PWD_TABLE| (0+32768))
 10747  0EB0  3D72               	addwfc	find_project_key@i+1,w
 10748  0EB1  0085               	movwf	5
 10749  0EB2  0800               	movf	0,w	;code access
 10750  0EB3  0670               	xorwf	find_project_key@data,w
 10751  0EB4  1D03               	skipz
 10752  0EB5  2EB8               	goto	l6636
 10753                           
 10754                           ;handle_config.c: 60: {
 10755                           ;handle_config.c: 61: return i;
 10756  0EB6  0871               	movf	find_project_key@i,w
 10757  0EB7  0008               	return
 10758  0EB8                     l6636:	
 10759  0EB8  0AF1               	incf	find_project_key@i,f
 10760  0EB9  1903               	skipnz
 10761  0EBA  0AF2               	incf	find_project_key@i+1,f
 10762  0EBB  3001               	movlw	1
 10763  0EBC  0272               	subwf	find_project_key@i+1,w
 10764  0EBD  3000               	movlw	0
 10765  0EBE  1903               	skipnz
 10766  0EBF  0271               	subwf	find_project_key@i,w
 10767  0EC0  1803               	btfsc	3,0
 10768                           
 10769                           ;handle_config.c: 62: }
 10770                           ;handle_config.c: 63: }
 10771                           ;handle_config.c: 65: return 0x00;
 10772  0EC1  3400               	retlw	0
 10773  0EC2  2EAC               	goto	l6630
 10774  0EC3                     __end_of_find_project_key:	
 10775  0EC3                     __ptext42:	
 10776 ;; *************** function _memcpy *****************
 10777 ;; Defined at:
 10778 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\memcpy.c"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;  d1              1    wreg     PTR void 
 10781 ;;		 -> Mf500PiccCascAnticoll@snr_in(4), MSndBuffer(16), snr_rc500(4), tt1(2), 
 10782 ;;		 -> read_card_content@data(16), 
 10783 ;;  s1              2    0[COMMON] PTR const void 
 10784 ;;		 -> STR_1(5), Mf500PiccCascAnticoll@snr_in(4), MRcvBuffer(16), snr_rc500(4), 
 10785 ;;		 -> read_card_content@data(16), 
 10786 ;;  n               2    2[COMMON] unsigned int 
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;  d1              1    7[COMMON] PTR void 
 10789 ;;		 -> Mf500PiccCascAnticoll@snr_in(4), MSndBuffer(16), snr_rc500(4), tt1(2), 
 10790 ;;		 -> read_card_content@data(16), 
 10791 ;;  s               2    4[COMMON] PTR const unsigned char 
 10792 ;;		 -> STR_1(5), Mf500PiccCascAnticoll@snr_in(4), MRcvBuffer(16), snr_rc500(4), 
 10793 ;;		 -> read_card_content@data(16), 
 10794 ;;  d               1    6[COMMON] PTR unsigned char 
 10795 ;;		 -> Mf500PiccCascAnticoll@snr_in(4), MSndBuffer(16), snr_rc500(4), tt1(2), 
 10796 ;;		 -> read_card_content@data(16), 
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  1    wreg      PTR void 
 10799 ;; Registers used:
 10800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10801 ;; Tracked objects:
 10802 ;;		On entry : 1E/0
 10803 ;;		On exit  : 1E/0
 10804 ;;		Unchanged: 1E/0
 10805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10806 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;Total ram usage:        8 bytes
 10811 ;; Hardware stack levels used:    1
 10812 ;; Hardware stack levels required when called:    1
 10813 ;; This function calls:
 10814 ;;		Nothing
 10815 ;; This function is called by:
 10816 ;;		_Mf500PiccCommonRequest
 10817 ;;		_Mf500PiccCascAnticoll
 10818 ;;		_Mf500PiccCascSelect
 10819 ;;		_Mf500PiccAuthState
 10820 ;;		_Mf500PiccRead
 10821 ;;		_Mf500PiccWrite
 10822 ;; This function uses a non-reentrant model
 10823 ;;
 10824                           
 10825                           
 10826                           ;psect for function _memcpy
 10827  0EC3                     _memcpy:	
 10828                           
 10829                           ;incstack = 0
 10830                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
 10831                           ;memcpy@d1 stored from wreg
 10832  0EC3  00F7               	movwf	memcpy@d1
 10833  0EC4  0871               	movf	memcpy@s1+1,w
 10834  0EC5  00F5               	movwf	memcpy@s+1
 10835  0EC6  0870               	movf	memcpy@s1,w
 10836  0EC7  00F4               	movwf	memcpy@s
 10837  0EC8  0877               	movf	memcpy@d1,w
 10838  0EC9  00F6               	movwf	memcpy@d
 10839  0ECA                     l5062:	
 10840  0ECA  3001               	movlw	1
 10841  0ECB  02F2               	subwf	memcpy@n,f
 10842  0ECC  3000               	movlw	0
 10843  0ECD  3BF3               	subwfb	memcpy@n+1,f
 10844  0ECE  0A72               	incf	memcpy@n,w
 10845  0ECF  1903               	skipnz
 10846  0ED0  0A73               	incf	memcpy@n+1,w
 10847  0ED1  1903               	btfsc	3,2
 10848  0ED2  0008               	return
 10849  0ED3  0876               	movf	memcpy@d,w
 10850  0ED4  0086               	movwf	6
 10851  0ED5  0187               	clrf	7
 10852  0ED6  0874               	movf	memcpy@s,w
 10853  0ED7  0084               	movwf	4
 10854  0ED8  0875               	movf	memcpy@s+1,w
 10855  0ED9  0085               	movwf	5
 10856  0EDA  0800               	movf	0,w	;code access
 10857  0EDB  0081               	movwf	1
 10858  0EDC  0AF4               	incf	memcpy@s,f
 10859  0EDD  1903               	skipnz
 10860  0EDE  0AF5               	incf	memcpy@s+1,f
 10861  0EDF  0AF6               	incf	memcpy@d,f
 10862  0EE0  2ECA               	goto	l5062
 10863  0EE1                     __end_of_memcpy:	
 10864  0EE1                     __ptext39:	
 10865 ;; *************** function _Mf500PiccLoadKey *****************
 10866 ;; Defined at:
 10867 ;;		line 877 in file "../../source/driver/mfrc500.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;  keys            1    wreg     PTR unsigned char 
 10870 ;;		 -> keys(6), keys_super(6), 
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;  keys            1   12[COMMON] PTR unsigned char 
 10873 ;;		 -> keys(6), keys_super(6), 
 10874 ;;  ret_status      1   11[COMMON] unsigned char 
 10875 ;; Return value:  Size  Location     Type
 10876 ;;                  1    wreg      unsigned char 
 10877 ;; Registers used:
 10878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10879 ;; Tracked objects:
 10880 ;;		On entry : 1E/0
 10881 ;;		On exit  : 1F/0
 10882 ;;		Unchanged: 0/0
 10883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10888 ;;Total ram usage:        2 bytes
 10889 ;; Hardware stack levels used:    1
 10890 ;; Hardware stack levels required when called:    6
 10891 ;; This function calls:
 10892 ;;		_FlushFIFO
 10893 ;;		_Mf500HostCodeKey
 10894 ;;		_PcdSetTmo
 10895 ;;		_PcdSingleResponseCmd
 10896 ;; This function is called by:
 10897 ;;		_checkpsw_super
 10898 ;;		_checkpsw
 10899 ;; This function uses a non-reentrant model
 10900 ;;
 10901                           
 10902                           
 10903                           ;psect for function _Mf500PiccLoadKey
 10904  0EE1                     _Mf500PiccLoadKey:	
 10905                           
 10906                           ;incstack = 0
 10907                           ; Regs used in _Mf500PiccLoadKey: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10908                           ;Mf500PiccLoadKey@keys stored from wreg
 10909  0EE1  00FC               	movwf	Mf500PiccLoadKey@keys
 10910                           
 10911                           ;mfrc500.c: 883: Mf500HostCodeKey(keys, MSndBuffer);
 10912  0EE2  30B6               	movlw	_MSndBuffer& (0+255)
 10913  0EE3  00F0               	movwf	Mf500HostCodeKey@coded
 10914  0EE4  087C               	movf	Mf500PiccLoadKey@keys,w
 10915  0EE5  26FB               	fcall	_Mf500HostCodeKey
 10916                           
 10917                           ;mfrc500.c: 885: PcdSetTmo(106);
 10918  0EE6  306A               	movlw	106
 10919  0EE7  00F5               	movwf	PcdSetTmo@tmoLength
 10920  0EE8  01F6               	clrf	PcdSetTmo@tmoLength+1
 10921  0EE9  3195  25D1  3188   	fcall	_PcdSetTmo
 10922                           
 10923                           ;mfrc500.c: 886: FlushFIFO();
 10924  0EEC  26F7  3188         	fcall	_FlushFIFO
 10925                           
 10926                           ;mfrc500.c: 887: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 10927  0EEE  0020               	movlb	0	; select bank0
 10928  0EEF  300C               	movlw	12
 10929  0EF0  27BA               	fcall	PL2	;call to abstracted procedure
 10930                           
 10931                           ;mfrc500.c: 888: MInfo.nBytesToSend = 12;
 10932  0EF1  00E7               	movwf	_MInfo+3
 10933                           
 10934                           ;mfrc500.c: 889: ret_status = PcdSingleResponseCmd(0x19);
 10935  0EF2  3019               	movlw	25
 10936  0EF3  3196  2612         	fcall	_PcdSingleResponseCmd
 10937  0EF5  00FB               	movwf	Mf500PiccLoadKey@ret_status
 10938                           
 10939                           ;mfrc500.c: 891: return ret_status;
 10940  0EF6  0008               	return
 10941  0EF7                     __end_of_Mf500PiccLoadKey:	
 10942  0EF7                     __ptext45:	
 10943 ;; *************** function _FlushFIFO *****************
 10944 ;; Defined at:
 10945 ;;		line 195 in file "../../source/driver/mfrc500.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;		None
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;		None
 10950 ;; Return value:  Size  Location     Type
 10951 ;;		None               void
 10952 ;; Registers used:
 10953 ;;		wreg, status,2, status,0, pclath, cstack
 10954 ;; Tracked objects:
 10955 ;;		On entry : 1E/0
 10956 ;;		On exit  : 1F/1
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;Total ram usage:        0 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    4
 10966 ;; This function calls:
 10967 ;;		_SetBitMask
 10968 ;; This function is called by:
 10969 ;;		_PcdSingleResponseCmd
 10970 ;;		_Mf500PiccLoadKey
 10971 ;;		_Mf500PiccRead
 10972 ;;		_Mf500PiccWrite
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           
 10977                           ;psect for function _FlushFIFO
 10978  0EF7                     _FlushFIFO:	
 10979                           
 10980                           ;incstack = 0
 10981                           ; Regs used in _FlushFIFO: [wreg+status,2+status,0+pclath+cstack]
 10982  0EF7  3009               	movlw	9
 10983                           
 10984                           ;mfrc500.c: 199: SetBitMask(0x09, 0x01);
 10985  0EF8  01F5               	clrf	SetBitMask@mask
 10986  0EF9  0AF5               	incf	SetBitMask@mask,f
 10987  0EFA  2FB1               	ljmp	_SetBitMask
 10988  0EFB                     __end_of_FlushFIFO:	
 10989  0EFB                     __ptext40:	
 10990 ;; *************** function _Mf500HostCodeKey *****************
 10991 ;; Defined at:
 10992 ;;		line 795 in file "../../source/driver/mfrc500.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;  uncoded         1    wreg     PTR unsigned char 
 10995 ;;		 -> keys(6), keys_super(6), 
 10996 ;;  coded           1    0[COMMON] PTR unsigned char 
 10997 ;;		 -> MSndBuffer(16), 
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;  uncoded         1    3[COMMON] PTR unsigned char 
 11000 ;;		 -> keys(6), keys_super(6), 
 11001 ;;  cnt             1    6[COMMON] unsigned char 
 11002 ;;  ln              1    5[COMMON] unsigned char 
 11003 ;;  hn              1    4[COMMON] unsigned char 
 11004 ;;  an              1    2[COMMON] unsigned char 
 11005 ;; Return value:  Size  Location     Type
 11006 ;;                  1    wreg      unsigned char 
 11007 ;; Registers used:
 11008 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11009 ;; Tracked objects:
 11010 ;;		On entry : 1E/0
 11011 ;;		On exit  : 1E/0
 11012 ;;		Unchanged: 1E/0
 11013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11014 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11017 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;Total ram usage:        7 bytes
 11019 ;; Hardware stack levels used:    1
 11020 ;; Hardware stack levels required when called:    1
 11021 ;; This function calls:
 11022 ;;		Nothing
 11023 ;; This function is called by:
 11024 ;;		_Mf500PiccLoadKey
 11025 ;; This function uses a non-reentrant model
 11026 ;;
 11027                           
 11028                           
 11029                           ;psect for function _Mf500HostCodeKey
 11030  0EFB                     _Mf500HostCodeKey:	
 11031                           
 11032                           ;incstack = 0
 11033                           ; Regs used in _Mf500HostCodeKey: [wreg+fsr1l+fsr1h+status,2+status,0]
 11034                           ;Mf500HostCodeKey@uncoded stored from wreg
 11035  0EFB  00F3               	movwf	Mf500HostCodeKey@uncoded
 11036                           
 11037                           ;mfrc500.c: 800: unsigned char cnt = 0;
 11038  0EFC  01F6               	clrf	Mf500HostCodeKey@cnt
 11039                           
 11040                           ;mfrc500.c: 802: unsigned char ln = 0;
 11041  0EFD  01F5               	clrf	Mf500HostCodeKey@ln
 11042                           
 11043                           ;mfrc500.c: 803: unsigned char hn = 0;
 11044  0EFE  01F4               	clrf	Mf500HostCodeKey@hn
 11045                           
 11046                           ;mfrc500.c: 805: for (cnt = 0; cnt < 6; cnt++)
 11047  0EFF  01F6               	clrf	Mf500HostCodeKey@cnt
 11048  0F00                     l5488:	
 11049                           
 11050                           ;mfrc500.c: 806: {
 11051                           ;mfrc500.c: 807: ln = uncoded[cnt] & 0x0F;
 11052  0F00  0876               	movf	Mf500HostCodeKey@cnt,w
 11053  0F01  0773               	addwf	Mf500HostCodeKey@uncoded,w
 11054  0F02  00F1               	movwf	??_Mf500HostCodeKey
 11055  0F03  0086               	movwf	6
 11056  0F04  0187               	clrf	7
 11057  0F05  0801               	movf	1,w
 11058  0F06  00F5               	movwf	Mf500HostCodeKey@ln
 11059  0F07  300F               	movlw	15
 11060  0F08  05F5               	andwf	Mf500HostCodeKey@ln,f
 11061                           
 11062                           ;mfrc500.c: 808: an = uncoded[cnt];
 11063  0F09  0876               	movf	Mf500HostCodeKey@cnt,w
 11064  0F0A  0773               	addwf	Mf500HostCodeKey@uncoded,w
 11065  0F0B  00F1               	movwf	??_Mf500HostCodeKey
 11066  0F0C  0086               	movwf	6
 11067  0F0D  0801               	movf	1,w
 11068  0F0E  00F2               	movwf	Mf500HostCodeKey@an
 11069                           
 11070                           ;mfrc500.c: 809: hn = an >> 4;
 11071  0F0F  0E72               	swapf	Mf500HostCodeKey@an,w
 11072  0F10  390F               	andlw	15
 11073  0F11  00F4               	movwf	Mf500HostCodeKey@hn
 11074                           
 11075                           ;mfrc500.c: 810: coded[cnt * 2 + 1] = (~ln << 4) | ln;
 11076  0F12  3576               	lslf	Mf500HostCodeKey@cnt,w
 11077  0F13  0770               	addwf	Mf500HostCodeKey@coded,w
 11078  0F14  00F1               	movwf	??_Mf500HostCodeKey
 11079  0F15  0A71               	incf	??_Mf500HostCodeKey,w
 11080  0F16  0086               	movwf	6
 11081  0F17  0975               	comf	Mf500HostCodeKey@ln,w
 11082  0F18  0E89               	swapf	9,f
 11083  0F19  39F0               	andlw	240
 11084  0F1A  0475               	iorwf	Mf500HostCodeKey@ln,w
 11085  0F1B  0081               	movwf	1
 11086                           
 11087                           ;mfrc500.c: 811: coded[cnt * 2] = (~hn << 4) | hn;
 11088  0F1C  3576               	lslf	Mf500HostCodeKey@cnt,w
 11089  0F1D  0770               	addwf	Mf500HostCodeKey@coded,w
 11090  0F1E  00F1               	movwf	??_Mf500HostCodeKey
 11091  0F1F  0086               	movwf	6
 11092  0F20  0974               	comf	Mf500HostCodeKey@hn,w
 11093  0F21  0E89               	swapf	9,f
 11094  0F22  39F0               	andlw	240
 11095  0F23  0474               	iorwf	Mf500HostCodeKey@hn,w
 11096  0F24  0081               	movwf	1
 11097  0F25  3006               	movlw	6
 11098  0F26  0AF6               	incf	Mf500HostCodeKey@cnt,f
 11099  0F27  0276               	subwf	Mf500HostCodeKey@cnt,w
 11100  0F28  1803               	btfsc	3,0
 11101  0F29  0008               	return
 11102  0F2A  2F00               	goto	l5488
 11103  0F2B                     __end_of_Mf500HostCodeKey:	
 11104  0F2B                     __ptext34:	
 11105 ;; *************** function _read_id *****************
 11106 ;; Defined at:
 11107 ;;		line 503 in file "../../source/application/handle_ic_card.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;		None
 11110 ;; Auto vars:     Size  Location     Type
 11111 ;;		None
 11112 ;; Return value:  Size  Location     Type
 11113 ;;                  1    wreg      unsigned char 
 11114 ;; Registers used:
 11115 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11116 ;; Tracked objects:
 11117 ;;		On entry : 1F/0
 11118 ;;		On exit  : 1F/0
 11119 ;;		Unchanged: 0/0
 11120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;Total ram usage:        0 bytes
 11126 ;; Hardware stack levels used:    1
 11127 ;; Hardware stack levels required when called:    8
 11128 ;; This function calls:
 11129 ;;		_Mf500PiccSelect
 11130 ;; This function is called by:
 11131 ;;		_checkpsw_super
 11132 ;;		_handle_ic_card
 11133 ;; This function uses a non-reentrant model
 11134 ;;
 11135                           
 11136                           
 11137                           ;psect for function _read_id
 11138  0F2B                     _read_id:	
 11139                           
 11140                           ;handle_ic_card.c: 508: if (Mf500PiccSelect(snr_rc500) == 0)
 11141                           
 11142                           ;incstack = 0
 11143                           ; Regs used in _read_id: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11144  0F2B  30DA               	movlw	_snr_rc500& (0+255)
 11145  0F2C  2732  3188         	fcall	_Mf500PiccSelect
 11146  0F2E  3800               	iorlw	0
 11147  0F2F  1903               	btfsc	3,2
 11148                           
 11149                           ;handle_ic_card.c: 509: {
 11150                           ;handle_ic_card.c: 510: return 0x01;
 11151  0F30  3401               	retlw	1
 11152                           
 11153                           ;handle_ic_card.c: 512: else
 11154                           ;handle_ic_card.c: 513: {
 11155                           ;handle_ic_card.c: 514: return 0x00;
 11156  0F31  3400               	retlw	0
 11157  0F32                     __end_of_read_id:	
 11158  0F32                     __ptext35:	
 11159 ;; *************** function _Mf500PiccSelect *****************
 11160 ;; Defined at:
 11161 ;;		line 785 in file "../../source/driver/mfrc500.c"
 11162 ;; Parameters:    Size  Location     Type
 11163 ;;  snr             1    wreg     PTR unsigned char 
 11164 ;;		 -> snr_rc500(4), 
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;  snr             1   10[BANK0 ] PTR unsigned char 
 11167 ;;		 -> snr_rc500(4), 
 11168 ;; Return value:  Size  Location     Type
 11169 ;;                  1    wreg      unsigned char 
 11170 ;; Registers used:
 11171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11172 ;; Tracked objects:
 11173 ;;		On entry : 1F/0
 11174 ;;		On exit  : 1F/0
 11175 ;;		Unchanged: 0/0
 11176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;Total ram usage:        1 bytes
 11182 ;; Hardware stack levels used:    1
 11183 ;; Hardware stack levels required when called:    7
 11184 ;; This function calls:
 11185 ;;		_Mf500PiccCascSelect
 11186 ;; This function is called by:
 11187 ;;		_read_id
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           
 11192                           ;psect for function _Mf500PiccSelect
 11193  0F32                     _Mf500PiccSelect:	
 11194                           
 11195                           ;incstack = 0
 11196                           ; Regs used in _Mf500PiccSelect: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11197                           ;Mf500PiccSelect@snr stored from wreg
 11198  0F32  00AA               	movwf	Mf500PiccSelect@snr
 11199                           
 11200                           ;mfrc500.c: 791: return Mf500PiccCascSelect(0x93, snr);
 11201  0F33  00FB               	movwf	Mf500PiccCascSelect@snr
 11202  0F34  3093               	movlw	147
 11203  0F35  319F  2FC1         	ljmp	_Mf500PiccCascSelect
 11204  0F37                     __end_of_Mf500PiccSelect:	
 11205  0F37                     __ptext28:	
 11206 ;; *************** function _rfcard *****************
 11207 ;; Defined at:
 11208 ;;		line 484 in file "../../source/application/handle_ic_card.c"
 11209 ;; Parameters:    Size  Location     Type
 11210 ;;		None
 11211 ;; Auto vars:     Size  Location     Type
 11212 ;;  ret             1   30[BANK0 ] unsigned char 
 11213 ;; Return value:  Size  Location     Type
 11214 ;;                  1    wreg      unsigned char 
 11215 ;; Registers used:
 11216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11217 ;; Tracked objects:
 11218 ;;		On entry : 0/0
 11219 ;;		On exit  : 1F/0
 11220 ;;		Unchanged: 0/0
 11221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;Total ram usage:        1 bytes
 11227 ;; Hardware stack levels used:    1
 11228 ;; Hardware stack levels required when called:    8
 11229 ;; This function calls:
 11230 ;;		_Mf500PiccAnticoll
 11231 ;;		_Mf500PiccRequest
 11232 ;; This function is called by:
 11233 ;;		_checkpsw_super
 11234 ;;		_handle_ic_card
 11235 ;; This function uses a non-reentrant model
 11236 ;;
 11237                           
 11238                           
 11239                           ;psect for function _rfcard
 11240  0F37                     _rfcard:	
 11241                           
 11242                           ;incstack = 0
 11243                           ; Regs used in _rfcard: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11244  0F37  30DE               	movlw	_tt1& (0+255)
 11245  0F38  0020               	movlb	0	; select bank0
 11246  0F39  00AA               	movwf	Mf500PiccRequest@atq
 11247  0F3A  3026               	movlw	38
 11248  0F3B  274F  3188         	fcall	_Mf500PiccRequest
 11249                           
 11250                           ;handle_ic_card.c: 491: ret = Mf500PiccAnticoll(0, snr_rc500);
 11251  0F3D  30DA               	movlw	_snr_rc500& (0+255)
 11252  0F3E  00FD               	movwf	Mf500PiccAnticoll@snr
 11253  0F3F  3000               	movlw	0
 11254  0F40  2747  3188         	fcall	_Mf500PiccAnticoll
 11255  0F42  00BE               	movwf	rfcard@ret
 11256                           
 11257                           ;handle_ic_card.c: 492: if (ret != 0)
 11258  0F43  083E               	movf	rfcard@ret,w
 11259  0F44  1D03               	skipz
 11260                           
 11261                           ;handle_ic_card.c: 493: {
 11262                           ;handle_ic_card.c: 494: return 0x01;
 11263  0F45  3401               	retlw	1
 11264                           
 11265                           ;handle_ic_card.c: 498: }
 11266                           ;handle_ic_card.c: 500: return 0x00;
 11267  0F46  3400               	retlw	0
 11268  0F47                     __end_of_rfcard:	
 11269  0F47                     __ptext31:	
 11270 ;; *************** function _Mf500PiccAnticoll *****************
 11271 ;; Defined at:
 11272 ;;		line 741 in file "../../source/driver/mfrc500.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;  bcnt            1    wreg     unsigned char 
 11275 ;;  snr             1   13[COMMON] PTR unsigned char 
 11276 ;;		 -> snr_rc500(4), 
 11277 ;; Auto vars:     Size  Location     Type
 11278 ;;  bcnt            1   29[BANK0 ] unsigned char 
 11279 ;; Return value:  Size  Location     Type
 11280 ;;                  1    wreg      unsigned char 
 11281 ;; Registers used:
 11282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11283 ;; Tracked objects:
 11284 ;;		On entry : 1E/0
 11285 ;;		On exit  : 1F/0
 11286 ;;		Unchanged: 0/0
 11287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11288 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11291 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;Total ram usage:        2 bytes
 11293 ;; Hardware stack levels used:    1
 11294 ;; Hardware stack levels required when called:    7
 11295 ;; This function calls:
 11296 ;;		_Mf500PiccCascAnticoll
 11297 ;; This function is called by:
 11298 ;;		_rfcard
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           
 11303                           ;psect for function _Mf500PiccAnticoll
 11304  0F47                     _Mf500PiccAnticoll:	
 11305                           
 11306                           ;incstack = 0
 11307                           ; Regs used in _Mf500PiccAnticoll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11308                           ;Mf500PiccAnticoll@bcnt stored from wreg
 11309  0F47  0020               	movlb	0	; select bank0
 11310  0F48  00BD               	movwf	Mf500PiccAnticoll@bcnt
 11311                           
 11312                           ;mfrc500.c: 746: return Mf500PiccCascAnticoll(0x93, bcnt, snr);
 11313  0F49  00FB               	movwf	Mf500PiccCascAnticoll@bcnt
 11314  0F4A  087D               	movf	Mf500PiccAnticoll@snr,w
 11315  0F4B  00FC               	movwf	Mf500PiccCascAnticoll@snr
 11316  0F4C  3093               	movlw	147
 11317  0F4D  3194  2C84         	ljmp	_Mf500PiccCascAnticoll
 11318  0F4F                     __end_of_Mf500PiccAnticoll:	
 11319  0F4F                     __ptext29:	
 11320 ;; *************** function _Mf500PiccRequest *****************
 11321 ;; Defined at:
 11322 ;;		line 614 in file "../../source/driver/mfrc500.c"
 11323 ;; Parameters:    Size  Location     Type
 11324 ;;  req_code        1    wreg     unsigned char 
 11325 ;;  atq             1   10[BANK0 ] PTR unsigned char 
 11326 ;;		 -> tt1(2), 
 11327 ;; Auto vars:     Size  Location     Type
 11328 ;;  req_code        1   11[BANK0 ] unsigned char 
 11329 ;; Return value:  Size  Location     Type
 11330 ;;                  1    wreg      unsigned char 
 11331 ;; Registers used:
 11332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11333 ;; Tracked objects:
 11334 ;;		On entry : 1F/0
 11335 ;;		On exit  : 1E/0
 11336 ;;		Unchanged: 0/0
 11337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11338 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11341 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11342 ;;Total ram usage:        2 bytes
 11343 ;; Hardware stack levels used:    1
 11344 ;; Hardware stack levels required when called:    7
 11345 ;; This function calls:
 11346 ;;		_Mf500PiccCommonRequest
 11347 ;; This function is called by:
 11348 ;;		_rfcard
 11349 ;; This function uses a non-reentrant model
 11350 ;;
 11351                           
 11352                           
 11353                           ;psect for function _Mf500PiccRequest
 11354  0F4F                     _Mf500PiccRequest:	
 11355                           
 11356                           ;incstack = 0
 11357                           ; Regs used in _Mf500PiccRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11358                           ;Mf500PiccRequest@req_code stored from wreg
 11359  0F4F  00AB               	movwf	Mf500PiccRequest@req_code
 11360                           
 11361                           ;mfrc500.c: 619: return Mf500PiccCommonRequest(req_code, atq);
 11362  0F50  082A               	movf	Mf500PiccRequest@atq,w
 11363  0F51  00FB               	movwf	Mf500PiccCommonRequest@atq
 11364  0F52  082B               	movf	Mf500PiccRequest@req_code,w
 11365  0F53  3190  2827         	ljmp	_Mf500PiccCommonRequest
 11366  0F55                     __end_of_Mf500PiccRequest:	
 11367  0F55                     __ptext27:	
 11368 ;; *************** function _checkpsw_super *****************
 11369 ;; Defined at:
 11370 ;;		line 537 in file "../../source/application/handle_ic_card.c"
 11371 ;; Parameters:    Size  Location     Type
 11372 ;;		None
 11373 ;; Auto vars:     Size  Location     Type
 11374 ;;		None
 11375 ;; Return value:  Size  Location     Type
 11376 ;;                  1    wreg      unsigned char 
 11377 ;; Registers used:
 11378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11379 ;; Tracked objects:
 11380 ;;		On entry : 0/0
 11381 ;;		On exit  : 1F/0
 11382 ;;		Unchanged: 0/0
 11383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;Total ram usage:        0 bytes
 11389 ;; Hardware stack levels used:    1
 11390 ;; Hardware stack levels required when called:    9
 11391 ;; This function calls:
 11392 ;;		_Mf500PiccAuthState
 11393 ;;		_Mf500PiccLoadKey
 11394 ;;		_read_id
 11395 ;;		_rfcard
 11396 ;; This function is called by:
 11397 ;;		_handle_ic_card
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           
 11402                           ;psect for function _checkpsw_super
 11403  0F55                     _checkpsw_super:	
 11404                           
 11405                           ;handle_ic_card.c: 541: if (!rfcard())
 11406                           
 11407                           ;incstack = 0
 11408                           ; Regs used in _checkpsw_super: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11409  0F55  2737  3188         	fcall	_rfcard
 11410  0F57  3800               	iorlw	0
 11411  0F58  1D03               	skipz
 11412  0F59  3400               	retlw	0
 11413                           
 11414                           ;handle_ic_card.c: 542: {
 11415                           ;handle_ic_card.c: 543: if (read_id())
 11416  0F5A  272B  3188         	fcall	_read_id
 11417  0F5C  3A00               	xorlw	0
 11418  0F5D  1903               	skipnz
 11419  0F5E  3400               	retlw	0
 11420                           
 11421                           ;handle_ic_card.c: 544: {
 11422                           ;handle_ic_card.c: 545: if (Mf500PiccLoadKey(keys_super) == 0)
 11423  0F5F  30E0               	movlw	_keys_super& (0+255)
 11424  0F60  26E1  3188         	fcall	_Mf500PiccLoadKey
 11425  0F62  3800               	iorlw	0
 11426  0F63  1D03               	skipz
 11427  0F64  3400               	retlw	0
 11428                           
 11429                           ;handle_ic_card.c: 546: {
 11430                           ;handle_ic_card.c: 547: if (Mf500PiccAuthState(0x60, snr_rc500, 4 * sector_number) == 0)
 11431  0F65  30DA               	movlw	_snr_rc500& (0+255)
 11432  0F66  27DC  3188         	fcall	PL16	;call to abstracted procedure
 11433  0F68  2560  3188         	fcall	_Mf500PiccAuthState
 11434  0F6A  3800               	iorlw	0
 11435  0F6B  1903               	btfsc	3,2
 11436                           
 11437                           ;handle_ic_card.c: 548: {
 11438                           ;handle_ic_card.c: 549: return 0x01;
 11439  0F6C  3401               	retlw	1
 11440                           
 11441                           ;handle_ic_card.c: 551: else
 11442                           ;handle_ic_card.c: 552: {
 11443                           ;handle_ic_card.c: 553: return 0x00;
 11444  0F6D  3400               	retlw	0
 11445  0F6E                     __end_of_checkpsw_super:	
 11446  0F6E                     __ptext19:	
 11447 ;; *************** function _same_id *****************
 11448 ;; Defined at:
 11449 ;;		line 519 in file "../../source/application/handle_ic_card.c"
 11450 ;; Parameters:    Size  Location     Type
 11451 ;;		None
 11452 ;; Auto vars:     Size  Location     Type
 11453 ;;		None
 11454 ;; Return value:  Size  Location     Type
 11455 ;;                  1    wreg      unsigned char 
 11456 ;; Registers used:
 11457 ;;		wreg
 11458 ;; Tracked objects:
 11459 ;;		On entry : 1F/0
 11460 ;;		On exit  : 1F/1
 11461 ;;		Unchanged: 0/0
 11462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11467 ;;Total ram usage:        0 bytes
 11468 ;; Hardware stack levels used:    1
 11469 ;; Hardware stack levels required when called:    1
 11470 ;; This function calls:
 11471 ;;		Nothing
 11472 ;; This function is called by:
 11473 ;;		_handle_ic_card
 11474 ;; This function uses a non-reentrant model
 11475 ;;
 11476                           
 11477                           
 11478                           ;psect for function _same_id
 11479  0F6E                     _same_id:	
 11480                           
 11481                           ;handle_ic_card.c: 523: if ((card_id[0] == snr_rc500[0]) &&
 11482                           ;handle_ic_card.c: 524: (card_id[1] == snr_rc500[1]) &&
 11483                           ;handle_ic_card.c: 525: (card_id[2] == snr_rc500[2]) &&
 11484                           ;handle_ic_card.c: 526: (card_id[3] == snr_rc500[3]))
 11485                           
 11486                           ;incstack = 0
 11487                           ; Regs used in _same_id: [wreg]
 11488  0F6E  084F               	movf	_card_id,w
 11489  0F6F  0021               	movlb	1	; select bank1
 11490  0F70  065A               	xorwf	_snr_rc500^(0+128),w
 11491  0F71  1D03               	skipz
 11492  0F72  3400               	retlw	0
 11493  0F73  0020               	movlb	0	; select bank0
 11494  0F74  0850               	movf	_card_id+1,w
 11495  0F75  0021               	movlb	1	; select bank1
 11496  0F76  065B               	xorwf	(_snr_rc500^(0+128)+1),w
 11497  0F77  1D03               	skipz
 11498  0F78  3400               	retlw	0
 11499  0F79  0020               	movlb	0	; select bank0
 11500  0F7A  0851               	movf	_card_id+2,w
 11501  0F7B  0021               	movlb	1	; select bank1
 11502  0F7C  065C               	xorwf	(_snr_rc500^(0+128)+2),w
 11503  0F7D  1D03               	skipz
 11504  0F7E  3400               	retlw	0
 11505  0F7F  0020               	movlb	0	; select bank0
 11506  0F80  0852               	movf	_card_id+3,w
 11507  0F81  0021               	movlb	1	; select bank1
 11508  0F82  065D               	xorwf	(_snr_rc500^(0+128)+3),w
 11509  0F83  1903               	btfsc	3,2
 11510                           
 11511                           ;handle_ic_card.c: 527: {
 11512                           ;handle_ic_card.c: 528: return 0x01;
 11513  0F84  3401               	retlw	1
 11514                           
 11515                           ;handle_ic_card.c: 530: else
 11516                           ;handle_ic_card.c: 531: {
 11517                           ;handle_ic_card.c: 532: return 0x00;
 11518  0F85  3400               	retlw	0
 11519  0F86                     __end_of_same_id:	
 11520  0F86                     __ptext17:	
 11521 ;; *************** function _handle_timer *****************
 11522 ;; Defined at:
 11523 ;;		line 44 in file "../../source/application/handle_timer.c"
 11524 ;; Parameters:    Size  Location     Type
 11525 ;;		None
 11526 ;; Auto vars:     Size  Location     Type
 11527 ;;		None
 11528 ;; Return value:  Size  Location     Type
 11529 ;;		None               void
 11530 ;; Registers used:
 11531 ;;		wreg, status,2, status,0
 11532 ;; Tracked objects:
 11533 ;;		On entry : 1F/0
 11534 ;;		On exit  : 1F/0
 11535 ;;		Unchanged: 0/0
 11536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11541 ;;Total ram usage:        0 bytes
 11542 ;; Hardware stack levels used:    1
 11543 ;; Hardware stack levels required when called:    1
 11544 ;; This function calls:
 11545 ;;		Nothing
 11546 ;; This function is called by:
 11547 ;;		_main
 11548 ;; This function uses a non-reentrant model
 11549 ;;
 11550                           
 11551                           
 11552                           ;psect for function _handle_timer
 11553  0F86                     _handle_timer:	
 11554                           
 11555                           ;handle_timer.c: 48: if (is_enable)
 11556                           
 11557                           ;incstack = 0
 11558                           ; Regs used in _handle_timer: [wreg+status,2+status,0]
 11559  0F86  085F               	movf	_is_enable,w
 11560  0F87  1903               	btfsc	3,2
 11561  0F88  2F8B               	goto	l7392
 11562                           
 11563                           ;handle_timer.c: 49: {
 11564                           ;handle_timer.c: 50: (RA0 ^= 0x01);
 11565  0F89  3001               	movlw	1
 11566  0F8A  068C               	xorwf	12,f
 11567  0F8B                     l7392:	
 11568                           ;handle_timer.c: 51: }
 11569                           
 11570                           
 11571                           ;handle_timer.c: 55: }
 11572                           ;handle_timer.c: 57: if (flag_user_card)
 11573  0F8B  085D               	movf	_flag_user_card,w
 11574  0F8C  1903               	btfsc	3,2
 11575  0F8D  0008               	return
 11576  0F8E  3008               	movlw	8
 11577                           
 11578                           ;handle_timer.c: 58: {
 11579                           ;handle_timer.c: 59: user_card_count++;
 11580  0F8F  0AE3               	incf	_user_card_count,f
 11581                           
 11582                           ;handle_timer.c: 60: if (user_card_count >= 0x08)
 11583  0F90  0263               	subwf	_user_card_count,w
 11584  0F91  1C03               	skipc
 11585  0F92  0008               	return
 11586                           
 11587                           ;handle_timer.c: 61: {
 11588                           ;handle_timer.c: 62: user_card_count = 0x00;
 11589  0F93  01E3               	clrf	_user_card_count
 11590                           
 11591                           ;handle_timer.c: 63: flag_user_card = 0x00;
 11592  0F94  01DD               	clrf	_flag_user_card
 11593                           
 11594                           ;handle_timer.c: 64: RB4 = 0x01;
 11595  0F95  160D               	bsf	13,4	;volatile
 11596                           
 11597                           ;handle_timer.c: 65: RB5 = 0x01;
 11598  0F96  168D               	bsf	13,5	;volatile
 11599  0F97  0008               	return
 11600  0F98                     __end_of_handle_timer:	
 11601  0F98                     __ptext68:	
 11602 ;; *************** function _ds1302_read_byte *****************
 11603 ;; Defined at:
 11604 ;;		line 97 in file "../../source/driver/ds1302.c"
 11605 ;; Parameters:    Size  Location     Type
 11606 ;;		None
 11607 ;; Auto vars:     Size  Location     Type
 11608 ;;  i               1    1[COMMON] unsigned char 
 11609 ;;  data            1    0[COMMON] unsigned char 
 11610 ;; Return value:  Size  Location     Type
 11611 ;;                  1    wreg      unsigned char 
 11612 ;; Registers used:
 11613 ;;		wreg, status,2, status,0
 11614 ;; Tracked objects:
 11615 ;;		On entry : 0/1
 11616 ;;		On exit  : 1F/1
 11617 ;;		Unchanged: 0/0
 11618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;Total ram usage:        2 bytes
 11624 ;; Hardware stack levels used:    1
 11625 ;; Hardware stack levels required when called:    1
 11626 ;; This function calls:
 11627 ;;		Nothing
 11628 ;; This function is called by:
 11629 ;;		_ds1302_read
 11630 ;; This function uses a non-reentrant model
 11631 ;;
 11632                           
 11633                           
 11634                           ;psect for function _ds1302_read_byte
 11635  0F98                     _ds1302_read_byte:	
 11636                           
 11637                           ;ds1302.c: 101: BYTE i, data = 0x00;
 11638                           
 11639                           ;incstack = 0
 11640                           ; Regs used in _ds1302_read_byte: [wreg+status,2+status,0]
 11641  0F98  01F0               	clrf	ds1302_read_byte@data
 11642                           
 11643                           ;ds1302.c: 103: (TRISCbits.TRISC1) = 0x01;
 11644  0F99  0021               	movlb	1	; select bank1
 11645  0F9A  148E               	bsf	14,1	;volatile
 11646                           
 11647                           ;ds1302.c: 104: for (i = 0x00; i < 0x08; i++)
 11648  0F9B  01F1               	clrf	ds1302_read_byte@i
 11649  0F9C                     l726:	
 11650                           
 11651                           ;ds1302.c: 105: {
 11652                           ;ds1302.c: 106: data = data >> 0x01;
 11653  0F9C  36F0               	lsrf	ds1302_read_byte@data,f
 11654                           
 11655                           ;ds1302.c: 107: (RC2) = 0x01;
 11656  0F9D  0020               	movlb	0	; select bank0
 11657  0F9E  150E               	bsf	14,2	;volatile
 11658                           
 11659                           ;ds1302.c: 108: __nop();
 11660  0F9F  0000               	nop
 11661                           
 11662                           ;ds1302.c: 109: __nop();
 11663  0FA0  0000               	nop
 11664                           
 11665                           ;ds1302.c: 110: (RC2) = 0x00;
 11666  0FA1  0020               	movlb	0	; select bank0
 11667  0FA2  110E               	bcf	14,2	;volatile
 11668                           
 11669                           ;ds1302.c: 111: __nop();
 11670  0FA3  0000               	nop
 11671                           
 11672                           ;ds1302.c: 112: __nop();
 11673  0FA4  0000               	nop
 11674                           
 11675                           ;ds1302.c: 113: if ((RC1))
 11676  0FA5  0020               	movlb	0	; select bank0
 11677  0FA6  188E               	btfsc	14,1	;volatile
 11678                           
 11679                           ;ds1302.c: 114: {
 11680                           ;ds1302.c: 115: data = data | 0x80;
 11681  0FA7  17F0               	bsf	ds1302_read_byte@data,7
 11682  0FA8  3008               	movlw	8
 11683  0FA9  0AF1               	incf	ds1302_read_byte@i,f
 11684  0FAA  0271               	subwf	ds1302_read_byte@i,w
 11685  0FAB  1C03               	skipc
 11686  0FAC  2F9C               	goto	l726
 11687                           
 11688                           ;ds1302.c: 116: }
 11689                           ;ds1302.c: 117: }
 11690                           ;ds1302.c: 118: (TRISCbits.TRISC1) = 0x00;
 11691  0FAD  0021               	movlb	1	; select bank1
 11692  0FAE  108E               	bcf	14,1	;volatile
 11693                           
 11694                           ;ds1302.c: 120: return data;
 11695  0FAF  0870               	movf	ds1302_read_byte@data,w
 11696  0FB0  0008               	return
 11697  0FB1                     __end_of_ds1302_read_byte:	
 11698  0FB1                     __ptext46:	
 11699 ;; *************** function _SetBitMask *****************
 11700 ;; Defined at:
 11701 ;;		line 141 in file "../../source/driver/mfrc500.c"
 11702 ;; Parameters:    Size  Location     Type
 11703 ;;  reg             1    wreg     unsigned char 
 11704 ;;  mask            1    5[COMMON] unsigned char 
 11705 ;; Auto vars:     Size  Location     Type
 11706 ;;  reg             1    7[COMMON] unsigned char 
 11707 ;;  tmp             1    6[COMMON] unsigned char 
 11708 ;; Return value:  Size  Location     Type
 11709 ;;		None               void
 11710 ;; Registers used:
 11711 ;;		wreg, status,2, status,0, pclath, cstack
 11712 ;; Tracked objects:
 11713 ;;		On entry : 1E/1
 11714 ;;		On exit  : 1F/1
 11715 ;;		Unchanged: 0/0
 11716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11717 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11721 ;;Total ram usage:        3 bytes
 11722 ;; Hardware stack levels used:    1
 11723 ;; Hardware stack levels required when called:    3
 11724 ;; This function calls:
 11725 ;;		_ReadRC
 11726 ;;		_WriteRC
 11727 ;; This function is called by:
 11728 ;;		_FlushFIFO
 11729 ;;		_PcdRfReset
 11730 ;;		_PcdSingleResponseCmd
 11731 ;; This function uses a non-reentrant model
 11732 ;;
 11733                           
 11734                           
 11735                           ;psect for function _SetBitMask
 11736  0FB1                     _SetBitMask:	
 11737                           
 11738                           ;incstack = 0
 11739                           ; Regs used in _SetBitMask: [wreg+status,2+status,0+pclath+cstack]
 11740                           ;SetBitMask@reg stored from wreg
 11741  0FB1  00F7               	movwf	SetBitMask@reg
 11742                           
 11743                           ;mfrc500.c: 148: tmp = ReadRC(reg);
 11744  0FB2  3197  2778         	fcall	_ReadRC
 11745  0FB4  00F6               	movwf	SetBitMask@tmp
 11746                           
 11747                           ;mfrc500.c: 149: WriteRC(reg, tmp | mask);
 11748  0FB5  0475               	iorwf	SetBitMask@mask,w
 11749  0FB6  00F2               	movwf	WriteRC@data
 11750  0FB7  0877               	movf	SetBitMask@reg,w
 11751  0FB8  3197  2F67         	ljmp	_WriteRC
 11752  0FBA                     __end_of_SetBitMask:	
 11753  0FBA                     PL2:	
 11754  0FBA  01E4               	clrf	_MInfo
 11755  0FBB  01E5               	clrf	_MInfo+1
 11756  0FBC  01EA               	clrf	_MInfo+6
 11757  0FBD  01E6               	clrf	_MInfo+2
 11758  0FBE  01E7               	clrf	_MInfo+3
 11759  0FBF  01E8               	clrf	_MInfo+4
 11760  0FC0  01E9               	clrf	_MInfo+5
 11761  0FC1  01EB               	clrf	_MInfo+7
 11762  0FC2  0008               	return
 11763  0FC3                     __end_ofPL2:	
 11764  0FC3                     PL4:	
 11765  0FC3  3E01               	addlw	low (_PWD_TABLE| (0+32768))
 11766  0FC4  0084               	movwf	4
 11767  0FC5  3098               	movlw	high (_PWD_TABLE| (0+32768))
 11768  0FC6  1803               	skipnc
 11769  0FC7  3E01               	addlw	1
 11770  0FC8  0085               	movwf	5
 11771  0FC9  0800               	movf	0,w	;code access
 11772  0FCA  00F6               	movwf	write_24c02@data
 11773  0FCB  0008               	return
 11774  0FCC                     __end_ofPL4:	
 11775  0FCC                     PL8:	
 11776  0FCC  0086               	movwf	6
 11777  0FCD  0187               	clrf	7
 11778  0FCE  0181               	clrf	1
 11779  0FCF  0AA7               	incf	handle_config@i,f
 11780  0FD0  1903               	skipnz
 11781  0FD1  0AA8               	incf	handle_config@i+1,f
 11782  0FD2  3000               	movlw	0
 11783  0FD3  0228               	subwf	handle_config@i+1,w
 11784  0FD4  0008               	return
 11785  0FD5                     __end_ofPL8:	
 11786  0FD5                     PL14:	
 11787  0FD5  0020               	movlb	0	; select bank0
 11788  0FD6  0AA7               	incf	handle_config@i,f
 11789  0FD7  1903               	skipnz
 11790  0FD8  0AA8               	incf	handle_config@i+1,f
 11791  0FD9  3001               	movlw	1
 11792  0FDA  0228               	subwf	handle_config@i+1,w
 11793  0FDB  3400               	retlw	0
 11794  0FDC                     __end_ofPL14:	
 11795  0FDC                     PL16:	
 11796  0FDC  00FB               	movwf	Mf500PiccAuthState@snr
 11797  0FDD  0860               	movf	_sector_number,w
 11798  0FDE  0709               	addwf	9,w
 11799  0FDF  0709               	addwf	9,w
 11800  0FE0  00FC               	movwf	Mf500PiccAuthState@block
 11801  0FE1  3460               	retlw	96
 11802  0FE2                     __end_ofPL16:	
 11803  0FE2                     PL22:	
 11804  0FE2  128E               	bcf	14,5	;volatile
 11805  0FE3  30F4               	movlw	244
 11806  0FE4  00F0               	movwf	delay_ms@count
 11807  0FE5  3001               	movlw	1
 11808  0FE6  00F1               	movwf	delay_ms@count+1
 11809  0FE7  0008               	return
 11810  0FE8                     __end_ofPL22:	
 11811  0FE8                     __ptext26:	
 11812 ;; *************** function _handle_beep *****************
 11813 ;; Defined at:
 11814 ;;		line 73 in file "../../source/driver/beep.c"
 11815 ;; Parameters:    Size  Location     Type
 11816 ;;		None
 11817 ;; Auto vars:     Size  Location     Type
 11818 ;;		None
 11819 ;; Return value:  Size  Location     Type
 11820 ;;		None               void
 11821 ;; Registers used:
 11822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11823 ;; Tracked objects:
 11824 ;;		On entry : 1E/0
 11825 ;;		On exit  : 1F/0
 11826 ;;		Unchanged: 0/0
 11827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;Total ram usage:        0 bytes
 11833 ;; Hardware stack levels used:    1
 11834 ;; Hardware stack levels required when called:    2
 11835 ;; This function calls:
 11836 ;;		_delay_ms
 11837 ;; This function is called by:
 11838 ;;		_handle_ic_card
 11839 ;; This function uses a non-reentrant model
 11840 ;;
 11841                           
 11842                           
 11843                           ;psect for function _handle_beep
 11844  0FE8                     _handle_beep:	
 11845                           
 11846                           ;beep.c: 77: switch (card_type)
 11847                           
 11848                           ;incstack = 0
 11849                           ; Regs used in _handle_beep: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11850  0FE8  2FF1               	goto	l6980
 11851  0FE9                     l666:	
 11852                           ;beep.c: 78: {
 11853                           ;beep.c: 79: case 0x01 :
 11854                           
 11855                           
 11856                           ;beep.c: 80: (RC5 = 0x00);
 11857  0FE9  128E               	bcf	14,5	;volatile
 11858                           
 11859                           ;beep.c: 81: delay_ms(100);
 11860  0FEA  3064               	movlw	100
 11861  0FEB  00F0               	movwf	delay_ms@count
 11862  0FEC  01F1               	clrf	delay_ms@count+1
 11863  0FED  24C6               	fcall	_delay_ms
 11864                           
 11865                           ;beep.c: 82: (RC5 = 0x01);
 11866  0FEE  0020               	movlb	0	; select bank0
 11867  0FEF  168E               	bsf	14,5	;volatile
 11868                           
 11869                           ;beep.c: 83: break;
 11870  0FF0  0008               	return
 11871  0FF1                     l6980:	
 11872  0FF1  0020               	movlb	0	; select bank0
 11873  0FF2  0856               	movf	_card_type,w
 11874                           
 11875                           ; Switch size 1, requested type "space"
 11876                           ; Number of cases is 8, Range of values is 1 to 8
 11877                           ; switch strategies available:
 11878                           ; Name         Instructions Cycles
 11879                           ; direct_byte           25     9 (fixed)
 11880                           ; simple_byte           25    13 (average)
 11881                           ; jumptable            263     9 (fixed)
 11882                           ;	Chosen strategy is direct_byte
 11883  0FF3  3EFF               	addlw	-1
 11884  0FF4  1C03               	skipc
 11885  0FF5  0008               	return
 11886  0FF6  0084               	movwf	4
 11887  0FF7  3008               	movlw	8
 11888  0FF8  0204               	subwf	4,w
 11889  0FF9  1803               	skipnc
 11890  0FFA  0008               	return
 11891  0FFB  3187               	movlp	high S7644
 11892  0FFC  3504               	lslf	4,w
 11893  0FFD  3EEE               	addlw	low S7644
 11894  0FFE  0082               	movwf	2
 11895  0FFF                     l676:	
 11896  0FFF  0008               	return
 11897  1000                     __end_of_handle_beep:	
 11898                           
 11899                           	psect	text21
 11900  1102                     __ptext21:	
 11901 ;; *************** function _deal_floor *****************
 11902 ;; Defined at:
 11903 ;;		line 36 in file "../../source/application/handle_floor.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;  data            1    wreg     PTR unsigned char 
 11906 ;;		 -> user_card(14), 
 11907 ;; Auto vars:     Size  Location     Type
 11908 ;;  data            1    0[BANK0 ] PTR unsigned char 
 11909 ;;		 -> user_card(14), 
 11910 ;;  floor           8    2[BANK0 ] unsigned char [8]
 11911 ;;  i               1    1[BANK0 ] unsigned char 
 11912 ;; Return value:  Size  Location     Type
 11913 ;;		None               void
 11914 ;; Registers used:
 11915 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11916 ;; Tracked objects:
 11917 ;;		On entry : 1F/1
 11918 ;;		On exit  : 0/0
 11919 ;;		Unchanged: 0/0
 11920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11922 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11923 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;Total ram usage:       11 bytes
 11926 ;; Hardware stack levels used:    1
 11927 ;; Hardware stack levels required when called:    2
 11928 ;; This function calls:
 11929 ;;		_delay_ms
 11930 ;;		_uart1_send_byte
 11931 ;; This function is called by:
 11932 ;;		_read_card_content
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           
 11937                           ;psect for function _deal_floor
 11938  1102                     _deal_floor:	
 11939                           
 11940                           ;incstack = 0
 11941                           ; Regs used in _deal_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11942                           ;deal_floor@data stored from wreg
 11943  1102  0020               	movlb	0	; select bank0
 11944  1103  00A0               	movwf	deal_floor@data
 11945                           
 11946                           ;handle_floor.c: 40: BYTE i, floor[8];
 11947                           ;handle_floor.c: 42: for (i = 0; i < 0x08; i++)
 11948  1104  01A1               	clrf	deal_floor@i
 11949  1105                     l5522:	
 11950                           
 11951                           ;handle_floor.c: 43: {
 11952                           ;handle_floor.c: 44: floor[i] = data[i + 6];
 11953  1105  0821               	movf	deal_floor@i,w
 11954  1106  3E22               	addlw	deal_floor@floor& (0+255)
 11955  1107  0086               	movwf	6
 11956  1108  0187               	clrf	7
 11957  1109  0821               	movf	deal_floor@i,w
 11958  110A  0720               	addwf	deal_floor@data,w
 11959  110B  00F6               	movwf	??_deal_floor
 11960  110C  3E06               	addlw	6
 11961  110D  0084               	movwf	4
 11962  110E  0185               	clrf	5
 11963  110F  0800               	movf	0,w
 11964  1110  0081               	movwf	1
 11965  1111  3008               	movlw	8
 11966  1112  0AA1               	incf	deal_floor@i,f
 11967  1113  0221               	subwf	deal_floor@i,w
 11968  1114  1C03               	skipc
 11969  1115  2905               	goto	l5522
 11970                           
 11971                           ;handle_floor.c: 45: }
 11972                           ;handle_floor.c: 48: if ((floor[0] == 0x01 || floor[0] == 0x02 || floor[0] == 0x04 || fl
      +                          oor[0] == 0x08 ||
 11973                           ;handle_floor.c: 49: floor[0] == 0x10 || floor[0] == 0x20 || floor[0] == 0x40 || floor[0
      +                          ] == 0x80) &&
 11974                           ;handle_floor.c: 50: floor[1] == 0x00 && floor[2] == 0x00 && floor[3] == 0x00 && floor[4
      +                          ] == 0x00 &&
 11975                           ;handle_floor.c: 51: floor[5] == 0x00 && floor[6] == 0x00 && floor[7] == 0x00)
 11976  1116  0322               	decf	deal_floor@floor,w
 11977  1117  1903               	skipnz
 11978  1118  2935               	goto	l5544
 11979  1119  0822               	movf	deal_floor@floor,w
 11980  111A  3A02               	xorlw	2
 11981  111B  1903               	skipnz
 11982  111C  2935               	goto	l5544
 11983  111D  0822               	movf	deal_floor@floor,w
 11984  111E  3A04               	xorlw	4
 11985  111F  1903               	skipnz
 11986  1120  2935               	goto	l5544
 11987  1121  0822               	movf	deal_floor@floor,w
 11988  1122  3A08               	xorlw	8
 11989  1123  1903               	skipnz
 11990  1124  2935               	goto	l5544
 11991  1125  0822               	movf	deal_floor@floor,w
 11992  1126  3A10               	xorlw	16
 11993  1127  1903               	skipnz
 11994  1128  2935               	goto	l5544
 11995  1129  0822               	movf	deal_floor@floor,w
 11996  112A  3A20               	xorlw	32
 11997  112B  1903               	skipnz
 11998  112C  2935               	goto	l5544
 11999  112D  0822               	movf	deal_floor@floor,w
 12000  112E  3A40               	xorlw	64
 12001  112F  1903               	skipnz
 12002  1130  2935               	goto	l5544
 12003  1131  0822               	movf	deal_floor@floor,w
 12004  1132  3A80               	xorlw	128
 12005  1133  1D03               	skipz
 12006  1134  2977               	goto	l5580
 12007  1135                     l5544:	
 12008  1135  08A3               	movf	deal_floor@floor+1,f
 12009  1136  1D03               	skipz
 12010  1137  2977               	goto	l5580
 12011  1138  08A4               	movf	deal_floor@floor+2,f
 12012  1139  1D03               	skipz
 12013  113A  2977               	goto	l5580
 12014  113B  08A5               	movf	deal_floor@floor+3,f
 12015  113C  1D03               	skipz
 12016  113D  2977               	goto	l5580
 12017  113E  08A6               	movf	deal_floor@floor+4,f
 12018  113F  1D03               	skipz
 12019  1140  2977               	goto	l5580
 12020  1141  08A7               	movf	deal_floor@floor+5,f
 12021  1142  1D03               	skipz
 12022  1143  2977               	goto	l5580
 12023  1144  08A8               	movf	deal_floor@floor+6,f
 12024  1145  1D03               	skipz
 12025  1146  2977               	goto	l5580
 12026  1147  08A9               	movf	deal_floor@floor+7,f
 12027  1148  1903               	btfsc	3,2
 12028  1149  295C               	goto	l5578
 12029  114A  2977               	goto	l5580
 12030  114B                     l5560:	
 12031  114B  3001               	movlw	1
 12032  114C                     L27:	
 12033  114C  318B  2BA3         	ljmp	_uart1_send_byte
 12034  114E                     l5562:	
 12035  114E  3002               	movlw	2
 12036  114F  294C               	ljmp	L27
 12037  1150                     l5564:	
 12038  1150  3004               	movlw	4
 12039  1151  294C               	ljmp	L27
 12040  1152                     l5566:	
 12041  1152  3008               	movlw	8
 12042  1153  294C               	ljmp	L27
 12043  1154                     l5568:	
 12044  1154  3011               	movlw	17
 12045  1155  294C               	ljmp	L27
 12046  1156                     l5570:	
 12047  1156  3012               	movlw	18
 12048  1157  294C               	ljmp	L27
 12049  1158                     l5572:	
 12050  1158  3014               	movlw	20
 12051  1159  294C               	ljmp	L27
 12052  115A                     l5574:	
 12053  115A  3018               	movlw	24
 12054  115B  294C               	ljmp	L27
 12055  115C                     l5578:	
 12056  115C  0822               	movf	deal_floor@floor,w
 12057                           
 12058                           ; Switch size 1, requested type "space"
 12059                           ; Number of cases is 8, Range of values is 1 to 128
 12060                           ; switch strategies available:
 12061                           ; Name         Instructions Cycles
 12062                           ; simple_byte           25    13 (average)
 12063                           ; direct_byte          265     9 (fixed)
 12064                           ; jumptable            263     9 (fixed)
 12065                           ;	Chosen strategy is simple_byte
 12066  115D  3A01               	xorlw	1	; case 1
 12067  115E  1903               	skipnz
 12068  115F  294B               	goto	l5560
 12069  1160  3A03               	xorlw	3	; case 2
 12070  1161  1903               	skipnz
 12071  1162  294E               	goto	l5562
 12072  1163  3A06               	xorlw	6	; case 4
 12073  1164  1903               	skipnz
 12074  1165  2950               	goto	l5564
 12075  1166  3A0C               	xorlw	12	; case 8
 12076  1167  1903               	skipnz
 12077  1168  2952               	goto	l5566
 12078  1169  3A18               	xorlw	24	; case 16
 12079  116A  1903               	skipnz
 12080  116B  2954               	goto	l5568
 12081  116C  3A30               	xorlw	48	; case 32
 12082  116D  1903               	skipnz
 12083  116E  2956               	goto	l5570
 12084  116F  3A60               	xorlw	96	; case 64
 12085  1170  1903               	skipnz
 12086  1171  2958               	goto	l5572
 12087  1172  3AC0               	xorlw	192	; case 128
 12088  1173  1903               	skipnz
 12089  1174  295A               	goto	l5574
 12090  1175                     L28:	
 12091  1175  3187  2F83         	goto	l289
 12092  1177                     l5580:	
 12093                           
 12094                           ;handle_floor.c: 66: else if (floor[0] == 0x00 &&
 12095                           ;handle_floor.c: 67: (floor[1] == 0x01 || floor[1] == 0x02 || floor[1] == 0x04 || floor[
      +                          1] == 0x08 ||
 12096                           ;handle_floor.c: 68: floor[1] == 0x10 || floor[1] == 0x20 || floor[1] == 0x40 || floor[1
      +                          ] == 0x80) &&
 12097                           ;handle_floor.c: 69: floor[2] == 0x00 && floor[3] == 0x00 && floor[4] == 0x00 && floor[5
      +                          ] == 0x00 && floor[6] == 0x00 && floor[7] == 0x00)
 12098  1177  08A2               	movf	deal_floor@floor,f
 12099  1178  1D03               	skipz
 12100  1179  29D6               	goto	l5632
 12101  117A  0323               	decf	deal_floor@floor+1,w
 12102  117B  1903               	skipnz
 12103  117C  2999               	goto	l5598
 12104  117D  0823               	movf	deal_floor@floor+1,w
 12105  117E  3A02               	xorlw	2
 12106  117F  1903               	skipnz
 12107  1180  2999               	goto	l5598
 12108  1181  0823               	movf	deal_floor@floor+1,w
 12109  1182  3A04               	xorlw	4
 12110  1183  1903               	skipnz
 12111  1184  2999               	goto	l5598
 12112  1185  0823               	movf	deal_floor@floor+1,w
 12113  1186  3A08               	xorlw	8
 12114  1187  1903               	skipnz
 12115  1188  2999               	goto	l5598
 12116  1189  0823               	movf	deal_floor@floor+1,w
 12117  118A  3A10               	xorlw	16
 12118  118B  1903               	skipnz
 12119  118C  2999               	goto	l5598
 12120  118D  0823               	movf	deal_floor@floor+1,w
 12121  118E  3A20               	xorlw	32
 12122  118F  1903               	skipnz
 12123  1190  2999               	goto	l5598
 12124  1191  0823               	movf	deal_floor@floor+1,w
 12125  1192  3A40               	xorlw	64
 12126  1193  1903               	skipnz
 12127  1194  2999               	goto	l5598
 12128  1195  0823               	movf	deal_floor@floor+1,w
 12129  1196  3A80               	xorlw	128
 12130  1197  1D03               	skipz
 12131  1198  29D6               	goto	l5632
 12132  1199                     l5598:	
 12133  1199  08A4               	movf	deal_floor@floor+2,f
 12134  119A  1D03               	skipz
 12135  119B  29D6               	goto	l5632
 12136  119C  08A5               	movf	deal_floor@floor+3,f
 12137  119D  1D03               	skipz
 12138  119E  29D6               	goto	l5632
 12139  119F  08A6               	movf	deal_floor@floor+4,f
 12140  11A0  1D03               	skipz
 12141  11A1  29D6               	goto	l5632
 12142  11A2  08A7               	movf	deal_floor@floor+5,f
 12143  11A3  1D03               	skipz
 12144  11A4  29D6               	goto	l5632
 12145  11A5  08A8               	movf	deal_floor@floor+6,f
 12146  11A6  1D03               	skipz
 12147  11A7  29D6               	goto	l5632
 12148  11A8  08A9               	movf	deal_floor@floor+7,f
 12149  11A9  1903               	btfsc	3,2
 12150  11AA  29BC               	goto	l5630
 12151  11AB  29D6               	goto	l5632
 12152  11AC                     l5612:	
 12153  11AC  3021               	movlw	33
 12154  11AD  294C               	ljmp	L27
 12155  11AE                     l5614:	
 12156  11AE  3022               	movlw	34
 12157  11AF  294C               	ljmp	L27
 12158  11B0                     l5616:	
 12159  11B0  3024               	movlw	36
 12160  11B1  294C               	ljmp	L27
 12161  11B2                     l5618:	
 12162  11B2  3028               	movlw	40
 12163  11B3  294C               	ljmp	L27
 12164  11B4                     l5620:	
 12165  11B4  3031               	movlw	49
 12166  11B5  294C               	ljmp	L27
 12167  11B6                     l5622:	
 12168  11B6  3032               	movlw	50
 12169  11B7  294C               	ljmp	L27
 12170  11B8                     l5624:	
 12171  11B8  3034               	movlw	52
 12172  11B9  294C               	ljmp	L27
 12173  11BA                     l5626:	
 12174  11BA  3038               	movlw	56
 12175  11BB  294C               	ljmp	L27
 12176  11BC                     l5630:	
 12177  11BC  0823               	movf	deal_floor@floor+1,w
 12178                           
 12179                           ; Switch size 1, requested type "space"
 12180                           ; Number of cases is 8, Range of values is 1 to 128
 12181                           ; switch strategies available:
 12182                           ; Name         Instructions Cycles
 12183                           ; simple_byte           25    13 (average)
 12184                           ; direct_byte          265     9 (fixed)
 12185                           ; jumptable            263     9 (fixed)
 12186                           ;	Chosen strategy is simple_byte
 12187  11BD  3A01               	xorlw	1	; case 1
 12188  11BE  1903               	skipnz
 12189  11BF  29AC               	goto	l5612
 12190  11C0  3A03               	xorlw	3	; case 2
 12191  11C1  1903               	skipnz
 12192  11C2  29AE               	goto	l5614
 12193  11C3  3A06               	xorlw	6	; case 4
 12194  11C4  1903               	skipnz
 12195  11C5  29B0               	goto	l5616
 12196  11C6  3A0C               	xorlw	12	; case 8
 12197  11C7  1903               	skipnz
 12198  11C8  29B2               	goto	l5618
 12199  11C9  3A18               	xorlw	24	; case 16
 12200  11CA  1903               	skipnz
 12201  11CB  29B4               	goto	l5620
 12202  11CC  3A30               	xorlw	48	; case 32
 12203  11CD  1903               	skipnz
 12204  11CE  29B6               	goto	l5622
 12205  11CF  3A60               	xorlw	96	; case 64
 12206  11D0  1903               	skipnz
 12207  11D1  29B8               	goto	l5624
 12208  11D2  3AC0               	xorlw	192	; case 128
 12209  11D3  1903               	skipnz
 12210  11D4  29BA               	goto	l5626
 12211  11D5  2975               	goto	L28
 12212  11D6                     l5632:	
 12213                           
 12214                           ;handle_floor.c: 84: else if (floor[0] == 0x00 && floor[1] == 0x00 &&
 12215                           ;handle_floor.c: 85: (floor[2] == 0x01 || floor[2] == 0x02 || floor[2] == 0x04 || floor[
      +                          2] == 0x08 ||
 12216                           ;handle_floor.c: 86: floor[2] == 0x10 || floor[2] == 0x20 || floor[2] == 0x40 || floor[2
      +                          ] == 0x80) &&
 12217                           ;handle_floor.c: 87: floor[3] == 0x00 && floor[4] == 0x00 && floor[5] == 0x00 && floor[6
      +                          ] == 0x00 && floor[7] == 0x00)
 12218  11D6  08A2               	movf	deal_floor@floor,f
 12219  11D7  1D03               	skipz
 12220  11D8  2A35               	goto	l5684
 12221  11D9  08A3               	movf	deal_floor@floor+1,f
 12222  11DA  1D03               	skipz
 12223  11DB  2A35               	goto	l5684
 12224  11DC  0324               	decf	deal_floor@floor+2,w
 12225  11DD  1903               	skipnz
 12226  11DE  29FB               	goto	l5652
 12227  11DF  0824               	movf	deal_floor@floor+2,w
 12228  11E0  3A02               	xorlw	2
 12229  11E1  1903               	skipnz
 12230  11E2  29FB               	goto	l5652
 12231  11E3  0824               	movf	deal_floor@floor+2,w
 12232  11E4  3A04               	xorlw	4
 12233  11E5  1903               	skipnz
 12234  11E6  29FB               	goto	l5652
 12235  11E7  0824               	movf	deal_floor@floor+2,w
 12236  11E8  3A08               	xorlw	8
 12237  11E9  1903               	skipnz
 12238  11EA  29FB               	goto	l5652
 12239  11EB  0824               	movf	deal_floor@floor+2,w
 12240  11EC  3A10               	xorlw	16
 12241  11ED  1903               	skipnz
 12242  11EE  29FB               	goto	l5652
 12243  11EF  0824               	movf	deal_floor@floor+2,w
 12244  11F0  3A20               	xorlw	32
 12245  11F1  1903               	skipnz
 12246  11F2  29FB               	goto	l5652
 12247  11F3  0824               	movf	deal_floor@floor+2,w
 12248  11F4  3A40               	xorlw	64
 12249  11F5  1903               	skipnz
 12250  11F6  29FB               	goto	l5652
 12251  11F7  0824               	movf	deal_floor@floor+2,w
 12252  11F8  3A80               	xorlw	128
 12253  11F9  1D03               	skipz
 12254  11FA  2A35               	goto	l5684
 12255  11FB                     l5652:	
 12256  11FB  08A5               	movf	deal_floor@floor+3,f
 12257  11FC  1D03               	skipz
 12258  11FD  2A35               	goto	l5684
 12259  11FE  08A6               	movf	deal_floor@floor+4,f
 12260  11FF  1D03               	skipz
 12261  1200  2A35               	goto	l5684
 12262  1201  08A7               	movf	deal_floor@floor+5,f
 12263  1202  1D03               	skipz
 12264  1203  2A35               	goto	l5684
 12265  1204  08A8               	movf	deal_floor@floor+6,f
 12266  1205  1D03               	skipz
 12267  1206  2A35               	goto	l5684
 12268  1207  08A9               	movf	deal_floor@floor+7,f
 12269  1208  1903               	btfsc	3,2
 12270  1209  2A1B               	goto	l5682
 12271  120A  2A35               	goto	l5684
 12272  120B                     l5664:	
 12273  120B  3041               	movlw	65
 12274  120C  294C               	ljmp	L27
 12275  120D                     l5666:	
 12276  120D  3042               	movlw	66
 12277  120E  294C               	ljmp	L27
 12278  120F                     l5668:	
 12279  120F  3044               	movlw	68
 12280  1210  294C               	ljmp	L27
 12281  1211                     l5670:	
 12282  1211  3048               	movlw	72
 12283  1212  294C               	ljmp	L27
 12284  1213                     l5672:	
 12285  1213  3051               	movlw	81
 12286  1214  294C               	ljmp	L27
 12287  1215                     l5674:	
 12288  1215  3052               	movlw	82
 12289  1216  294C               	ljmp	L27
 12290  1217                     l5676:	
 12291  1217  3054               	movlw	84
 12292  1218  294C               	ljmp	L27
 12293  1219                     l5678:	
 12294  1219  3058               	movlw	88
 12295  121A  294C               	ljmp	L27
 12296  121B                     l5682:	
 12297  121B  0824               	movf	deal_floor@floor+2,w
 12298                           
 12299                           ; Switch size 1, requested type "space"
 12300                           ; Number of cases is 8, Range of values is 1 to 128
 12301                           ; switch strategies available:
 12302                           ; Name         Instructions Cycles
 12303                           ; simple_byte           25    13 (average)
 12304                           ; direct_byte          265     9 (fixed)
 12305                           ; jumptable            263     9 (fixed)
 12306                           ;	Chosen strategy is simple_byte
 12307  121C  3A01               	xorlw	1	; case 1
 12308  121D  1903               	skipnz
 12309  121E  2A0B               	goto	l5664
 12310  121F  3A03               	xorlw	3	; case 2
 12311  1220  1903               	skipnz
 12312  1221  2A0D               	goto	l5666
 12313  1222  3A06               	xorlw	6	; case 4
 12314  1223  1903               	skipnz
 12315  1224  2A0F               	goto	l5668
 12316  1225  3A0C               	xorlw	12	; case 8
 12317  1226  1903               	skipnz
 12318  1227  2A11               	goto	l5670
 12319  1228  3A18               	xorlw	24	; case 16
 12320  1229  1903               	skipnz
 12321  122A  2A13               	goto	l5672
 12322  122B  3A30               	xorlw	48	; case 32
 12323  122C  1903               	skipnz
 12324  122D  2A15               	goto	l5674
 12325  122E  3A60               	xorlw	96	; case 64
 12326  122F  1903               	skipnz
 12327  1230  2A17               	goto	l5676
 12328  1231  3AC0               	xorlw	192	; case 128
 12329  1232  1903               	skipnz
 12330  1233  2A19               	goto	l5678
 12331  1234  2975               	goto	L28
 12332  1235                     l5684:	
 12333                           
 12334                           ;handle_floor.c: 102: else if (floor[0] == 0x00 && floor[1] == 0x00 && floor[2] == 0x00 
      +                          &&
 12335                           ;handle_floor.c: 103: (floor[3] == 0x01 || floor[3] == 0x02 || floor[3] == 0x04 || floor
      +                          [3] == 0x08 ||
 12336                           ;handle_floor.c: 104: floor[3] == 0x10 || floor[3] == 0x20 || floor[3] == 0x40 || floor[
      +                          3] == 0x80)
 12337                           ;handle_floor.c: 105: && floor[4] == 0x00 && floor[5] == 0x00 && floor[6] == 0x00 && flo
      +                          or[7] == 0x00)
 12338  1235  08A2               	movf	deal_floor@floor,f
 12339  1236  1D03               	skipz
 12340  1237  2A6A               	goto	L29
 12341  1238  08A3               	movf	deal_floor@floor+1,f
 12342  1239  1D03               	skipz
 12343  123A  2A6A               	goto	L29
 12344  123B  08A4               	movf	deal_floor@floor+2,f
 12345  123C  1D03               	skipz
 12346  123D  2A6A               	goto	L29
 12347  123E  0325               	decf	deal_floor@floor+3,w
 12348  123F  1903               	skipnz
 12349  1240  2A5D               	goto	l5706
 12350  1241  0825               	movf	deal_floor@floor+3,w
 12351  1242  3A02               	xorlw	2
 12352  1243  1903               	skipnz
 12353  1244  2A5D               	goto	l5706
 12354  1245  0825               	movf	deal_floor@floor+3,w
 12355  1246  3A04               	xorlw	4
 12356  1247  1903               	skipnz
 12357  1248  2A5D               	goto	l5706
 12358  1249  0825               	movf	deal_floor@floor+3,w
 12359  124A  3A08               	xorlw	8
 12360  124B  1903               	skipnz
 12361  124C  2A5D               	goto	l5706
 12362  124D  0825               	movf	deal_floor@floor+3,w
 12363  124E  3A10               	xorlw	16
 12364  124F  1903               	skipnz
 12365  1250  2A5D               	goto	l5706
 12366  1251  0825               	movf	deal_floor@floor+3,w
 12367  1252  3A20               	xorlw	32
 12368  1253  1903               	skipnz
 12369  1254  2A5D               	goto	l5706
 12370  1255  0825               	movf	deal_floor@floor+3,w
 12371  1256  3A40               	xorlw	64
 12372  1257  1903               	skipnz
 12373  1258  2A5D               	goto	l5706
 12374  1259  0825               	movf	deal_floor@floor+3,w
 12375  125A  3A80               	xorlw	128
 12376  125B  1D03               	skipz
 12377  125C  2A6A               	goto	L29
 12378  125D                     l5706:	
 12379  125D  08A6               	movf	deal_floor@floor+4,f
 12380  125E  1D03               	skipz
 12381  125F  2A6A               	goto	L29
 12382  1260  08A7               	movf	deal_floor@floor+5,f
 12383  1261  1D03               	skipz
 12384  1262  2A6A               	goto	L29
 12385  1263  08A8               	movf	deal_floor@floor+6,f
 12386  1264  1D03               	skipz
 12387  1265  2A6A               	goto	L29
 12388  1266  08A9               	movf	deal_floor@floor+7,f
 12389  1267  3180  1903         	btfsc	3,2
 12390  1269  28AD               	goto	l5734
 12391  126A                     L29:	
 12392  126A  3180  28C9         	goto	l5736
 12393  126C                     l5716:	
 12394  126C  3061               	movlw	97
 12395  126D  294C               	ljmp	L27
 12396  126E                     l5718:	
 12397  126E  3062               	movlw	98
 12398  126F  294C               	ljmp	L27
 12399                           
 12400                           	psect	text24
 12401  1414                     __ptext24:	
 12402 ;; *************** function _Mf500PiccWrite *****************
 12403 ;; Defined at:
 12404 ;;		line 956 in file "../../source/driver/mfrc500.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;  addr            1    wreg     unsigned char 
 12407 ;;  data1           1   11[COMMON] PTR unsigned char 
 12408 ;;		 -> read_card_content@data(16), 
 12409 ;; Auto vars:     Size  Location     Type
 12410 ;;  addr            1   12[COMMON] unsigned char 
 12411 ;;  ret_status      1   13[COMMON] char 
 12412 ;; Return value:  Size  Location     Type
 12413 ;;                  1    wreg      unsigned char 
 12414 ;; Registers used:
 12415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12416 ;; Tracked objects:
 12417 ;;		On entry : 1F/0
 12418 ;;		On exit  : 1E/0
 12419 ;;		Unchanged: 0/0
 12420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12421 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12424 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12425 ;;Total ram usage:        3 bytes
 12426 ;; Hardware stack levels used:    1
 12427 ;; Hardware stack levels required when called:    6
 12428 ;; This function calls:
 12429 ;;		_FlushFIFO
 12430 ;;		_PcdSetTmo
 12431 ;;		_PcdSingleResponseCmd
 12432 ;;		_WriteRC
 12433 ;;		_memcpy
 12434 ;; This function is called by:
 12435 ;;		_read_card_content
 12436 ;; This function uses a non-reentrant model
 12437 ;;
 12438                           
 12439                           
 12440                           ;psect for function _Mf500PiccWrite
 12441  1414                     _Mf500PiccWrite:	
 12442                           
 12443                           ;incstack = 0
 12444                           ; Regs used in _Mf500PiccWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12445                           ;Mf500PiccWrite@addr stored from wreg
 12446  1414  00FC               	movwf	Mf500PiccWrite@addr
 12447                           
 12448                           ;mfrc500.c: 963: FlushFIFO();
 12449  1415  318E  26F7  3194   	fcall	_FlushFIFO
 12450                           
 12451                           ;mfrc500.c: 964: PcdSetTmo(4);
 12452  1418  3004               	movlw	4
 12453  1419  00F5               	movwf	PcdSetTmo@tmoLength
 12454  141A  01F6               	clrf	PcdSetTmo@tmoLength+1
 12455  141B  25D1  3194         	fcall	_PcdSetTmo
 12456                           
 12457                           ;mfrc500.c: 966: WriteRC(0x22, 0x07);
 12458  141D  3007               	movlw	7
 12459  141E  00F2               	movwf	WriteRC@data
 12460  141F  3022               	movlw	34
 12461  1420  2767               	fcall	_WriteRC
 12462                           
 12463                           ;mfrc500.c: 967: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 12464  1421  0020               	movlb	0	; select bank0
 12465  1422  30A0               	movlw	160
 12466  1423  318F  27BA  3194   	fcall	PL2	;call to abstracted procedure
 12467                           
 12468                           ;mfrc500.c: 968: MSndBuffer[0] = 0xA0;
 12469  1426  0021               	movlb	1	; select bank1
 12470  1427  00B6               	movwf	_MSndBuffer^(0+128)
 12471                           
 12472                           ;mfrc500.c: 969: MSndBuffer[1] = addr;
 12473  1428  087C               	movf	Mf500PiccWrite@addr,w
 12474  1429  00B7               	movwf	(_MSndBuffer^(0+128)+1)
 12475                           
 12476                           ;mfrc500.c: 970: MInfo.nBytesToSend = 0x02;
 12477  142A  3002               	movlw	2
 12478  142B  0020               	movlb	0	; select bank0
 12479  142C  00E7               	movwf	_MInfo+3
 12480                           
 12481                           ;mfrc500.c: 971: ret_status = PcdSingleResponseCmd(0x1e);
 12482  142D  301E               	movlw	30
 12483  142E  2612  3194         	fcall	_PcdSingleResponseCmd
 12484  1430  00FD               	movwf	Mf500PiccWrite@ret_status
 12485                           
 12486                           ;mfrc500.c: 972: if (ret_status != (-1))
 12487  1431  0A7D               	incf	Mf500PiccWrite@ret_status,w
 12488  1432  1903               	skipnz
 12489  1433  2C4D               	goto	l6366
 12490                           
 12491                           ;mfrc500.c: 973: {
 12492                           ;mfrc500.c: 974: if (MInfo.nBitsReceived != 4)
 12493  1434  0869               	movf	_MInfo+5,w
 12494  1435  3A04               	xorlw	4
 12495  1436  1903               	skipnz
 12496  1437  2C3A               	goto	l6354
 12497                           
 12498                           ;mfrc500.c: 975: {
 12499                           ;mfrc500.c: 976: ret_status = (-11);
 12500  1438  30F5               	movlw	-11
 12501  1439  2C43               	goto	L7
 12502  143A                     l6354:	
 12503                           ;mfrc500.c: 977: }
 12504                           
 12505                           
 12506                           ;mfrc500.c: 978: else
 12507                           ;mfrc500.c: 979: {
 12508                           ;mfrc500.c: 980: MRcvBuffer[0] &= 0x0f;
 12509  143A  300F               	movlw	15
 12510  143B  0021               	movlb	1	; select bank1
 12511  143C  05A6               	andwf	_MRcvBuffer^(0+128),f
 12512                           
 12513                           ;mfrc500.c: 981: switch(MRcvBuffer[0])
 12514  143D  2C45               	goto	l6364
 12515  143E                     l6356:	
 12516                           
 12517                           ;mfrc500.c: 984: ret_status = (-10);
 12518  143E  30F6               	movlw	-10
 12519  143F  2C43               	goto	L7
 12520  1440                     l6358:	
 12521                           ;mfrc500.c: 985: break;
 12522                           
 12523                           
 12524                           ;mfrc500.c: 987: ret_status = 0;
 12525  1440  01FD               	clrf	Mf500PiccWrite@ret_status
 12526                           
 12527                           ;mfrc500.c: 988: break;
 12528  1441  2C4D               	goto	l6366
 12529  1442                     l6360:	
 12530                           
 12531                           ;mfrc500.c: 990: ret_status = (-6);
 12532  1442  30FA               	movlw	-6
 12533  1443                     L7:	
 12534  1443  00FD               	movwf	Mf500PiccWrite@ret_status
 12535                           
 12536                           ;mfrc500.c: 991: break;
 12537  1444  2C4D               	goto	l6366
 12538  1445                     l6364:	
 12539  1445  0826               	movf	_MRcvBuffer^(0+128),w
 12540                           
 12541                           ; Switch size 1, requested type "space"
 12542                           ; Number of cases is 2, Range of values is 0 to 10
 12543                           ; switch strategies available:
 12544                           ; Name         Instructions Cycles
 12545                           ; simple_byte            7     4 (average)
 12546                           ; direct_byte           28     6 (fixed)
 12547                           ; jumptable            260     6 (fixed)
 12548                           ;	Chosen strategy is simple_byte
 12549  1446  3A00               	xorlw	0	; case 0
 12550  1447  1903               	skipnz
 12551  1448  2C3E               	goto	l6356
 12552  1449  3A0A               	xorlw	10	; case 10
 12553  144A  1903               	skipnz
 12554  144B  2C40               	goto	l6358
 12555  144C  2C42               	goto	l6360
 12556  144D                     l6366:	
 12557                           
 12558                           ;mfrc500.c: 993: }
 12559                           ;mfrc500.c: 994: }
 12560                           ;mfrc500.c: 995: if (ret_status == 0)
 12561  144D  08FD               	movf	Mf500PiccWrite@ret_status,f
 12562  144E  1D03               	skipz
 12563  144F  0008               	return
 12564                           
 12565                           ;mfrc500.c: 996: {
 12566                           ;mfrc500.c: 997: FlushFIFO();
 12567  1450  318E  26F7  3194   	fcall	_FlushFIFO
 12568                           
 12569                           ;mfrc500.c: 998: PcdSetTmo(3);
 12570  1453  3003               	movlw	3
 12571  1454  00F5               	movwf	PcdSetTmo@tmoLength
 12572  1455  01F6               	clrf	PcdSetTmo@tmoLength+1
 12573  1456  25D1               	fcall	_PcdSetTmo
 12574                           
 12575                           ;mfrc500.c: 999: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 12576  1457  0020               	movlb	0	; select bank0
 12577  1458  318F  27BA  3194   	fcall	PL2	;call to abstracted procedure
 12578                           
 12579                           ;mfrc500.c: 1000: memcpy(MSndBuffer, data1, 16);
 12580  145B  087B               	movf	Mf500PiccWrite@data1,w
 12581  145C  00F0               	movwf	memcpy@s1
 12582  145D  3010               	movlw	16
 12583  145E  01F1               	clrf	memcpy@s1+1
 12584  145F  00F2               	movwf	memcpy@n
 12585  1460  30B6               	movlw	_MSndBuffer& (0+255)
 12586  1461  01F3               	clrf	memcpy@n+1
 12587  1462  318E  26C3  3194   	fcall	_memcpy
 12588                           
 12589                           ;mfrc500.c: 1001: MInfo.nBytesToSend = 16;
 12590  1465  3010               	movlw	16
 12591  1466  0020               	movlb	0	; select bank0
 12592  1467  00E7               	movwf	_MInfo+3
 12593                           
 12594                           ;mfrc500.c: 1002: ret_status = PcdSingleResponseCmd(0x1e);
 12595  1468  301E               	movlw	30
 12596  1469  2612  3194         	fcall	_PcdSingleResponseCmd
 12597  146B  00FD               	movwf	Mf500PiccWrite@ret_status
 12598                           
 12599                           ;mfrc500.c: 1003: if (ret_status != (-1))
 12600  146C  0A7D               	incf	Mf500PiccWrite@ret_status,w
 12601  146D  1903               	skipnz
 12602  146E  2C80               	goto	l6412
 12603                           
 12604                           ;mfrc500.c: 1004: {
 12605                           ;mfrc500.c: 1005: if (MInfo.nBitsReceived != 4)
 12606  146F  0869               	movf	_MInfo+5,w
 12607  1470  3A04               	xorlw	4
 12608  1471  1D03               	btfss	3,2
 12609  1472  2C80               	goto	l6412
 12610                           
 12611                           ;mfrc500.c: 1009: else
 12612                           ;mfrc500.c: 1010: {
 12613                           ;mfrc500.c: 1011: MRcvBuffer[0] &= 0x0f;
 12614                           
 12615                           ;mfrc500.c: 1008: }
 12616  1473  300F               	movlw	15
 12617  1474  0021               	movlb	1	; select bank1
 12618  1475  05A6               	andwf	_MRcvBuffer^(0+128),f
 12619                           
 12620                           ;mfrc500.c: 1012: switch(MRcvBuffer[0])
 12621  1476  2C78               	goto	l6410
 12622  1477                     l6402:	
 12623  1477                     l6404:	
 12624                           ;mfrc500.c: 1016: break;
 12625                           
 12626  1477                     l6406:	
 12627                           ;mfrc500.c: 1019: break;
 12628                           
 12629                           
 12630                           ;mfrc500.c: 1022: break;
 12631  1477  2C80               	goto	l6412
 12632  1478                     l6410:	
 12633  1478  0826               	movf	_MRcvBuffer^(0+128),w
 12634                           
 12635                           ; Switch size 1, requested type "space"
 12636                           ; Number of cases is 2, Range of values is 0 to 10
 12637                           ; switch strategies available:
 12638                           ; Name         Instructions Cycles
 12639                           ; simple_byte            7     4 (average)
 12640                           ; direct_byte           28     6 (fixed)
 12641                           ; jumptable            260     6 (fixed)
 12642                           ;	Chosen strategy is simple_byte
 12643  1479  3A00               	xorlw	0	; case 0
 12644  147A  1903               	skipnz
 12645  147B  2C77               	goto	l6402
 12646  147C  3A0A               	xorlw	10	; case 10
 12647  147D  1903               	skipnz
 12648  147E  2C77               	goto	l6404
 12649  147F  2C77               	goto	l6406
 12650  1480                     l6412:	
 12651                           
 12652                           ;mfrc500.c: 1024: }
 12653                           ;mfrc500.c: 1025: }
 12654                           ;mfrc500.c: 1026: PcdSetTmo(1);
 12655  1480  01F5               	clrf	PcdSetTmo@tmoLength
 12656  1481  0AF5               	incf	PcdSetTmo@tmoLength,f
 12657  1482  01F6               	clrf	PcdSetTmo@tmoLength+1
 12658  1483  2DD1               	ljmp	l4904
 12659  1484                     __end_of_Mf500PiccWrite:	
 12660  1484                     __ptext32:	
 12661 ;; *************** function _Mf500PiccCascAnticoll *****************
 12662 ;; Defined at:
 12663 ;;		line 623 in file "../../source/driver/mfrc500.c"
 12664 ;; Parameters:    Size  Location     Type
 12665 ;;  select_code     1    wreg     unsigned char 
 12666 ;;  bcnt            1   11[COMMON] unsigned char 
 12667 ;;  snr             1   12[COMMON] PTR unsigned char 
 12668 ;;		 -> snr_rc500(4), 
 12669 ;; Auto vars:     Size  Location     Type
 12670 ;;  select_code     1   14[BANK0 ] unsigned char 
 12671 ;;  snr_in          4   21[BANK0 ] unsigned char [4]
 12672 ;;  i               1   28[BANK0 ] unsigned char 
 12673 ;;  nbits           1   27[BANK0 ] unsigned char 
 12674 ;;  ret_status      1   26[BANK0 ] char 
 12675 ;;  nbytes          1   25[BANK0 ] unsigned char 
 12676 ;;  byteOffset      1   20[BANK0 ] unsigned char 
 12677 ;;  complete        1   19[BANK0 ] unsigned char 
 12678 ;;  dummyShift1     1   18[BANK0 ] unsigned char 
 12679 ;;  dummyShift2     1   17[BANK0 ] unsigned char 
 12680 ;;  snr_check       1   16[BANK0 ] unsigned char 
 12681 ;;  snr_crc         1   15[BANK0 ] unsigned char 
 12682 ;; Return value:  Size  Location     Type
 12683 ;;                  1    wreg      unsigned char 
 12684 ;; Registers used:
 12685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12686 ;; Tracked objects:
 12687 ;;		On entry : 1F/0
 12688 ;;		On exit  : 1F/0
 12689 ;;		Unchanged: 0/0
 12690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12691 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12693 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12694 ;;      Totals:         2      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12695 ;;Total ram usage:       21 bytes
 12696 ;; Hardware stack levels used:    1
 12697 ;; Hardware stack levels required when called:    6
 12698 ;; This function calls:
 12699 ;;		_ClearBitMask
 12700 ;;		_PcdSetTmo
 12701 ;;		_PcdSingleResponseCmd
 12702 ;;		_WriteRC
 12703 ;;		___awdiv
 12704 ;;		_memcpy
 12705 ;; This function is called by:
 12706 ;;		_Mf500PiccAnticoll
 12707 ;; This function uses a non-reentrant model
 12708 ;;
 12709                           
 12710                           
 12711                           ;psect for function _Mf500PiccCascAnticoll
 12712  1484                     _Mf500PiccCascAnticoll:	
 12713                           
 12714                           ;incstack = 0
 12715                           ; Regs used in _Mf500PiccCascAnticoll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12716                           ;Mf500PiccCascAnticoll@select_code stored from wreg
 12717  1484  00AE               	movwf	Mf500PiccCascAnticoll@select_code
 12718  1485  306A               	movlw	106
 12719                           
 12720                           ;mfrc500.c: 629: signed char ret_status = 0;
 12721  1486  01BA               	clrf	Mf500PiccCascAnticoll@ret_status
 12722                           
 12723                           ;mfrc500.c: 632: unsigned char nbits = 0;
 12724  1487  01BB               	clrf	Mf500PiccCascAnticoll@nbits
 12725                           
 12726                           ;mfrc500.c: 633: unsigned char complete = 0;
 12727  1488  01B3               	clrf	Mf500PiccCascAnticoll@complete
 12728                           
 12729                           ;mfrc500.c: 634: unsigned char i = 0;
 12730  1489  01BC               	clrf	Mf500PiccCascAnticoll@i
 12731                           
 12732                           ;mfrc500.c: 635: unsigned char byteOffset = 0;
 12733  148A  01B4               	clrf	Mf500PiccCascAnticoll@byteOffset
 12734                           
 12735                           ;mfrc500.c: 636: unsigned char snr_crc;
 12736                           ;mfrc500.c: 637: unsigned char snr_check;
 12737                           ;mfrc500.c: 638: unsigned char dummyShift1;
 12738                           ;mfrc500.c: 639: unsigned char dummyShift2;
 12739                           ;mfrc500.c: 641: PcdSetTmo(106);
 12740  148B  00F5               	movwf	PcdSetTmo@tmoLength
 12741  148C  01F6               	clrf	PcdSetTmo@tmoLength+1
 12742  148D  25D1               	fcall	_PcdSetTmo
 12743                           
 12744                           ;mfrc500.c: 642: memcpy(snr_in, snr, 4);
 12745  148E  087C               	movf	Mf500PiccCascAnticoll@snr,w
 12746  148F  00F0               	movwf	memcpy@s1
 12747  1490  3004               	movlw	4
 12748  1491  01F1               	clrf	memcpy@s1+1
 12749  1492  00F2               	movwf	memcpy@n
 12750  1493  3035               	movlw	Mf500PiccCascAnticoll@snr_in& (0+255)
 12751  1494  01F3               	clrf	memcpy@n+1
 12752  1495  318E  26C3  3194   	fcall	_memcpy
 12753                           
 12754                           ;mfrc500.c: 643: WriteRC(0x1A, 0x28);
 12755  1498  3028               	movlw	40
 12756  1499  00F2               	movwf	WriteRC@data
 12757  149A  301A               	movlw	26
 12758  149B  2767  3194         	fcall	_WriteRC
 12759                           
 12760                           ;mfrc500.c: 644: ClearBitMask(0x09, 0x08);
 12761  149D  3008               	movlw	8
 12762  149E  00F5               	movwf	ClearBitMask@mask
 12763  149F  3009               	movlw	9
 12764  14A0  2787  3194         	fcall	_ClearBitMask
 12765                           
 12766                           ;mfrc500.c: 645: complete = 0;
 12767  14A2  0020               	movlb	0	; select bank0
 12768  14A3  01B3               	clrf	Mf500PiccCascAnticoll@complete
 12769                           
 12770                           ;mfrc500.c: 646: while (!complete && (ret_status == 0) )
 12771  14A4  2DA7               	goto	l5328
 12772  14A5                     l5232:	
 12773  14A5  3003               	movlw	3
 12774                           
 12775                           ;mfrc500.c: 647: {
 12776                           ;mfrc500.c: 648: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 12777  14A6  318F  27BA  3194   	fcall	PL2	;call to abstracted procedure
 12778                           
 12779                           ;mfrc500.c: 649: WriteRC(0x22,0x03);
 12780  14A9  00F2               	movwf	WriteRC@data
 12781  14AA  3022               	movlw	34
 12782  14AB  2767  3194         	fcall	_WriteRC
 12783                           
 12784                           ;mfrc500.c: 650: nbits = bcnt % 8;
 12785  14AD  087B               	movf	Mf500PiccCascAnticoll@bcnt,w
 12786  14AE  0020               	movlb	0	; select bank0
 12787  14AF  00BB               	movwf	Mf500PiccCascAnticoll@nbits
 12788  14B0  3007               	movlw	7
 12789  14B1  05BB               	andwf	Mf500PiccCascAnticoll@nbits,f
 12790                           
 12791                           ;mfrc500.c: 651: if (nbits)
 12792  14B2  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 12793  14B3  1903               	btfsc	3,2
 12794  14B4  2CCC               	goto	l5252
 12795                           
 12796                           ;mfrc500.c: 652: {
 12797                           ;mfrc500.c: 653: WriteRC(0x0F,nbits << 4 | nbits);
 12798  14B5  0E3B               	swapf	Mf500PiccCascAnticoll@nbits,w
 12799  14B6  39F0               	andlw	240
 12800  14B7  043B               	iorwf	Mf500PiccCascAnticoll@nbits,w
 12801  14B8  00F2               	movwf	WriteRC@data
 12802  14B9  300F               	movlw	15
 12803  14BA  2767  3194         	fcall	_WriteRC
 12804                           
 12805                           ;mfrc500.c: 654: nbytes = bcnt / 8 + 1;
 12806  14BC  27EB  3194         	fcall	PL10	;call to abstracted procedure
 12807  14BE  3E01               	addlw	1
 12808  14BF  00B9               	movwf	Mf500PiccCascAnticoll@nbytes
 12809                           
 12810                           ;mfrc500.c: 655: if (nbits == 7)
 12811  14C0  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 12812  14C1  3A07               	xorlw	7
 12813  14C2  1D03               	skipz
 12814  14C3  2CD3               	goto	l5254
 12815                           
 12816                           ;mfrc500.c: 656: {
 12817                           ;mfrc500.c: 657: MInfo.cmd = 0x93;
 12818  14C4  3093               	movlw	147
 12819  14C5  00E4               	movwf	_MInfo
 12820                           
 12821                           ;mfrc500.c: 658: WriteRC(0x0F,nbits);
 12822  14C6  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 12823  14C7  00F2               	movwf	WriteRC@data
 12824  14C8  300F               	movlw	15
 12825  14C9  2767  3194         	fcall	_WriteRC
 12826  14CB  2CD3               	goto	l5254
 12827  14CC                     l5252:	
 12828                           
 12829                           ;mfrc500.c: 661: else
 12830                           ;mfrc500.c: 662: {
 12831                           ;mfrc500.c: 663: nbytes = bcnt / 8;
 12832  14CC  087B               	movf	Mf500PiccCascAnticoll@bcnt,w
 12833  14CD  00AA               	movwf	??_Mf500PiccCascAnticoll
 12834  14CE  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 12835  14CF  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 12836  14D0  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 12837  14D1  082A               	movf	??_Mf500PiccCascAnticoll,w
 12838  14D2  00B9               	movwf	Mf500PiccCascAnticoll@nbytes
 12839  14D3                     l5254:	
 12840                           
 12841                           ;mfrc500.c: 664: }
 12842                           ;mfrc500.c: 665: MSndBuffer[0] = select_code;
 12843  14D3  0020               	movlb	0	; select bank0
 12844  14D4  082E               	movf	Mf500PiccCascAnticoll@select_code,w
 12845  14D5  0021               	movlb	1	; select bank1
 12846  14D6  00B6               	movwf	_MSndBuffer^(0+128)
 12847                           
 12848                           ;mfrc500.c: 666: MSndBuffer[1] = 0x20 + ((bcnt/8) << 4) + nbits;
 12849  14D7  27EB  3194         	fcall	PL10	;call to abstracted procedure
 12850  14D9  0E89               	swapf	9,f
 12851  14DA  39F0               	andlw	240
 12852  14DB  073B               	addwf	Mf500PiccCascAnticoll@nbits,w
 12853  14DC  3E20               	addlw	32
 12854  14DD  0021               	movlb	1	; select bank1
 12855  14DE  00B7               	movwf	(_MSndBuffer^(0+128)+1)
 12856                           
 12857                           ;mfrc500.c: 667: for (i = 0; i < nbytes; i++)
 12858  14DF  0020               	movlb	0	; select bank0
 12859  14E0  01BC               	clrf	Mf500PiccCascAnticoll@i
 12860  14E1                     l5264:	
 12861  14E1  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 12862  14E2  023C               	subwf	Mf500PiccCascAnticoll@i,w
 12863  14E3  1803               	btfsc	3,0
 12864  14E4  2CEE               	goto	l5266
 12865                           
 12866                           ;mfrc500.c: 668: {
 12867                           ;mfrc500.c: 669: MSndBuffer[i + 2] = snr_in[i];
 12868  14E5  083C               	movf	Mf500PiccCascAnticoll@i,w
 12869  14E6  3EB8               	addlw	(_MSndBuffer+2)& (0+255)
 12870  14E7  0086               	movwf	6
 12871  14E8  0187               	clrf	7
 12872  14E9  083C               	movf	Mf500PiccCascAnticoll@i,w
 12873  14EA  3E35               	addlw	Mf500PiccCascAnticoll@snr_in& (0+255)
 12874  14EB  27FA  3194         	fcall	PL20	;call to abstracted procedure
 12875  14ED  2CE1               	goto	l5264
 12876  14EE                     l5266:	
 12877                           
 12878                           ;mfrc500.c: 670: }
 12879                           ;mfrc500.c: 671: MInfo.nBytesToSend = 2 + nbytes;
 12880  14EE  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 12881  14EF  3E02               	addlw	2
 12882  14F0  00E7               	movwf	_MInfo+3
 12883                           
 12884                           ;mfrc500.c: 672: ret_status = PcdSingleResponseCmd(0x1e);
 12885  14F1  301E               	movlw	30
 12886  14F2  2612  3194         	fcall	_PcdSingleResponseCmd
 12887  14F4  00BA               	movwf	Mf500PiccCascAnticoll@ret_status
 12888                           
 12889                           ;mfrc500.c: 673: if (nbits == 7)
 12890  14F5  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 12891  14F6  3A07               	xorlw	7
 12892  14F7  1D03               	skipz
 12893  14F8  2D39               	goto	l5290
 12894                           
 12895                           ;mfrc500.c: 674: {
 12896                           ;mfrc500.c: 675: dummyShift1 = 0x00;
 12897  14F9  01B2               	clrf	Mf500PiccCascAnticoll@dummyShift1
 12898                           
 12899                           ;mfrc500.c: 676: for (i = 0; i < MInfo.nBytesReceived; i++)
 12900  14FA  01BC               	clrf	Mf500PiccCascAnticoll@i
 12901  14FB                     l5282:	
 12902  14FB  0868               	movf	_MInfo+4,w
 12903  14FC  023C               	subwf	Mf500PiccCascAnticoll@i,w
 12904  14FD  1803               	btfsc	3,0
 12905  14FE  2D25               	goto	l5284
 12906                           
 12907                           ;mfrc500.c: 677: {
 12908                           ;mfrc500.c: 678: dummyShift2 = MRcvBuffer[i];
 12909  14FF  083C               	movf	Mf500PiccCascAnticoll@i,w
 12910  1500  3EA6               	addlw	_MRcvBuffer& (0+255)
 12911  1501  0086               	movwf	6
 12912  1502  0187               	clrf	7
 12913  1503  0801               	movf	1,w
 12914  1504  00B1               	movwf	Mf500PiccCascAnticoll@dummyShift2
 12915                           
 12916                           ;mfrc500.c: 679: MRcvBuffer[i] = (dummyShift1 >> (i+1)) | (MRcvBuffer[i] << (7-i));
 12917  1505  083C               	movf	Mf500PiccCascAnticoll@i,w
 12918  1506  3EA6               	addlw	_MRcvBuffer& (0+255)
 12919  1507  0086               	movwf	6
 12920  1508  083C               	movf	Mf500PiccCascAnticoll@i,w
 12921  1509  3EA6               	addlw	_MRcvBuffer& (0+255)
 12922  150A  0084               	movwf	4
 12923  150B  0185               	clrf	5
 12924  150C  0800               	movf	0,w
 12925  150D  00AA               	movwf	??_Mf500PiccCascAnticoll
 12926  150E  083C               	movf	Mf500PiccCascAnticoll@i,w
 12927  150F  3C07               	sublw	7
 12928  1510  0A89               	incf	9,f
 12929  1511  2D13               	goto	u4754
 12930  1512                     u4755:	
 12931  1512  35AA               	lslf	??_Mf500PiccCascAnticoll,f
 12932  1513                     u4754:	
 12933  1513  0B89               	decfsz	9,f
 12934  1514  2D12               	goto	u4755
 12935  1515  0832               	movf	Mf500PiccCascAnticoll@dummyShift1,w
 12936  1516  00AB               	movwf	??_Mf500PiccCascAnticoll+1
 12937  1517  083C               	movf	Mf500PiccCascAnticoll@i,w
 12938  1518  3E01               	addlw	1
 12939  1519  0A89               	incf	9,f
 12940  151A  2D1C               	goto	u4764
 12941  151B                     u4765:	
 12942  151B  36AB               	lsrf	??_Mf500PiccCascAnticoll+1,f
 12943  151C                     u4764:	
 12944  151C  0B89               	decfsz	9,f
 12945  151D  2D1B               	goto	u4765
 12946  151E  082B               	movf	??_Mf500PiccCascAnticoll+1,w
 12947  151F  042A               	iorwf	??_Mf500PiccCascAnticoll,w
 12948  1520  0081               	movwf	1
 12949                           
 12950                           ;mfrc500.c: 680: dummyShift1 = dummyShift2;
 12951  1521  0831               	movf	Mf500PiccCascAnticoll@dummyShift2,w
 12952  1522  00B2               	movwf	Mf500PiccCascAnticoll@dummyShift1
 12953  1523  0ABC               	incf	Mf500PiccCascAnticoll@i,f
 12954  1524  2CFB               	goto	l5282
 12955  1525                     l5284:	
 12956                           
 12957                           ;mfrc500.c: 681: }
 12958                           ;mfrc500.c: 682: MInfo.nBitsReceived -= MInfo.nBytesReceived;
 12959  1525  0868               	movf	_MInfo+4,w
 12960  1526  02E9               	subwf	_MInfo+5,f
 12961                           
 12962                           ;mfrc500.c: 683: if ( MInfo.collPos )
 12963  1527  086B               	movf	_MInfo+7,w
 12964  1528  1903               	btfsc	3,2
 12965  1529  2D39               	goto	l5290
 12966                           
 12967                           ;mfrc500.c: 684: MInfo.collPos += 7 - (MInfo.collPos + 6) / 9;
 12968  152A  086B               	movf	_MInfo+7,w
 12969  152B  00F2               	movwf	___awdiv@dividend
 12970  152C  3006               	movlw	6
 12971  152D  01F3               	clrf	___awdiv@dividend+1
 12972  152E  07F2               	addwf	___awdiv@dividend,f
 12973  152F  1803               	skipnc
 12974  1530  0AF3               	incf	___awdiv@dividend+1,f
 12975  1531  3009               	movlw	9
 12976  1532  00F0               	movwf	___awdiv@divisor
 12977  1533  01F1               	clrf	___awdiv@divisor+1
 12978  1534  2791  3194         	fcall	___awdiv
 12979  1536  0870               	movf	?___awdiv,w
 12980  1537  3C07               	sublw	7
 12981  1538  07EB               	addwf	_MInfo+7,f
 12982  1539                     l5290:	
 12983                           
 12984                           ;mfrc500.c: 685: }
 12985                           ;mfrc500.c: 686: if ( (ret_status == 0) || (ret_status == (-24)))
 12986  1539  083A               	movf	Mf500PiccCascAnticoll@ret_status,w
 12987  153A  1903               	btfsc	3,2
 12988  153B  2D40               	goto	l5294
 12989  153C  083A               	movf	Mf500PiccCascAnticoll@ret_status,w
 12990  153D  3AE8               	xorlw	232
 12991  153E  1D03               	skipz
 12992  153F  2DA7               	goto	l5328
 12993  1540                     l5294:	
 12994                           
 12995                           ;mfrc500.c: 687: {
 12996                           ;mfrc500.c: 688: if ( MInfo.nBitsReceived != (40 - bcnt) )
 12997  1540  01AB               	clrf	??_Mf500PiccCascAnticoll+1
 12998  1541  087B               	movf	Mf500PiccCascAnticoll@bcnt,w
 12999  1542  3C28               	sublw	40
 13000  1543  00AA               	movwf	??_Mf500PiccCascAnticoll
 13001  1544  1C03               	skipc
 13002  1545  03AB               	decf	??_Mf500PiccCascAnticoll+1,f
 13003  1546  0869               	movf	_MInfo+5,w
 13004  1547  00AC               	movwf	??_Mf500PiccCascAnticoll+2
 13005  1548  01AD               	clrf	??_Mf500PiccCascAnticoll+3
 13006  1549  082B               	movf	??_Mf500PiccCascAnticoll+1,w
 13007  154A  062D               	xorwf	??_Mf500PiccCascAnticoll+3,w
 13008  154B  1D03               	skipz
 13009  154C  2D4F               	goto	u4815
 13010  154D  082A               	movf	??_Mf500PiccCascAnticoll,w
 13011  154E  062C               	xorwf	??_Mf500PiccCascAnticoll+2,w
 13012  154F                     u4815:	
 13013  154F  1903               	skipnz
 13014  1550  2D53               	goto	l5298
 13015                           
 13016                           ;mfrc500.c: 689: {
 13017                           ;mfrc500.c: 690: ret_status = (-11);
 13018  1551  30F5               	movlw	-11
 13019  1552  2D9E               	goto	L9
 13020  1553                     l5298:	
 13021                           ;mfrc500.c: 691: }
 13022                           
 13023                           
 13024                           ;mfrc500.c: 692: else
 13025                           ;mfrc500.c: 693: {
 13026                           ;mfrc500.c: 694: byteOffset = 0;
 13027  1553  01B4               	clrf	Mf500PiccCascAnticoll@byteOffset
 13028                           
 13029                           ;mfrc500.c: 695: if (nbits != 0)
 13030  1554  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 13031  1555  1903               	btfsc	3,2
 13032  1556  2D68               	goto	l5306
 13033                           
 13034                           ;mfrc500.c: 696: {
 13035                           ;mfrc500.c: 697: snr_in[nbytes - 1] = snr_in[nbytes - 1] | MRcvBuffer[0];
 13036  1557  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 13037  1558  3EFF               	addlw	255
 13038  1559  3E35               	addlw	Mf500PiccCascAnticoll@snr_in& (0+255)
 13039  155A  0086               	movwf	6
 13040  155B  0187               	clrf	7
 13041  155C  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 13042  155D  3EFF               	addlw	255
 13043  155E  3E35               	addlw	Mf500PiccCascAnticoll@snr_in& (0+255)
 13044  155F  0084               	movwf	4
 13045  1560  0185               	clrf	5
 13046  1561  0800               	movf	0,w
 13047  1562  0021               	movlb	1	; select bank1
 13048  1563  0426               	iorwf	_MRcvBuffer^(0+128),w
 13049  1564  0081               	movwf	1
 13050                           
 13051                           ;mfrc500.c: 698: byteOffset = 1;
 13052  1565  0020               	movlb	0	; select bank0
 13053  1566  01B4               	clrf	Mf500PiccCascAnticoll@byteOffset
 13054  1567  0AB4               	incf	Mf500PiccCascAnticoll@byteOffset,f
 13055  1568                     l5306:	
 13056                           
 13057                           ;mfrc500.c: 699: }
 13058                           ;mfrc500.c: 700: for (i = 0; i < (4 - nbytes); i++)
 13059  1568  01BC               	clrf	Mf500PiccCascAnticoll@i
 13060  1569                     l5312:	
 13061  1569  01AB               	clrf	??_Mf500PiccCascAnticoll+1
 13062  156A  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 13063  156B  3C04               	sublw	4
 13064  156C  00AA               	movwf	??_Mf500PiccCascAnticoll
 13065  156D  1C03               	skipc
 13066  156E  03AB               	decf	??_Mf500PiccCascAnticoll+1,f
 13067  156F  082B               	movf	??_Mf500PiccCascAnticoll+1,w
 13068  1570  3A80               	xorlw	128
 13069  1571  3C80               	sublw	128
 13070  1572  1D03               	skipz
 13071  1573  2D76               	goto	u4835
 13072  1574  082A               	movf	??_Mf500PiccCascAnticoll,w
 13073  1575  023C               	subwf	Mf500PiccCascAnticoll@i,w
 13074  1576                     u4835:	
 13075  1576  1803               	btfsc	3,0
 13076  1577  2D8A               	goto	l5314
 13077                           
 13078                           ;mfrc500.c: 701: {
 13079                           ;mfrc500.c: 702: snr_in[nbytes + i] = MRcvBuffer[i + byteOffset];
 13080  1578  3035               	movlw	Mf500PiccCascAnticoll@snr_in& (0+255)
 13081  1579  0020               	movlb	0	; select bank0
 13082  157A  073C               	addwf	Mf500PiccCascAnticoll@i,w
 13083  157B  00AA               	movwf	??_Mf500PiccCascAnticoll
 13084  157C  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 13085  157D  072A               	addwf	??_Mf500PiccCascAnticoll,w
 13086  157E  00AB               	movwf	??_Mf500PiccCascAnticoll+1
 13087  157F  0086               	movwf	6
 13088  1580  30A6               	movlw	_MRcvBuffer& (0+255)
 13089  1581  0187               	clrf	7
 13090  1582  0734               	addwf	Mf500PiccCascAnticoll@byteOffset,w
 13091  1583  00AC               	movwf	??_Mf500PiccCascAnticoll+2
 13092  1584  083C               	movf	Mf500PiccCascAnticoll@i,w
 13093  1585  072C               	addwf	??_Mf500PiccCascAnticoll+2,w
 13094  1586  00AD               	movwf	??_Mf500PiccCascAnticoll+3
 13095  1587  27FA  3194         	fcall	PL20	;call to abstracted procedure
 13096  1589  2D69               	goto	l5312
 13097  158A                     l5314:	
 13098                           
 13099                           ;mfrc500.c: 703: }
 13100                           ;mfrc500.c: 704: if (ret_status != (-24) )
 13101  158A  0020               	movlb	0	; select bank0
 13102  158B  083A               	movf	Mf500PiccCascAnticoll@ret_status,w
 13103  158C  3AE8               	xorlw	232
 13104  158D  1903               	skipnz
 13105  158E  2DA3               	goto	l5324
 13106                           
 13107                           ;mfrc500.c: 705: {
 13108                           ;mfrc500.c: 706: snr_crc = snr_in[0] ^ snr_in[1] ^ snr_in[2] ^ snr_in[3];
 13109  158F  0836               	movf	Mf500PiccCascAnticoll@snr_in+1,w
 13110  1590  0637               	xorwf	Mf500PiccCascAnticoll@snr_in+2,w
 13111  1591  0638               	xorwf	Mf500PiccCascAnticoll@snr_in+3,w
 13112  1592  0635               	xorwf	Mf500PiccCascAnticoll@snr_in,w
 13113  1593  00AF               	movwf	Mf500PiccCascAnticoll@snr_crc
 13114                           
 13115                           ;mfrc500.c: 707: snr_check = MRcvBuffer[MInfo.nBytesReceived - 1];
 13116  1594  0868               	movf	_MInfo+4,w
 13117  1595  3EA5               	addlw	(_MRcvBuffer+255)& (0+255)
 13118  1596  0086               	movwf	6
 13119  1597  0187               	clrf	7
 13120  1598  0801               	movf	1,w
 13121  1599  00B0               	movwf	Mf500PiccCascAnticoll@snr_check
 13122                           
 13123                           ;mfrc500.c: 708: if (snr_crc != snr_check)
 13124  159A  062F               	xorwf	Mf500PiccCascAnticoll@snr_crc,w
 13125  159B  1903               	skipnz
 13126  159C  2DA0               	goto	l1015
 13127                           
 13128                           ;mfrc500.c: 709: {
 13129                           ;mfrc500.c: 710: ret_status = (-8);
 13130  159D  30F8               	movlw	-8
 13131  159E                     L9:	
 13132  159E  00BA               	movwf	Mf500PiccCascAnticoll@ret_status
 13133                           
 13134                           ;mfrc500.c: 711: }
 13135  159F  2DA7               	goto	l5328
 13136  15A0                     l1015:	
 13137                           
 13138                           ;mfrc500.c: 712: else
 13139                           ;mfrc500.c: 713: {
 13140                           ;mfrc500.c: 714: complete = 1;
 13141  15A0  01B3               	clrf	Mf500PiccCascAnticoll@complete
 13142  15A1  0AB3               	incf	Mf500PiccCascAnticoll@complete,f
 13143  15A2  2DA7               	goto	l5328
 13144  15A3                     l5324:	
 13145                           
 13146                           ;mfrc500.c: 717: else
 13147                           ;mfrc500.c: 718: {
 13148                           ;mfrc500.c: 719: bcnt = bcnt + MInfo.collPos - nbits;
 13149  15A3  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 13150  15A4  026B               	subwf	_MInfo+7,w
 13151  15A5  07FB               	addwf	Mf500PiccCascAnticoll@bcnt,f
 13152                           
 13153                           ;mfrc500.c: 720: ret_status = 0;
 13154  15A6  01BA               	clrf	Mf500PiccCascAnticoll@ret_status
 13155  15A7                     l5328:	
 13156  15A7  08B3               	movf	Mf500PiccCascAnticoll@complete,f
 13157  15A8  1903               	btfsc	3,2
 13158  15A9  083A               	movf	Mf500PiccCascAnticoll@ret_status,w
 13159  15AA  1903               	btfsc	3,2
 13160  15AB  2CA5               	goto	l5232
 13161                           
 13162                           ;mfrc500.c: 721: }
 13163                           ;mfrc500.c: 722: }
 13164                           ;mfrc500.c: 723: }
 13165                           ;mfrc500.c: 724: }
 13166                           ;mfrc500.c: 725: if (ret_status == 0)
 13167  15AC  08BA               	movf	Mf500PiccCascAnticoll@ret_status,f
 13168  15AD  1D03               	skipz
 13169  15AE  2DB3               	goto	l5336
 13170                           
 13171                           ;mfrc500.c: 726: {
 13172                           ;mfrc500.c: 727: memcpy(snr, snr_in, 4);
 13173  15AF  3035               	movlw	low Mf500PiccCascAnticoll@snr_in
 13174  15B0  00F0               	movwf	memcpy@s1
 13175  15B1  3000               	movlw	high Mf500PiccCascAnticoll@snr_in
 13176  15B2  2DC2               	goto	L10
 13177  15B3                     l5336:	
 13178                           ;mfrc500.c: 728: }
 13179                           
 13180                           
 13181                           ;mfrc500.c: 729: else
 13182                           ;mfrc500.c: 730: {
 13183                           ;mfrc500.c: 731: for (i = 0; i < 4; i++)
 13184  15B3  01BC               	clrf	Mf500PiccCascAnticoll@i
 13185  15B4                     l5342:	
 13186                           
 13187                           ;mfrc500.c: 732: snr[i] = 0;
 13188  15B4  083C               	movf	Mf500PiccCascAnticoll@i,w
 13189  15B5  077C               	addwf	Mf500PiccCascAnticoll@snr,w
 13190  15B6  00AA               	movwf	??_Mf500PiccCascAnticoll
 13191  15B7  0086               	movwf	6
 13192  15B8  3004               	movlw	4
 13193  15B9  0187               	clrf	7
 13194  15BA  0181               	clrf	1
 13195  15BB  0ABC               	incf	Mf500PiccCascAnticoll@i,f
 13196  15BC  023C               	subwf	Mf500PiccCascAnticoll@i,w
 13197  15BD  1C03               	skipc
 13198  15BE  2DB4               	goto	l5342
 13199                           
 13200                           ;mfrc500.c: 733: memcpy(snr, "0000", 4);
 13201  15BF  3001               	movlw	low (STR_1| (0+32768))
 13202  15C0  00F0               	movwf	memcpy@s1
 13203  15C1  3099               	movlw	high (STR_1| (0+32768))
 13204  15C2                     L10:	
 13205  15C2  00F1               	movwf	memcpy@s1+1
 13206  15C3  3004               	movlw	4
 13207  15C4  00F2               	movwf	memcpy@n
 13208  15C5  01F3               	clrf	memcpy@n+1
 13209  15C6  087C               	movf	Mf500PiccCascAnticoll@snr,w
 13210  15C7  318E  26C3  3194   	fcall	_memcpy
 13211                           
 13212                           ;mfrc500.c: 734: }
 13213                           ;mfrc500.c: 735: ClearBitMask(0x1A, 0x20);
 13214  15CA  3020               	movlw	32
 13215  15CB  00F5               	movwf	ClearBitMask@mask
 13216  15CC  301A               	movlw	26
 13217  15CD  2787               	fcall	_ClearBitMask
 13218                           
 13219                           ;mfrc500.c: 737: return ret_status;
 13220  15CE  0020               	movlb	0	; select bank0
 13221  15CF  083A               	movf	Mf500PiccCascAnticoll@ret_status,w
 13222  15D0  0008               	return
 13223  15D1                     __end_of_Mf500PiccCascAnticoll:	
 13224  15D1                     __ptext49:	
 13225 ;; *************** function _PcdSetTmo *****************
 13226 ;; Defined at:
 13227 ;;		line 165 in file "../../source/driver/mfrc500.c"
 13228 ;; Parameters:    Size  Location     Type
 13229 ;;  tmoLength       2    5[COMMON] unsigned int 
 13230 ;; Auto vars:     Size  Location     Type
 13231 ;;		None
 13232 ;; Return value:  Size  Location     Type
 13233 ;;		None               void
 13234 ;; Registers used:
 13235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13236 ;; Tracked objects:
 13237 ;;		On entry : 1E/1
 13238 ;;		On exit  : 1F/1
 13239 ;;		Unchanged: 0/0
 13240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13241 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;Total ram usage:        2 bytes
 13246 ;; Hardware stack levels used:    1
 13247 ;; Hardware stack levels required when called:    3
 13248 ;; This function calls:
 13249 ;;		_WriteRC
 13250 ;; This function is called by:
 13251 ;;		_RC500Config
 13252 ;;		_Mf500PiccCommonRequest
 13253 ;;		_Mf500PiccCascAnticoll
 13254 ;;		_Mf500PiccCascSelect
 13255 ;;		_Mf500PiccAuthState
 13256 ;;		_Mf500PiccLoadKey
 13257 ;;		_Mf500PiccRead
 13258 ;;		_Mf500PiccWrite
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           
 13263                           ;psect for function _PcdSetTmo
 13264  15D1                     _PcdSetTmo:	
 13265  15D1                     l4904:	
 13266                           ;incstack = 0
 13267                           ; Regs used in _PcdSetTmo: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13268                           
 13269                           
 13270                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13271                           ; Switch size 1, requested type "space"
 13272                           ; Number of cases is 1, Range of values is 0 to 0
 13273                           ; switch strategies available:
 13274                           ; Name         Instructions Cycles
 13275                           ; simple_byte            4     3 (average)
 13276                           ; direct_byte            8     6 (fixed)
 13277                           ; jumptable            260     6 (fixed)
 13278                           ;	Chosen strategy is simple_byte
 13279                           
 13280                           ;mfrc500.c: 190: break;
 13281                           
 13282                           ;mfrc500.c: 169: switch (tmoLength)
 13283  15D1  0876               	movf	PcdSetTmo@tmoLength+1,w
 13284  15D2  3A00               	xorlw	0	; case 0
 13285  15D3  1903               	skipnz
 13286  15D4  2E03               	goto	l7646
 13287  15D5  2DFA               	goto	l4914
 13288  15D6                     l4906:	
 13289                           
 13290                           ;mfrc500.c: 172: WriteRC(0x2A, 0x07);
 13291  15D6  3007               	movlw	7
 13292  15D7  00F2               	movwf	WriteRC@data
 13293  15D8  302A               	movlw	42
 13294  15D9  2767  3194         	fcall	_WriteRC
 13295                           
 13296                           ;mfrc500.c: 173: WriteRC(0x2C, 0x6a);
 13297  15DB  306A               	movlw	106
 13298  15DC  00F2               	movwf	WriteRC@data
 13299  15DD  302C               	movlw	44
 13300  15DE  2F67               	ljmp	_WriteRC
 13301  15DF                     l4908:	
 13302                           ;mfrc500.c: 174: break;
 13303                           
 13304                           
 13305                           ;mfrc500.c: 176: WriteRC(0x2A, 0x07);
 13306  15DF  3007               	movlw	7
 13307  15E0  00F2               	movwf	WriteRC@data
 13308  15E1  302A               	movlw	42
 13309  15E2  2767  3194         	fcall	_WriteRC
 13310                           
 13311                           ;mfrc500.c: 177: WriteRC(0x2C, 0xa0);
 13312  15E4  30A0               	movlw	160
 13313  15E5  00F2               	movwf	WriteRC@data
 13314  15E6  302C               	movlw	44
 13315  15E7  2F67               	ljmp	_WriteRC
 13316  15E8                     l4910:	
 13317                           ;mfrc500.c: 178: break;
 13318                           
 13319                           
 13320                           ;mfrc500.c: 180: WriteRC(0x2A, 0x09);
 13321  15E8  3009               	movlw	9
 13322  15E9  00F2               	movwf	WriteRC@data
 13323  15EA  302A               	movlw	42
 13324  15EB  2767  3194         	fcall	_WriteRC
 13325                           
 13326                           ;mfrc500.c: 181: WriteRC(0x2C, 0xa0);
 13327  15ED  30A0               	movlw	160
 13328  15EE  00F2               	movwf	WriteRC@data
 13329  15EF  302C               	movlw	44
 13330  15F0  2F67               	ljmp	_WriteRC
 13331  15F1                     l4912:	
 13332                           ;mfrc500.c: 182: break;
 13333                           
 13334                           
 13335                           ;mfrc500.c: 184: WriteRC(0x2A, 0x09);
 13336  15F1  3009               	movlw	9
 13337  15F2  00F2               	movwf	WriteRC@data
 13338  15F3  302A               	movlw	42
 13339  15F4  2767  3194         	fcall	_WriteRC
 13340                           
 13341                           ;mfrc500.c: 185: WriteRC(0x2C, 0xff);
 13342  15F6  30FF               	movlw	255
 13343  15F7  00F2               	movwf	WriteRC@data
 13344  15F8  302C               	movlw	44
 13345  15F9  2F67               	ljmp	_WriteRC
 13346  15FA                     l4914:	
 13347                           ;mfrc500.c: 186: break;
 13348                           
 13349                           
 13350                           ;mfrc500.c: 188: WriteRC(0x2A, 0x07);
 13351  15FA  3007               	movlw	7
 13352  15FB  00F2               	movwf	WriteRC@data
 13353  15FC  302A               	movlw	42
 13354  15FD  2767  3194         	fcall	_WriteRC
 13355                           
 13356                           ;mfrc500.c: 189: WriteRC(0x2C, tmoLength);
 13357  15FF  0875               	movf	PcdSetTmo@tmoLength,w
 13358  1600  00F2               	movwf	WriteRC@data
 13359  1601  302C               	movlw	44
 13360  1602  2F67               	ljmp	_WriteRC
 13361  1603                     l7646:	
 13362                           
 13363                           ; Switch size 1, requested type "space"
 13364                           ; Number of cases is 4, Range of values is 1 to 4
 13365                           ; switch strategies available:
 13366                           ; Name         Instructions Cycles
 13367                           ; simple_byte           13     7 (average)
 13368                           ; direct_byte           17     9 (fixed)
 13369                           ; jumptable            263     9 (fixed)
 13370                           ;	Chosen strategy is simple_byte
 13371  1603  0875               	movf	PcdSetTmo@tmoLength,w
 13372  1604  3A01               	xorlw	1	; case 1
 13373  1605  1903               	skipnz
 13374  1606  2DD6               	goto	l4906
 13375  1607  3A03               	xorlw	3	; case 2
 13376  1608  1903               	skipnz
 13377  1609  2DDF               	goto	l4908
 13378  160A  3A01               	xorlw	1	; case 3
 13379  160B  1903               	skipnz
 13380  160C  2DE8               	goto	l4910
 13381  160D  3A07               	xorlw	7	; case 4
 13382  160E  1903               	skipnz
 13383  160F  2DF1               	goto	l4912
 13384  1610  2DFA               	goto	l4914
 13385  1611  0008               	return
 13386  1612                     __end_of_PcdSetTmo:	
 13387  1612                     __ptext43:	
 13388 ;; *************** function _PcdSingleResponseCmd *****************
 13389 ;; Defined at:
 13390 ;;		line 412 in file "../../source/driver/mfrc500.c"
 13391 ;; Parameters:    Size  Location     Type
 13392 ;;  cmd             1    wreg     unsigned char 
 13393 ;; Auto vars:     Size  Location     Type
 13394 ;;  cmd             1    5[BANK0 ] unsigned char 
 13395 ;;  count02         2    2[BANK0 ] unsigned int 
 13396 ;;  count01         2    0[BANK0 ] unsigned int 
 13397 ;;  tmpStatus       1    9[BANK0 ] unsigned char 
 13398 ;;  ret_status      1    8[BANK0 ] unsigned char 
 13399 ;;  waitFor         1    7[BANK0 ] unsigned char 
 13400 ;;  irqEn           1    6[BANK0 ] unsigned char 
 13401 ;;  lastBits        1    4[BANK0 ] unsigned char 
 13402 ;; Return value:  Size  Location     Type
 13403 ;;                  1    wreg      unsigned char 
 13404 ;; Registers used:
 13405 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13406 ;; Tracked objects:
 13407 ;;		On entry : 1F/0
 13408 ;;		On exit  : 1F/0
 13409 ;;		Unchanged: 0/0
 13410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13415 ;;Total ram usage:       10 bytes
 13416 ;; Hardware stack levels used:    1
 13417 ;; Hardware stack levels required when called:    5
 13418 ;; This function calls:
 13419 ;;		_FlushFIFO
 13420 ;;		_ISR_RC500
 13421 ;;		_ReadRC
 13422 ;;		_SetBitMask
 13423 ;;		_WriteRC
 13424 ;; This function is called by:
 13425 ;;		_Mf500PiccCommonRequest
 13426 ;;		_Mf500PiccCascAnticoll
 13427 ;;		_Mf500PiccCascSelect
 13428 ;;		_Mf500PiccAuthState
 13429 ;;		_Mf500PiccLoadKey
 13430 ;;		_Mf500PiccRead
 13431 ;;		_Mf500PiccWrite
 13432 ;; This function uses a non-reentrant model
 13433 ;;
 13434                           
 13435                           
 13436                           ;psect for function _PcdSingleResponseCmd
 13437  1612                     _PcdSingleResponseCmd:	
 13438                           
 13439                           ;incstack = 0
 13440                           ; Regs used in _PcdSingleResponseCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13441                           ;PcdSingleResponseCmd@cmd stored from wreg
 13442  1612  00A5               	movwf	PcdSingleResponseCmd@cmd
 13443  1613  303F               	movlw	63
 13444                           
 13445                           ;mfrc500.c: 416: char ret_status = 0;
 13446  1614  01A8               	clrf	PcdSingleResponseCmd@ret_status
 13447                           
 13448                           ;mfrc500.c: 417: unsigned char tmpStatus ;
 13449                           ;mfrc500.c: 418: unsigned char lastBits;
 13450                           ;mfrc500.c: 419: unsigned char irqEn = 0x0;
 13451  1615  01A6               	clrf	PcdSingleResponseCmd@irqEn
 13452                           
 13453                           ;mfrc500.c: 420: unsigned char waitFor = 0x0;
 13454  1616  01A7               	clrf	PcdSingleResponseCmd@waitFor
 13455                           
 13456                           ;mfrc500.c: 421: unsigned int count01, count02;
 13457                           ;mfrc500.c: 423: WriteRC(0x06, 0x3F);
 13458  1617  00F2               	movwf	WriteRC@data
 13459  1618  3006               	movlw	6
 13460  1619  2767  3194         	fcall	_WriteRC
 13461                           
 13462                           ;mfrc500.c: 424: WriteRC(0x07, 0x7F);
 13463  161B  307F               	movlw	127
 13464  161C  00F2               	movwf	WriteRC@data
 13465  161D  3007               	movlw	7
 13466  161E  2767  3194         	fcall	_WriteRC
 13467  1620  3001               	movlw	1
 13468                           
 13469                           ;mfrc500.c: 425: WriteRC(0x01, 0x00);
 13470  1621  01F2               	clrf	WriteRC@data
 13471  1622  2767               	fcall	_WriteRC
 13472                           
 13473                           ;mfrc500.c: 426: FlushFIFO();
 13474  1623  318E  26F7  3194   	fcall	_FlushFIFO
 13475                           
 13476                           ;mfrc500.c: 427: MpIsrInfo = &MInfo;
 13477  1626  3064               	movlw	_MInfo& (0+255)
 13478  1627  0020               	movlb	0	; select bank0
 13479  1628  00D4               	movwf	_MpIsrInfo
 13480                           
 13481                           ;mfrc500.c: 428: MpIsrOut = MSndBuffer;
 13482  1629  30B6               	movlw	_MSndBuffer& (0+255)
 13483  162A  00D5               	movwf	_MpIsrOut
 13484                           
 13485                           ;mfrc500.c: 429: MpIsrIn = MRcvBuffer;
 13486  162B  30A6               	movlw	_MRcvBuffer& (0+255)
 13487  162C  00D3               	movwf	_MpIsrIn
 13488                           
 13489                           ;mfrc500.c: 430: MInfo.irqSource = 0x00;
 13490  162D  01EA               	clrf	_MInfo+6
 13491                           
 13492                           ;mfrc500.c: 431: switch (cmd)
 13493  162E  2E51               	goto	l4972
 13494  162F                     l4942:	
 13495                           
 13496                           ;mfrc500.c: 434: irqEn = 0x00;
 13497  162F  01A6               	clrf	PcdSingleResponseCmd@irqEn
 13498                           
 13499                           ;mfrc500.c: 435: waitFor = 0x00;
 13500  1630  01A7               	clrf	PcdSingleResponseCmd@waitFor
 13501                           
 13502                           ;mfrc500.c: 436: break;
 13503  1631  2E77               	goto	l4974
 13504  1632                     l4944:	
 13505                           
 13506                           ;mfrc500.c: 438: irqEn = 0x11;
 13507  1632  3011               	movlw	17
 13508  1633  00A6               	movwf	PcdSingleResponseCmd@irqEn
 13509                           
 13510                           ;mfrc500.c: 439: waitFor = 0x10;
 13511  1634  3010               	movlw	16
 13512  1635  2E45               	goto	L18
 13513  1636                     l4946:	
 13514                           ;mfrc500.c: 440: break;
 13515                           
 13516                           
 13517                           ;mfrc500.c: 442: irqEn = 0x07;
 13518  1636  3007               	movlw	7
 13519  1637  2E43               	goto	L19
 13520  1638                     l4948:	
 13521                           ;mfrc500.c: 444: break;
 13522                           
 13523                           ;mfrc500.c: 443: waitFor = 0x04;
 13524                           
 13525                           
 13526                           ;mfrc500.c: 446: case 0x0B:
 13527                           ;mfrc500.c: 447: case 0x0C:
 13528                           ;mfrc500.c: 448: irqEn = 0x05;
 13529  1638  3005               	movlw	5
 13530  1639  2E43               	goto	L19
 13531  163A                     l4952:	
 13532                           ;mfrc500.c: 450: break;
 13533                           
 13534                           ;mfrc500.c: 449: waitFor = 0x04;
 13535                           
 13536                           
 13537                           ;mfrc500.c: 456: irqEn = 0x04;
 13538  163A  3004               	movlw	4
 13539  163B  00A6               	movwf	PcdSingleResponseCmd@irqEn
 13540  163C  2E45               	goto	L18
 13541  163D                     l4954:	
 13542                           ;mfrc500.c: 458: break;
 13543                           
 13544                           ;mfrc500.c: 457: waitFor = 0x04;
 13545                           
 13546                           
 13547                           ;mfrc500.c: 460: MInfo.nBitsReceived = -(ReadRC(0x0F) >> 4);
 13548  163D  300F               	movlw	15
 13549  163E  2778  3194         	fcall	_ReadRC
 13550  1640  27F3  3194         	fcall	PL18	;call to abstracted procedure
 13551                           
 13552                           ;mfrc500.c: 461: irqEn = 0x06;
 13553  1642  3006               	movlw	6
 13554  1643                     L19:	
 13555  1643  00A6               	movwf	PcdSingleResponseCmd@irqEn
 13556                           
 13557                           ;mfrc500.c: 462: waitFor = 0x04;
 13558  1644  3004               	movlw	4
 13559  1645                     L18:	
 13560  1645  00A7               	movwf	PcdSingleResponseCmd@waitFor
 13561                           
 13562                           ;mfrc500.c: 463: break;
 13563  1646  2E77               	goto	l4974
 13564  1647                     l4964:	
 13565                           
 13566                           ;mfrc500.c: 473: MInfo.nBitsReceived = -(ReadRC(0x0F) >> 4);
 13567  1647  300F               	movlw	15
 13568  1648  2778  3194         	fcall	_ReadRC
 13569  164A  27F3  3194         	fcall	PL18	;call to abstracted procedure
 13570                           
 13571                           ;mfrc500.c: 474: irqEn = 0x3D;
 13572  164C  303D               	movlw	61
 13573  164D  2E43               	goto	L19
 13574  164E                     l4970:	
 13575                           
 13576                           ;mfrc500.c: 478: ret_status = (-23);
 13577  164E  30E9               	movlw	233
 13578  164F  00A8               	movwf	PcdSingleResponseCmd@ret_status
 13579                           
 13580                           ;mfrc500.c: 479: }
 13581  1650  2E77               	goto	l4974
 13582  1651                     l4972:	
 13583  1651  0825               	movf	PcdSingleResponseCmd@cmd,w
 13584                           
 13585                           ; Switch size 1, requested type "space"
 13586                           ; Number of cases is 12, Range of values is 0 to 30
 13587                           ; switch strategies available:
 13588                           ; Name         Instructions Cycles
 13589                           ; simple_byte           37    19 (average)
 13590                           ; direct_byte           68     6 (fixed)
 13591                           ; jumptable            260     6 (fixed)
 13592                           ;	Chosen strategy is simple_byte
 13593  1652  3A00               	xorlw	0	; case 0
 13594  1653  1903               	skipnz
 13595  1654  2E2F               	goto	l4942
 13596  1655  3A01               	xorlw	1	; case 1
 13597  1656  1903               	skipnz
 13598  1657  2E32               	goto	l4944
 13599  1658  3A02               	xorlw	2	; case 3
 13600  1659  1903               	skipnz
 13601  165A  2E36               	goto	l4946
 13602  165B  3A04               	xorlw	4	; case 7
 13603  165C  1903               	skipnz
 13604  165D  2E38               	goto	l4948
 13605  165E  3A0C               	xorlw	12	; case 11
 13606  165F  1903               	skipnz
 13607  1660  2E38               	goto	l4948
 13608  1661  3A07               	xorlw	7	; case 12
 13609  1662  1903               	skipnz
 13610  1663  2E38               	goto	l4948
 13611  1664  3A1E               	xorlw	30	; case 18
 13612  1665  1903               	skipnz
 13613  1666  2E32               	goto	l4944
 13614  1667  3A06               	xorlw	6	; case 20
 13615  1668  1903               	skipnz
 13616  1669  2E3A               	goto	l4952
 13617  166A  3A02               	xorlw	2	; case 22
 13618  166B  1903               	skipnz
 13619  166C  2E3D               	goto	l4954
 13620  166D  3A0F               	xorlw	15	; case 25
 13621  166E  1903               	skipnz
 13622  166F  2E38               	goto	l4948
 13623  1670  3A03               	xorlw	3	; case 26
 13624  1671  1903               	skipnz
 13625  1672  2E38               	goto	l4948
 13626  1673  3A04               	xorlw	4	; case 30
 13627  1674  1903               	skipnz
 13628  1675  2E47               	goto	l4964
 13629  1676  2E4E               	goto	l4970
 13630  1677                     l4974:	
 13631                           
 13632                           ;mfrc500.c: 481: if (ret_status == 0)
 13633  1677  08A8               	movf	PcdSingleResponseCmd@ret_status,f
 13634  1678  1D03               	skipz
 13635  1679  2F16               	goto	l959
 13636  167A  3010               	movlw	16
 13637                           
 13638                           ;mfrc500.c: 482: {
 13639                           ;mfrc500.c: 483: irqEn |= 0x20;
 13640  167B  16A6               	bsf	PcdSingleResponseCmd@irqEn,5
 13641                           
 13642                           ;mfrc500.c: 484: waitFor |= 0x20;
 13643  167C  16A7               	bsf	PcdSingleResponseCmd@waitFor,5
 13644                           
 13645                           ;mfrc500.c: 485: count01 = 10000;
 13646  167D  00A0               	movwf	PcdSingleResponseCmd@count01
 13647  167E  3027               	movlw	39
 13648  167F  00A1               	movwf	PcdSingleResponseCmd@count01+1
 13649                           
 13650                           ;mfrc500.c: 486: count02 = 20;
 13651  1680  3014               	movlw	20
 13652  1681  00A2               	movwf	PcdSingleResponseCmd@count02
 13653  1682  01A3               	clrf	PcdSingleResponseCmd@count02+1
 13654                           
 13655                           ;mfrc500.c: 487: WriteRC(0x06, irqEn | 0x80);
 13656  1683  0826               	movf	PcdSingleResponseCmd@irqEn,w
 13657  1684  3880               	iorlw	128
 13658  1685  00F2               	movwf	WriteRC@data
 13659  1686  3006               	movlw	6
 13660  1687  2767  3194         	fcall	_WriteRC
 13661                           
 13662                           ;mfrc500.c: 488: WriteRC(0x01, cmd);
 13663  1689  0020               	movlb	0	; select bank0
 13664  168A  0825               	movf	PcdSingleResponseCmd@cmd,w
 13665  168B  00F2               	movwf	WriteRC@data
 13666  168C  3001               	movlw	1
 13667  168D  2767  3194         	fcall	_WriteRC
 13668  168F                     l4996:	
 13669                           ;mfrc500.c: 489: while (!(MpIsrInfo->irqSource & waitFor))
 13670                           
 13671  168F  0020               	movlb	0	; select bank0
 13672  1690  0854               	movf	_MpIsrInfo,w
 13673  1691  3E06               	addlw	6
 13674  1692  0086               	movwf	6
 13675  1693  0187               	clrf	7
 13676  1694  0801               	movf	1,w
 13677  1695  0527               	andwf	PcdSingleResponseCmd@waitFor,w
 13678  1696  1D03               	btfss	3,2
 13679  1697  2EB1               	goto	l4998
 13680                           
 13681                           ;mfrc500.c: 490: {
 13682                           ;mfrc500.c: 491: ISR_RC500();
 13683  1698  3192  22E4  3194   	fcall	_ISR_RC500
 13684                           
 13685                           ;mfrc500.c: 492: if (count02 == 0)
 13686  169B  0020               	movlb	0	; select bank0
 13687  169C  0823               	movf	PcdSingleResponseCmd@count02+1,w
 13688  169D  0422               	iorwf	PcdSingleResponseCmd@count02,w
 13689  169E  1903               	btfsc	3,2
 13690  169F  2EB1               	goto	l4998
 13691                           
 13692                           ;mfrc500.c: 494: count01--;
 13693  16A0  3001               	movlw	1
 13694  16A1  02A0               	subwf	PcdSingleResponseCmd@count01,f
 13695  16A2  3000               	movlw	0
 13696  16A3  3BA1               	subwfb	PcdSingleResponseCmd@count01+1,f
 13697                           
 13698                           ;mfrc500.c: 495: if (count01 == 0)
 13699  16A4  0821               	movf	PcdSingleResponseCmd@count01+1,w
 13700  16A5  0420               	iorwf	PcdSingleResponseCmd@count01,w
 13701  16A6  1D03               	skipz
 13702  16A7  2E8F               	goto	l4996
 13703                           
 13704                           ;mfrc500.c: 496: {
 13705                           ;mfrc500.c: 497: count01 = 10000;
 13706  16A8  3010               	movlw	16
 13707  16A9  00A0               	movwf	PcdSingleResponseCmd@count01
 13708  16AA  3027               	movlw	39
 13709  16AB  00A1               	movwf	PcdSingleResponseCmd@count01+1
 13710                           
 13711                           ;mfrc500.c: 498: count02--;
 13712  16AC  3001               	movlw	1
 13713  16AD  02A2               	subwf	PcdSingleResponseCmd@count02,f
 13714  16AE  3000               	movlw	0
 13715  16AF  3BA3               	subwfb	PcdSingleResponseCmd@count02+1,f
 13716  16B0  2E8F               	goto	l4996
 13717  16B1                     l4998:	
 13718                           
 13719                           ;mfrc500.c: 499: }
 13720                           ;mfrc500.c: 500: };
 13721                           ;mfrc500.c: 502: WriteRC(0x06, 0x3F);
 13722  16B1  303F               	movlw	63
 13723  16B2  00F2               	movwf	WriteRC@data
 13724  16B3  3006               	movlw	6
 13725  16B4  2767  3194         	fcall	_WriteRC
 13726                           
 13727                           ;mfrc500.c: 503: WriteRC(0x07, 0x7F);
 13728  16B6  307F               	movlw	127
 13729  16B7  00F2               	movwf	WriteRC@data
 13730  16B8  3007               	movlw	7
 13731  16B9  2767               	fcall	_WriteRC
 13732                           
 13733                           ;mfrc500.c: 504: SetBitMask(0x09, 0x04);
 13734  16BA  3004               	movlw	4
 13735  16BB  00F5               	movwf	SetBitMask@mask
 13736  16BC  3009               	movlw	9
 13737  16BD  318F  27B1  3194   	fcall	_SetBitMask
 13738  16C0  3001               	movlw	1
 13739                           
 13740                           ;mfrc500.c: 506: WriteRC(0x01, 0x00);
 13741  16C1  01F2               	clrf	WriteRC@data
 13742  16C2  2767  3194         	fcall	_WriteRC
 13743                           
 13744                           ;mfrc500.c: 507: if (count02 == 0)
 13745  16C4  0020               	movlb	0	; select bank0
 13746  16C5  0823               	movf	PcdSingleResponseCmd@count02+1,w
 13747  16C6  0422               	iorwf	PcdSingleResponseCmd@count02,w
 13748  16C7  1D03               	skipz
 13749  16C8  2ECB               	goto	l5004
 13750                           
 13751                           ;mfrc500.c: 508: {
 13752                           ;mfrc500.c: 509: ret_status = (-27);
 13753  16C9  30E5               	movlw	229
 13754  16CA  2ECF               	goto	L20
 13755  16CB                     l5004:	
 13756                           ;mfrc500.c: 510: }
 13757                           
 13758                           
 13759                           ;mfrc500.c: 511: else
 13760                           ;mfrc500.c: 512: {
 13761                           ;mfrc500.c: 513: ret_status = MpIsrInfo->status;
 13762  16CB  0854               	movf	_MpIsrInfo,w
 13763  16CC  0086               	movwf	6
 13764  16CD  0187               	clrf	7
 13765  16CE  3F41               	moviw [1]fsr1
 13766  16CF                     L20:	
 13767  16CF  00A8               	movwf	PcdSingleResponseCmd@ret_status
 13768                           
 13769                           ;mfrc500.c: 514: }
 13770                           ;mfrc500.c: 515: if (ret_status == 0)
 13771  16D0  08A8               	movf	PcdSingleResponseCmd@ret_status,f
 13772  16D1  1D03               	skipz
 13773  16D2  2F15               	goto	l5048
 13774                           
 13775                           ;mfrc500.c: 516: {
 13776                           ;mfrc500.c: 517: if ((tmpStatus = (ReadRC(0x0A) & 0x17)))
 13777  16D3  300A               	movlw	10
 13778  16D4  2778  3194         	fcall	_ReadRC
 13779  16D6  0020               	movlb	0	; select bank0
 13780  16D7  00A9               	movwf	PcdSingleResponseCmd@tmpStatus
 13781  16D8  3017               	movlw	23
 13782  16D9  05A9               	andwf	PcdSingleResponseCmd@tmpStatus,f
 13783  16DA  1903               	btfsc	3,2
 13784  16DB  2EFA               	goto	l968
 13785                           
 13786                           ;mfrc500.c: 518: {
 13787                           ;mfrc500.c: 519: if (tmpStatus & 0x01)
 13788  16DC  1C29               	btfss	PcdSingleResponseCmd@tmpStatus,0
 13789  16DD  2EE5               	goto	l5018
 13790                           
 13791                           ;mfrc500.c: 520: {
 13792                           ;mfrc500.c: 521: MInfo.collPos = ReadRC(0x0B);
 13793  16DE  300B               	movlw	11
 13794  16DF  2778  3194         	fcall	_ReadRC
 13795  16E1  0020               	movlb	0	; select bank0
 13796  16E2  00EB               	movwf	_MInfo+7
 13797                           
 13798                           ;mfrc500.c: 522: ret_status = (-24);
 13799  16E3  30E8               	movlw	232
 13800  16E4  2EE9               	goto	L21
 13801  16E5                     l5018:	
 13802                           ;mfrc500.c: 523: }
 13803                           
 13804                           
 13805                           ;mfrc500.c: 524: else
 13806                           ;mfrc500.c: 525: {
 13807                           ;mfrc500.c: 526: MInfo.collPos = 0;
 13808  16E5  01EB               	clrf	_MInfo+7
 13809                           
 13810                           ;mfrc500.c: 527: if (tmpStatus & 0x02)
 13811  16E6  1CA9               	btfss	PcdSingleResponseCmd@tmpStatus,1
 13812  16E7  2EEA               	goto	l5024
 13813                           
 13814                           ;mfrc500.c: 528: {
 13815                           ;mfrc500.c: 529: ret_status = (-5);
 13816  16E8  30FB               	movlw	251
 13817  16E9                     L21:	
 13818  16E9  00A8               	movwf	PcdSingleResponseCmd@ret_status
 13819  16EA                     l5024:	
 13820                           
 13821                           ;mfrc500.c: 530: }
 13822                           ;mfrc500.c: 531: }
 13823                           ;mfrc500.c: 532: if (tmpStatus & 0x04)
 13824  16EA  1D29               	btfss	PcdSingleResponseCmd@tmpStatus,2
 13825  16EB  2EEE               	goto	l5028
 13826                           
 13827                           ;mfrc500.c: 533: {
 13828                           ;mfrc500.c: 534: ret_status = (-21);
 13829  16EC  30EB               	movlw	235
 13830  16ED  00A8               	movwf	PcdSingleResponseCmd@ret_status
 13831  16EE                     l5028:	
 13832                           
 13833                           ;mfrc500.c: 535: }
 13834                           ;mfrc500.c: 536: if (tmpStatus & 0x10)
 13835  16EE  1E29               	btfss	PcdSingleResponseCmd@tmpStatus,4
 13836  16EF  2EF6               	goto	l5034
 13837                           
 13838                           ;mfrc500.c: 537: {
 13839                           ;mfrc500.c: 538: FlushFIFO();
 13840  16F0  318E  26F7  3194   	fcall	_FlushFIFO
 13841                           
 13842                           ;mfrc500.c: 539: ret_status = (-19);
 13843  16F3  30ED               	movlw	237
 13844  16F4  0020               	movlb	0	; select bank0
 13845  16F5  00A8               	movwf	PcdSingleResponseCmd@ret_status
 13846  16F6                     l5034:	
 13847                           
 13848                           ;mfrc500.c: 540: }
 13849                           ;mfrc500.c: 541: if (tmpStatus & 0x08)
 13850  16F6  1DA9               	btfss	PcdSingleResponseCmd@tmpStatus,3
 13851  16F7  2EFA               	goto	l968
 13852                           
 13853                           ;mfrc500.c: 542: {
 13854                           ;mfrc500.c: 543: ret_status = (-2);
 13855  16F8  30FE               	movlw	254
 13856  16F9  00A8               	movwf	PcdSingleResponseCmd@ret_status
 13857  16FA                     l968:	
 13858                           
 13859                           ;mfrc500.c: 544: }
 13860                           ;mfrc500.c: 547: }
 13861                           ;mfrc500.c: 548: if (cmd == 0x1E)
 13862  16FA  0825               	movf	PcdSingleResponseCmd@cmd,w
 13863  16FB  3A1E               	xorlw	30
 13864  16FC  1D03               	skipz
 13865  16FD  2F16               	goto	l959
 13866                           
 13867                           ;mfrc500.c: 549: {
 13868                           ;mfrc500.c: 550: lastBits = ReadRC(0x05) & 0x07;
 13869  16FE  3005               	movlw	5
 13870  16FF  2778  3194         	fcall	_ReadRC
 13871  1701  0020               	movlb	0	; select bank0
 13872  1702  00A4               	movwf	PcdSingleResponseCmd@lastBits
 13873  1703  3007               	movlw	7
 13874  1704  05A4               	andwf	PcdSingleResponseCmd@lastBits,f
 13875                           
 13876                           ;mfrc500.c: 551: if (lastBits)
 13877  1705  0824               	movf	PcdSingleResponseCmd@lastBits,w
 13878  1706  1903               	btfsc	3,2
 13879  1707  2F0F               	goto	l5046
 13880                           
 13881                           ;mfrc500.c: 552: {
 13882                           ;mfrc500.c: 553: MInfo.nBitsReceived += (MInfo.nBytesReceived - 1) * 8 + lastBits;
 13883  1708  0868               	movf	_MInfo+4,w
 13884  1709  0709               	addwf	9,w
 13885  170A  0709               	addwf	9,w
 13886  170B  0709               	addwf	9,w
 13887  170C  0724               	addwf	PcdSingleResponseCmd@lastBits,w
 13888  170D  3EF8               	addlw	248
 13889  170E  2F13               	goto	L22
 13890  170F                     l5046:	
 13891                           ;mfrc500.c: 554: }
 13892                           
 13893                           
 13894                           ;mfrc500.c: 555: else
 13895                           ;mfrc500.c: 556: {
 13896                           ;mfrc500.c: 557: MInfo.nBitsReceived += MInfo.nBytesReceived * 8;
 13897  170F  0868               	movf	_MInfo+4,w
 13898  1710  0709               	addwf	9,w
 13899  1711  0709               	addwf	9,w
 13900  1712  0709               	addwf	9,w
 13901  1713                     L22:	
 13902  1713  07E9               	addwf	_MInfo+5,f
 13903  1714  2F16               	goto	l959
 13904  1715                     l5048:	
 13905                           
 13906                           ;mfrc500.c: 561: else
 13907                           ;mfrc500.c: 562: {
 13908                           ;mfrc500.c: 563: MInfo.collPos = 0x00;
 13909  1715  01EB               	clrf	_MInfo+7
 13910  1716                     l959:	
 13911                           
 13912                           ;mfrc500.c: 564: }
 13913                           ;mfrc500.c: 565: }
 13914                           ;mfrc500.c: 566: MpIsrInfo = 0;
 13915  1716  01D4               	clrf	_MpIsrInfo
 13916                           
 13917                           ;mfrc500.c: 567: MpIsrOut = 0;
 13918  1717  01D5               	clrf	_MpIsrOut
 13919                           
 13920                           ;mfrc500.c: 568: MpIsrIn = 0;
 13921  1718  01D3               	clrf	_MpIsrIn
 13922                           
 13923                           ;mfrc500.c: 570: return ret_status;
 13924  1719  0828               	movf	PcdSingleResponseCmd@ret_status,w
 13925  171A  0008               	return
 13926  171B                     __end_of_PcdSingleResponseCmd:	
 13927  171B                     __ptext14:	
 13928 ;; *************** function _RC500Config *****************
 13929 ;; Defined at:
 13930 ;;		line 368 in file "../../source/driver/mfrc500.c"
 13931 ;; Parameters:    Size  Location     Type
 13932 ;;		None
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;  i               1   13[COMMON] unsigned char 
 13935 ;;  ret_status      1   12[COMMON] unsigned char 
 13936 ;; Return value:  Size  Location     Type
 13937 ;;                  1    wreg      unsigned char 
 13938 ;; Registers used:
 13939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13940 ;; Tracked objects:
 13941 ;;		On entry : 1F/2
 13942 ;;		On exit  : 1C/0
 13943 ;;		Unchanged: 0/0
 13944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13946 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13949 ;;Total ram usage:        2 bytes
 13950 ;; Hardware stack levels used:    1
 13951 ;; Hardware stack levels required when called:    5
 13952 ;; This function calls:
 13953 ;;		_ClearBitMask
 13954 ;;		_PcdReset
 13955 ;;		_PcdRfReset
 13956 ;;		_PcdSetTmo
 13957 ;;		_WriteRC
 13958 ;; This function is called by:
 13959 ;;		_init_hardware
 13960 ;; This function uses a non-reentrant model
 13961 ;;
 13962                           
 13963                           
 13964                           ;psect for function _RC500Config
 13965  171B                     _RC500Config:	
 13966                           
 13967                           ;mfrc500.c: 375: ret_status = PcdReset();
 13968                           
 13969                           ;incstack = 0
 13970                           ; Regs used in _RC500Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13971  171B  3192  2270  3194   	fcall	_PcdReset
 13972  171E  00FC               	movwf	RC500Config@ret_status
 13973                           
 13974                           ;mfrc500.c: 376: if (ret_status == 0)
 13975  171F  08FC               	movf	RC500Config@ret_status,f
 13976  1720  1D03               	skipz
 13977  1721  0008               	return
 13978                           
 13979                           ;mfrc500.c: 377: {
 13980                           ;mfrc500.c: 378: WriteRC(0x1F, 0x80);
 13981  1722  3080               	movlw	128
 13982  1723  00F2               	movwf	WriteRC@data
 13983  1724  301F               	movlw	31
 13984  1725  2767  3194         	fcall	_WriteRC
 13985                           
 13986                           ;mfrc500.c: 379: for (i = 0; i < 205; i++);
 13987  1727  01FD               	clrf	RC500Config@i
 13988  1728                     l7028:	
 13989  1728  30CD               	movlw	205
 13990  1729  0AFD               	incf	RC500Config@i,f
 13991  172A  027D               	subwf	RC500Config@i,w
 13992  172B  1C03               	skipc
 13993  172C  2F28               	goto	l7028
 13994                           
 13995                           ;mfrc500.c: 380: {
 13996                           ;mfrc500.c: 381: WriteRC(0x1F, 0xc0);
 13997  172D  30C0               	movlw	192
 13998  172E  00F2               	movwf	WriteRC@data
 13999  172F  301F               	movlw	31
 14000  1730  2767  3194         	fcall	_WriteRC
 14001                           
 14002                           ;mfrc500.c: 382: }
 14003                           ;mfrc500.c: 383: for (i = 0; i < 105; i++);
 14004  1732  01FD               	clrf	RC500Config@i
 14005  1733                     l7040:	
 14006  1733  3069               	movlw	105
 14007  1734  0AFD               	incf	RC500Config@i,f
 14008  1735  027D               	subwf	RC500Config@i,w
 14009  1736  1C03               	skipc
 14010  1737  2F33               	goto	l7040
 14011                           
 14012                           ;mfrc500.c: 384: {
 14013                           ;mfrc500.c: 385: ClearBitMask(0x1F, 0x40);
 14014  1738  3040               	movlw	64
 14015  1739  00F5               	movwf	ClearBitMask@mask
 14016  173A  301F               	movlw	31
 14017  173B  2787  3194         	fcall	_ClearBitMask
 14018                           
 14019                           ;mfrc500.c: 386: }
 14020                           ;mfrc500.c: 387: WriteRC(0x1B, 0xAD);
 14021  173D  30AD               	movlw	173
 14022  173E  00F2               	movwf	WriteRC@data
 14023  173F  301B               	movlw	27
 14024  1740  2767  3194         	fcall	_WriteRC
 14025                           
 14026                           ;mfrc500.c: 388: WriteRC(0x1C, 0xff);
 14027  1742  30FF               	movlw	255
 14028  1743  00F2               	movwf	WriteRC@data
 14029  1744  301C               	movlw	28
 14030  1745  2767  3194         	fcall	_WriteRC
 14031                           
 14032                           ;mfrc500.c: 389: WriteRC(0x19, 0x73);
 14033  1747  3073               	movlw	115
 14034  1748  00F2               	movwf	WriteRC@data
 14035  1749  3019               	movlw	25
 14036  174A  2767  3194         	fcall	_WriteRC
 14037                           
 14038                           ;mfrc500.c: 390: WriteRC(0x1E, 0x81);
 14039  174C  3081               	movlw	129
 14040  174D  00F2               	movwf	WriteRC@data
 14041  174E  301E               	movlw	30
 14042  174F  2767  3194         	fcall	_WriteRC
 14043                           
 14044                           ;mfrc500.c: 391: WriteRC(0x29, 0x4);
 14045  1751  3004               	movlw	4
 14046  1752  00F2               	movwf	WriteRC@data
 14047  1753  3029               	movlw	41
 14048  1754  2767  3194         	fcall	_WriteRC
 14049                           
 14050                           ;mfrc500.c: 392: WriteRC(0x2B, 0x02);
 14051  1756  3002               	movlw	2
 14052  1757  00F2               	movwf	WriteRC@data
 14053  1758  302B               	movlw	43
 14054  1759  2767  3194         	fcall	_WriteRC
 14055                           
 14056                           ;mfrc500.c: 393: PcdSetTmo(1);
 14057  175B  01F5               	clrf	PcdSetTmo@tmoLength
 14058  175C  0AF5               	incf	PcdSetTmo@tmoLength,f
 14059  175D  01F6               	clrf	PcdSetTmo@tmoLength+1
 14060  175E  25D1  3194         	fcall	_PcdSetTmo
 14061                           
 14062                           ;mfrc500.c: 394: WriteRC(0x2D, 0x3);
 14063  1760  3003               	movlw	3
 14064  1761  00F2               	movwf	WriteRC@data
 14065  1762  302D               	movlw	45
 14066  1763  2767  3194         	fcall	_WriteRC
 14067                           
 14068                           ;mfrc500.c: 395: PcdRfReset(1);
 14069  1765  3001               	movlw	1
 14070  1766  2FD1               	ljmp	_PcdRfReset
 14071  1767                     __end_of_RC500Config:	
 14072  1767                     __ptext50:	
 14073 ;; *************** function _WriteRC *****************
 14074 ;; Defined at:
 14075 ;;		line 122 in file "../../source/driver/mfrc500.c"
 14076 ;; Parameters:    Size  Location     Type
 14077 ;;  address         1    wreg     unsigned char 
 14078 ;;  data            1    2[COMMON] unsigned char 
 14079 ;; Auto vars:     Size  Location     Type
 14080 ;;  address         1    4[COMMON] unsigned char 
 14081 ;; Return value:  Size  Location     Type
 14082 ;;		None               void
 14083 ;; Registers used:
 14084 ;;		wreg, status,2, status,0, pclath, cstack
 14085 ;; Tracked objects:
 14086 ;;		On entry : 1C/2
 14087 ;;		On exit  : 1F/1
 14088 ;;		Unchanged: 0/0
 14089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14090 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14092 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14093 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;Total ram usage:        3 bytes
 14095 ;; Hardware stack levels used:    1
 14096 ;; Hardware stack levels required when called:    2
 14097 ;; This function calls:
 14098 ;;		_PutRC500
 14099 ;; This function is called by:
 14100 ;;		_SetBitMask
 14101 ;;		_ClearBitMask
 14102 ;;		_PcdSetTmo
 14103 ;;		_RC500Config
 14104 ;;		_RC500OutSelect
 14105 ;;		_PcdSingleResponseCmd
 14106 ;;		_Mf500PiccCommonRequest
 14107 ;;		_Mf500PiccCascAnticoll
 14108 ;;		_Mf500PiccCascSelect
 14109 ;;		_Mf500PiccRead
 14110 ;;		_Mf500PiccWrite
 14111 ;; This function uses a non-reentrant model
 14112 ;;
 14113                           
 14114                           
 14115                           ;psect for function _WriteRC
 14116  1767                     _WriteRC:	
 14117                           
 14118                           ;incstack = 0
 14119                           ; Regs used in _WriteRC: [wreg+status,2+status,0+pclath+cstack]
 14120                           ;WriteRC@address stored from wreg
 14121  1767  00F4               	movwf	WriteRC@address
 14122                           
 14123                           ;mfrc500.c: 127: PutRC500(0x00, (0x80 | (address >> 0x03)));
 14124  1768  00F3               	movwf	??_WriteRC
 14125  1769  36F3               	lsrf	??_WriteRC,f
 14126  176A  36F3               	lsrf	??_WriteRC,f
 14127  176B  36F3               	lsrf	??_WriteRC,f
 14128  176C  0873               	movf	??_WriteRC,w
 14129  176D  3880               	iorlw	128
 14130  176E  00F0               	movwf	PutRC500@data
 14131  176F  3000               	movlw	0
 14132  1770  3193  23CC  3194   	fcall	_PutRC500
 14133                           
 14134                           ;mfrc500.c: 128: PutRC500(address, data);
 14135  1773  0872               	movf	WriteRC@data,w
 14136  1774  00F0               	movwf	PutRC500@data
 14137  1775  0874               	movf	WriteRC@address,w
 14138  1776  3193  2BCC         	ljmp	_PutRC500
 14139  1778                     __end_of_WriteRC:	
 14140  1778                     __ptext47:	
 14141 ;; *************** function _ReadRC *****************
 14142 ;; Defined at:
 14143 ;;		line 132 in file "../../source/driver/mfrc500.c"
 14144 ;; Parameters:    Size  Location     Type
 14145 ;;  address         1    wreg     unsigned char 
 14146 ;; Auto vars:     Size  Location     Type
 14147 ;;  address         1    3[COMMON] unsigned char 
 14148 ;; Return value:  Size  Location     Type
 14149 ;;                  1    wreg      unsigned char 
 14150 ;; Registers used:
 14151 ;;		wreg, status,2, status,0, pclath, cstack
 14152 ;; Tracked objects:
 14153 ;;		On entry : 1C/1
 14154 ;;		On exit  : 1F/2
 14155 ;;		Unchanged: 0/0
 14156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14159 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;Total ram usage:        2 bytes
 14162 ;; Hardware stack levels used:    1
 14163 ;; Hardware stack levels required when called:    2
 14164 ;; This function calls:
 14165 ;;		_GetRC500
 14166 ;;		_PutRC500
 14167 ;; This function is called by:
 14168 ;;		_SetBitMask
 14169 ;;		_ClearBitMask
 14170 ;;		_PcdSingleResponseCmd
 14171 ;;		_Mf500PiccAuthState
 14172 ;; This function uses a non-reentrant model
 14173 ;;
 14174                           
 14175                           
 14176                           ;psect for function _ReadRC
 14177  1778                     _ReadRC:	
 14178                           
 14179                           ;incstack = 0
 14180                           ; Regs used in _ReadRC: [wreg+status,2+status,0+pclath+cstack]
 14181                           ;ReadRC@address stored from wreg
 14182  1778  00F3               	movwf	ReadRC@address
 14183                           
 14184                           ;mfrc500.c: 136: PutRC500(0x00, (0x80 | (address >> 0x03)));
 14185  1779  00F2               	movwf	??_ReadRC
 14186  177A  36F2               	lsrf	??_ReadRC,f
 14187  177B  36F2               	lsrf	??_ReadRC,f
 14188  177C  36F2               	lsrf	??_ReadRC,f
 14189  177D  0872               	movf	??_ReadRC,w
 14190  177E  3880               	iorlw	128
 14191  177F  00F0               	movwf	PutRC500@data
 14192  1780  3000               	movlw	0
 14193  1781  3193  23CC  3194   	fcall	_PutRC500
 14194                           
 14195                           ;mfrc500.c: 137: return GetRC500(address);
 14196  1784  0873               	movf	ReadRC@address,w
 14197  1785  3193  2BE5         	ljmp	_GetRC500
 14198  1787                     __end_of_ReadRC:	
 14199  1787                     __ptext37:	
 14200 ;; *************** function _ClearBitMask *****************
 14201 ;; Defined at:
 14202 ;;		line 153 in file "../../source/driver/mfrc500.c"
 14203 ;; Parameters:    Size  Location     Type
 14204 ;;  reg             1    wreg     unsigned char 
 14205 ;;  mask            1    5[COMMON] unsigned char 
 14206 ;; Auto vars:     Size  Location     Type
 14207 ;;  reg             1    7[COMMON] unsigned char 
 14208 ;;  tmp             1    6[COMMON] unsigned char 
 14209 ;; Return value:  Size  Location     Type
 14210 ;;		None               void
 14211 ;; Registers used:
 14212 ;;		wreg, status,2, status,0, pclath, cstack
 14213 ;; Tracked objects:
 14214 ;;		On entry : 1C/1
 14215 ;;		On exit  : 1F/1
 14216 ;;		Unchanged: 0/0
 14217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14218 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14219 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;Total ram usage:        3 bytes
 14223 ;; Hardware stack levels used:    1
 14224 ;; Hardware stack levels required when called:    3
 14225 ;; This function calls:
 14226 ;;		_ReadRC
 14227 ;;		_WriteRC
 14228 ;; This function is called by:
 14229 ;;		_PcdRfReset
 14230 ;;		_RC500Config
 14231 ;;		_Mf500PiccCascAnticoll
 14232 ;;		_Mf500PiccCascSelect
 14233 ;; This function uses a non-reentrant model
 14234 ;;
 14235                           
 14236                           
 14237                           ;psect for function _ClearBitMask
 14238  1787                     _ClearBitMask:	
 14239                           
 14240                           ;incstack = 0
 14241                           ; Regs used in _ClearBitMask: [wreg+status,2+status,0+pclath+cstack]
 14242                           ;ClearBitMask@reg stored from wreg
 14243  1787  00F7               	movwf	ClearBitMask@reg
 14244                           
 14245                           ;mfrc500.c: 160: tmp = ReadRC(reg);
 14246  1788  2778  3194         	fcall	_ReadRC
 14247  178A  00F6               	movwf	ClearBitMask@tmp
 14248                           
 14249                           ;mfrc500.c: 161: WriteRC(reg, tmp & ~mask);
 14250  178B  0975               	comf	ClearBitMask@mask,w
 14251  178C  00F2               	movwf	WriteRC@data
 14252  178D  0876               	movf	ClearBitMask@tmp,w
 14253  178E  05F2               	andwf	WriteRC@data,f
 14254  178F  0877               	movf	ClearBitMask@reg,w
 14255  1790  2F67               	ljmp	_WriteRC
 14256  1791                     __end_of_ClearBitMask:	
 14257  1791                     __ptext33:	
 14258 ;; *************** function ___awdiv *****************
 14259 ;; Defined at:
 14260 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\awdiv.c"
 14261 ;; Parameters:    Size  Location     Type
 14262 ;;  divisor         2    0[COMMON] int 
 14263 ;;  dividend        2    2[COMMON] int 
 14264 ;; Auto vars:     Size  Location     Type
 14265 ;;  quotient        2    6[COMMON] int 
 14266 ;;  sign            1    5[COMMON] unsigned char 
 14267 ;;  counter         1    4[COMMON] unsigned char 
 14268 ;; Return value:  Size  Location     Type
 14269 ;;                  2    0[COMMON] int 
 14270 ;; Registers used:
 14271 ;;		wreg, status,2, status,0
 14272 ;; Tracked objects:
 14273 ;;		On entry : 1F/0
 14274 ;;		On exit  : 1F/0
 14275 ;;		Unchanged: 1F/0
 14276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14277 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14278 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14280 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;Total ram usage:        8 bytes
 14282 ;; Hardware stack levels used:    1
 14283 ;; Hardware stack levels required when called:    1
 14284 ;; This function calls:
 14285 ;;		Nothing
 14286 ;; This function is called by:
 14287 ;;		_Mf500PiccCascAnticoll
 14288 ;; This function uses a non-reentrant model
 14289 ;;
 14290                           
 14291                           
 14292                           ;psect for function ___awdiv
 14293  1791                     ___awdiv:	
 14294                           
 14295                           ;incstack = 0
 14296                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14297  1791  01F5               	clrf	___awdiv@sign
 14298  1792  1FF1               	btfss	___awdiv@divisor+1,7
 14299  1793  2F9B               	goto	l5072
 14300  1794  09F0               	comf	___awdiv@divisor,f
 14301  1795  09F1               	comf	___awdiv@divisor+1,f
 14302  1796  0AF0               	incf	___awdiv@divisor,f
 14303  1797  1903               	skipnz
 14304  1798  0AF1               	incf	___awdiv@divisor+1,f
 14305  1799  01F5               	clrf	___awdiv@sign
 14306  179A  0AF5               	incf	___awdiv@sign,f
 14307  179B                     l5072:	
 14308  179B  1FF3               	btfss	___awdiv@dividend+1,7
 14309  179C  2FA4               	goto	l5078
 14310  179D  09F2               	comf	___awdiv@dividend,f
 14311  179E  09F3               	comf	___awdiv@dividend+1,f
 14312  179F  0AF2               	incf	___awdiv@dividend,f
 14313  17A0  1903               	skipnz
 14314  17A1  0AF3               	incf	___awdiv@dividend+1,f
 14315  17A2  3001               	movlw	1
 14316  17A3  06F5               	xorwf	___awdiv@sign,f
 14317  17A4                     l5078:	
 14318  17A4  01F6               	clrf	___awdiv@quotient
 14319  17A5  01F7               	clrf	___awdiv@quotient+1
 14320  17A6  0871               	movf	___awdiv@divisor+1,w
 14321  17A7  0470               	iorwf	___awdiv@divisor,w
 14322  17A8  1903               	skipnz
 14323  17A9  2FC4               	goto	l5100
 14324  17AA  01F4               	clrf	___awdiv@counter
 14325  17AB                     L11:	
 14326  17AB  0AF4               	incf	___awdiv@counter,f
 14327  17AC  1BF1               	btfsc	___awdiv@divisor+1,7
 14328  17AD  2FB1               	goto	l5088
 14329  17AE  35F0               	lslf	___awdiv@divisor,f
 14330  17AF  0DF1               	rlf	___awdiv@divisor+1,f
 14331  17B0  2FAB               	goto	L11
 14332  17B1                     l5088:	
 14333  17B1  35F6               	lslf	___awdiv@quotient,f
 14334  17B2  0DF7               	rlf	___awdiv@quotient+1,f
 14335  17B3  0871               	movf	___awdiv@divisor+1,w
 14336  17B4  0273               	subwf	___awdiv@dividend+1,w
 14337  17B5  1D03               	skipz
 14338  17B6  2FB9               	goto	u4585
 14339  17B7  0870               	movf	___awdiv@divisor,w
 14340  17B8  0272               	subwf	___awdiv@dividend,w
 14341  17B9                     u4585:	
 14342  17B9  1C03               	skipc
 14343  17BA  2FC0               	goto	l5096
 14344  17BB  0870               	movf	___awdiv@divisor,w
 14345  17BC  02F2               	subwf	___awdiv@dividend,f
 14346  17BD  0871               	movf	___awdiv@divisor+1,w
 14347  17BE  3BF3               	subwfb	___awdiv@dividend+1,f
 14348  17BF  1476               	bsf	___awdiv@quotient,0
 14349  17C0                     l5096:	
 14350  17C0  36F1               	lsrf	___awdiv@divisor+1,f
 14351  17C1  0CF0               	rrf	___awdiv@divisor,f
 14352  17C2  0BF4               	decfsz	___awdiv@counter,f
 14353  17C3  2FB1               	goto	l5088
 14354  17C4                     l5100:	
 14355  17C4  0875               	movf	___awdiv@sign,w
 14356  17C5  1903               	btfsc	3,2
 14357  17C6  2FCC               	goto	l5104
 14358  17C7  09F6               	comf	___awdiv@quotient,f
 14359  17C8  09F7               	comf	___awdiv@quotient+1,f
 14360  17C9  0AF6               	incf	___awdiv@quotient,f
 14361  17CA  1903               	skipnz
 14362  17CB  0AF7               	incf	___awdiv@quotient+1,f
 14363  17CC                     l5104:	
 14364  17CC  0877               	movf	___awdiv@quotient+1,w
 14365  17CD  00F1               	movwf	?___awdiv+1
 14366  17CE  0876               	movf	___awdiv@quotient,w
 14367  17CF  00F0               	movwf	?___awdiv
 14368  17D0  0008               	return
 14369  17D1                     __end_of___awdiv:	
 14370  17D1                     __ptext15:	
 14371 ;; *************** function _PcdRfReset *****************
 14372 ;; Defined at:
 14373 ;;		line 203 in file "../../source/driver/mfrc500.c"
 14374 ;; Parameters:    Size  Location     Type
 14375 ;;  ms              1    wreg     unsigned char 
 14376 ;; Auto vars:     Size  Location     Type
 14377 ;;  ms              1    9[COMMON] unsigned char 
 14378 ;;  i               2   10[COMMON] unsigned int 
 14379 ;;  ret_status      1    0        unsigned char 
 14380 ;; Return value:  Size  Location     Type
 14381 ;;                  1    wreg      unsigned char 
 14382 ;; Registers used:
 14383 ;;		wreg, status,2, status,0, pclath, cstack
 14384 ;; Tracked objects:
 14385 ;;		On entry : 1F/1
 14386 ;;		On exit  : 1F/1
 14387 ;;		Unchanged: 0/0
 14388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14390 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14392 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14393 ;;Total ram usage:        4 bytes
 14394 ;; Hardware stack levels used:    1
 14395 ;; Hardware stack levels required when called:    4
 14396 ;; This function calls:
 14397 ;;		_ClearBitMask
 14398 ;;		_SetBitMask
 14399 ;; This function is called by:
 14400 ;;		_RC500Config
 14401 ;; This function uses a non-reentrant model
 14402 ;;
 14403                           
 14404                           
 14405                           ;psect for function _PcdRfReset
 14406  17D1                     _PcdRfReset:	
 14407                           
 14408                           ;incstack = 0
 14409                           ; Regs used in _PcdRfReset: [wreg+status,2+status,0+pclath+cstack]
 14410                           ;PcdRfReset@ms stored from wreg
 14411  17D1  00F9               	movwf	PcdRfReset@ms
 14412                           
 14413                           ;mfrc500.c: 208: unsigned int i;
 14414                           ;mfrc500.c: 210: ClearBitMask(0x11, 0x03);
 14415  17D2  3003               	movlw	3
 14416  17D3  00F5               	movwf	ClearBitMask@mask
 14417  17D4  3011               	movlw	17
 14418  17D5  2787  3194         	fcall	_ClearBitMask
 14419                           
 14420                           ;mfrc500.c: 211: if (ms > 0)
 14421  17D7  0879               	movf	PcdRfReset@ms,w
 14422  17D8  1903               	btfsc	3,2
 14423  17D9  0008               	return
 14424                           
 14425                           ;mfrc500.c: 212: {
 14426                           ;mfrc500.c: 213: for (i = 0; i < 1050; i++);
 14427  17DA  01FA               	clrf	PcdRfReset@i
 14428  17DB  01FB               	clrf	PcdRfReset@i+1
 14429  17DC                     l6550:	
 14430  17DC  0AFA               	incf	PcdRfReset@i,f
 14431  17DD  1903               	skipnz
 14432  17DE  0AFB               	incf	PcdRfReset@i+1,f
 14433  17DF  3004               	movlw	4
 14434  17E0  027B               	subwf	PcdRfReset@i+1,w
 14435  17E1  301A               	movlw	26
 14436  17E2  1903               	skipnz
 14437  17E3  027A               	subwf	PcdRfReset@i,w
 14438  17E4  1C03               	skipc
 14439  17E5  2FDC               	goto	l6550
 14440                           
 14441                           ;mfrc500.c: 214: SetBitMask(0x11, 0x03);
 14442  17E6  3003               	movlw	3
 14443  17E7  00F5               	movwf	SetBitMask@mask
 14444  17E8  3011               	movlw	17
 14445  17E9  318F  2FB1         	ljmp	_SetBitMask
 14446  17EB                     __end_of_PcdRfReset:	
 14447  17EB                     PL10:	
 14448  17EB  087B               	movf	Mf500PiccCascAnticoll@bcnt,w
 14449  17EC  0020               	movlb	0	; select bank0
 14450  17ED  00AA               	movwf	??_Mf500PiccCascAnticoll
 14451  17EE  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 14452  17EF  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 14453  17F0  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 14454  17F1  082A               	movf	??_Mf500PiccCascAnticoll,w
 14455  17F2  0008               	return
 14456  17F3                     __end_ofPL10:	
 14457  17F3                     PL18:	
 14458  17F3  0E89               	swapf	9,f
 14459  17F4  390F               	andlw	15
 14460  17F5  3AFF               	xorlw	255
 14461  17F6  3E01               	addlw	1
 14462  17F7  0020               	movlb	0	; select bank0
 14463  17F8  00E9               	movwf	_MInfo+5
 14464  17F9  0008               	return
 14465  17FA                     __end_ofPL18:	
 14466  17FA                     PL20:	
 14467  17FA  0084               	movwf	4
 14468  17FB  0185               	clrf	5
 14469  17FC  0800               	movf	0,w
 14470  17FD  0081               	movwf	1
 14471  17FE  0ABC               	incf	Mf500PiccCascAnticoll@i,f
 14472  17FF  0008               	return
 14473  1800                     __end_ofPL20:	
 14474                           
 14475                           	psect	text25
 14476  0786                     __ptext25:	
 14477 ;; *************** function _Mf500PiccRead *****************
 14478 ;; Defined at:
 14479 ;;		line 895 in file "../../source/driver/mfrc500.c"
 14480 ;; Parameters:    Size  Location     Type
 14481 ;;  addr            1    wreg     unsigned char 
 14482 ;;  data1           1   11[COMMON] PTR unsigned char 
 14483 ;;		 -> read_card_content@data(16), 
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;  addr            1   10[BANK0 ] unsigned char 
 14486 ;;  i               1   12[BANK0 ] unsigned char 
 14487 ;;  ret_status      1   11[BANK0 ] char 
 14488 ;; Return value:  Size  Location     Type
 14489 ;;                  1    wreg      unsigned char 
 14490 ;; Registers used:
 14491 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14492 ;; Tracked objects:
 14493 ;;		On entry : 1F/0
 14494 ;;		On exit  : 1F/0
 14495 ;;		Unchanged: 0/0
 14496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14497 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14500 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14501 ;;Total ram usage:        5 bytes
 14502 ;; Hardware stack levels used:    1
 14503 ;; Hardware stack levels required when called:    6
 14504 ;; This function calls:
 14505 ;;		_FlushFIFO
 14506 ;;		_PcdSetTmo
 14507 ;;		_PcdSingleResponseCmd
 14508 ;;		_WriteRC
 14509 ;;		_memcpy
 14510 ;; This function is called by:
 14511 ;;		_read_card_content
 14512 ;; This function uses a non-reentrant model
 14513 ;;
 14514                           
 14515                           
 14516                           ;psect for function _Mf500PiccRead
 14517  0786                     _Mf500PiccRead:	
 14518                           
 14519                           ;incstack = 0
 14520                           ; Regs used in _Mf500PiccRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14521                           ;Mf500PiccRead@addr stored from wreg
 14522  0786  00AA               	movwf	Mf500PiccRead@addr
 14523                           
 14524                           ;mfrc500.c: 904: FlushFIFO();
 14525  0787  318E  26F7  3187   	fcall	_FlushFIFO
 14526                           
 14527                           ;mfrc500.c: 905: PcdSetTmo(4);
 14528  078A  3004               	movlw	4
 14529  078B  00F5               	movwf	PcdSetTmo@tmoLength
 14530  078C  01F6               	clrf	PcdSetTmo@tmoLength+1
 14531  078D  3195  25D1  3187   	fcall	_PcdSetTmo
 14532                           
 14533                           ;mfrc500.c: 906: WriteRC(0x22, 0xF);
 14534  0790  300F               	movlw	15
 14535  0791  00F2               	movwf	WriteRC@data
 14536  0792  3022               	movlw	34
 14537  0793  3197  2767  3187   	fcall	_WriteRC
 14538                           
 14539                           ;mfrc500.c: 907: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 14540  0796  0020               	movlb	0	; select bank0
 14541  0797  3030               	movlw	48
 14542  0798  318F  27BA  3187   	fcall	PL2	;call to abstracted procedure
 14543                           
 14544                           ;mfrc500.c: 908: MSndBuffer[0] = 0x30;
 14545  079B  0021               	movlb	1	; select bank1
 14546  079C  00B6               	movwf	_MSndBuffer^(0+128)
 14547                           
 14548                           ;mfrc500.c: 909: MSndBuffer[1] = addr;
 14549  079D  0020               	movlb	0	; select bank0
 14550  079E  082A               	movf	Mf500PiccRead@addr,w
 14551  079F  0021               	movlb	1	; select bank1
 14552  07A0  00B7               	movwf	(_MSndBuffer^(0+128)+1)
 14553                           
 14554                           ;mfrc500.c: 910: MInfo.nBytesToSend = 2;
 14555  07A1  3002               	movlw	2
 14556  07A2  0020               	movlb	0	; select bank0
 14557  07A3  00E7               	movwf	_MInfo+3
 14558                           
 14559                           ;mfrc500.c: 911: ret_status = PcdSingleResponseCmd(0x1e);
 14560  07A4  301E               	movlw	30
 14561  07A5  3196  2612  3187   	fcall	_PcdSingleResponseCmd
 14562  07A8  00AB               	movwf	Mf500PiccRead@ret_status
 14563                           
 14564                           ;mfrc500.c: 912: if (ret_status != 0)
 14565  07A9  082B               	movf	Mf500PiccRead@ret_status,w
 14566  07AA  1903               	btfsc	3,2
 14567  07AB  2FC5               	goto	l6280
 14568                           
 14569                           ;mfrc500.c: 913: {
 14570                           ;mfrc500.c: 914: if (ret_status != (-1))
 14571  07AC  0A2B               	incf	Mf500PiccRead@ret_status,w
 14572  07AD  1903               	skipnz
 14573  07AE  2FBF               	goto	l6268
 14574                           
 14575                           ;mfrc500.c: 915: {
 14576                           ;mfrc500.c: 916: if (MInfo.nBitsReceived == 4)
 14577  07AF  0869               	movf	_MInfo+5,w
 14578  07B0  3A04               	xorlw	4
 14579  07B1  1D03               	skipz
 14580  07B2  2FBF               	goto	l6268
 14581                           
 14582                           ;mfrc500.c: 917: {
 14583                           ;mfrc500.c: 918: MRcvBuffer[0] &= 0x0f;
 14584  07B3  300F               	movlw	15
 14585  07B4  0021               	movlb	1	; select bank1
 14586  07B5  05A6               	andwf	_MRcvBuffer^(0+128),f
 14587                           
 14588                           ;mfrc500.c: 919: if ((MRcvBuffer[0] & 0x0a) == 0)
 14589  07B6  0826               	movf	_MRcvBuffer^(0+128),w
 14590  07B7  390A               	andlw	10
 14591  07B8  1D03               	btfss	3,2
 14592  07B9  2FBC               	goto	l6266
 14593                           
 14594                           ;mfrc500.c: 920: {
 14595                           ;mfrc500.c: 921: ret_status = (-10);
 14596  07BA  30F6               	movlw	-10
 14597  07BB  2FBD               	goto	L8
 14598  07BC                     l6266:	
 14599                           ;mfrc500.c: 922: }
 14600                           
 14601                           
 14602                           ;mfrc500.c: 923: else
 14603                           ;mfrc500.c: 924: {
 14604                           ;mfrc500.c: 925: ret_status = (-6);
 14605  07BC  30FA               	movlw	-6
 14606  07BD                     L8:	
 14607  07BD  0020               	movlb	0	; select bank0
 14608  07BE  00AB               	movwf	Mf500PiccRead@ret_status
 14609  07BF                     l6268:	
 14610                           
 14611                           ;mfrc500.c: 926: }
 14612                           ;mfrc500.c: 927: }
 14613                           ;mfrc500.c: 928: }
 14614                           ;mfrc500.c: 929: for (i = 0; i < 16; i++)
 14615  07BF  01AC               	clrf	Mf500PiccRead@i
 14616  07C0                     l6274:	
 14617                           
 14618                           ;mfrc500.c: 930: {
 14619                           ;mfrc500.c: 931: data1[i] = 0;
 14620  07C0  27E4  3187         	fcall	PL6	;call to abstracted procedure
 14621  07C2  1803               	btfsc	3,0
 14622  07C3  2FDC               	goto	l6298
 14623  07C4  2FC0               	goto	l6274
 14624  07C5                     l6280:	
 14625                           
 14626                           ;mfrc500.c: 934: else
 14627                           ;mfrc500.c: 935: {
 14628                           ;mfrc500.c: 937: if (MInfo.nBytesReceived != 16)
 14629  07C5  0868               	movf	_MInfo+4,w
 14630  07C6  3A10               	xorlw	16
 14631  07C7  1903               	skipnz
 14632  07C8  2FD1               	goto	l6296
 14633                           
 14634                           ;mfrc500.c: 938: {
 14635                           ;mfrc500.c: 939: ret_status = (-12);
 14636  07C9  30F4               	movlw	-12
 14637  07CA  00AB               	movwf	Mf500PiccRead@ret_status
 14638                           
 14639                           ;mfrc500.c: 940: for (i = 0; i < 16; i++)
 14640  07CB  01AC               	clrf	Mf500PiccRead@i
 14641  07CC                     l6290:	
 14642                           
 14643                           ;mfrc500.c: 941: {
 14644                           ;mfrc500.c: 942: data1[i] = 0x00;
 14645  07CC  27E4  3187         	fcall	PL6	;call to abstracted procedure
 14646  07CE  1803               	btfsc	3,0
 14647  07CF  2FDC               	goto	l6298
 14648  07D0  2FCC               	goto	l6290
 14649  07D1                     l6296:	
 14650                           
 14651                           ;mfrc500.c: 945: else
 14652                           ;mfrc500.c: 946: {
 14653                           ;mfrc500.c: 947: memcpy(data1, MRcvBuffer, 16);
 14654  07D1  30A6               	movlw	low _MRcvBuffer
 14655  07D2  00F0               	movwf	memcpy@s1
 14656  07D3  3000               	movlw	high _MRcvBuffer
 14657  07D4  00F1               	movwf	memcpy@s1+1
 14658  07D5  3010               	movlw	16
 14659  07D6  00F2               	movwf	memcpy@n
 14660  07D7  01F3               	clrf	memcpy@n+1
 14661  07D8  087B               	movf	Mf500PiccRead@data1,w
 14662  07D9  318E  26C3  3187   	fcall	_memcpy
 14663  07DC                     l6298:	
 14664                           
 14665                           ;mfrc500.c: 948: }
 14666                           ;mfrc500.c: 949: }
 14667                           ;mfrc500.c: 950: PcdSetTmo(1);
 14668  07DC  01F5               	clrf	PcdSetTmo@tmoLength
 14669  07DD  0AF5               	incf	PcdSetTmo@tmoLength,f
 14670  07DE  01F6               	clrf	PcdSetTmo@tmoLength+1
 14671  07DF  3195  25D1         	fcall	_PcdSetTmo
 14672                           
 14673                           ;mfrc500.c: 952: return ret_status;
 14674  07E1  0020               	movlb	0	; select bank0
 14675  07E2  082B               	movf	Mf500PiccRead@ret_status,w
 14676  07E3  0008               	return
 14677  07E4                     __end_of_Mf500PiccRead:	
 14678  07E4                     PL6:	
 14679  07E4  082C               	movf	Mf500PiccRead@i,w
 14680  07E5  077B               	addwf	Mf500PiccRead@data1,w
 14681  07E6  00FC               	movwf	??_Mf500PiccRead
 14682  07E7  0086               	movwf	6
 14683  07E8  3010               	movlw	16
 14684  07E9  0187               	clrf	7
 14685  07EA  0181               	clrf	1
 14686  07EB  0AAC               	incf	Mf500PiccRead@i,f
 14687  07EC  022C               	subwf	Mf500PiccRead@i,w
 14688  07ED  0008               	return
 14689  07EE                     __end_ofPL6:	
 14690                           
 14691                           	psect	swtext1
 14692  07EE                     __pswtext1:	
 14693  07EE                     S7644:	
 14694  07EE  318F  2FE9         	ljmp	l666
 14695  07F0  318F  2FE9         	ljmp	l666
 14696  07F2  318F  2FE9         	ljmp	l666
 14697  07F4  318F  2FE9         	ljmp	l666
 14698  07F6  318F  2FFF         	ljmp	l676
 14699  07F8  318F  2FFF         	ljmp	l676
 14700  07FA  318F  2FFF         	ljmp	l676
 14701  07FC  318F  2FFF         	ljmp	l676
 14702                           
 14703                           	psect	text30
 14704  1027                     __ptext30:	
 14705 ;; *************** function _Mf500PiccCommonRequest *****************
 14706 ;; Defined at:
 14707 ;;		line 574 in file "../../source/driver/mfrc500.c"
 14708 ;; Parameters:    Size  Location     Type
 14709 ;;  req_code        1    wreg     unsigned char 
 14710 ;;  atq             1   11[COMMON] PTR unsigned char 
 14711 ;;		 -> tt1(2), 
 14712 ;; Auto vars:     Size  Location     Type
 14713 ;;  req_code        1   12[COMMON] unsigned char 
 14714 ;;  ret_status      1   13[COMMON] unsigned char 
 14715 ;; Return value:  Size  Location     Type
 14716 ;;                  1    wreg      unsigned char 
 14717 ;; Registers used:
 14718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14719 ;; Tracked objects:
 14720 ;;		On entry : 1F/0
 14721 ;;		On exit  : 1E/0
 14722 ;;		Unchanged: 0/0
 14723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14724 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14725 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14727 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14728 ;;Total ram usage:        3 bytes
 14729 ;; Hardware stack levels used:    1
 14730 ;; Hardware stack levels required when called:    6
 14731 ;; This function calls:
 14732 ;;		_PcdSetTmo
 14733 ;;		_PcdSingleResponseCmd
 14734 ;;		_WriteRC
 14735 ;;		_memcpy
 14736 ;; This function is called by:
 14737 ;;		_Mf500PiccRequest
 14738 ;; This function uses a non-reentrant model
 14739 ;;
 14740                           
 14741                           
 14742                           ;psect for function _Mf500PiccCommonRequest
 14743  1027                     _Mf500PiccCommonRequest:	
 14744                           
 14745                           ;incstack = 0
 14746                           ; Regs used in _Mf500PiccCommonRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14747                           ;Mf500PiccCommonRequest@req_code stored from wreg
 14748  1027  00FC               	movwf	Mf500PiccCommonRequest@req_code
 14749                           
 14750                           ;mfrc500.c: 581: PcdSetTmo(106);
 14751  1028  306A               	movlw	106
 14752  1029  00F5               	movwf	PcdSetTmo@tmoLength
 14753  102A  01F6               	clrf	PcdSetTmo@tmoLength+1
 14754  102B  3195  25D1  3190   	fcall	_PcdSetTmo
 14755                           
 14756                           ;mfrc500.c: 583: WriteRC(0x22, 0x03);
 14757  102E  3003               	movlw	3
 14758  102F  00F2               	movwf	WriteRC@data
 14759  1030  3022               	movlw	34
 14760  1031  3197  2767  3190   	fcall	_WriteRC
 14761                           
 14762                           ;mfrc500.c: 584: WriteRC(0x09, 0x08);
 14763  1034  3008               	movlw	8
 14764  1035  00F2               	movwf	WriteRC@data
 14765  1036  3009               	movlw	9
 14766  1037  3197  2767  3190   	fcall	_WriteRC
 14767                           
 14768                           ;mfrc500.c: 586: WriteRC(0x0F, 0x07);
 14769  103A  3007               	movlw	7
 14770  103B  00F2               	movwf	WriteRC@data
 14771  103C  300F               	movlw	15
 14772  103D  3197  2767  3190   	fcall	_WriteRC
 14773                           
 14774                           ;mfrc500.c: 588: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 14775  1040  0020               	movlb	0	; select bank0
 14776  1041  318F  27BA  3190   	fcall	PL2	;call to abstracted procedure
 14777                           
 14778                           ;mfrc500.c: 590: MSndBuffer[0] = req_code;
 14779  1044  087C               	movf	Mf500PiccCommonRequest@req_code,w
 14780  1045  0021               	movlb	1	; select bank1
 14781  1046  00B6               	movwf	_MSndBuffer^(0+128)
 14782                           
 14783                           ;mfrc500.c: 591: MInfo.nBytesToSend = 0x01;
 14784  1047  0020               	movlb	0	; select bank0
 14785  1048  301E               	movlw	30
 14786  1049  01E7               	clrf	_MInfo+3
 14787  104A  0AE7               	incf	_MInfo+3,f
 14788                           
 14789                           ;mfrc500.c: 592: ret_status = PcdSingleResponseCmd(0x1e);
 14790  104B  3196  2612  3190   	fcall	_PcdSingleResponseCmd
 14791  104E  00FD               	movwf	Mf500PiccCommonRequest@ret_status
 14792                           
 14793                           ;mfrc500.c: 593: if (ret_status)
 14794  104F  087D               	movf	Mf500PiccCommonRequest@ret_status,w
 14795  1050  1903               	btfsc	3,2
 14796  1051  2857               	goto	l5208
 14797                           
 14798                           ;mfrc500.c: 594: {
 14799                           ;mfrc500.c: 595: *atq = 0x00;
 14800  1052  087B               	movf	Mf500PiccCommonRequest@atq,w
 14801  1053  0086               	movwf	6
 14802  1054  0187               	clrf	7
 14803  1055  0181               	clrf	1
 14804                           
 14805                           ;mfrc500.c: 596: }
 14806  1056  2869               	goto	l5216
 14807  1057                     l5208:	
 14808                           
 14809                           ;mfrc500.c: 597: else
 14810                           ;mfrc500.c: 598: {
 14811                           ;mfrc500.c: 599: if (MInfo.nBitsReceived != 0x10)
 14812  1057  0869               	movf	_MInfo+5,w
 14813  1058  3A10               	xorlw	16
 14814  1059  1903               	skipnz
 14815  105A  285E               	goto	l5212
 14816                           
 14817                           ;mfrc500.c: 600: {
 14818                           ;mfrc500.c: 601: ret_status = (-11);
 14819  105B  30F5               	movlw	245
 14820  105C  00FD               	movwf	Mf500PiccCommonRequest@ret_status
 14821                           
 14822                           ;mfrc500.c: 602: }
 14823  105D  2869               	goto	l5216
 14824  105E                     l5212:	
 14825  105E  30A6               	movlw	low _MRcvBuffer
 14826                           
 14827                           ;mfrc500.c: 603: else
 14828                           ;mfrc500.c: 604: {
 14829                           ;mfrc500.c: 605: ret_status = 0;
 14830  105F  01FD               	clrf	Mf500PiccCommonRequest@ret_status
 14831                           
 14832                           ;mfrc500.c: 606: memcpy(atq, MRcvBuffer, 0x02);
 14833  1060  00F0               	movwf	memcpy@s1
 14834  1061  3000               	movlw	high _MRcvBuffer
 14835  1062  00F1               	movwf	memcpy@s1+1
 14836  1063  3002               	movlw	2
 14837  1064  00F2               	movwf	memcpy@n
 14838  1065  01F3               	clrf	memcpy@n+1
 14839  1066  087B               	movf	Mf500PiccCommonRequest@atq,w
 14840  1067  318E  26C3         	fcall	_memcpy
 14841  1069                     l5216:	
 14842                           
 14843                           ;mfrc500.c: 607: }
 14844                           ;mfrc500.c: 608: }
 14845                           ;mfrc500.c: 610: return ret_status;
 14846  1069  087D               	movf	Mf500PiccCommonRequest@ret_status,w
 14847  106A  0008               	return
 14848  106B                     __end_of_Mf500PiccCommonRequest:	
 14849                           
 14850                           	psect	text36
 14851  1FC1                     __ptext36:	
 14852 ;; *************** function _Mf500PiccCascSelect *****************
 14853 ;; Defined at:
 14854 ;;		line 750 in file "../../source/driver/mfrc500.c"
 14855 ;; Parameters:    Size  Location     Type
 14856 ;;  select_code     1    wreg     unsigned char 
 14857 ;;  snr             1   11[COMMON] PTR unsigned char 
 14858 ;;		 -> snr_rc500(4), 
 14859 ;; Auto vars:     Size  Location     Type
 14860 ;;  select_code     1   12[COMMON] unsigned char 
 14861 ;;  ret_status      1   13[COMMON] unsigned char 
 14862 ;; Return value:  Size  Location     Type
 14863 ;;                  1    wreg      unsigned char 
 14864 ;; Registers used:
 14865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14866 ;; Tracked objects:
 14867 ;;		On entry : 1F/0
 14868 ;;		On exit  : 1F/0
 14869 ;;		Unchanged: 0/0
 14870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14871 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14872 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14874 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14875 ;;Total ram usage:        3 bytes
 14876 ;; Hardware stack levels used:    1
 14877 ;; Hardware stack levels required when called:    6
 14878 ;; This function calls:
 14879 ;;		_ClearBitMask
 14880 ;;		_PcdSetTmo
 14881 ;;		_PcdSingleResponseCmd
 14882 ;;		_WriteRC
 14883 ;;		_memcpy
 14884 ;; This function is called by:
 14885 ;;		_Mf500PiccSelect
 14886 ;; This function uses a non-reentrant model
 14887 ;;
 14888                           
 14889                           
 14890                           ;psect for function _Mf500PiccCascSelect
 14891  1FC1                     _Mf500PiccCascSelect:	
 14892                           
 14893                           ;incstack = 0
 14894                           ; Regs used in _Mf500PiccCascSelect: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14895                           ;Mf500PiccCascSelect@select_code stored from wreg
 14896  1FC1  00FC               	movwf	Mf500PiccCascSelect@select_code
 14897                           
 14898                           ;mfrc500.c: 758: PcdSetTmo(106);
 14899  1FC2  306A               	movlw	106
 14900  1FC3  00F5               	movwf	PcdSetTmo@tmoLength
 14901  1FC4  01F6               	clrf	PcdSetTmo@tmoLength+1
 14902  1FC5  3195  25D1  319F   	fcall	_PcdSetTmo
 14903                           
 14904                           ;mfrc500.c: 759: WriteRC(0x22, 0x0F);
 14905  1FC8  300F               	movlw	15
 14906  1FC9  00F2               	movwf	WriteRC@data
 14907  1FCA  3022               	movlw	34
 14908  1FCB  3197  2767  319F   	fcall	_WriteRC
 14909                           
 14910                           ;mfrc500.c: 760: ClearBitMask(0x09, 0x08);
 14911  1FCE  3008               	movlw	8
 14912  1FCF  00F5               	movwf	ClearBitMask@mask
 14913  1FD0  3009               	movlw	9
 14914  1FD1  3197  2787  319F   	fcall	_ClearBitMask
 14915                           
 14916                           ;mfrc500.c: 761: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 14917  1FD4  0020               	movlb	0	; select bank0
 14918  1FD5  318F  27BA  319F   	fcall	PL2	;call to abstracted procedure
 14919                           
 14920                           ;mfrc500.c: 762: MSndBuffer[0] = select_code;
 14921  1FD8  087C               	movf	Mf500PiccCascSelect@select_code,w
 14922  1FD9  0021               	movlb	1	; select bank1
 14923  1FDA  00B6               	movwf	_MSndBuffer^(0+128)
 14924                           
 14925                           ;mfrc500.c: 763: MSndBuffer[1] = 0x70;
 14926  1FDB  3070               	movlw	112
 14927  1FDC  00B7               	movwf	(_MSndBuffer^(0+128)+1)
 14928                           
 14929                           ;mfrc500.c: 764: memcpy(MSndBuffer + 2, snr, 4);
 14930  1FDD  087B               	movf	Mf500PiccCascSelect@snr,w
 14931  1FDE  00F0               	movwf	memcpy@s1
 14932  1FDF  3004               	movlw	4
 14933  1FE0  01F1               	clrf	memcpy@s1+1
 14934  1FE1  00F2               	movwf	memcpy@n
 14935  1FE2  30B8               	movlw	(_MSndBuffer+2)& (0+255)
 14936  1FE3  01F3               	clrf	memcpy@n+1
 14937  1FE4  318E  26C3  319F   	fcall	_memcpy
 14938                           
 14939                           ;mfrc500.c: 765: MSndBuffer[6] = MSndBuffer[2] ^ MSndBuffer[3] ^ MSndBuffer[4] ^ MSndBuf
      +                          fer[5];
 14940  1FE7  0021               	movlb	1	; select bank1
 14941  1FE8  0838               	movf	(_MSndBuffer^(0+128)+2),w
 14942  1FE9  0639               	xorwf	(_MSndBuffer^(0+128)+3),w
 14943  1FEA  063A               	xorwf	(_MSndBuffer^(0+128)+4),w
 14944  1FEB  063B               	xorwf	(_MSndBuffer^(0+128)+5),w
 14945  1FEC  00BC               	movwf	(_MSndBuffer^(0+128)+6)
 14946                           
 14947                           ;mfrc500.c: 766: MInfo.nBytesToSend = 0x07;
 14948  1FED  3007               	movlw	7
 14949  1FEE  0020               	movlb	0	; select bank0
 14950  1FEF  00E7               	movwf	_MInfo+3
 14951                           
 14952                           ;mfrc500.c: 767: ret_status = PcdSingleResponseCmd(0x1e);
 14953  1FF0  301E               	movlw	30
 14954  1FF1  3196  2612  319F   	fcall	_PcdSingleResponseCmd
 14955  1FF4  00FD               	movwf	Mf500PiccCascSelect@ret_status
 14956                           
 14957                           ;mfrc500.c: 769: if (ret_status == 0)
 14958  1FF5  08FD               	movf	Mf500PiccCascSelect@ret_status,f
 14959  1FF6  1D03               	skipz
 14960  1FF7  2FFE               	goto	l5398
 14961                           
 14962                           ;mfrc500.c: 770: {
 14963                           ;mfrc500.c: 771: if (MInfo.nBitsReceived != 8)
 14964  1FF8  0869               	movf	_MInfo+5,w
 14965  1FF9  3A08               	xorlw	8
 14966  1FFA  1903               	skipnz
 14967  1FFB  2FFE               	goto	l5398
 14968                           
 14969                           ;mfrc500.c: 772: {
 14970                           ;mfrc500.c: 773: ret_status = (-11);
 14971  1FFC  30F5               	movlw	245
 14972  1FFD  00FD               	movwf	Mf500PiccCascSelect@ret_status
 14973  1FFE                     l5398:	
 14974                           ;mfrc500.c: 774: }
 14975                           
 14976                           
 14977                           ;mfrc500.c: 778: }
 14978                           ;mfrc500.c: 779: }
 14979                           ;mfrc500.c: 781: return ret_status;
 14980  1FFE  087D               	movf	Mf500PiccCascSelect@ret_status,w
 14981  1FFF  0008               	return
 14982  2000                     __end_of_Mf500PiccCascSelect:	
 14983                           
 14984                           	psect	intentry
 14985  0004                     __pintentry:	
 14986 ;; *************** function _isr *****************
 14987 ;; Defined at:
 14988 ;;		line 79 in file "../../source/driver/interrupt.c"
 14989 ;; Parameters:    Size  Location     Type
 14990 ;;		None
 14991 ;; Auto vars:     Size  Location     Type
 14992 ;;  data_length     1    0        unsigned char 
 14993 ;; Return value:  Size  Location     Type
 14994 ;;		None               void
 14995 ;; Registers used:
 14996 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14997 ;; Tracked objects:
 14998 ;;		On entry : 0/0
 14999 ;;		On exit  : 1E/0
 15000 ;;		Unchanged: 0/0
 15001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15006 ;;Total ram usage:        0 bytes
 15007 ;; Hardware stack levels used:    1
 15008 ;; This function calls:
 15009 ;;		Nothing
 15010 ;; This function is called by:
 15011 ;;		Interrupt level 1
 15012 ;; This function uses a non-reentrant model
 15013 ;;
 15014                           
 15015  0004                     _isr:	
 15016                           
 15017                           ;incstack = 0
 15018                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0]
 15019  0004  3180               	pagesel	$
 15020                           
 15021                           ;interrupt.c: 85: if (TMR1IE && TMR1IF)
 15022  0005  0021               	movlb	1	; select bank1
 15023  0006  1C11               	btfss	17,0	;volatile
 15024  0007  283D               	goto	i1l7464
 15025  0008  0020               	movlb	0	; select bank0
 15026  0009  1C11               	btfss	17,0	;volatile
 15027  000A  283D               	goto	i1l7464
 15028                           
 15029                           ;interrupt.c: 86: {
 15030                           ;interrupt.c: 87: TMR1IF = 0x00;
 15031  000B  1011               	bcf	17,0	;volatile
 15032                           
 15033                           ;interrupt.c: 88: TMR1H = 0xE0;
 15034  000C  30E0               	movlw	224
 15035  000D  0097               	movwf	23	;volatile
 15036                           
 15037                           ;interrupt.c: 89: TMR1L = 0xC0;
 15038  000E  30C0               	movlw	192
 15039  000F  0096               	movwf	22	;volatile
 15040                           
 15041                           ;interrupt.c: 90: timer_count++;
 15042  0010  0021               	movlb	1	; select bank1
 15043  0011  0AA4               	incf	_timer_count^(0+128),f
 15044  0012  1903               	skipnz
 15045  0013  0AA5               	incf	(_timer_count+1)^(0+128),f
 15046                           
 15047                           ;interrupt.c: 91: if (timer_count >= 1000)
 15048  0014  3003               	movlw	3
 15049  0015  0225               	subwf	(_timer_count+1)^(0+128),w
 15050  0016  30E8               	movlw	232
 15051  0017  1903               	skipnz
 15052  0018  0224               	subwf	_timer_count^(0+128),w
 15053  0019  1C03               	skipc
 15054  001A  2820               	goto	i1l7444
 15055                           
 15056                           ;interrupt.c: 92: {
 15057                           ;interrupt.c: 93: timer_count = 0x00;
 15058  001B  01A4               	clrf	_timer_count^(0+128)
 15059  001C  01A5               	clrf	(_timer_count+1)^(0+128)
 15060                           
 15061                           ;interrupt.c: 94: flag_timer = 0x01;
 15062  001D  0020               	movlb	0	; select bank0
 15063  001E  01DA               	clrf	_flag_timer
 15064  001F  0ADA               	incf	_flag_timer,f
 15065  0020                     i1l7444:	
 15066                           
 15067                           ;interrupt.c: 95: }
 15068                           ;interrupt.c: 97: if (count_uart1_receive > 0x00)
 15069  0020  0020               	movlb	0	; select bank0
 15070  0021  0858               	movf	_count_uart1_receive,w
 15071  0022  1903               	btfsc	3,2
 15072  0023  2826               	goto	i1l7448
 15073                           
 15074                           ;interrupt.c: 98: {
 15075                           ;interrupt.c: 99: count_uart1_receive--;
 15076  0024  03D8               	decf	_count_uart1_receive,f
 15077                           
 15078                           ;interrupt.c: 100: }
 15079  0025  282A               	goto	i1l7452
 15080  0026                     i1l7448:	
 15081                           
 15082                           ;interrupt.c: 101: else if (count_uart1_receive == 0x00)
 15083  0026  08D8               	movf	_count_uart1_receive,f
 15084  0027  1D03               	skipz
 15085  0028  282A               	goto	i1l7452
 15086                           
 15087                           ;interrupt.c: 102: {
 15088                           ;interrupt.c: 103: uart1_cnt = 0x00;
 15089  0029  01E1               	clrf	_uart1_cnt
 15090  002A                     i1l7452:	
 15091                           ;interrupt.c: 104: }
 15092                           
 15093                           
 15094                           ;interrupt.c: 108: }
 15095                           ;interrupt.c: 110: if (count_uart2_receive > 0x00)
 15096  002A  0859               	movf	_count_uart2_receive,w
 15097  002B  1903               	btfsc	3,2
 15098  002C  283D               	goto	i1l7464
 15099                           
 15100                           ;interrupt.c: 111: {
 15101                           ;interrupt.c: 112: count_uart2_receive--;
 15102  002D  0BD9               	decfsz	_count_uart2_receive,f
 15103                           
 15104                           ;interrupt.c: 114: if (count_uart2_receive == 0x00)
 15105  002E  283D               	goto	i1l7464
 15106                           
 15107                           ;interrupt.c: 115: {
 15108                           ;interrupt.c: 116: if((uart2_cnt==5)&&(uart2_receive_buffer[4]==0xAA))
 15109  002F  0862               	movf	_uart2_cnt,w
 15110  0030  3A05               	xorlw	5
 15111  0031  1D03               	skipz
 15112  0032  283B               	goto	i1l7462
 15113  0033  0022               	movlb	2	; select bank2
 15114  0034  0824               	movf	(_uart2_receive_buffer^(0+256)+4),w
 15115  0035  3AAA               	xorlw	170
 15116  0036  1D03               	skipz
 15117  0037  283B               	goto	i1l7462
 15118                           
 15119                           ;interrupt.c: 117: {
 15120                           ;interrupt.c: 118: flag_uart2_cmd = 0x01;
 15121  0038  0020               	movlb	0	; select bank0
 15122  0039  01DC               	clrf	_flag_uart2_cmd
 15123  003A  0ADC               	incf	_flag_uart2_cmd,f
 15124  003B                     i1l7462:	
 15125                           
 15126                           ;interrupt.c: 119: }
 15127                           ;interrupt.c: 120: uart2_cnt = 0x00;
 15128  003B  0020               	movlb	0	; select bank0
 15129  003C  01E2               	clrf	_uart2_cnt
 15130  003D                     i1l7464:	
 15131                           
 15132                           ;interrupt.c: 121: }
 15133                           ;interrupt.c: 122: }
 15134                           ;interrupt.c: 164: }
 15135                           ;interrupt.c: 166: if (RC1IE && RC1IF)
 15136  003D  0021               	movlb	1	; select bank1
 15137  003E  1E91               	btfss	17,5	;volatile
 15138  003F  285A               	goto	i1l7486
 15139  0040  0020               	movlb	0	; select bank0
 15140  0041  1E91               	btfss	17,5	;volatile
 15141  0042  285A               	goto	i1l7486
 15142                           
 15143                           ;interrupt.c: 167: {
 15144                           ;interrupt.c: 168: RC1IF = 0x00;
 15145  0043  1291               	bcf	17,5	;volatile
 15146                           
 15147                           ;interrupt.c: 169: uart1_receive_buffer[uart1_cnt++] = RC1REG;
 15148  0044  0861               	movf	_uart1_cnt,w
 15149  0045  3E47               	addlw	_uart1_receive_buffer& (0+255)
 15150  0046  0086               	movwf	6
 15151  0047  0187               	clrf	7
 15152  0048  0023               	movlb	3	; select bank3
 15153  0049  0819               	movf	25,w	;volatile
 15154  004A  0081               	movwf	1
 15155  004B  0020               	movlb	0	; select bank0
 15156  004C  3003               	movlw	3
 15157  004D  0AE1               	incf	_uart1_cnt,f
 15158                           
 15159                           ;interrupt.c: 170: count_uart1_receive = 0x03;
 15160  004E  00D8               	movwf	_count_uart1_receive
 15161                           
 15162                           ;interrupt.c: 171: if (uart1_cnt == 0x08)
 15163  004F  0861               	movf	_uart1_cnt,w
 15164  0050  3A08               	xorlw	8
 15165  0051  1D03               	skipz
 15166  0052  2856               	goto	i1l7482
 15167                           
 15168                           ;interrupt.c: 172: {
 15169                           ;interrupt.c: 173: uart1_cnt = 0x00;
 15170  0053  01E1               	clrf	_uart1_cnt
 15171                           
 15172                           ;interrupt.c: 174: flag_uart1_cmd = 0x01;
 15173  0054  01DB               	clrf	_flag_uart1_cmd
 15174  0055  0ADB               	incf	_flag_uart1_cmd,f
 15175  0056                     i1l7482:	
 15176                           
 15177                           ;interrupt.c: 175: }
 15178                           ;interrupt.c: 176: if (uart1_cnt > 0x08)
 15179  0056  3009               	movlw	9
 15180  0057  0261               	subwf	_uart1_cnt,w
 15181  0058  1803               	btfsc	3,0
 15182                           
 15183                           ;interrupt.c: 177: {
 15184                           ;interrupt.c: 178: uart1_cnt = 0x00;
 15185  0059  01E1               	clrf	_uart1_cnt
 15186  005A                     i1l7486:	
 15187                           
 15188                           ;interrupt.c: 179: }
 15189                           ;interrupt.c: 180: }
 15190                           ;interrupt.c: 182: if (RC2IE && RC2IF)
 15191  005A  0021               	movlb	1	; select bank1
 15192  005B  1E94               	btfss	20,5	;volatile
 15193  005C  0009               	retfie
 15194  005D  0020               	movlb	0	; select bank0
 15195  005E  1E94               	btfss	20,5	;volatile
 15196  005F  0009               	retfie
 15197                           
 15198                           ;interrupt.c: 183: {
 15199                           ;interrupt.c: 184: RC2IF = 0x00;
 15200  0060  1294               	bcf	20,5	;volatile
 15201                           
 15202                           ;interrupt.c: 185: if (flag_uart2_cmd == 0x00)
 15203  0061  08DC               	movf	_flag_uart2_cmd,f
 15204  0062  1D03               	skipz
 15205  0063  0009               	retfie
 15206                           
 15207                           ;interrupt.c: 186: {
 15208                           ;interrupt.c: 187: uart2_receive_buffer[uart2_cnt] = RC2REG;
 15209  0064  0862               	movf	_uart2_cnt,w
 15210  0065  3E20               	addlw	_uart2_receive_buffer& (0+255)
 15211  0066  0086               	movwf	6
 15212  0067  3001               	movlw	1	; select bank2/3
 15213  0068  0087               	movwf	7
 15214  0069  0029               	movlb	9	; select bank9
 15215  006A  0811               	movf	17,w	;volatile
 15216  006B  0081               	movwf	1
 15217                           
 15218                           ;interrupt.c: 189: if (uart2_receive_buffer[0] == 0x55)
 15219  006C  0022               	movlb	2	; select bank2
 15220  006D  0820               	movf	_uart2_receive_buffer^(0+256),w
 15221  006E  3A55               	xorlw	85
 15222  006F  1D03               	skipz
 15223  0070  2873               	goto	i1l7500
 15224                           
 15225                           ;interrupt.c: 190: {
 15226                           ;interrupt.c: 191: uart2_cnt++;
 15227  0071  0020               	movlb	0	; select bank0
 15228  0072  0AE2               	incf	_uart2_cnt,f
 15229  0073                     i1l7500:	
 15230                           
 15231                           ;interrupt.c: 192: }
 15232                           ;interrupt.c: 195: count_uart2_receive = 0x05;
 15233  0073  3005               	movlw	5
 15234  0074  0020               	movlb	0	; select bank0
 15235  0075  00D9               	movwf	_count_uart2_receive
 15236                           
 15237                           ;interrupt.c: 197: }
 15238  0076  0009               	retfie
 15239  0077                     __end_of_isr:	
 15240  007E                     btemp	set	126	;btemp
 15241  007E                     wtemp	set	126
 15242  007E                     wtemp0	set	126
 15243  0080                     wtemp1	set	128
 15244  0082                     wtemp2	set	130
 15245  0084                     wtemp3	set	132
 15246  0086                     wtemp4	set	134
 15247  0088                     wtemp5	set	136
 15248  007F                     wtemp6	set	127
 15249  007E                     ttemp	set	126
 15250  007E                     ttemp0	set	126
 15251  0081                     ttemp1	set	129
 15252  0084                     ttemp2	set	132
 15253  0087                     ttemp3	set	135
 15254  007F                     ttemp4	set	127
 15255  007E                     ltemp	set	126
 15256  007E                     ltemp0	set	126
 15257  0082                     ltemp1	set	130
 15258  0086                     ltemp2	set	134
 15259  0080                     ltemp3	set	128
 15260                           
 15261                           	psect	text21_split_1
 15262  00A0                     l5720:	
 15263  00A0  3064               	movlw	100
 15264  00A1                     L30:	
 15265  00A1  318B  2BA3         	ljmp	_uart1_send_byte
 15266  00A3                     l5722:	
 15267  00A3  3068               	movlw	104
 15268  00A4  28A1               	ljmp	L30
 15269  00A5                     l5724:	
 15270  00A5  3071               	movlw	113
 15271  00A6  28A1               	ljmp	L30
 15272  00A7                     l5726:	
 15273  00A7  3072               	movlw	114
 15274  00A8  28A1               	ljmp	L30
 15275  00A9                     l5728:	
 15276  00A9  3074               	movlw	116
 15277  00AA  28A1               	ljmp	L30
 15278  00AB                     l5730:	
 15279  00AB  3078               	movlw	120
 15280  00AC  28A1               	ljmp	L30
 15281  00AD                     l5734:	
 15282  00AD  0825               	movf	deal_floor@floor+3,w
 15283                           
 15284                           ; Switch size 1, requested type "space"
 15285                           ; Number of cases is 8, Range of values is 1 to 128
 15286                           ; switch strategies available:
 15287                           ; Name         Instructions Cycles
 15288                           ; simple_byte           25    13 (average)
 15289                           ; direct_byte          265     9 (fixed)
 15290                           ; jumptable            263     9 (fixed)
 15291                           ;	Chosen strategy is simple_byte
 15292  00AE  3A01               	xorlw	1	; case 1
 15293  00AF  3192  1903         	skipnz
 15294  00B1  2A6C  3180         	goto	l5716
 15295  00B3  3A03               	xorlw	3	; case 2
 15296  00B4  1903               	skipnz
 15297  00B5  2F84               	goto	L31
 15298  00B6  3A06               	xorlw	6	; case 4
 15299  00B7  1903               	skipnz
 15300  00B8  28A0               	goto	l5720
 15301  00B9  3A0C               	xorlw	12	; case 8
 15302  00BA  1903               	skipnz
 15303  00BB  28A3               	goto	l5722
 15304  00BC  3A18               	xorlw	24	; case 16
 15305  00BD  1903               	skipnz
 15306  00BE  28A5               	goto	l5724
 15307  00BF  3A30               	xorlw	48	; case 32
 15308  00C0  1903               	skipnz
 15309  00C1  28A7               	goto	l5726
 15310  00C2  3A60               	xorlw	96	; case 64
 15311  00C3  1903               	skipnz
 15312  00C4  28A9               	goto	l5728
 15313  00C5  3AC0               	xorlw	192	; case 128
 15314  00C6  1903               	skipnz
 15315  00C7  28AB               	goto	l5730
 15316  00C8  2F83               	goto	l289
 15317  00C9                     l5736:	
 15318                           
 15319                           ;handle_floor.c: 120: else if (floor[0] == 0x00 && floor[1] == 0x00 && floor[2] == 0x00 
      +                          && floor[3] == 0x00 &&
 15320                           ;handle_floor.c: 121: (floor[4] == 0x01 || floor[4] == 0x02 || floor[4] == 0x04 || floor
      +                          [4] == 0x08 ||
 15321                           ;handle_floor.c: 122: floor[4] == 0x10 || floor[4] == 0x20 || floor[4] == 0x40 || floor[
      +                          4] == 0x80)
 15322                           ;handle_floor.c: 123: && floor[5] == 0x00 && floor[6] == 0x00 && floor[7] == 0x00)
 15323  00C9  08A2               	movf	deal_floor@floor,f
 15324  00CA  1D03               	skipz
 15325  00CB  2928               	goto	l5788
 15326  00CC  08A3               	movf	deal_floor@floor+1,f
 15327  00CD  1D03               	skipz
 15328  00CE  2928               	goto	l5788
 15329  00CF  08A4               	movf	deal_floor@floor+2,f
 15330  00D0  1D03               	skipz
 15331  00D1  2928               	goto	l5788
 15332  00D2  08A5               	movf	deal_floor@floor+3,f
 15333  00D3  1D03               	skipz
 15334  00D4  2928               	goto	l5788
 15335  00D5  0326               	decf	deal_floor@floor+4,w
 15336  00D6  1903               	skipnz
 15337  00D7  28F4               	goto	l5760
 15338  00D8  0826               	movf	deal_floor@floor+4,w
 15339  00D9  3A02               	xorlw	2
 15340  00DA  1903               	skipnz
 15341  00DB  28F4               	goto	l5760
 15342  00DC  0826               	movf	deal_floor@floor+4,w
 15343  00DD  3A04               	xorlw	4
 15344  00DE  1903               	skipnz
 15345  00DF  28F4               	goto	l5760
 15346  00E0  0826               	movf	deal_floor@floor+4,w
 15347  00E1  3A08               	xorlw	8
 15348  00E2  1903               	skipnz
 15349  00E3  28F4               	goto	l5760
 15350  00E4  0826               	movf	deal_floor@floor+4,w
 15351  00E5  3A10               	xorlw	16
 15352  00E6  1903               	skipnz
 15353  00E7  28F4               	goto	l5760
 15354  00E8  0826               	movf	deal_floor@floor+4,w
 15355  00E9  3A20               	xorlw	32
 15356  00EA  1903               	skipnz
 15357  00EB  28F4               	goto	l5760
 15358  00EC  0826               	movf	deal_floor@floor+4,w
 15359  00ED  3A40               	xorlw	64
 15360  00EE  1903               	skipnz
 15361  00EF  28F4               	goto	l5760
 15362  00F0  0826               	movf	deal_floor@floor+4,w
 15363  00F1  3A80               	xorlw	128
 15364  00F2  1D03               	skipz
 15365  00F3  2928               	goto	l5788
 15366  00F4                     l5760:	
 15367  00F4  08A7               	movf	deal_floor@floor+5,f
 15368  00F5  1D03               	skipz
 15369  00F6  2928               	goto	l5788
 15370  00F7  08A8               	movf	deal_floor@floor+6,f
 15371  00F8  1D03               	skipz
 15372  00F9  2928               	goto	l5788
 15373  00FA  08A9               	movf	deal_floor@floor+7,f
 15374  00FB  1903               	btfsc	3,2
 15375  00FC  290E               	goto	l5786
 15376  00FD  2928               	goto	l5788
 15377  00FE                     l5768:	
 15378  00FE  3081               	movlw	129
 15379  00FF  28A1               	ljmp	L30
 15380  0100                     l5770:	
 15381  0100  3082               	movlw	130
 15382  0101  28A1               	ljmp	L30
 15383  0102                     l5772:	
 15384  0102  3084               	movlw	132
 15385  0103  28A1               	ljmp	L30
 15386  0104                     l5774:	
 15387  0104  3088               	movlw	136
 15388  0105  28A1               	ljmp	L30
 15389  0106                     l5776:	
 15390  0106  3091               	movlw	145
 15391  0107  28A1               	ljmp	L30
 15392  0108                     l5778:	
 15393  0108  3092               	movlw	146
 15394  0109  28A1               	ljmp	L30
 15395  010A                     l5780:	
 15396  010A  3094               	movlw	148
 15397  010B  28A1               	ljmp	L30
 15398  010C                     l5782:	
 15399  010C  3098               	movlw	152
 15400  010D  28A1               	ljmp	L30
 15401  010E                     l5786:	
 15402  010E  0826               	movf	deal_floor@floor+4,w
 15403                           
 15404                           ; Switch size 1, requested type "space"
 15405                           ; Number of cases is 8, Range of values is 1 to 128
 15406                           ; switch strategies available:
 15407                           ; Name         Instructions Cycles
 15408                           ; simple_byte           25    13 (average)
 15409                           ; direct_byte          265     9 (fixed)
 15410                           ; jumptable            263     9 (fixed)
 15411                           ;	Chosen strategy is simple_byte
 15412  010F  3A01               	xorlw	1	; case 1
 15413  0110  1903               	skipnz
 15414  0111  28FE               	goto	l5768
 15415  0112  3A03               	xorlw	3	; case 2
 15416  0113  1903               	skipnz
 15417  0114  2900               	goto	l5770
 15418  0115  3A06               	xorlw	6	; case 4
 15419  0116  1903               	skipnz
 15420  0117  2902               	goto	l5772
 15421  0118  3A0C               	xorlw	12	; case 8
 15422  0119  1903               	skipnz
 15423  011A  2904               	goto	l5774
 15424  011B  3A18               	xorlw	24	; case 16
 15425  011C  1903               	skipnz
 15426  011D  2906               	goto	l5776
 15427  011E  3A30               	xorlw	48	; case 32
 15428  011F  1903               	skipnz
 15429  0120  2908               	goto	l5778
 15430  0121  3A60               	xorlw	96	; case 64
 15431  0122  1903               	skipnz
 15432  0123  290A               	goto	l5780
 15433  0124  3AC0               	xorlw	192	; case 128
 15434  0125  1903               	skipnz
 15435  0126  290C               	goto	l5782
 15436  0127  2F83               	goto	l289
 15437  0128                     l5788:	
 15438                           
 15439                           ;handle_floor.c: 138: else if (floor[0] == 0x00 && floor[1] == 0x00 && floor[2] == 0x00 
      +                          && floor[3] == 0x00 && floor[4] == 0x00 &&
 15440                           ;handle_floor.c: 139: (floor[5] == 0x01 || floor[5] == 0x02 || floor[5] == 0x04 || floor
      +                          [5] == 0x08 ||
 15441                           ;handle_floor.c: 140: floor[5] == 0x10 || floor[5] == 0x20 || floor[5] == 0x40 || floor[
      +                          5] == 0x80) &&
 15442                           ;handle_floor.c: 141: floor[6] == 0x00 && floor[7] == 0x00)
 15443  0128  08A2               	movf	deal_floor@floor,f
 15444  0129  1D03               	skipz
 15445  012A  2987               	goto	l5840
 15446  012B  08A3               	movf	deal_floor@floor+1,f
 15447  012C  1D03               	skipz
 15448  012D  2987               	goto	l5840
 15449  012E  08A4               	movf	deal_floor@floor+2,f
 15450  012F  1D03               	skipz
 15451  0130  2987               	goto	l5840
 15452  0131  08A5               	movf	deal_floor@floor+3,f
 15453  0132  1D03               	skipz
 15454  0133  2987               	goto	l5840
 15455  0134  08A6               	movf	deal_floor@floor+4,f
 15456  0135  1D03               	skipz
 15457  0136  2987               	goto	l5840
 15458  0137  0327               	decf	deal_floor@floor+5,w
 15459  0138  1903               	skipnz
 15460  0139  2956               	goto	l5814
 15461  013A  0827               	movf	deal_floor@floor+5,w
 15462  013B  3A02               	xorlw	2
 15463  013C  1903               	skipnz
 15464  013D  2956               	goto	l5814
 15465  013E  0827               	movf	deal_floor@floor+5,w
 15466  013F  3A04               	xorlw	4
 15467  0140  1903               	skipnz
 15468  0141  2956               	goto	l5814
 15469  0142  0827               	movf	deal_floor@floor+5,w
 15470  0143  3A08               	xorlw	8
 15471  0144  1903               	skipnz
 15472  0145  2956               	goto	l5814
 15473  0146  0827               	movf	deal_floor@floor+5,w
 15474  0147  3A10               	xorlw	16
 15475  0148  1903               	skipnz
 15476  0149  2956               	goto	l5814
 15477  014A  0827               	movf	deal_floor@floor+5,w
 15478  014B  3A20               	xorlw	32
 15479  014C  1903               	skipnz
 15480  014D  2956               	goto	l5814
 15481  014E  0827               	movf	deal_floor@floor+5,w
 15482  014F  3A40               	xorlw	64
 15483  0150  1903               	skipnz
 15484  0151  2956               	goto	l5814
 15485  0152  0827               	movf	deal_floor@floor+5,w
 15486  0153  3A80               	xorlw	128
 15487  0154  1D03               	skipz
 15488  0155  2987               	goto	l5840
 15489  0156                     l5814:	
 15490  0156  08A8               	movf	deal_floor@floor+6,f
 15491  0157  1D03               	skipz
 15492  0158  2987               	goto	l5840
 15493  0159  08A9               	movf	deal_floor@floor+7,f
 15494  015A  1903               	btfsc	3,2
 15495  015B  296D               	goto	l5838
 15496  015C  2987               	goto	l5840
 15497  015D                     l5820:	
 15498  015D  30A1               	movlw	161
 15499  015E  28A1               	ljmp	L30
 15500  015F                     l5822:	
 15501  015F  30A2               	movlw	162
 15502  0160  28A1               	ljmp	L30
 15503  0161                     l5824:	
 15504  0161  30A4               	movlw	164
 15505  0162  28A1               	ljmp	L30
 15506  0163                     l5826:	
 15507  0163  30A8               	movlw	168
 15508  0164  28A1               	ljmp	L30
 15509  0165                     l5828:	
 15510  0165  30B1               	movlw	177
 15511  0166  28A1               	ljmp	L30
 15512  0167                     l5830:	
 15513  0167  30B2               	movlw	178
 15514  0168  28A1               	ljmp	L30
 15515  0169                     l5832:	
 15516  0169  30B4               	movlw	180
 15517  016A  28A1               	ljmp	L30
 15518  016B                     l5834:	
 15519  016B  30B8               	movlw	184
 15520  016C  28A1               	ljmp	L30
 15521  016D                     l5838:	
 15522  016D  0827               	movf	deal_floor@floor+5,w
 15523                           
 15524                           ; Switch size 1, requested type "space"
 15525                           ; Number of cases is 8, Range of values is 1 to 128
 15526                           ; switch strategies available:
 15527                           ; Name         Instructions Cycles
 15528                           ; simple_byte           25    13 (average)
 15529                           ; direct_byte          265     9 (fixed)
 15530                           ; jumptable            263     9 (fixed)
 15531                           ;	Chosen strategy is simple_byte
 15532  016E  3A01               	xorlw	1	; case 1
 15533  016F  1903               	skipnz
 15534  0170  295D               	goto	l5820
 15535  0171  3A03               	xorlw	3	; case 2
 15536  0172  1903               	skipnz
 15537  0173  295F               	goto	l5822
 15538  0174  3A06               	xorlw	6	; case 4
 15539  0175  1903               	skipnz
 15540  0176  2961               	goto	l5824
 15541  0177  3A0C               	xorlw	12	; case 8
 15542  0178  1903               	skipnz
 15543  0179  2963               	goto	l5826
 15544  017A  3A18               	xorlw	24	; case 16
 15545  017B  1903               	skipnz
 15546  017C  2965               	goto	l5828
 15547  017D  3A30               	xorlw	48	; case 32
 15548  017E  1903               	skipnz
 15549  017F  2967               	goto	l5830
 15550  0180  3A60               	xorlw	96	; case 64
 15551  0181  1903               	skipnz
 15552  0182  2969               	goto	l5832
 15553  0183  3AC0               	xorlw	192	; case 128
 15554  0184  1903               	skipnz
 15555  0185  296B               	goto	l5834
 15556  0186  2F83               	goto	l289
 15557  0187                     l5840:	
 15558                           
 15559                           ;handle_floor.c: 156: else if (floor[0] == 0x00 && floor[1] == 0x00 && floor[2] == 0x00 
      +                          && floor[3] == 0x00 && floor[4] == 0x00 && floor[5] == 0x00 &&
 15560                           ;handle_floor.c: 157: (floor[6] == 0x01 || floor[6] == 0x02 || floor[6] == 0x04 || floor
      +                          [6] == 0x08 ||
 15561                           ;handle_floor.c: 158: floor[6] == 0x10 || floor[6] == 0x20 || floor[6] == 0x40 || floor[
      +                          6] == 0x80) &&
 15562                           ;handle_floor.c: 159: floor[7] == 0x00)
 15563  0187  08A2               	movf	deal_floor@floor,f
 15564  0188  1D03               	skipz
 15565  0189  29E6               	goto	l5892
 15566  018A  08A3               	movf	deal_floor@floor+1,f
 15567  018B  1D03               	skipz
 15568  018C  29E6               	goto	l5892
 15569  018D  08A4               	movf	deal_floor@floor+2,f
 15570  018E  1D03               	skipz
 15571  018F  29E6               	goto	l5892
 15572  0190  08A5               	movf	deal_floor@floor+3,f
 15573  0191  1D03               	skipz
 15574  0192  29E6               	goto	l5892
 15575  0193  08A6               	movf	deal_floor@floor+4,f
 15576  0194  1D03               	skipz
 15577  0195  29E6               	goto	l5892
 15578  0196  08A7               	movf	deal_floor@floor+5,f
 15579  0197  1D03               	skipz
 15580  0198  29E6               	goto	l5892
 15581  0199  0328               	decf	deal_floor@floor+6,w
 15582  019A  1903               	skipnz
 15583  019B  29B8               	goto	l5868
 15584  019C  0828               	movf	deal_floor@floor+6,w
 15585  019D  3A02               	xorlw	2
 15586  019E  1903               	skipnz
 15587  019F  29B8               	goto	l5868
 15588  01A0  0828               	movf	deal_floor@floor+6,w
 15589  01A1  3A04               	xorlw	4
 15590  01A2  1903               	skipnz
 15591  01A3  29B8               	goto	l5868
 15592  01A4  0828               	movf	deal_floor@floor+6,w
 15593  01A5  3A08               	xorlw	8
 15594  01A6  1903               	skipnz
 15595  01A7  29B8               	goto	l5868
 15596  01A8  0828               	movf	deal_floor@floor+6,w
 15597  01A9  3A10               	xorlw	16
 15598  01AA  1903               	skipnz
 15599  01AB  29B8               	goto	l5868
 15600  01AC  0828               	movf	deal_floor@floor+6,w
 15601  01AD  3A20               	xorlw	32
 15602  01AE  1903               	skipnz
 15603  01AF  29B8               	goto	l5868
 15604  01B0  0828               	movf	deal_floor@floor+6,w
 15605  01B1  3A40               	xorlw	64
 15606  01B2  1903               	skipnz
 15607  01B3  29B8               	goto	l5868
 15608  01B4  0828               	movf	deal_floor@floor+6,w
 15609  01B5  3A80               	xorlw	128
 15610  01B6  1D03               	skipz
 15611  01B7  29E6               	goto	l5892
 15612  01B8                     l5868:	
 15613  01B8  08A9               	movf	deal_floor@floor+7,f
 15614  01B9  1903               	btfsc	3,2
 15615  01BA  29CC               	goto	l5890
 15616  01BB  29E6               	goto	l5892
 15617  01BC                     l5872:	
 15618  01BC  30C1               	movlw	193
 15619  01BD  28A1               	ljmp	L30
 15620  01BE                     l5874:	
 15621  01BE  30C2               	movlw	194
 15622  01BF  28A1               	ljmp	L30
 15623  01C0                     l5876:	
 15624  01C0  30C4               	movlw	196
 15625  01C1  28A1               	ljmp	L30
 15626  01C2                     l5878:	
 15627  01C2  30C8               	movlw	200
 15628  01C3  28A1               	ljmp	L30
 15629  01C4                     l5880:	
 15630  01C4  30D1               	movlw	209
 15631  01C5  28A1               	ljmp	L30
 15632  01C6                     l5882:	
 15633  01C6  30D2               	movlw	210
 15634  01C7  28A1               	ljmp	L30
 15635  01C8                     l5884:	
 15636  01C8  30D4               	movlw	212
 15637  01C9  28A1               	ljmp	L30
 15638  01CA                     l5886:	
 15639  01CA  30D8               	movlw	216
 15640  01CB  28A1               	ljmp	L30
 15641  01CC                     l5890:	
 15642  01CC  0828               	movf	deal_floor@floor+6,w
 15643                           
 15644                           ; Switch size 1, requested type "space"
 15645                           ; Number of cases is 8, Range of values is 1 to 128
 15646                           ; switch strategies available:
 15647                           ; Name         Instructions Cycles
 15648                           ; simple_byte           25    13 (average)
 15649                           ; direct_byte          265     9 (fixed)
 15650                           ; jumptable            263     9 (fixed)
 15651                           ;	Chosen strategy is simple_byte
 15652  01CD  3A01               	xorlw	1	; case 1
 15653  01CE  1903               	skipnz
 15654  01CF  29BC               	goto	l5872
 15655  01D0  3A03               	xorlw	3	; case 2
 15656  01D1  1903               	skipnz
 15657  01D2  29BE               	goto	l5874
 15658  01D3  3A06               	xorlw	6	; case 4
 15659  01D4  1903               	skipnz
 15660  01D5  29C0               	goto	l5876
 15661  01D6  3A0C               	xorlw	12	; case 8
 15662  01D7  1903               	skipnz
 15663  01D8  29C2               	goto	l5878
 15664  01D9  3A18               	xorlw	24	; case 16
 15665  01DA  1903               	skipnz
 15666  01DB  29C4               	goto	l5880
 15667  01DC  3A30               	xorlw	48	; case 32
 15668  01DD  1903               	skipnz
 15669  01DE  29C6               	goto	l5882
 15670  01DF  3A60               	xorlw	96	; case 64
 15671  01E0  1903               	skipnz
 15672  01E1  29C8               	goto	l5884
 15673  01E2  3AC0               	xorlw	192	; case 128
 15674  01E3  1903               	skipnz
 15675  01E4  29CA               	goto	l5886
 15676  01E5  2F83               	goto	l289
 15677  01E6                     l5892:	
 15678                           
 15679                           ;handle_floor.c: 174: else if (floor[0] == 0x00 && floor[1] == 0x00 && floor[2] == 0x00 
      +                          && floor[3] == 0x00 && floor[4] == 0x00 && floor[5] == 0x00 && floor[6] == 0x00 &&
 15680                           ;handle_floor.c: 175: (floor[7] == 0x01 || floor[7] == 0x02 || floor[7] == 0x04 || floor
      +                          [7] == 0x08 ||
 15681                           ;handle_floor.c: 176: floor[7] == 0x10 || floor[7] == 0x20 || floor[7] == 0x40 || floor[
      +                          7] == 0x80))
 15682  01E6  08A2               	movf	deal_floor@floor,f
 15683  01E7  1D03               	skipz
 15684  01E8  2A45               	goto	l210
 15685  01E9  08A3               	movf	deal_floor@floor+1,f
 15686  01EA  1D03               	skipz
 15687  01EB  2A45               	goto	l210
 15688  01EC  08A4               	movf	deal_floor@floor+2,f
 15689  01ED  1D03               	skipz
 15690  01EE  2A45               	goto	l210
 15691  01EF  08A5               	movf	deal_floor@floor+3,f
 15692  01F0  1D03               	skipz
 15693  01F1  2A45               	goto	l210
 15694  01F2  08A6               	movf	deal_floor@floor+4,f
 15695  01F3  1D03               	skipz
 15696  01F4  2A45               	goto	l210
 15697  01F5  08A7               	movf	deal_floor@floor+5,f
 15698  01F6  1D03               	skipz
 15699  01F7  2A45               	goto	l210
 15700  01F8  08A8               	movf	deal_floor@floor+6,f
 15701  01F9  1D03               	skipz
 15702  01FA  2A45               	goto	l210
 15703  01FB  0329               	decf	deal_floor@floor+7,w
 15704  01FC  1903               	skipnz
 15705  01FD  2A2B               	goto	l5940
 15706  01FE  0829               	movf	deal_floor@floor+7,w
 15707  01FF  3A02               	xorlw	2
 15708  0200  1903               	skipnz
 15709  0201  2A2B               	goto	l5940
 15710  0202  0829               	movf	deal_floor@floor+7,w
 15711  0203  3A04               	xorlw	4
 15712  0204  1903               	skipnz
 15713  0205  2A2B               	goto	l5940
 15714  0206  0829               	movf	deal_floor@floor+7,w
 15715  0207  3A08               	xorlw	8
 15716  0208  1903               	skipnz
 15717  0209  2A2B               	goto	l5940
 15718  020A  0829               	movf	deal_floor@floor+7,w
 15719  020B  3A10               	xorlw	16
 15720  020C  1903               	skipnz
 15721  020D  2A2B               	goto	l5940
 15722  020E  0829               	movf	deal_floor@floor+7,w
 15723  020F  3A20               	xorlw	32
 15724  0210  1903               	skipnz
 15725  0211  2A2B               	goto	l5940
 15726  0212  0829               	movf	deal_floor@floor+7,w
 15727  0213  3A40               	xorlw	64
 15728  0214  1903               	skipnz
 15729  0215  2A2B               	goto	l5940
 15730  0216  0829               	movf	deal_floor@floor+7,w
 15731  0217  3A80               	xorlw	128
 15732  0218  1903               	btfsc	3,2
 15733  0219  2A2B               	goto	l5940
 15734  021A  2A45               	goto	l210
 15735  021B                     l5922:	
 15736  021B  30E1               	movlw	225
 15737  021C  28A1               	ljmp	L30
 15738  021D                     l5924:	
 15739  021D  30E2               	movlw	226
 15740  021E  28A1               	ljmp	L30
 15741  021F                     l5926:	
 15742  021F  30E4               	movlw	228
 15743  0220  28A1               	ljmp	L30
 15744  0221                     l5928:	
 15745  0221  30E8               	movlw	232
 15746  0222  28A1               	ljmp	L30
 15747  0223                     l5930:	
 15748  0223  30F1               	movlw	241
 15749  0224  28A1               	ljmp	L30
 15750  0225                     l5932:	
 15751  0225  30F2               	movlw	242
 15752  0226  28A1               	ljmp	L30
 15753  0227                     l5934:	
 15754  0227  30F4               	movlw	244
 15755  0228  28A1               	ljmp	L30
 15756  0229                     l5936:	
 15757  0229  30F8               	movlw	248
 15758  022A  28A1               	ljmp	L30
 15759  022B                     l5940:	
 15760  022B  0829               	movf	deal_floor@floor+7,w
 15761                           
 15762                           ; Switch size 1, requested type "space"
 15763                           ; Number of cases is 8, Range of values is 1 to 128
 15764                           ; switch strategies available:
 15765                           ; Name         Instructions Cycles
 15766                           ; simple_byte           25    13 (average)
 15767                           ; direct_byte          265     9 (fixed)
 15768                           ; jumptable            263     9 (fixed)
 15769                           ;	Chosen strategy is simple_byte
 15770  022C  3A01               	xorlw	1	; case 1
 15771  022D  1903               	skipnz
 15772  022E  2A1B               	goto	l5922
 15773  022F  3A03               	xorlw	3	; case 2
 15774  0230  1903               	skipnz
 15775  0231  2A1D               	goto	l5924
 15776  0232  3A06               	xorlw	6	; case 4
 15777  0233  1903               	skipnz
 15778  0234  2A1F               	goto	l5926
 15779  0235  3A0C               	xorlw	12	; case 8
 15780  0236  1903               	skipnz
 15781  0237  2A21               	goto	l5928
 15782  0238  3A18               	xorlw	24	; case 16
 15783  0239  1903               	skipnz
 15784  023A  2A23               	goto	l5930
 15785  023B  3A30               	xorlw	48	; case 32
 15786  023C  1903               	skipnz
 15787  023D  2A25               	goto	l5932
 15788  023E  3A60               	xorlw	96	; case 64
 15789  023F  1903               	skipnz
 15790  0240  2A27               	goto	l5934
 15791  0241  3AC0               	xorlw	192	; case 128
 15792  0242  1903               	skipnz
 15793  0243  2A29               	goto	l5936
 15794  0244  2F83               	goto	l289
 15795  0245                     l210:	
 15796                           
 15797                           ;handle_floor.c: 191: else
 15798                           ;handle_floor.c: 192: {
 15799                           ;handle_floor.c: 193: if (floor[0] & 0x01)
 15800  0245  1C22               	btfss	deal_floor@floor,0
 15801  0246  2A59               	goto	l5944
 15802                           
 15803                           ;handle_floor.c: 194: {
 15804                           ;handle_floor.c: 195: uart1_send_byte(0xF0);
 15805  0247  30F0               	movlw	240
 15806  0248  318B  23A3  3180   	fcall	_uart1_send_byte
 15807                           
 15808                           ;handle_floor.c: 196: uart1_send_byte(0xF1);
 15809  024B  30F1               	movlw	241
 15810  024C  318B  23A3  3180   	fcall	_uart1_send_byte
 15811                           
 15812                           ;handle_floor.c: 197: uart1_send_byte(0x01);
 15813  024F  3001               	movlw	1
 15814  0250  318B  23A3  3180   	fcall	_uart1_send_byte
 15815                           
 15816                           ;handle_floor.c: 198: delay_ms(150);
 15817  0253  3096               	movlw	150
 15818  0254  00F0               	movwf	delay_ms@count
 15819  0255  01F1               	clrf	delay_ms@count+1
 15820  0256  318C  24C6  3180   	fcall	_delay_ms
 15821  0259                     l5944:	
 15822                           
 15823                           ;handle_floor.c: 199: }
 15824                           ;handle_floor.c: 200: if (floor[0] & 0x02)
 15825  0259  0020               	movlb	0	; select bank0
 15826  025A  1CA2               	btfss	deal_floor@floor,1
 15827  025B  2A6E               	goto	l5948
 15828                           
 15829                           ;handle_floor.c: 201: {
 15830                           ;handle_floor.c: 202: uart1_send_byte(0xF0);
 15831  025C  30F0               	movlw	240
 15832  025D  318B  23A3  3180   	fcall	_uart1_send_byte
 15833                           
 15834                           ;handle_floor.c: 203: uart1_send_byte(0xF1);
 15835  0260  30F1               	movlw	241
 15836  0261  318B  23A3  3180   	fcall	_uart1_send_byte
 15837                           
 15838                           ;handle_floor.c: 204: uart1_send_byte(0x02);
 15839  0264  3002               	movlw	2
 15840  0265  318B  23A3  3180   	fcall	_uart1_send_byte
 15841                           
 15842                           ;handle_floor.c: 205: delay_ms(150);
 15843  0268  3096               	movlw	150
 15844  0269  00F0               	movwf	delay_ms@count
 15845  026A  01F1               	clrf	delay_ms@count+1
 15846  026B  318C  24C6  3180   	fcall	_delay_ms
 15847  026E                     l5948:	
 15848                           
 15849                           ;handle_floor.c: 206: }
 15850                           ;handle_floor.c: 207: if (floor[0] & 0x04)
 15851  026E  0020               	movlb	0	; select bank0
 15852  026F  1D22               	btfss	deal_floor@floor,2
 15853  0270  2A83               	goto	l5952
 15854                           
 15855                           ;handle_floor.c: 208: {
 15856                           ;handle_floor.c: 209: uart1_send_byte(0xF0);
 15857  0271  30F0               	movlw	240
 15858  0272  318B  23A3  3180   	fcall	_uart1_send_byte
 15859                           
 15860                           ;handle_floor.c: 210: uart1_send_byte(0xF1);
 15861  0275  30F1               	movlw	241
 15862  0276  318B  23A3  3180   	fcall	_uart1_send_byte
 15863                           
 15864                           ;handle_floor.c: 211: uart1_send_byte(0x04);
 15865  0279  3004               	movlw	4
 15866  027A  318B  23A3  3180   	fcall	_uart1_send_byte
 15867                           
 15868                           ;handle_floor.c: 212: delay_ms(150);
 15869  027D  3096               	movlw	150
 15870  027E  00F0               	movwf	delay_ms@count
 15871  027F  01F1               	clrf	delay_ms@count+1
 15872  0280  318C  24C6  3180   	fcall	_delay_ms
 15873  0283                     l5952:	
 15874                           
 15875                           ;handle_floor.c: 213: }
 15876                           ;handle_floor.c: 214: if (floor[0] & 0x08)
 15877  0283  0020               	movlb	0	; select bank0
 15878  0284  1DA2               	btfss	deal_floor@floor,3
 15879  0285  2A98               	goto	l5956
 15880                           
 15881                           ;handle_floor.c: 215: {
 15882                           ;handle_floor.c: 216: uart1_send_byte(0xF0);
 15883  0286  30F0               	movlw	240
 15884  0287  318B  23A3  3180   	fcall	_uart1_send_byte
 15885                           
 15886                           ;handle_floor.c: 217: uart1_send_byte(0xF1);
 15887  028A  30F1               	movlw	241
 15888  028B  318B  23A3  3180   	fcall	_uart1_send_byte
 15889                           
 15890                           ;handle_floor.c: 218: uart1_send_byte(0x08);
 15891  028E  3008               	movlw	8
 15892  028F  318B  23A3  3180   	fcall	_uart1_send_byte
 15893                           
 15894                           ;handle_floor.c: 219: delay_ms(150);
 15895  0292  3096               	movlw	150
 15896  0293  00F0               	movwf	delay_ms@count
 15897  0294  01F1               	clrf	delay_ms@count+1
 15898  0295  318C  24C6  3180   	fcall	_delay_ms
 15899  0298                     l5956:	
 15900                           
 15901                           ;handle_floor.c: 220: }
 15902                           ;handle_floor.c: 221: if (floor[0] & 0x10)
 15903  0298  0020               	movlb	0	; select bank0
 15904  0299  1E22               	btfss	deal_floor@floor,4
 15905  029A  2AAD               	goto	l5960
 15906                           
 15907                           ;handle_floor.c: 222: {
 15908                           ;handle_floor.c: 223: uart1_send_byte(0xF0);
 15909  029B  30F0               	movlw	240
 15910  029C  318B  23A3  3180   	fcall	_uart1_send_byte
 15911                           
 15912                           ;handle_floor.c: 224: uart1_send_byte(0xF1);
 15913  029F  30F1               	movlw	241
 15914  02A0  318B  23A3  3180   	fcall	_uart1_send_byte
 15915                           
 15916                           ;handle_floor.c: 225: uart1_send_byte(0x11);
 15917  02A3  3011               	movlw	17
 15918  02A4  318B  23A3  3180   	fcall	_uart1_send_byte
 15919                           
 15920                           ;handle_floor.c: 226: delay_ms(150);
 15921  02A7  3096               	movlw	150
 15922  02A8  00F0               	movwf	delay_ms@count
 15923  02A9  01F1               	clrf	delay_ms@count+1
 15924  02AA  318C  24C6  3180   	fcall	_delay_ms
 15925  02AD                     l5960:	
 15926                           
 15927                           ;handle_floor.c: 227: }
 15928                           ;handle_floor.c: 228: if (floor[0] & 0x20)
 15929  02AD  0020               	movlb	0	; select bank0
 15930  02AE  1EA2               	btfss	deal_floor@floor,5
 15931  02AF  2AC2               	goto	l5964
 15932                           
 15933                           ;handle_floor.c: 229: {
 15934                           ;handle_floor.c: 230: uart1_send_byte(0xF0);
 15935  02B0  30F0               	movlw	240
 15936  02B1  318B  23A3  3180   	fcall	_uart1_send_byte
 15937                           
 15938                           ;handle_floor.c: 231: uart1_send_byte(0xF1);
 15939  02B4  30F1               	movlw	241
 15940  02B5  318B  23A3  3180   	fcall	_uart1_send_byte
 15941                           
 15942                           ;handle_floor.c: 232: uart1_send_byte(0x12);
 15943  02B8  3012               	movlw	18
 15944  02B9  318B  23A3  3180   	fcall	_uart1_send_byte
 15945                           
 15946                           ;handle_floor.c: 233: delay_ms(150);
 15947  02BC  3096               	movlw	150
 15948  02BD  00F0               	movwf	delay_ms@count
 15949  02BE  01F1               	clrf	delay_ms@count+1
 15950  02BF  318C  24C6  3180   	fcall	_delay_ms
 15951  02C2                     l5964:	
 15952                           
 15953                           ;handle_floor.c: 234: }
 15954                           ;handle_floor.c: 235: if (floor[0] & 0x40)
 15955  02C2  0020               	movlb	0	; select bank0
 15956  02C3  1F22               	btfss	deal_floor@floor,6
 15957  02C4  2AD7               	goto	l5968
 15958                           
 15959                           ;handle_floor.c: 236: {
 15960                           ;handle_floor.c: 237: uart1_send_byte(0xF0);
 15961  02C5  30F0               	movlw	240
 15962  02C6  318B  23A3  3180   	fcall	_uart1_send_byte
 15963                           
 15964                           ;handle_floor.c: 238: uart1_send_byte(0xF1);
 15965  02C9  30F1               	movlw	241
 15966  02CA  318B  23A3  3180   	fcall	_uart1_send_byte
 15967                           
 15968                           ;handle_floor.c: 239: uart1_send_byte(0x14);
 15969  02CD  3014               	movlw	20
 15970  02CE  318B  23A3  3180   	fcall	_uart1_send_byte
 15971                           
 15972                           ;handle_floor.c: 240: delay_ms(150);
 15973  02D1  3096               	movlw	150
 15974  02D2  00F0               	movwf	delay_ms@count
 15975  02D3  01F1               	clrf	delay_ms@count+1
 15976  02D4  318C  24C6  3180   	fcall	_delay_ms
 15977  02D7                     l5968:	
 15978                           
 15979                           ;handle_floor.c: 241: }
 15980                           ;handle_floor.c: 242: if (floor[0] & 0x80)
 15981  02D7  0020               	movlb	0	; select bank0
 15982  02D8  1FA2               	btfss	deal_floor@floor,7
 15983  02D9  2AEC               	goto	l5972
 15984                           
 15985                           ;handle_floor.c: 243: {
 15986                           ;handle_floor.c: 244: uart1_send_byte(0xF0);
 15987  02DA  30F0               	movlw	240
 15988  02DB  318B  23A3  3180   	fcall	_uart1_send_byte
 15989                           
 15990                           ;handle_floor.c: 245: uart1_send_byte(0xF1);
 15991  02DE  30F1               	movlw	241
 15992  02DF  318B  23A3  3180   	fcall	_uart1_send_byte
 15993                           
 15994                           ;handle_floor.c: 246: uart1_send_byte(0x18);
 15995  02E2  3018               	movlw	24
 15996  02E3  318B  23A3  3180   	fcall	_uart1_send_byte
 15997                           
 15998                           ;handle_floor.c: 247: delay_ms(150);
 15999  02E6  3096               	movlw	150
 16000  02E7  00F0               	movwf	delay_ms@count
 16001  02E8  01F1               	clrf	delay_ms@count+1
 16002  02E9  318C  24C6  3180   	fcall	_delay_ms
 16003  02EC                     l5972:	
 16004                           
 16005                           ;handle_floor.c: 248: }
 16006                           ;handle_floor.c: 250: if (floor[1] & 0x01)
 16007  02EC  0020               	movlb	0	; select bank0
 16008  02ED  1C23               	btfss	deal_floor@floor+1,0
 16009  02EE  2B01               	goto	l5976
 16010                           
 16011                           ;handle_floor.c: 251: {
 16012                           ;handle_floor.c: 252: uart1_send_byte(0xF0);
 16013  02EF  30F0               	movlw	240
 16014  02F0  318B  23A3  3180   	fcall	_uart1_send_byte
 16015                           
 16016                           ;handle_floor.c: 253: uart1_send_byte(0xF1);
 16017  02F3  30F1               	movlw	241
 16018  02F4  318B  23A3  3180   	fcall	_uart1_send_byte
 16019                           
 16020                           ;handle_floor.c: 254: uart1_send_byte(0x21);
 16021  02F7  3021               	movlw	33
 16022  02F8  318B  23A3  3180   	fcall	_uart1_send_byte
 16023                           
 16024                           ;handle_floor.c: 255: delay_ms(150);
 16025  02FB  3096               	movlw	150
 16026  02FC  00F0               	movwf	delay_ms@count
 16027  02FD  01F1               	clrf	delay_ms@count+1
 16028  02FE  318C  24C6  3180   	fcall	_delay_ms
 16029  0301                     l5976:	
 16030                           
 16031                           ;handle_floor.c: 256: }
 16032                           ;handle_floor.c: 257: if (floor[1] & 0x02)
 16033  0301  0020               	movlb	0	; select bank0
 16034  0302  1CA3               	btfss	deal_floor@floor+1,1
 16035  0303  2B16               	goto	l5980
 16036                           
 16037                           ;handle_floor.c: 258: {
 16038                           ;handle_floor.c: 259: uart1_send_byte(0xF0);
 16039  0304  30F0               	movlw	240
 16040  0305  318B  23A3  3180   	fcall	_uart1_send_byte
 16041                           
 16042                           ;handle_floor.c: 260: uart1_send_byte(0xF1);
 16043  0308  30F1               	movlw	241
 16044  0309  318B  23A3  3180   	fcall	_uart1_send_byte
 16045                           
 16046                           ;handle_floor.c: 261: uart1_send_byte(0x22);
 16047  030C  3022               	movlw	34
 16048  030D  318B  23A3  3180   	fcall	_uart1_send_byte
 16049                           
 16050                           ;handle_floor.c: 262: delay_ms(150);
 16051  0310  3096               	movlw	150
 16052  0311  00F0               	movwf	delay_ms@count
 16053  0312  01F1               	clrf	delay_ms@count+1
 16054  0313  318C  24C6  3180   	fcall	_delay_ms
 16055  0316                     l5980:	
 16056                           
 16057                           ;handle_floor.c: 263: }
 16058                           ;handle_floor.c: 264: if (floor[1] & 0x04)
 16059  0316  0020               	movlb	0	; select bank0
 16060  0317  1D23               	btfss	deal_floor@floor+1,2
 16061  0318  2B2B               	goto	l5984
 16062                           
 16063                           ;handle_floor.c: 265: {
 16064                           ;handle_floor.c: 266: uart1_send_byte(0xF0);
 16065  0319  30F0               	movlw	240
 16066  031A  318B  23A3  3180   	fcall	_uart1_send_byte
 16067                           
 16068                           ;handle_floor.c: 267: uart1_send_byte(0xF1);
 16069  031D  30F1               	movlw	241
 16070  031E  318B  23A3  3180   	fcall	_uart1_send_byte
 16071                           
 16072                           ;handle_floor.c: 268: uart1_send_byte(0x24);
 16073  0321  3024               	movlw	36
 16074  0322  318B  23A3  3180   	fcall	_uart1_send_byte
 16075                           
 16076                           ;handle_floor.c: 269: delay_ms(150);
 16077  0325  3096               	movlw	150
 16078  0326  00F0               	movwf	delay_ms@count
 16079  0327  01F1               	clrf	delay_ms@count+1
 16080  0328  318C  24C6  3180   	fcall	_delay_ms
 16081  032B                     l5984:	
 16082                           
 16083                           ;handle_floor.c: 270: }
 16084                           ;handle_floor.c: 271: if (floor[1] & 0x08)
 16085  032B  0020               	movlb	0	; select bank0
 16086  032C  1DA3               	btfss	deal_floor@floor+1,3
 16087  032D  2B40               	goto	l5988
 16088                           
 16089                           ;handle_floor.c: 272: {
 16090                           ;handle_floor.c: 273: uart1_send_byte(0xF0);
 16091  032E  30F0               	movlw	240
 16092  032F  318B  23A3  3180   	fcall	_uart1_send_byte
 16093                           
 16094                           ;handle_floor.c: 274: uart1_send_byte(0xF1);
 16095  0332  30F1               	movlw	241
 16096  0333  318B  23A3  3180   	fcall	_uart1_send_byte
 16097                           
 16098                           ;handle_floor.c: 275: uart1_send_byte(0x28);
 16099  0336  3028               	movlw	40
 16100  0337  318B  23A3  3180   	fcall	_uart1_send_byte
 16101                           
 16102                           ;handle_floor.c: 276: delay_ms(150);
 16103  033A  3096               	movlw	150
 16104  033B  00F0               	movwf	delay_ms@count
 16105  033C  01F1               	clrf	delay_ms@count+1
 16106  033D  318C  24C6  3180   	fcall	_delay_ms
 16107  0340                     l5988:	
 16108                           
 16109                           ;handle_floor.c: 277: }
 16110                           ;handle_floor.c: 278: if (floor[1] & 0x10)
 16111  0340  0020               	movlb	0	; select bank0
 16112  0341  1E23               	btfss	deal_floor@floor+1,4
 16113  0342  2B55               	goto	l5992
 16114                           
 16115                           ;handle_floor.c: 279: {
 16116                           ;handle_floor.c: 280: uart1_send_byte(0xF0);
 16117  0343  30F0               	movlw	240
 16118  0344  318B  23A3  3180   	fcall	_uart1_send_byte
 16119                           
 16120                           ;handle_floor.c: 281: uart1_send_byte(0xF1);
 16121  0347  30F1               	movlw	241
 16122  0348  318B  23A3  3180   	fcall	_uart1_send_byte
 16123                           
 16124                           ;handle_floor.c: 282: uart1_send_byte(0x31);
 16125  034B  3031               	movlw	49
 16126  034C  318B  23A3  3180   	fcall	_uart1_send_byte
 16127                           
 16128                           ;handle_floor.c: 283: delay_ms(150);
 16129  034F  3096               	movlw	150
 16130  0350  00F0               	movwf	delay_ms@count
 16131  0351  01F1               	clrf	delay_ms@count+1
 16132  0352  318C  24C6  3180   	fcall	_delay_ms
 16133  0355                     l5992:	
 16134                           
 16135                           ;handle_floor.c: 284: }
 16136                           ;handle_floor.c: 285: if (floor[1] & 0x20)
 16137  0355  0020               	movlb	0	; select bank0
 16138  0356  1EA3               	btfss	deal_floor@floor+1,5
 16139  0357  2B6A               	goto	l5996
 16140                           
 16141                           ;handle_floor.c: 286: {
 16142                           ;handle_floor.c: 287: uart1_send_byte(0xF0);
 16143  0358  30F0               	movlw	240
 16144  0359  318B  23A3  3180   	fcall	_uart1_send_byte
 16145                           
 16146                           ;handle_floor.c: 288: uart1_send_byte(0xF1);
 16147  035C  30F1               	movlw	241
 16148  035D  318B  23A3  3180   	fcall	_uart1_send_byte
 16149                           
 16150                           ;handle_floor.c: 289: uart1_send_byte(0x32);
 16151  0360  3032               	movlw	50
 16152  0361  318B  23A3  3180   	fcall	_uart1_send_byte
 16153                           
 16154                           ;handle_floor.c: 290: delay_ms(150);
 16155  0364  3096               	movlw	150
 16156  0365  00F0               	movwf	delay_ms@count
 16157  0366  01F1               	clrf	delay_ms@count+1
 16158  0367  318C  24C6  3180   	fcall	_delay_ms
 16159  036A                     l5996:	
 16160                           
 16161                           ;handle_floor.c: 291: }
 16162                           ;handle_floor.c: 292: if (floor[1] & 0x40)
 16163  036A  0020               	movlb	0	; select bank0
 16164  036B  1F23               	btfss	deal_floor@floor+1,6
 16165  036C  2B7F               	goto	l6000
 16166                           
 16167                           ;handle_floor.c: 293: {
 16168                           ;handle_floor.c: 294: uart1_send_byte(0xF0);
 16169  036D  30F0               	movlw	240
 16170  036E  318B  23A3  3180   	fcall	_uart1_send_byte
 16171                           
 16172                           ;handle_floor.c: 295: uart1_send_byte(0xF1);
 16173  0371  30F1               	movlw	241
 16174  0372  318B  23A3  3180   	fcall	_uart1_send_byte
 16175                           
 16176                           ;handle_floor.c: 296: uart1_send_byte(0x34);
 16177  0375  3034               	movlw	52
 16178  0376  318B  23A3  3180   	fcall	_uart1_send_byte
 16179                           
 16180                           ;handle_floor.c: 297: delay_ms(150);
 16181  0379  3096               	movlw	150
 16182  037A  00F0               	movwf	delay_ms@count
 16183  037B  01F1               	clrf	delay_ms@count+1
 16184  037C  318C  24C6  3180   	fcall	_delay_ms
 16185  037F                     l6000:	
 16186                           
 16187                           ;handle_floor.c: 298: }
 16188                           ;handle_floor.c: 299: if (floor[1] & 0x80)
 16189  037F  0020               	movlb	0	; select bank0
 16190  0380  1FA3               	btfss	deal_floor@floor+1,7
 16191  0381  2B94               	goto	l6004
 16192                           
 16193                           ;handle_floor.c: 300: {
 16194                           ;handle_floor.c: 301: uart1_send_byte(0xF0);
 16195  0382  30F0               	movlw	240
 16196  0383  318B  23A3  3180   	fcall	_uart1_send_byte
 16197                           
 16198                           ;handle_floor.c: 302: uart1_send_byte(0xF1);
 16199  0386  30F1               	movlw	241
 16200  0387  318B  23A3  3180   	fcall	_uart1_send_byte
 16201                           
 16202                           ;handle_floor.c: 303: uart1_send_byte(0x38);
 16203  038A  3038               	movlw	56
 16204  038B  318B  23A3  3180   	fcall	_uart1_send_byte
 16205                           
 16206                           ;handle_floor.c: 304: delay_ms(150);
 16207  038E  3096               	movlw	150
 16208  038F  00F0               	movwf	delay_ms@count
 16209  0390  01F1               	clrf	delay_ms@count+1
 16210  0391  318C  24C6  3180   	fcall	_delay_ms
 16211  0394                     l6004:	
 16212                           
 16213                           ;handle_floor.c: 305: }
 16214                           ;handle_floor.c: 307: if (floor[2] & 0x01)
 16215  0394  0020               	movlb	0	; select bank0
 16216  0395  1C24               	btfss	deal_floor@floor+2,0
 16217  0396  2BA9               	goto	l6008
 16218                           
 16219                           ;handle_floor.c: 308: {
 16220                           ;handle_floor.c: 309: uart1_send_byte(0xF0);
 16221  0397  30F0               	movlw	240
 16222  0398  318B  23A3  3180   	fcall	_uart1_send_byte
 16223                           
 16224                           ;handle_floor.c: 310: uart1_send_byte(0xF1);
 16225  039B  30F1               	movlw	241
 16226  039C  318B  23A3  3180   	fcall	_uart1_send_byte
 16227                           
 16228                           ;handle_floor.c: 311: uart1_send_byte(0x41);
 16229  039F  3041               	movlw	65
 16230  03A0  318B  23A3  3180   	fcall	_uart1_send_byte
 16231                           
 16232                           ;handle_floor.c: 312: delay_ms(150);
 16233  03A3  3096               	movlw	150
 16234  03A4  00F0               	movwf	delay_ms@count
 16235  03A5  01F1               	clrf	delay_ms@count+1
 16236  03A6  318C  24C6  3180   	fcall	_delay_ms
 16237  03A9                     l6008:	
 16238                           
 16239                           ;handle_floor.c: 313: }
 16240                           ;handle_floor.c: 314: if (floor[2] & 0x02)
 16241  03A9  0020               	movlb	0	; select bank0
 16242  03AA  1CA4               	btfss	deal_floor@floor+2,1
 16243  03AB  2BBE               	goto	l6012
 16244                           
 16245                           ;handle_floor.c: 315: {
 16246                           ;handle_floor.c: 316: uart1_send_byte(0xF0);
 16247  03AC  30F0               	movlw	240
 16248  03AD  318B  23A3  3180   	fcall	_uart1_send_byte
 16249                           
 16250                           ;handle_floor.c: 317: uart1_send_byte(0xF1);
 16251  03B0  30F1               	movlw	241
 16252  03B1  318B  23A3  3180   	fcall	_uart1_send_byte
 16253                           
 16254                           ;handle_floor.c: 318: uart1_send_byte(0x42);
 16255  03B4  3042               	movlw	66
 16256  03B5  318B  23A3  3180   	fcall	_uart1_send_byte
 16257                           
 16258                           ;handle_floor.c: 319: delay_ms(150);
 16259  03B8  3096               	movlw	150
 16260  03B9  00F0               	movwf	delay_ms@count
 16261  03BA  01F1               	clrf	delay_ms@count+1
 16262  03BB  318C  24C6  3180   	fcall	_delay_ms
 16263  03BE                     l6012:	
 16264                           
 16265                           ;handle_floor.c: 320: }
 16266                           ;handle_floor.c: 321: if (floor[2] & 0x04)
 16267  03BE  0020               	movlb	0	; select bank0
 16268  03BF  1D24               	btfss	deal_floor@floor+2,2
 16269  03C0  2BD3               	goto	l6016
 16270                           
 16271                           ;handle_floor.c: 322: {
 16272                           ;handle_floor.c: 323: uart1_send_byte(0xF0);
 16273  03C1  30F0               	movlw	240
 16274  03C2  318B  23A3  3180   	fcall	_uart1_send_byte
 16275                           
 16276                           ;handle_floor.c: 324: uart1_send_byte(0xF1);
 16277  03C5  30F1               	movlw	241
 16278  03C6  318B  23A3  3180   	fcall	_uart1_send_byte
 16279                           
 16280                           ;handle_floor.c: 325: uart1_send_byte(0x44);
 16281  03C9  3044               	movlw	68
 16282  03CA  318B  23A3  3180   	fcall	_uart1_send_byte
 16283                           
 16284                           ;handle_floor.c: 326: delay_ms(150);
 16285  03CD  3096               	movlw	150
 16286  03CE  00F0               	movwf	delay_ms@count
 16287  03CF  01F1               	clrf	delay_ms@count+1
 16288  03D0  318C  24C6  3180   	fcall	_delay_ms
 16289  03D3                     l6016:	
 16290                           
 16291                           ;handle_floor.c: 327: }
 16292                           ;handle_floor.c: 328: if (floor[2] & 0x08)
 16293  03D3  0020               	movlb	0	; select bank0
 16294  03D4  1DA4               	btfss	deal_floor@floor+2,3
 16295  03D5  2BE8               	goto	l6020
 16296                           
 16297                           ;handle_floor.c: 329: {
 16298                           ;handle_floor.c: 330: uart1_send_byte(0xF0);
 16299  03D6  30F0               	movlw	240
 16300  03D7  318B  23A3  3180   	fcall	_uart1_send_byte
 16301                           
 16302                           ;handle_floor.c: 331: uart1_send_byte(0xF1);
 16303  03DA  30F1               	movlw	241
 16304  03DB  318B  23A3  3180   	fcall	_uart1_send_byte
 16305                           
 16306                           ;handle_floor.c: 332: uart1_send_byte(0x48);
 16307  03DE  3048               	movlw	72
 16308  03DF  318B  23A3  3180   	fcall	_uart1_send_byte
 16309                           
 16310                           ;handle_floor.c: 333: delay_ms(150);
 16311  03E2  3096               	movlw	150
 16312  03E3  00F0               	movwf	delay_ms@count
 16313  03E4  01F1               	clrf	delay_ms@count+1
 16314  03E5  318C  24C6  3180   	fcall	_delay_ms
 16315  03E8                     l6020:	
 16316                           
 16317                           ;handle_floor.c: 334: }
 16318                           ;handle_floor.c: 335: if (floor[2] & 0x10)
 16319  03E8  0020               	movlb	0	; select bank0
 16320  03E9  1E24               	btfss	deal_floor@floor+2,4
 16321  03EA  2BFD               	goto	l6024
 16322                           
 16323                           ;handle_floor.c: 336: {
 16324                           ;handle_floor.c: 337: uart1_send_byte(0xF0);
 16325  03EB  30F0               	movlw	240
 16326  03EC  318B  23A3  3180   	fcall	_uart1_send_byte
 16327                           
 16328                           ;handle_floor.c: 338: uart1_send_byte(0xF1);
 16329  03EF  30F1               	movlw	241
 16330  03F0  318B  23A3  3180   	fcall	_uart1_send_byte
 16331                           
 16332                           ;handle_floor.c: 339: uart1_send_byte(0x51);
 16333  03F3  3051               	movlw	81
 16334  03F4  318B  23A3  3180   	fcall	_uart1_send_byte
 16335                           
 16336                           ;handle_floor.c: 340: delay_ms(150);
 16337  03F7  3096               	movlw	150
 16338  03F8  00F0               	movwf	delay_ms@count
 16339  03F9  01F1               	clrf	delay_ms@count+1
 16340  03FA  318C  24C6  3180   	fcall	_delay_ms
 16341  03FD                     l6024:	
 16342                           
 16343                           ;handle_floor.c: 341: }
 16344                           ;handle_floor.c: 342: if (floor[2] & 0x20)
 16345  03FD  0020               	movlb	0	; select bank0
 16346  03FE  1EA4               	btfss	deal_floor@floor+2,5
 16347  03FF  2C12               	goto	l6028
 16348                           
 16349                           ;handle_floor.c: 343: {
 16350                           ;handle_floor.c: 344: uart1_send_byte(0xF0);
 16351  0400  30F0               	movlw	240
 16352  0401  318B  23A3  3180   	fcall	_uart1_send_byte
 16353                           
 16354                           ;handle_floor.c: 345: uart1_send_byte(0xF1);
 16355  0404  30F1               	movlw	241
 16356  0405  318B  23A3  3180   	fcall	_uart1_send_byte
 16357                           
 16358                           ;handle_floor.c: 346: uart1_send_byte(0x52);
 16359  0408  3052               	movlw	82
 16360  0409  318B  23A3  3180   	fcall	_uart1_send_byte
 16361                           
 16362                           ;handle_floor.c: 347: delay_ms(150);
 16363  040C  3096               	movlw	150
 16364  040D  00F0               	movwf	delay_ms@count
 16365  040E  01F1               	clrf	delay_ms@count+1
 16366  040F  318C  24C6  3180   	fcall	_delay_ms
 16367  0412                     l6028:	
 16368                           
 16369                           ;handle_floor.c: 348: }
 16370                           ;handle_floor.c: 349: if (floor[2] & 0x40)
 16371  0412  0020               	movlb	0	; select bank0
 16372  0413  1F24               	btfss	deal_floor@floor+2,6
 16373  0414  2C27               	goto	l6032
 16374                           
 16375                           ;handle_floor.c: 350: {
 16376                           ;handle_floor.c: 351: uart1_send_byte(0xF0);
 16377  0415  30F0               	movlw	240
 16378  0416  318B  23A3  3180   	fcall	_uart1_send_byte
 16379                           
 16380                           ;handle_floor.c: 352: uart1_send_byte(0xF1);
 16381  0419  30F1               	movlw	241
 16382  041A  318B  23A3  3180   	fcall	_uart1_send_byte
 16383                           
 16384                           ;handle_floor.c: 353: uart1_send_byte(0x54);
 16385  041D  3054               	movlw	84
 16386  041E  318B  23A3  3180   	fcall	_uart1_send_byte
 16387                           
 16388                           ;handle_floor.c: 354: delay_ms(150);
 16389  0421  3096               	movlw	150
 16390  0422  00F0               	movwf	delay_ms@count
 16391  0423  01F1               	clrf	delay_ms@count+1
 16392  0424  318C  24C6  3180   	fcall	_delay_ms
 16393  0427                     l6032:	
 16394                           
 16395                           ;handle_floor.c: 355: }
 16396                           ;handle_floor.c: 356: if (floor[2] & 0x80)
 16397  0427  0020               	movlb	0	; select bank0
 16398  0428  1FA4               	btfss	deal_floor@floor+2,7
 16399  0429  2C3C               	goto	l6036
 16400                           
 16401                           ;handle_floor.c: 357: {
 16402                           ;handle_floor.c: 358: uart1_send_byte(0xF0);
 16403  042A  30F0               	movlw	240
 16404  042B  318B  23A3  3180   	fcall	_uart1_send_byte
 16405                           
 16406                           ;handle_floor.c: 359: uart1_send_byte(0xF1);
 16407  042E  30F1               	movlw	241
 16408  042F  318B  23A3  3180   	fcall	_uart1_send_byte
 16409                           
 16410                           ;handle_floor.c: 360: uart1_send_byte(0x58);
 16411  0432  3058               	movlw	88
 16412  0433  318B  23A3  3180   	fcall	_uart1_send_byte
 16413                           
 16414                           ;handle_floor.c: 361: delay_ms(150);
 16415  0436  3096               	movlw	150
 16416  0437  00F0               	movwf	delay_ms@count
 16417  0438  01F1               	clrf	delay_ms@count+1
 16418  0439  318C  24C6  3180   	fcall	_delay_ms
 16419  043C                     l6036:	
 16420                           
 16421                           ;handle_floor.c: 362: }
 16422                           ;handle_floor.c: 364: if (floor[3] & 0x01)
 16423  043C  0020               	movlb	0	; select bank0
 16424  043D  1C25               	btfss	deal_floor@floor+3,0
 16425  043E  2C51               	goto	l6040
 16426                           
 16427                           ;handle_floor.c: 365: {
 16428                           ;handle_floor.c: 366: uart1_send_byte(0xF0);
 16429  043F  30F0               	movlw	240
 16430  0440  318B  23A3  3180   	fcall	_uart1_send_byte
 16431                           
 16432                           ;handle_floor.c: 367: uart1_send_byte(0xF1);
 16433  0443  30F1               	movlw	241
 16434  0444  318B  23A3  3180   	fcall	_uart1_send_byte
 16435                           
 16436                           ;handle_floor.c: 368: uart1_send_byte(0x61);
 16437  0447  3061               	movlw	97
 16438  0448  318B  23A3  3180   	fcall	_uart1_send_byte
 16439                           
 16440                           ;handle_floor.c: 369: delay_ms(150);
 16441  044B  3096               	movlw	150
 16442  044C  00F0               	movwf	delay_ms@count
 16443  044D  01F1               	clrf	delay_ms@count+1
 16444  044E  318C  24C6  3180   	fcall	_delay_ms
 16445  0451                     l6040:	
 16446                           
 16447                           ;handle_floor.c: 370: }
 16448                           ;handle_floor.c: 371: if (floor[3] & 0x02)
 16449  0451  0020               	movlb	0	; select bank0
 16450  0452  1CA5               	btfss	deal_floor@floor+3,1
 16451  0453  2C66               	goto	l6044
 16452                           
 16453                           ;handle_floor.c: 372: {
 16454                           ;handle_floor.c: 373: uart1_send_byte(0xF0);
 16455  0454  30F0               	movlw	240
 16456  0455  318B  23A3  3180   	fcall	_uart1_send_byte
 16457                           
 16458                           ;handle_floor.c: 374: uart1_send_byte(0xF1);
 16459  0458  30F1               	movlw	241
 16460  0459  318B  23A3  3180   	fcall	_uart1_send_byte
 16461                           
 16462                           ;handle_floor.c: 375: uart1_send_byte(0x62);
 16463  045C  3062               	movlw	98
 16464  045D  318B  23A3  3180   	fcall	_uart1_send_byte
 16465                           
 16466                           ;handle_floor.c: 376: delay_ms(150);
 16467  0460  3096               	movlw	150
 16468  0461  00F0               	movwf	delay_ms@count
 16469  0462  01F1               	clrf	delay_ms@count+1
 16470  0463  318C  24C6  3180   	fcall	_delay_ms
 16471  0466                     l6044:	
 16472                           
 16473                           ;handle_floor.c: 377: }
 16474                           ;handle_floor.c: 378: if (floor[3] & 0x04)
 16475  0466  0020               	movlb	0	; select bank0
 16476  0467  1D25               	btfss	deal_floor@floor+3,2
 16477  0468  2C7B               	goto	l6048
 16478                           
 16479                           ;handle_floor.c: 379: {
 16480                           ;handle_floor.c: 380: uart1_send_byte(0xF0);
 16481  0469  30F0               	movlw	240
 16482  046A  318B  23A3  3180   	fcall	_uart1_send_byte
 16483                           
 16484                           ;handle_floor.c: 381: uart1_send_byte(0xF1);
 16485  046D  30F1               	movlw	241
 16486  046E  318B  23A3  3180   	fcall	_uart1_send_byte
 16487                           
 16488                           ;handle_floor.c: 382: uart1_send_byte(0x64);
 16489  0471  3064               	movlw	100
 16490  0472  318B  23A3  3180   	fcall	_uart1_send_byte
 16491                           
 16492                           ;handle_floor.c: 383: delay_ms(150);
 16493  0475  3096               	movlw	150
 16494  0476  00F0               	movwf	delay_ms@count
 16495  0477  01F1               	clrf	delay_ms@count+1
 16496  0478  318C  24C6  3180   	fcall	_delay_ms
 16497  047B                     l6048:	
 16498                           
 16499                           ;handle_floor.c: 384: }
 16500                           ;handle_floor.c: 385: if (floor[3] & 0x08)
 16501  047B  0020               	movlb	0	; select bank0
 16502  047C  1DA5               	btfss	deal_floor@floor+3,3
 16503  047D  2C90               	goto	l6052
 16504                           
 16505                           ;handle_floor.c: 386: {
 16506                           ;handle_floor.c: 387: uart1_send_byte(0xF0);
 16507  047E  30F0               	movlw	240
 16508  047F  318B  23A3  3180   	fcall	_uart1_send_byte
 16509                           
 16510                           ;handle_floor.c: 388: uart1_send_byte(0xF1);
 16511  0482  30F1               	movlw	241
 16512  0483  318B  23A3  3180   	fcall	_uart1_send_byte
 16513                           
 16514                           ;handle_floor.c: 389: uart1_send_byte(0x68);
 16515  0486  3068               	movlw	104
 16516  0487  318B  23A3  3180   	fcall	_uart1_send_byte
 16517                           
 16518                           ;handle_floor.c: 390: delay_ms(150);
 16519  048A  3096               	movlw	150
 16520  048B  00F0               	movwf	delay_ms@count
 16521  048C  01F1               	clrf	delay_ms@count+1
 16522  048D  318C  24C6  3180   	fcall	_delay_ms
 16523  0490                     l6052:	
 16524                           
 16525                           ;handle_floor.c: 391: }
 16526                           ;handle_floor.c: 392: if (floor[3] & 0x10)
 16527  0490  0020               	movlb	0	; select bank0
 16528  0491  1E25               	btfss	deal_floor@floor+3,4
 16529  0492  2CA5               	goto	l6056
 16530                           
 16531                           ;handle_floor.c: 393: {
 16532                           ;handle_floor.c: 394: uart1_send_byte(0xF0);
 16533  0493  30F0               	movlw	240
 16534  0494  318B  23A3  3180   	fcall	_uart1_send_byte
 16535                           
 16536                           ;handle_floor.c: 395: uart1_send_byte(0xF1);
 16537  0497  30F1               	movlw	241
 16538  0498  318B  23A3  3180   	fcall	_uart1_send_byte
 16539                           
 16540                           ;handle_floor.c: 396: uart1_send_byte(0x71);
 16541  049B  3071               	movlw	113
 16542  049C  318B  23A3  3180   	fcall	_uart1_send_byte
 16543                           
 16544                           ;handle_floor.c: 397: delay_ms(150);
 16545  049F  3096               	movlw	150
 16546  04A0  00F0               	movwf	delay_ms@count
 16547  04A1  01F1               	clrf	delay_ms@count+1
 16548  04A2  318C  24C6  3180   	fcall	_delay_ms
 16549  04A5                     l6056:	
 16550                           
 16551                           ;handle_floor.c: 398: }
 16552                           ;handle_floor.c: 399: if (floor[3] & 0x20)
 16553  04A5  0020               	movlb	0	; select bank0
 16554  04A6  1EA5               	btfss	deal_floor@floor+3,5
 16555  04A7  2CBA               	goto	l6060
 16556                           
 16557                           ;handle_floor.c: 400: {
 16558                           ;handle_floor.c: 401: uart1_send_byte(0xF0);
 16559  04A8  30F0               	movlw	240
 16560  04A9  318B  23A3  3180   	fcall	_uart1_send_byte
 16561                           
 16562                           ;handle_floor.c: 402: uart1_send_byte(0xF1);
 16563  04AC  30F1               	movlw	241
 16564  04AD  318B  23A3  3180   	fcall	_uart1_send_byte
 16565                           
 16566                           ;handle_floor.c: 403: uart1_send_byte(0x72);
 16567  04B0  3072               	movlw	114
 16568  04B1  318B  23A3  3180   	fcall	_uart1_send_byte
 16569                           
 16570                           ;handle_floor.c: 404: delay_ms(150);
 16571  04B4  3096               	movlw	150
 16572  04B5  00F0               	movwf	delay_ms@count
 16573  04B6  01F1               	clrf	delay_ms@count+1
 16574  04B7  318C  24C6  3180   	fcall	_delay_ms
 16575  04BA                     l6060:	
 16576                           
 16577                           ;handle_floor.c: 405: }
 16578                           ;handle_floor.c: 406: if (floor[3] & 0x40)
 16579  04BA  0020               	movlb	0	; select bank0
 16580  04BB  1F25               	btfss	deal_floor@floor+3,6
 16581  04BC  2CCF               	goto	l6064
 16582                           
 16583                           ;handle_floor.c: 407: {
 16584                           ;handle_floor.c: 408: uart1_send_byte(0xF0);
 16585  04BD  30F0               	movlw	240
 16586  04BE  318B  23A3  3180   	fcall	_uart1_send_byte
 16587                           
 16588                           ;handle_floor.c: 409: uart1_send_byte(0xF1);
 16589  04C1  30F1               	movlw	241
 16590  04C2  318B  23A3  3180   	fcall	_uart1_send_byte
 16591                           
 16592                           ;handle_floor.c: 410: uart1_send_byte(0x74);
 16593  04C5  3074               	movlw	116
 16594  04C6  318B  23A3  3180   	fcall	_uart1_send_byte
 16595                           
 16596                           ;handle_floor.c: 411: delay_ms(150);
 16597  04C9  3096               	movlw	150
 16598  04CA  00F0               	movwf	delay_ms@count
 16599  04CB  01F1               	clrf	delay_ms@count+1
 16600  04CC  318C  24C6  3180   	fcall	_delay_ms
 16601  04CF                     l6064:	
 16602                           
 16603                           ;handle_floor.c: 412: }
 16604                           ;handle_floor.c: 413: if (floor[3] & 0x80)
 16605  04CF  0020               	movlb	0	; select bank0
 16606  04D0  1FA5               	btfss	deal_floor@floor+3,7
 16607  04D1  2CE4               	goto	l6068
 16608                           
 16609                           ;handle_floor.c: 414: {
 16610                           ;handle_floor.c: 415: uart1_send_byte(0xF0);
 16611  04D2  30F0               	movlw	240
 16612  04D3  318B  23A3  3180   	fcall	_uart1_send_byte
 16613                           
 16614                           ;handle_floor.c: 416: uart1_send_byte(0xF1);
 16615  04D6  30F1               	movlw	241
 16616  04D7  318B  23A3  3180   	fcall	_uart1_send_byte
 16617                           
 16618                           ;handle_floor.c: 417: uart1_send_byte(0x78);
 16619  04DA  3078               	movlw	120
 16620  04DB  318B  23A3  3180   	fcall	_uart1_send_byte
 16621                           
 16622                           ;handle_floor.c: 418: delay_ms(150);
 16623  04DE  3096               	movlw	150
 16624  04DF  00F0               	movwf	delay_ms@count
 16625  04E0  01F1               	clrf	delay_ms@count+1
 16626  04E1  318C  24C6  3180   	fcall	_delay_ms
 16627  04E4                     l6068:	
 16628                           
 16629                           ;handle_floor.c: 419: }
 16630                           ;handle_floor.c: 421: if (floor[4] & 0x01)
 16631  04E4  0020               	movlb	0	; select bank0
 16632  04E5  1C26               	btfss	deal_floor@floor+4,0
 16633  04E6  2CF9               	goto	l6072
 16634                           
 16635                           ;handle_floor.c: 422: {
 16636                           ;handle_floor.c: 423: uart1_send_byte(0xF0);
 16637  04E7  30F0               	movlw	240
 16638  04E8  318B  23A3  3180   	fcall	_uart1_send_byte
 16639                           
 16640                           ;handle_floor.c: 424: uart1_send_byte(0xF1);
 16641  04EB  30F1               	movlw	241
 16642  04EC  318B  23A3  3180   	fcall	_uart1_send_byte
 16643                           
 16644                           ;handle_floor.c: 425: uart1_send_byte(0x81);
 16645  04EF  3081               	movlw	129
 16646  04F0  318B  23A3  3180   	fcall	_uart1_send_byte
 16647                           
 16648                           ;handle_floor.c: 426: delay_ms(150);
 16649  04F3  3096               	movlw	150
 16650  04F4  00F0               	movwf	delay_ms@count
 16651  04F5  01F1               	clrf	delay_ms@count+1
 16652  04F6  318C  24C6  3180   	fcall	_delay_ms
 16653  04F9                     l6072:	
 16654                           
 16655                           ;handle_floor.c: 427: }
 16656                           ;handle_floor.c: 428: if (floor[4] & 0x02)
 16657  04F9  0020               	movlb	0	; select bank0
 16658  04FA  1CA6               	btfss	deal_floor@floor+4,1
 16659  04FB  2D0E               	goto	l6076
 16660                           
 16661                           ;handle_floor.c: 429: {
 16662                           ;handle_floor.c: 430: uart1_send_byte(0xF0);
 16663  04FC  30F0               	movlw	240
 16664  04FD  318B  23A3  3180   	fcall	_uart1_send_byte
 16665                           
 16666                           ;handle_floor.c: 431: uart1_send_byte(0xF1);
 16667  0500  30F1               	movlw	241
 16668  0501  318B  23A3  3180   	fcall	_uart1_send_byte
 16669                           
 16670                           ;handle_floor.c: 432: uart1_send_byte(0x82);
 16671  0504  3082               	movlw	130
 16672  0505  318B  23A3  3180   	fcall	_uart1_send_byte
 16673                           
 16674                           ;handle_floor.c: 433: delay_ms(150);
 16675  0508  3096               	movlw	150
 16676  0509  00F0               	movwf	delay_ms@count
 16677  050A  01F1               	clrf	delay_ms@count+1
 16678  050B  318C  24C6  3180   	fcall	_delay_ms
 16679  050E                     l6076:	
 16680                           
 16681                           ;handle_floor.c: 434: }
 16682                           ;handle_floor.c: 435: if (floor[4] & 0x04)
 16683  050E  0020               	movlb	0	; select bank0
 16684  050F  1D26               	btfss	deal_floor@floor+4,2
 16685  0510  2D23               	goto	l6080
 16686                           
 16687                           ;handle_floor.c: 436: {
 16688                           ;handle_floor.c: 437: uart1_send_byte(0xF0);
 16689  0511  30F0               	movlw	240
 16690  0512  318B  23A3  3180   	fcall	_uart1_send_byte
 16691                           
 16692                           ;handle_floor.c: 438: uart1_send_byte(0xF1);
 16693  0515  30F1               	movlw	241
 16694  0516  318B  23A3  3180   	fcall	_uart1_send_byte
 16695                           
 16696                           ;handle_floor.c: 439: uart1_send_byte(0x84);
 16697  0519  3084               	movlw	132
 16698  051A  318B  23A3  3180   	fcall	_uart1_send_byte
 16699                           
 16700                           ;handle_floor.c: 440: delay_ms(150);
 16701  051D  3096               	movlw	150
 16702  051E  00F0               	movwf	delay_ms@count
 16703  051F  01F1               	clrf	delay_ms@count+1
 16704  0520  318C  24C6  3180   	fcall	_delay_ms
 16705  0523                     l6080:	
 16706                           
 16707                           ;handle_floor.c: 441: }
 16708                           ;handle_floor.c: 442: if (floor[4] & 0x08)
 16709  0523  0020               	movlb	0	; select bank0
 16710  0524  1DA6               	btfss	deal_floor@floor+4,3
 16711  0525  2D38               	goto	l6084
 16712                           
 16713                           ;handle_floor.c: 443: {
 16714                           ;handle_floor.c: 444: uart1_send_byte(0xF0);
 16715  0526  30F0               	movlw	240
 16716  0527  318B  23A3  3180   	fcall	_uart1_send_byte
 16717                           
 16718                           ;handle_floor.c: 445: uart1_send_byte(0xF1);
 16719  052A  30F1               	movlw	241
 16720  052B  318B  23A3  3180   	fcall	_uart1_send_byte
 16721                           
 16722                           ;handle_floor.c: 446: uart1_send_byte(0x88);
 16723  052E  3088               	movlw	136
 16724  052F  318B  23A3  3180   	fcall	_uart1_send_byte
 16725                           
 16726                           ;handle_floor.c: 447: delay_ms(150);
 16727  0532  3096               	movlw	150
 16728  0533  00F0               	movwf	delay_ms@count
 16729  0534  01F1               	clrf	delay_ms@count+1
 16730  0535  318C  24C6  3180   	fcall	_delay_ms
 16731  0538                     l6084:	
 16732                           
 16733                           ;handle_floor.c: 448: }
 16734                           ;handle_floor.c: 449: if (floor[4] & 0x10)
 16735  0538  0020               	movlb	0	; select bank0
 16736  0539  1E26               	btfss	deal_floor@floor+4,4
 16737  053A  2D4D               	goto	l6088
 16738                           
 16739                           ;handle_floor.c: 450: {
 16740                           ;handle_floor.c: 451: uart1_send_byte(0xF0);
 16741  053B  30F0               	movlw	240
 16742  053C  318B  23A3  3180   	fcall	_uart1_send_byte
 16743                           
 16744                           ;handle_floor.c: 452: uart1_send_byte(0xF1);
 16745  053F  30F1               	movlw	241
 16746  0540  318B  23A3  3180   	fcall	_uart1_send_byte
 16747                           
 16748                           ;handle_floor.c: 453: uart1_send_byte(0x91);
 16749  0543  3091               	movlw	145
 16750  0544  318B  23A3  3180   	fcall	_uart1_send_byte
 16751                           
 16752                           ;handle_floor.c: 454: delay_ms(150);
 16753  0547  3096               	movlw	150
 16754  0548  00F0               	movwf	delay_ms@count
 16755  0549  01F1               	clrf	delay_ms@count+1
 16756  054A  318C  24C6  3180   	fcall	_delay_ms
 16757  054D                     l6088:	
 16758                           
 16759                           ;handle_floor.c: 455: }
 16760                           ;handle_floor.c: 456: if (floor[4] & 0x20)
 16761  054D  0020               	movlb	0	; select bank0
 16762  054E  1EA6               	btfss	deal_floor@floor+4,5
 16763  054F  2D62               	goto	l6092
 16764                           
 16765                           ;handle_floor.c: 457: {
 16766                           ;handle_floor.c: 458: uart1_send_byte(0xF0);
 16767  0550  30F0               	movlw	240
 16768  0551  318B  23A3  3180   	fcall	_uart1_send_byte
 16769                           
 16770                           ;handle_floor.c: 459: uart1_send_byte(0xF1);
 16771  0554  30F1               	movlw	241
 16772  0555  318B  23A3  3180   	fcall	_uart1_send_byte
 16773                           
 16774                           ;handle_floor.c: 460: uart1_send_byte(0x92);
 16775  0558  3092               	movlw	146
 16776  0559  318B  23A3  3180   	fcall	_uart1_send_byte
 16777                           
 16778                           ;handle_floor.c: 461: delay_ms(150);
 16779  055C  3096               	movlw	150
 16780  055D  00F0               	movwf	delay_ms@count
 16781  055E  01F1               	clrf	delay_ms@count+1
 16782  055F  318C  24C6  3180   	fcall	_delay_ms
 16783  0562                     l6092:	
 16784                           
 16785                           ;handle_floor.c: 462: }
 16786                           ;handle_floor.c: 463: if (floor[4] & 0x40)
 16787  0562  0020               	movlb	0	; select bank0
 16788  0563  1F26               	btfss	deal_floor@floor+4,6
 16789  0564  2D77               	goto	l6096
 16790                           
 16791                           ;handle_floor.c: 464: {
 16792                           ;handle_floor.c: 465: uart1_send_byte(0xF0);
 16793  0565  30F0               	movlw	240
 16794  0566  318B  23A3  3180   	fcall	_uart1_send_byte
 16795                           
 16796                           ;handle_floor.c: 466: uart1_send_byte(0xF1);
 16797  0569  30F1               	movlw	241
 16798  056A  318B  23A3  3180   	fcall	_uart1_send_byte
 16799                           
 16800                           ;handle_floor.c: 467: uart1_send_byte(0x94);
 16801  056D  3094               	movlw	148
 16802  056E  318B  23A3  3180   	fcall	_uart1_send_byte
 16803                           
 16804                           ;handle_floor.c: 468: delay_ms(150);
 16805  0571  3096               	movlw	150
 16806  0572  00F0               	movwf	delay_ms@count
 16807  0573  01F1               	clrf	delay_ms@count+1
 16808  0574  318C  24C6  3180   	fcall	_delay_ms
 16809  0577                     l6096:	
 16810                           
 16811                           ;handle_floor.c: 469: }
 16812                           ;handle_floor.c: 470: if (floor[4] & 0x80)
 16813  0577  0020               	movlb	0	; select bank0
 16814  0578  1FA6               	btfss	deal_floor@floor+4,7
 16815  0579  2D8C               	goto	l6100
 16816                           
 16817                           ;handle_floor.c: 471: {
 16818                           ;handle_floor.c: 472: uart1_send_byte(0xF0);
 16819  057A  30F0               	movlw	240
 16820  057B  318B  23A3  3180   	fcall	_uart1_send_byte
 16821                           
 16822                           ;handle_floor.c: 473: uart1_send_byte(0xF1);
 16823  057E  30F1               	movlw	241
 16824  057F  318B  23A3  3180   	fcall	_uart1_send_byte
 16825                           
 16826                           ;handle_floor.c: 474: uart1_send_byte(0x98);
 16827  0582  3098               	movlw	152
 16828  0583  318B  23A3  3180   	fcall	_uart1_send_byte
 16829                           
 16830                           ;handle_floor.c: 475: delay_ms(150);
 16831  0586  3096               	movlw	150
 16832  0587  00F0               	movwf	delay_ms@count
 16833  0588  01F1               	clrf	delay_ms@count+1
 16834  0589  318C  24C6  3180   	fcall	_delay_ms
 16835  058C                     l6100:	
 16836                           
 16837                           ;handle_floor.c: 476: }
 16838                           ;handle_floor.c: 478: if (floor[5] & 0x01)
 16839  058C  0020               	movlb	0	; select bank0
 16840  058D  1C27               	btfss	deal_floor@floor+5,0
 16841  058E  2DA1               	goto	l6104
 16842                           
 16843                           ;handle_floor.c: 479: {
 16844                           ;handle_floor.c: 480: uart1_send_byte(0xF0);
 16845  058F  30F0               	movlw	240
 16846  0590  318B  23A3  3180   	fcall	_uart1_send_byte
 16847                           
 16848                           ;handle_floor.c: 481: uart1_send_byte(0xF1);
 16849  0593  30F1               	movlw	241
 16850  0594  318B  23A3  3180   	fcall	_uart1_send_byte
 16851                           
 16852                           ;handle_floor.c: 482: uart1_send_byte(0xA1);
 16853  0597  30A1               	movlw	161
 16854  0598  318B  23A3  3180   	fcall	_uart1_send_byte
 16855                           
 16856                           ;handle_floor.c: 483: delay_ms(150);
 16857  059B  3096               	movlw	150
 16858  059C  00F0               	movwf	delay_ms@count
 16859  059D  01F1               	clrf	delay_ms@count+1
 16860  059E  318C  24C6  3180   	fcall	_delay_ms
 16861  05A1                     l6104:	
 16862                           
 16863                           ;handle_floor.c: 484: }
 16864                           ;handle_floor.c: 485: if (floor[5] & 0x02)
 16865  05A1  0020               	movlb	0	; select bank0
 16866  05A2  1CA7               	btfss	deal_floor@floor+5,1
 16867  05A3  2DB6               	goto	l6108
 16868                           
 16869                           ;handle_floor.c: 486: {
 16870                           ;handle_floor.c: 487: uart1_send_byte(0xF0);
 16871  05A4  30F0               	movlw	240
 16872  05A5  318B  23A3  3180   	fcall	_uart1_send_byte
 16873                           
 16874                           ;handle_floor.c: 488: uart1_send_byte(0xF1);
 16875  05A8  30F1               	movlw	241
 16876  05A9  318B  23A3  3180   	fcall	_uart1_send_byte
 16877                           
 16878                           ;handle_floor.c: 489: uart1_send_byte(0xA2);
 16879  05AC  30A2               	movlw	162
 16880  05AD  318B  23A3  3180   	fcall	_uart1_send_byte
 16881                           
 16882                           ;handle_floor.c: 490: delay_ms(150);
 16883  05B0  3096               	movlw	150
 16884  05B1  00F0               	movwf	delay_ms@count
 16885  05B2  01F1               	clrf	delay_ms@count+1
 16886  05B3  318C  24C6  3180   	fcall	_delay_ms
 16887  05B6                     l6108:	
 16888                           
 16889                           ;handle_floor.c: 491: }
 16890                           ;handle_floor.c: 492: if (floor[5] & 0x04)
 16891  05B6  0020               	movlb	0	; select bank0
 16892  05B7  1D27               	btfss	deal_floor@floor+5,2
 16893  05B8  2DCB               	goto	l6112
 16894                           
 16895                           ;handle_floor.c: 493: {
 16896                           ;handle_floor.c: 494: uart1_send_byte(0xF0);
 16897  05B9  30F0               	movlw	240
 16898  05BA  318B  23A3  3180   	fcall	_uart1_send_byte
 16899                           
 16900                           ;handle_floor.c: 495: uart1_send_byte(0xF1);
 16901  05BD  30F1               	movlw	241
 16902  05BE  318B  23A3  3180   	fcall	_uart1_send_byte
 16903                           
 16904                           ;handle_floor.c: 496: uart1_send_byte(0xA4);
 16905  05C1  30A4               	movlw	164
 16906  05C2  318B  23A3  3180   	fcall	_uart1_send_byte
 16907                           
 16908                           ;handle_floor.c: 497: delay_ms(150);
 16909  05C5  3096               	movlw	150
 16910  05C6  00F0               	movwf	delay_ms@count
 16911  05C7  01F1               	clrf	delay_ms@count+1
 16912  05C8  318C  24C6  3180   	fcall	_delay_ms
 16913  05CB                     l6112:	
 16914                           
 16915                           ;handle_floor.c: 498: }
 16916                           ;handle_floor.c: 499: if (floor[5] & 0x08)
 16917  05CB  0020               	movlb	0	; select bank0
 16918  05CC  1DA7               	btfss	deal_floor@floor+5,3
 16919  05CD  2DE0               	goto	l6116
 16920                           
 16921                           ;handle_floor.c: 500: {
 16922                           ;handle_floor.c: 501: uart1_send_byte(0xF0);
 16923  05CE  30F0               	movlw	240
 16924  05CF  318B  23A3  3180   	fcall	_uart1_send_byte
 16925                           
 16926                           ;handle_floor.c: 502: uart1_send_byte(0xF1);
 16927  05D2  30F1               	movlw	241
 16928  05D3  318B  23A3  3180   	fcall	_uart1_send_byte
 16929                           
 16930                           ;handle_floor.c: 503: uart1_send_byte(0xA8);
 16931  05D6  30A8               	movlw	168
 16932  05D7  318B  23A3  3180   	fcall	_uart1_send_byte
 16933                           
 16934                           ;handle_floor.c: 504: delay_ms(150);
 16935  05DA  3096               	movlw	150
 16936  05DB  00F0               	movwf	delay_ms@count
 16937  05DC  01F1               	clrf	delay_ms@count+1
 16938  05DD  318C  24C6  3180   	fcall	_delay_ms
 16939  05E0                     l6116:	
 16940                           
 16941                           ;handle_floor.c: 505: }
 16942                           ;handle_floor.c: 506: if (floor[5] & 0x10)
 16943  05E0  0020               	movlb	0	; select bank0
 16944  05E1  1E27               	btfss	deal_floor@floor+5,4
 16945  05E2  2DF5               	goto	l6120
 16946                           
 16947                           ;handle_floor.c: 507: {
 16948                           ;handle_floor.c: 508: uart1_send_byte(0xF0);
 16949  05E3  30F0               	movlw	240
 16950  05E4  318B  23A3  3180   	fcall	_uart1_send_byte
 16951                           
 16952                           ;handle_floor.c: 509: uart1_send_byte(0xF1);
 16953  05E7  30F1               	movlw	241
 16954  05E8  318B  23A3  3180   	fcall	_uart1_send_byte
 16955                           
 16956                           ;handle_floor.c: 510: uart1_send_byte(0xB1);
 16957  05EB  30B1               	movlw	177
 16958  05EC  318B  23A3  3180   	fcall	_uart1_send_byte
 16959                           
 16960                           ;handle_floor.c: 511: delay_ms(150);
 16961  05EF  3096               	movlw	150
 16962  05F0  00F0               	movwf	delay_ms@count
 16963  05F1  01F1               	clrf	delay_ms@count+1
 16964  05F2  318C  24C6  3180   	fcall	_delay_ms
 16965  05F5                     l6120:	
 16966                           
 16967                           ;handle_floor.c: 512: }
 16968                           ;handle_floor.c: 513: if (floor[5] & 0x20)
 16969  05F5  0020               	movlb	0	; select bank0
 16970  05F6  1EA7               	btfss	deal_floor@floor+5,5
 16971  05F7  2E0A               	goto	l6124
 16972                           
 16973                           ;handle_floor.c: 514: {
 16974                           ;handle_floor.c: 515: uart1_send_byte(0xF0);
 16975  05F8  30F0               	movlw	240
 16976  05F9  318B  23A3  3180   	fcall	_uart1_send_byte
 16977                           
 16978                           ;handle_floor.c: 516: uart1_send_byte(0xF1);
 16979  05FC  30F1               	movlw	241
 16980  05FD  318B  23A3  3180   	fcall	_uart1_send_byte
 16981                           
 16982                           ;handle_floor.c: 517: uart1_send_byte(0xB2);
 16983  0600  30B2               	movlw	178
 16984  0601  318B  23A3  3180   	fcall	_uart1_send_byte
 16985                           
 16986                           ;handle_floor.c: 518: delay_ms(150);
 16987  0604  3096               	movlw	150
 16988  0605  00F0               	movwf	delay_ms@count
 16989  0606  01F1               	clrf	delay_ms@count+1
 16990  0607  318C  24C6  3180   	fcall	_delay_ms
 16991  060A                     l6124:	
 16992                           
 16993                           ;handle_floor.c: 519: }
 16994                           ;handle_floor.c: 520: if (floor[5] & 0x40)
 16995  060A  0020               	movlb	0	; select bank0
 16996  060B  1F27               	btfss	deal_floor@floor+5,6
 16997  060C  2E1F               	goto	l6128
 16998                           
 16999                           ;handle_floor.c: 521: {
 17000                           ;handle_floor.c: 522: uart1_send_byte(0xF0);
 17001  060D  30F0               	movlw	240
 17002  060E  318B  23A3  3180   	fcall	_uart1_send_byte
 17003                           
 17004                           ;handle_floor.c: 523: uart1_send_byte(0xF1);
 17005  0611  30F1               	movlw	241
 17006  0612  318B  23A3  3180   	fcall	_uart1_send_byte
 17007                           
 17008                           ;handle_floor.c: 524: uart1_send_byte(0xB4);
 17009  0615  30B4               	movlw	180
 17010  0616  318B  23A3  3180   	fcall	_uart1_send_byte
 17011                           
 17012                           ;handle_floor.c: 525: delay_ms(150);
 17013  0619  3096               	movlw	150
 17014  061A  00F0               	movwf	delay_ms@count
 17015  061B  01F1               	clrf	delay_ms@count+1
 17016  061C  318C  24C6  3180   	fcall	_delay_ms
 17017  061F                     l6128:	
 17018                           
 17019                           ;handle_floor.c: 526: }
 17020                           ;handle_floor.c: 527: if (floor[5] & 0x80)
 17021  061F  0020               	movlb	0	; select bank0
 17022  0620  1FA7               	btfss	deal_floor@floor+5,7
 17023  0621  2E34               	goto	l6132
 17024                           
 17025                           ;handle_floor.c: 528: {
 17026                           ;handle_floor.c: 529: uart1_send_byte(0xF0);
 17027  0622  30F0               	movlw	240
 17028  0623  318B  23A3  3180   	fcall	_uart1_send_byte
 17029                           
 17030                           ;handle_floor.c: 530: uart1_send_byte(0xF1);
 17031  0626  30F1               	movlw	241
 17032  0627  318B  23A3  3180   	fcall	_uart1_send_byte
 17033                           
 17034                           ;handle_floor.c: 531: uart1_send_byte(0xB8);
 17035  062A  30B8               	movlw	184
 17036  062B  318B  23A3  3180   	fcall	_uart1_send_byte
 17037                           
 17038                           ;handle_floor.c: 532: delay_ms(150);
 17039  062E  3096               	movlw	150
 17040  062F  00F0               	movwf	delay_ms@count
 17041  0630  01F1               	clrf	delay_ms@count+1
 17042  0631  318C  24C6  3180   	fcall	_delay_ms
 17043  0634                     l6132:	
 17044                           
 17045                           ;handle_floor.c: 533: }
 17046                           ;handle_floor.c: 535: if (floor[6] & 0x01)
 17047  0634  0020               	movlb	0	; select bank0
 17048  0635  1C28               	btfss	deal_floor@floor+6,0
 17049  0636  2E49               	goto	l6136
 17050                           
 17051                           ;handle_floor.c: 536: {
 17052                           ;handle_floor.c: 537: uart1_send_byte(0xF0);
 17053  0637  30F0               	movlw	240
 17054  0638  318B  23A3  3180   	fcall	_uart1_send_byte
 17055                           
 17056                           ;handle_floor.c: 538: uart1_send_byte(0xF1);
 17057  063B  30F1               	movlw	241
 17058  063C  318B  23A3  3180   	fcall	_uart1_send_byte
 17059                           
 17060                           ;handle_floor.c: 539: uart1_send_byte(0xC1);
 17061  063F  30C1               	movlw	193
 17062  0640  318B  23A3  3180   	fcall	_uart1_send_byte
 17063                           
 17064                           ;handle_floor.c: 540: delay_ms(150);
 17065  0643  3096               	movlw	150
 17066  0644  00F0               	movwf	delay_ms@count
 17067  0645  01F1               	clrf	delay_ms@count+1
 17068  0646  318C  24C6  3180   	fcall	_delay_ms
 17069  0649                     l6136:	
 17070                           
 17071                           ;handle_floor.c: 541: }
 17072                           ;handle_floor.c: 542: if (floor[6] & 0x02)
 17073  0649  0020               	movlb	0	; select bank0
 17074  064A  1CA8               	btfss	deal_floor@floor+6,1
 17075  064B  2E5E               	goto	l6140
 17076                           
 17077                           ;handle_floor.c: 543: {
 17078                           ;handle_floor.c: 544: uart1_send_byte(0xF0);
 17079  064C  30F0               	movlw	240
 17080  064D  318B  23A3  3180   	fcall	_uart1_send_byte
 17081                           
 17082                           ;handle_floor.c: 545: uart1_send_byte(0xF1);
 17083  0650  30F1               	movlw	241
 17084  0651  318B  23A3  3180   	fcall	_uart1_send_byte
 17085                           
 17086                           ;handle_floor.c: 546: uart1_send_byte(0xC2);
 17087  0654  30C2               	movlw	194
 17088  0655  318B  23A3  3180   	fcall	_uart1_send_byte
 17089                           
 17090                           ;handle_floor.c: 547: delay_ms(150);
 17091  0658  3096               	movlw	150
 17092  0659  00F0               	movwf	delay_ms@count
 17093  065A  01F1               	clrf	delay_ms@count+1
 17094  065B  318C  24C6  3180   	fcall	_delay_ms
 17095  065E                     l6140:	
 17096                           
 17097                           ;handle_floor.c: 548: }
 17098                           ;handle_floor.c: 549: if (floor[6] & 0x04)
 17099  065E  0020               	movlb	0	; select bank0
 17100  065F  1D28               	btfss	deal_floor@floor+6,2
 17101  0660  2E73               	goto	l6144
 17102                           
 17103                           ;handle_floor.c: 550: {
 17104                           ;handle_floor.c: 551: uart1_send_byte(0xF0);
 17105  0661  30F0               	movlw	240
 17106  0662  318B  23A3  3180   	fcall	_uart1_send_byte
 17107                           
 17108                           ;handle_floor.c: 552: uart1_send_byte(0xF1);
 17109  0665  30F1               	movlw	241
 17110  0666  318B  23A3  3180   	fcall	_uart1_send_byte
 17111                           
 17112                           ;handle_floor.c: 553: uart1_send_byte(0xC4);
 17113  0669  30C4               	movlw	196
 17114  066A  318B  23A3  3180   	fcall	_uart1_send_byte
 17115                           
 17116                           ;handle_floor.c: 554: delay_ms(150);
 17117  066D  3096               	movlw	150
 17118  066E  00F0               	movwf	delay_ms@count
 17119  066F  01F1               	clrf	delay_ms@count+1
 17120  0670  318C  24C6  3180   	fcall	_delay_ms
 17121  0673                     l6144:	
 17122                           
 17123                           ;handle_floor.c: 555: }
 17124                           ;handle_floor.c: 556: if (floor[6] & 0x08)
 17125  0673  0020               	movlb	0	; select bank0
 17126  0674  1DA8               	btfss	deal_floor@floor+6,3
 17127  0675  2E88               	goto	l6148
 17128                           
 17129                           ;handle_floor.c: 557: {
 17130                           ;handle_floor.c: 558: uart1_send_byte(0xF0);
 17131  0676  30F0               	movlw	240
 17132  0677  318B  23A3  3180   	fcall	_uart1_send_byte
 17133                           
 17134                           ;handle_floor.c: 559: uart1_send_byte(0xF1);
 17135  067A  30F1               	movlw	241
 17136  067B  318B  23A3  3180   	fcall	_uart1_send_byte
 17137                           
 17138                           ;handle_floor.c: 560: uart1_send_byte(0xC8);
 17139  067E  30C8               	movlw	200
 17140  067F  318B  23A3  3180   	fcall	_uart1_send_byte
 17141                           
 17142                           ;handle_floor.c: 561: delay_ms(150);
 17143  0682  3096               	movlw	150
 17144  0683  00F0               	movwf	delay_ms@count
 17145  0684  01F1               	clrf	delay_ms@count+1
 17146  0685  318C  24C6  3180   	fcall	_delay_ms
 17147  0688                     l6148:	
 17148                           
 17149                           ;handle_floor.c: 562: }
 17150                           ;handle_floor.c: 563: if (floor[6] & 0x10)
 17151  0688  0020               	movlb	0	; select bank0
 17152  0689  1E28               	btfss	deal_floor@floor+6,4
 17153  068A  2E9D               	goto	l6152
 17154                           
 17155                           ;handle_floor.c: 564: {
 17156                           ;handle_floor.c: 565: uart1_send_byte(0xF0);
 17157  068B  30F0               	movlw	240
 17158  068C  318B  23A3  3180   	fcall	_uart1_send_byte
 17159                           
 17160                           ;handle_floor.c: 566: uart1_send_byte(0xF1);
 17161  068F  30F1               	movlw	241
 17162  0690  318B  23A3  3180   	fcall	_uart1_send_byte
 17163                           
 17164                           ;handle_floor.c: 567: uart1_send_byte(0xD1);
 17165  0693  30D1               	movlw	209
 17166  0694  318B  23A3  3180   	fcall	_uart1_send_byte
 17167                           
 17168                           ;handle_floor.c: 568: delay_ms(150);
 17169  0697  3096               	movlw	150
 17170  0698  00F0               	movwf	delay_ms@count
 17171  0699  01F1               	clrf	delay_ms@count+1
 17172  069A  318C  24C6  3180   	fcall	_delay_ms
 17173  069D                     l6152:	
 17174                           
 17175                           ;handle_floor.c: 569: }
 17176                           ;handle_floor.c: 570: if (floor[6] & 0x20)
 17177  069D  0020               	movlb	0	; select bank0
 17178  069E  1EA8               	btfss	deal_floor@floor+6,5
 17179  069F  2EB2               	goto	l6156
 17180                           
 17181                           ;handle_floor.c: 571: {
 17182                           ;handle_floor.c: 572: uart1_send_byte(0xF0);
 17183  06A0  30F0               	movlw	240
 17184  06A1  318B  23A3  3180   	fcall	_uart1_send_byte
 17185                           
 17186                           ;handle_floor.c: 573: uart1_send_byte(0xF1);
 17187  06A4  30F1               	movlw	241
 17188  06A5  318B  23A3  3180   	fcall	_uart1_send_byte
 17189                           
 17190                           ;handle_floor.c: 574: uart1_send_byte(0xD2);
 17191  06A8  30D2               	movlw	210
 17192  06A9  318B  23A3  3180   	fcall	_uart1_send_byte
 17193                           
 17194                           ;handle_floor.c: 575: delay_ms(150);
 17195  06AC  3096               	movlw	150
 17196  06AD  00F0               	movwf	delay_ms@count
 17197  06AE  01F1               	clrf	delay_ms@count+1
 17198  06AF  318C  24C6  3180   	fcall	_delay_ms
 17199  06B2                     l6156:	
 17200                           
 17201                           ;handle_floor.c: 576: }
 17202                           ;handle_floor.c: 577: if (floor[6] & 0x40)
 17203  06B2  0020               	movlb	0	; select bank0
 17204  06B3  1F28               	btfss	deal_floor@floor+6,6
 17205  06B4  2EC7               	goto	l6160
 17206                           
 17207                           ;handle_floor.c: 578: {
 17208                           ;handle_floor.c: 579: uart1_send_byte(0xF0);
 17209  06B5  30F0               	movlw	240
 17210  06B6  318B  23A3  3180   	fcall	_uart1_send_byte
 17211                           
 17212                           ;handle_floor.c: 580: uart1_send_byte(0xF1);
 17213  06B9  30F1               	movlw	241
 17214  06BA  318B  23A3  3180   	fcall	_uart1_send_byte
 17215                           
 17216                           ;handle_floor.c: 581: uart1_send_byte(0xD4);
 17217  06BD  30D4               	movlw	212
 17218  06BE  318B  23A3  3180   	fcall	_uart1_send_byte
 17219                           
 17220                           ;handle_floor.c: 582: delay_ms(150);
 17221  06C1  3096               	movlw	150
 17222  06C2  00F0               	movwf	delay_ms@count
 17223  06C3  01F1               	clrf	delay_ms@count+1
 17224  06C4  318C  24C6  3180   	fcall	_delay_ms
 17225  06C7                     l6160:	
 17226                           
 17227                           ;handle_floor.c: 583: }
 17228                           ;handle_floor.c: 584: if (floor[6] & 0x80)
 17229  06C7  0020               	movlb	0	; select bank0
 17230  06C8  1FA8               	btfss	deal_floor@floor+6,7
 17231  06C9  2EDC               	goto	l6164
 17232                           
 17233                           ;handle_floor.c: 585: {
 17234                           ;handle_floor.c: 586: uart1_send_byte(0xF0);
 17235  06CA  30F0               	movlw	240
 17236  06CB  318B  23A3  3180   	fcall	_uart1_send_byte
 17237                           
 17238                           ;handle_floor.c: 587: uart1_send_byte(0xF1);
 17239  06CE  30F1               	movlw	241
 17240  06CF  318B  23A3  3180   	fcall	_uart1_send_byte
 17241                           
 17242                           ;handle_floor.c: 588: uart1_send_byte(0xD8);
 17243  06D2  30D8               	movlw	216
 17244  06D3  318B  23A3  3180   	fcall	_uart1_send_byte
 17245                           
 17246                           ;handle_floor.c: 589: delay_ms(150);
 17247  06D6  3096               	movlw	150
 17248  06D7  00F0               	movwf	delay_ms@count
 17249  06D8  01F1               	clrf	delay_ms@count+1
 17250  06D9  318C  24C6  3180   	fcall	_delay_ms
 17251  06DC                     l6164:	
 17252                           
 17253                           ;handle_floor.c: 590: }
 17254                           ;handle_floor.c: 592: if (floor[7] & 0x01)
 17255  06DC  0020               	movlb	0	; select bank0
 17256  06DD  1C29               	btfss	deal_floor@floor+7,0
 17257  06DE  2EF1               	goto	l6168
 17258                           
 17259                           ;handle_floor.c: 593: {
 17260                           ;handle_floor.c: 594: uart1_send_byte(0xF0);
 17261  06DF  30F0               	movlw	240
 17262  06E0  318B  23A3  3180   	fcall	_uart1_send_byte
 17263                           
 17264                           ;handle_floor.c: 595: uart1_send_byte(0xF1);
 17265  06E3  30F1               	movlw	241
 17266  06E4  318B  23A3  3180   	fcall	_uart1_send_byte
 17267                           
 17268                           ;handle_floor.c: 596: uart1_send_byte(0xE1);
 17269  06E7  30E1               	movlw	225
 17270  06E8  318B  23A3  3180   	fcall	_uart1_send_byte
 17271                           
 17272                           ;handle_floor.c: 597: delay_ms(150);
 17273  06EB  3096               	movlw	150
 17274  06EC  00F0               	movwf	delay_ms@count
 17275  06ED  01F1               	clrf	delay_ms@count+1
 17276  06EE  318C  24C6  3180   	fcall	_delay_ms
 17277  06F1                     l6168:	
 17278                           
 17279                           ;handle_floor.c: 598: }
 17280                           ;handle_floor.c: 599: if (floor[7] & 0x02)
 17281  06F1  0020               	movlb	0	; select bank0
 17282  06F2  1CA9               	btfss	deal_floor@floor+7,1
 17283  06F3  2F06               	goto	l6172
 17284                           
 17285                           ;handle_floor.c: 600: {
 17286                           ;handle_floor.c: 601: uart1_send_byte(0xF0);
 17287  06F4  30F0               	movlw	240
 17288  06F5  318B  23A3  3180   	fcall	_uart1_send_byte
 17289                           
 17290                           ;handle_floor.c: 602: uart1_send_byte(0xF1);
 17291  06F8  30F1               	movlw	241
 17292  06F9  318B  23A3  3180   	fcall	_uart1_send_byte
 17293                           
 17294                           ;handle_floor.c: 603: uart1_send_byte(0xE2);
 17295  06FC  30E2               	movlw	226
 17296  06FD  318B  23A3  3180   	fcall	_uart1_send_byte
 17297                           
 17298                           ;handle_floor.c: 604: delay_ms(150);
 17299  0700  3096               	movlw	150
 17300  0701  00F0               	movwf	delay_ms@count
 17301  0702  01F1               	clrf	delay_ms@count+1
 17302  0703  318C  24C6  3180   	fcall	_delay_ms
 17303  0706                     l6172:	
 17304                           
 17305                           ;handle_floor.c: 605: }
 17306                           ;handle_floor.c: 606: if (floor[7] & 0x04)
 17307  0706  0020               	movlb	0	; select bank0
 17308  0707  1D29               	btfss	deal_floor@floor+7,2
 17309  0708  2F1B               	goto	l6176
 17310                           
 17311                           ;handle_floor.c: 607: {
 17312                           ;handle_floor.c: 608: uart1_send_byte(0xF0);
 17313  0709  30F0               	movlw	240
 17314  070A  318B  23A3  3180   	fcall	_uart1_send_byte
 17315                           
 17316                           ;handle_floor.c: 609: uart1_send_byte(0xF1);
 17317  070D  30F1               	movlw	241
 17318  070E  318B  23A3  3180   	fcall	_uart1_send_byte
 17319                           
 17320                           ;handle_floor.c: 610: uart1_send_byte(0xE4);
 17321  0711  30E4               	movlw	228
 17322  0712  318B  23A3  3180   	fcall	_uart1_send_byte
 17323                           
 17324                           ;handle_floor.c: 611: delay_ms(150);
 17325  0715  3096               	movlw	150
 17326  0716  00F0               	movwf	delay_ms@count
 17327  0717  01F1               	clrf	delay_ms@count+1
 17328  0718  318C  24C6  3180   	fcall	_delay_ms
 17329  071B                     l6176:	
 17330                           
 17331                           ;handle_floor.c: 612: }
 17332                           ;handle_floor.c: 613: if (floor[7] & 0x08)
 17333  071B  0020               	movlb	0	; select bank0
 17334  071C  1DA9               	btfss	deal_floor@floor+7,3
 17335  071D  2F30               	goto	l6180
 17336                           
 17337                           ;handle_floor.c: 614: {
 17338                           ;handle_floor.c: 615: uart1_send_byte(0xF0);
 17339  071E  30F0               	movlw	240
 17340  071F  318B  23A3  3180   	fcall	_uart1_send_byte
 17341                           
 17342                           ;handle_floor.c: 616: uart1_send_byte(0xF1);
 17343  0722  30F1               	movlw	241
 17344  0723  318B  23A3  3180   	fcall	_uart1_send_byte
 17345                           
 17346                           ;handle_floor.c: 617: uart1_send_byte(0xE8);
 17347  0726  30E8               	movlw	232
 17348  0727  318B  23A3  3180   	fcall	_uart1_send_byte
 17349                           
 17350                           ;handle_floor.c: 618: delay_ms(150);
 17351  072A  3096               	movlw	150
 17352  072B  00F0               	movwf	delay_ms@count
 17353  072C  01F1               	clrf	delay_ms@count+1
 17354  072D  318C  24C6  3180   	fcall	_delay_ms
 17355  0730                     l6180:	
 17356                           
 17357                           ;handle_floor.c: 619: }
 17358                           ;handle_floor.c: 620: if (floor[7] & 0x10)
 17359  0730  0020               	movlb	0	; select bank0
 17360  0731  1E29               	btfss	deal_floor@floor+7,4
 17361  0732  2F45               	goto	l6184
 17362                           
 17363                           ;handle_floor.c: 621: {
 17364                           ;handle_floor.c: 622: uart1_send_byte(0xF0);
 17365  0733  30F0               	movlw	240
 17366  0734  318B  23A3  3180   	fcall	_uart1_send_byte
 17367                           
 17368                           ;handle_floor.c: 623: uart1_send_byte(0xF1);
 17369  0737  30F1               	movlw	241
 17370  0738  318B  23A3  3180   	fcall	_uart1_send_byte
 17371                           
 17372                           ;handle_floor.c: 624: uart1_send_byte(0xF1);
 17373  073B  30F1               	movlw	241
 17374  073C  318B  23A3  3180   	fcall	_uart1_send_byte
 17375                           
 17376                           ;handle_floor.c: 625: delay_ms(150);
 17377  073F  3096               	movlw	150
 17378  0740  00F0               	movwf	delay_ms@count
 17379  0741  01F1               	clrf	delay_ms@count+1
 17380  0742  318C  24C6  3180   	fcall	_delay_ms
 17381  0745                     l6184:	
 17382                           
 17383                           ;handle_floor.c: 626: }
 17384                           ;handle_floor.c: 627: if (floor[7] & 0x20)
 17385  0745  0020               	movlb	0	; select bank0
 17386  0746  1EA9               	btfss	deal_floor@floor+7,5
 17387  0747  2F5A               	goto	l6188
 17388                           
 17389                           ;handle_floor.c: 628: {
 17390                           ;handle_floor.c: 629: uart1_send_byte(0xF0);
 17391  0748  30F0               	movlw	240
 17392  0749  318B  23A3  3180   	fcall	_uart1_send_byte
 17393                           
 17394                           ;handle_floor.c: 630: uart1_send_byte(0xF1);
 17395  074C  30F1               	movlw	241
 17396  074D  318B  23A3  3180   	fcall	_uart1_send_byte
 17397                           
 17398                           ;handle_floor.c: 631: uart1_send_byte(0xF2);
 17399  0750  30F2               	movlw	242
 17400  0751  318B  23A3  3180   	fcall	_uart1_send_byte
 17401                           
 17402                           ;handle_floor.c: 632: delay_ms(150);
 17403  0754  3096               	movlw	150
 17404  0755  00F0               	movwf	delay_ms@count
 17405  0756  01F1               	clrf	delay_ms@count+1
 17406  0757  318C  24C6  3180   	fcall	_delay_ms
 17407  075A                     l6188:	
 17408                           
 17409                           ;handle_floor.c: 633: }
 17410                           ;handle_floor.c: 634: if (floor[7] & 0x40)
 17411  075A  0020               	movlb	0	; select bank0
 17412  075B  1F29               	btfss	deal_floor@floor+7,6
 17413  075C  2F6F               	goto	l6192
 17414                           
 17415                           ;handle_floor.c: 635: {
 17416                           ;handle_floor.c: 636: uart1_send_byte(0xF0);
 17417  075D  30F0               	movlw	240
 17418  075E  318B  23A3  3180   	fcall	_uart1_send_byte
 17419                           
 17420                           ;handle_floor.c: 637: uart1_send_byte(0xF1);
 17421  0761  30F1               	movlw	241
 17422  0762  318B  23A3  3180   	fcall	_uart1_send_byte
 17423                           
 17424                           ;handle_floor.c: 638: uart1_send_byte(0xF4);
 17425  0765  30F4               	movlw	244
 17426  0766  318B  23A3  3180   	fcall	_uart1_send_byte
 17427                           
 17428                           ;handle_floor.c: 639: delay_ms(150);
 17429  0769  3096               	movlw	150
 17430  076A  00F0               	movwf	delay_ms@count
 17431  076B  01F1               	clrf	delay_ms@count+1
 17432  076C  318C  24C6  3180   	fcall	_delay_ms
 17433  076F                     l6192:	
 17434                           
 17435                           ;handle_floor.c: 640: }
 17436                           ;handle_floor.c: 641: if (floor[7] & 0x80)
 17437  076F  0020               	movlb	0	; select bank0
 17438  0770  1FA9               	btfss	deal_floor@floor+7,7
 17439  0771  0008               	return
 17440                           
 17441                           ;handle_floor.c: 642: {
 17442                           ;handle_floor.c: 643: uart1_send_byte(0xF0);
 17443  0772  30F0               	movlw	240
 17444  0773  318B  23A3  3180   	fcall	_uart1_send_byte
 17445                           
 17446                           ;handle_floor.c: 644: uart1_send_byte(0xF1);
 17447  0776  30F1               	movlw	241
 17448  0777  318B  23A3  3180   	fcall	_uart1_send_byte
 17449                           
 17450                           ;handle_floor.c: 645: uart1_send_byte(0xF8);
 17451  077A  30F8               	movlw	248
 17452  077B  318B  23A3  3180   	fcall	_uart1_send_byte
 17453                           
 17454                           ;handle_floor.c: 646: delay_ms(150);
 17455  077E  3096               	movlw	150
 17456  077F  00F0               	movwf	delay_ms@count
 17457  0780  01F1               	clrf	delay_ms@count+1
 17458  0781  318C  24C6         	fcall	_delay_ms
 17459  0783                     l289:	
 17460  0783  0008               	return
 17461  0784                     L31:	
 17462  0784                     __end_of_deal_floor:	
 17463  0784  3192  2A6E         	ljmp	l5718


Data Sizes:
    Strings     5
    Constant    256
    Data        6
    BSS         117
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      80
    BANK1            80      0      73
    BANK2            80      0      16
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> Mf500PiccCascAnticoll@snr_in(BANK0[4]), MSndBuffer(BANK1[16]), snr_rc500(BANK1[4]), tt1(BANK1[2]), 
		 -> read_card_content@data(BANK0[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> Mf500PiccCascAnticoll@snr_in(BANK0[4]), MSndBuffer(BANK1[16]), snr_rc500(BANK1[4]), tt1(BANK1[2]), 
		 -> read_card_content@data(BANK0[16]), 

    memcpy@s1	PTR const void  size(2) Largest target is 16
		 -> STR_1(CODE[5]), Mf500PiccCascAnticoll@snr_in(BANK0[4]), MRcvBuffer(BANK1[16]), snr_rc500(BANK1[4]), 
		 -> read_card_content@data(BANK0[16]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[5]), Mf500PiccCascAnticoll@snr_in(BANK0[4]), MRcvBuffer(BANK1[16]), snr_rc500(BANK1[4]), 
		 -> read_card_content@data(BANK0[16]), 

    Mf500PiccWrite@data1	PTR unsigned char  size(1) Largest target is 16
		 -> read_card_content@data(BANK0[16]), 

    Mf500PiccRead@data1	PTR unsigned char  size(1) Largest target is 16
		 -> read_card_content@data(BANK0[16]), 

    Mf500PiccLoadKey@keys	PTR unsigned char  size(1) Largest target is 6
		 -> keys(BANK1[6]), keys_super(BANK1[6]), 

    Mf500PiccAuthState@snr	PTR unsigned char  size(1) Largest target is 4
		 -> snr_rc500(BANK1[4]), 

    Mf500HostCodeKey@coded	PTR unsigned char  size(1) Largest target is 16
		 -> MSndBuffer(BANK1[16]), 

    Mf500HostCodeKey@uncoded	PTR unsigned char  size(1) Largest target is 6
		 -> keys(BANK1[6]), keys_super(BANK1[6]), 

    Mf500PiccSelect@snr	PTR unsigned char  size(1) Largest target is 4
		 -> snr_rc500(BANK1[4]), 

    Mf500PiccCascSelect@snr	PTR unsigned char  size(1) Largest target is 4
		 -> snr_rc500(BANK1[4]), 

    Mf500PiccAnticoll@snr	PTR unsigned char  size(1) Largest target is 4
		 -> snr_rc500(BANK1[4]), 

    Mf500PiccCascAnticoll@snr	PTR unsigned char  size(1) Largest target is 4
		 -> snr_rc500(BANK1[4]), 

    Mf500PiccRequest@atq	PTR unsigned char  size(1) Largest target is 2
		 -> tt1(BANK1[2]), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> Mf500PiccCascAnticoll@snr_in(BANK0[4]), MSndBuffer(BANK1[16]), snr_rc500(BANK1[4]), tt1(BANK1[2]), 
		 -> read_card_content@data(BANK0[16]), 

    Mf500PiccCommonRequest@atq	PTR unsigned char  size(1) Largest target is 2
		 -> tt1(BANK1[2]), 

    MpIsrIn	PTR unsigned char  size(1) Largest target is 16
		 -> MRcvBuffer(BANK1[16]), NULL(NULL[0]), 

    MpIsrOut	PTR unsigned char  size(1) Largest target is 16
		 -> MSndBuffer(BANK1[16]), NULL(NULL[0]), 

    MpIsrInfo	PTR struct MfCmdInfo size(1) Largest target is 8
		 -> MInfo(BANK0[8]), NULL(NULL[0]), 

    checksum@data	PTR unsigned char  size(1) Largest target is 16
		 -> read_card_content@data(BANK0[16]), 

    deal_floor@data	PTR unsigned char  size(1) Largest target is 14
		 -> user_card(BANK1[14]), 


Critical Paths under _main in COMMON

    _init_hardware->_RC500Config
    _RC500OutSelect->_WriteRC
    _RC500Config->_PcdRfReset
    _PcdRfReset->_ClearBitMask
    _PcdRfReset->_SetBitMask
    _PcdReset->_GetRC500
    _PcdReset->_PutRC500
    _read_card_content->_Mf500PiccWrite
    _deal_floor->_delay_ms
    _check_user_card->_read_24c02
    _handle_beep->_delay_ms
    _rfcard->_Mf500PiccAnticoll
    _Mf500PiccRequest->_Mf500PiccCommonRequest
    _Mf500PiccAnticoll->_Mf500PiccCascAnticoll
    _Mf500PiccSelect->_Mf500PiccCascSelect
    _ClearBitMask->_WriteRC
    _checkpsw->_Mf500PiccAuthState
    _checkpsw->_Mf500PiccLoadKey
    _PcdSingleResponseCmd->_ISR_RC500
    _ISR_RC500->_GetRC500
    _ISR_RC500->_PutRC500
    _FlushFIFO->_SetBitMask
    _SetBitMask->_WriteRC
    _ReadRC->_GetRC500
    _ReadRC->_PutRC500
    _PcdSetTmo->_WriteRC
    _WriteRC->_PutRC500
    _handle_config->_write_24c02
    _write_24c02->_delay_ms
    _read_24c02->_rece_byte
    _read_24c02->_send_byte
    _ds1302_set_time->_ds1302_write
    _ds1302_write->_ds1302_write_byte
    _ds1302_get_time->_ds1302_read
    _ds1302_read->_ds1302_read_byte
    _ds1302_read->_ds1302_write_byte

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _handle_ic_card->_read_card_content
    _read_card_content->_Mf500PiccRead
    _Mf500PiccWrite->_PcdSingleResponseCmd
    _Mf500PiccRead->_PcdSingleResponseCmd
    _checkpsw_super->_rfcard
    _rfcard->_Mf500PiccAnticoll
    _Mf500PiccCommonRequest->_PcdSingleResponseCmd
    _Mf500PiccAnticoll->_Mf500PiccCascAnticoll
    _Mf500PiccCascAnticoll->_PcdSingleResponseCmd
    _read_id->_Mf500PiccSelect
    _Mf500PiccCascSelect->_PcdSingleResponseCmd
    _checkpsw->_Mf500PiccAuthState
    _Mf500PiccLoadKey->_PcdSingleResponseCmd
    _Mf500PiccAuthState->_PcdSingleResponseCmd

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  401206
                                             34 BANK0      5     5      0
                           _delay_ms
                      _handle_config
                     _handle_ic_card
                       _handle_timer
                      _init_hardware
                         _read_24c02
                    _uart1_send_byte
                        _write_24c02
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0   26787
                        _RC500Config
                     _RC500OutSelect
                          _init_beep
                        _init_ds1302
                           _init_i2c
                     _init_interrupt
                           _init_led
                       _init_mfrc500
                           _init_osc
                          _init_port
                        _init_timer1
                         _init_uart1
                         _init_uart2
 ---------------------------------------------------------------------------------
 (2) _init_uart2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_timer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_port                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_osc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_mfrc500                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_led                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds1302                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_beep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RC500OutSelect                                       1     1      0    3365
                                              5 COMMON     1     1      0
                            _WriteRC
 ---------------------------------------------------------------------------------
 (2) _RC500Config                                          2     2      0   23422
                                             12 COMMON     2     2      0
                       _ClearBitMask
                           _PcdReset
                         _PcdRfReset
                          _PcdSetTmo
                            _WriteRC
 ---------------------------------------------------------------------------------
 (3) _PcdRfReset                                           4     4      0    9689
                                              8 COMMON     4     4      0
                       _ClearBitMask
                         _SetBitMask
 ---------------------------------------------------------------------------------
 (3) _PcdReset                                             8     8      0    1398
                                              2 COMMON     8     8      0
                           _GetRC500
                           _PutRC500
 ---------------------------------------------------------------------------------
 (1) _handle_timer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_ic_card                                       0     0      0  350638
                           _checkpsw
                     _checkpsw_super
                        _handle_beep
                  _read_card_content
                            _read_id
                             _rfcard
                            _same_id
 ---------------------------------------------------------------------------------
 (2) _same_id                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _read_card_content                                   21    21      0   77398
                                             13 BANK0     21    21      0
                      _Mf500PiccRead
                     _Mf500PiccWrite
                    _check_user_card
                           _checksum
                         _deal_floor
                    _ds1302_get_time
                    _ds1302_set_time
                         _read_24c02
                    _uart1_send_byte
                        _write_24c02
 ---------------------------------------------------------------------------------
 (3) _deal_floor                                          11    11      0    9234
                                              6 COMMON     1     1      0
                                              0 BANK0     10    10      0
                           _delay_ms
                    _uart1_send_byte
 ---------------------------------------------------------------------------------
 (3) _checksum                                             5     4      1     275
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) _check_user_card                                      1     1      0     321
                                              4 COMMON     1     1      0
                         _read_24c02
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccWrite                                       3     2      1   29595
                                             11 COMMON     3     2      1
                          _FlushFIFO
                          _PcdSetTmo
               _PcdSingleResponseCmd
                            _WriteRC
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccRead                                        5     4      1   29763
                                             11 COMMON     2     1      1
                                             10 BANK0      3     3      0
                          _FlushFIFO
                          _PcdSetTmo
               _PcdSingleResponseCmd
                            _WriteRC
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _handle_beep                                          0     0      0    4650
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _checkpsw_super                                       0     0      0  134295
                 _Mf500PiccAuthState
                   _Mf500PiccLoadKey
                            _read_id
                             _rfcard
 ---------------------------------------------------------------------------------
 (2) _rfcard                                               1     1      0   56510
                                             30 BANK0      1     1      0
                  _Mf500PiccAnticoll
                   _Mf500PiccRequest
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccRequest                                     2     1      1   24925
                                             10 BANK0      2     1      1
             _Mf500PiccCommonRequest
 ---------------------------------------------------------------------------------
 (4) _Mf500PiccCommonRequest                               3     2      1   24828
                                             11 COMMON     3     2      1
                          _PcdSetTmo
               _PcdSingleResponseCmd
                            _WriteRC
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccAnticoll                                    2     1      1   31560
                                             13 COMMON     1     0      1
                                             29 BANK0      1     1      0
              _Mf500PiccCascAnticoll
 ---------------------------------------------------------------------------------
 (4) _Mf500PiccCascAnticoll                               21    19      2   31463
                                             11 COMMON     2     0      2
                                             10 BANK0     19    19      0
                       _ClearBitMask
                          _PcdSetTmo
               _PcdSingleResponseCmd
                            _WriteRC
                            ___awdiv
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     428
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _read_id                                              0     0      0   29714
                    _Mf500PiccSelect
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccSelect                                      1     1      0   29714
                                             10 BANK0      1     1      0
                _Mf500PiccCascSelect
 ---------------------------------------------------------------------------------
 (4) _Mf500PiccCascSelect                                  3     2      1   29665
                                             11 COMMON     3     2      1
                       _ClearBitMask
                          _PcdSetTmo
               _PcdSingleResponseCmd
                            _WriteRC
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _ClearBitMask                                         3     2      1    4860
                                              5 COMMON     3     2      1
                             _ReadRC
                            _WriteRC
 ---------------------------------------------------------------------------------
 (2) _checkpsw                                             0     0      0   48071
                 _Mf500PiccAuthState
                   _Mf500PiccLoadKey
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccLoadKey                                     2     2      0   25194
                                             11 COMMON     2     2      0
                          _FlushFIFO
                   _Mf500HostCodeKey
                          _PcdSetTmo
               _PcdSingleResponseCmd
 ---------------------------------------------------------------------------------
 (4) _Mf500HostCodeKey                                     7     6      1     420
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccAuthState                                   4     2      2   22877
                                             11 COMMON     2     0      2
                                             10 BANK0      2     2      0
                          _PcdSetTmo
               _PcdSingleResponseCmd
                             _ReadRC
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                               8     4      4    1398
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (5) _PcdSingleResponseCmd                                10    10      0   15910
                                              0 BANK0     10    10      0
                          _FlushFIFO
                          _ISR_RC500
                             _ReadRC
                         _SetBitMask
                            _WriteRC
 ---------------------------------------------------------------------------------
 (6) _ISR_RC500                                            9     9      0    1438
                                              2 COMMON     9     9      0
                           _GetRC500
                           _PutRC500
 ---------------------------------------------------------------------------------
 (6) _FlushFIFO                                            0     0      0    4754
                         _SetBitMask
 ---------------------------------------------------------------------------------
 (4) _SetBitMask                                           3     2      1    4754
                                              5 COMMON     3     2      1
                             _ReadRC
                            _WriteRC
 ---------------------------------------------------------------------------------
 (5) _ReadRC                                               2     2      0    1162
                                              2 COMMON     2     2      0
                           _GetRC500
                           _PutRC500
 ---------------------------------------------------------------------------------
 (6) _GetRC500                                             2     2      0      45
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _PcdSetTmo                                            2     0      2    4010
                                              5 COMMON     2     0      2
                            _WriteRC
 ---------------------------------------------------------------------------------
 (3) _WriteRC                                              3     2      1    3343
                                              2 COMMON     3     2      1
                           _PutRC500
 ---------------------------------------------------------------------------------
 (4) _PutRC500                                             2     1      1    1073
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _handle_config                                       11    11      0   12573
                                              8 COMMON     2     2      0
                                              0 BANK0      9     9      0
                           _delay_ms
                    _ds1302_get_time
                    _ds1302_set_time
                   _find_project_key
                         _read_24c02
                        _read_eeprom
                    _uart1_send_byte
                        _write_24c02
 ---------------------------------------------------------------------------------
 (1) _write_24c02                                          2     1      1    6077
                                              6 COMMON     2     1      1
                           _delay_ms
                          _send_byte
                          _start_i2c
                           _stop_i2c
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    4650
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _uart1_send_byte                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read_eeprom                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_24c02                                           2     2      0     187
                                              2 COMMON     2     2      0
                          _rece_byte
                          _send_byte
                          _start_i2c
                           _stop_i2c
 ---------------------------------------------------------------------------------
 (2) _stop_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _start_i2c                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _send_byte                                            2     2      0      69
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _rece_byte                                            2     2      0      72
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _find_project_key                                     3     3      0     112
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _ds1302_set_time                                      0     0      0     634
                       _ds1302_write
 ---------------------------------------------------------------------------------
 (4) _ds1302_write                                         2     1      1     634
                                              2 COMMON     2     1      1
                  _ds1302_write_byte
 ---------------------------------------------------------------------------------
 (3) _ds1302_get_time                                      0     0      0     185
                        _ds1302_read
 ---------------------------------------------------------------------------------
 (4) _ds1302_read                                          2     2      0     185
                                              2 COMMON     2     2      0
                   _ds1302_read_byte
                  _ds1302_write_byte
 ---------------------------------------------------------------------------------
 (5) _ds1302_write_byte                                    2     2      0      69
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ds1302_read_byte                                     2     2      0      71
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _isr                                                 1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _handle_config
     _delay_ms
     _ds1302_get_time
       _ds1302_read
         _ds1302_read_byte
         _ds1302_write_byte
     _ds1302_set_time
       _ds1302_write
         _ds1302_write_byte
     _find_project_key
     _read_24c02
       _rece_byte
       _send_byte
       _start_i2c
       _stop_i2c
     _read_eeprom
     _uart1_send_byte
     _write_24c02
       _delay_ms
       _send_byte
       _start_i2c
       _stop_i2c
   _handle_ic_card
     _checkpsw
       _Mf500PiccAuthState
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
         _ReadRC
           _GetRC500
           _PutRC500
         _memcpy
       _Mf500PiccLoadKey
         _FlushFIFO
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
         _Mf500HostCodeKey
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
     _checkpsw_super
       _Mf500PiccAuthState
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
         _ReadRC
           _GetRC500
           _PutRC500
         _memcpy
       _Mf500PiccLoadKey
         _FlushFIFO
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
         _Mf500HostCodeKey
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
       _read_id
         _Mf500PiccSelect
           _Mf500PiccCascSelect
             _ClearBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
             _PcdSetTmo
               _WriteRC
                 _PutRC500
             _PcdSingleResponseCmd
               _FlushFIFO
                 _SetBitMask
                   _ReadRC
                     _GetRC500
                     _PutRC500
                   _WriteRC
                     _PutRC500
               _ISR_RC500
                 _GetRC500
                 _PutRC500
               _ReadRC
                 _GetRC500
                 _PutRC500
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
             _memcpy
       _rfcard
         _Mf500PiccAnticoll
           _Mf500PiccCascAnticoll
             _ClearBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
             _PcdSetTmo
               _WriteRC
                 _PutRC500
             _PcdSingleResponseCmd
               _FlushFIFO
                 _SetBitMask
                   _ReadRC
                     _GetRC500
                     _PutRC500
                   _WriteRC
                     _PutRC500
               _ISR_RC500
                 _GetRC500
                 _PutRC500
               _ReadRC
                 _GetRC500
                 _PutRC500
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
             ___awdiv
             _memcpy
         _Mf500PiccRequest
           _Mf500PiccCommonRequest
             _PcdSetTmo
               _WriteRC
                 _PutRC500
             _PcdSingleResponseCmd
               _FlushFIFO
                 _SetBitMask
                   _ReadRC
                     _GetRC500
                     _PutRC500
                   _WriteRC
                     _PutRC500
               _ISR_RC500
                 _GetRC500
                 _PutRC500
               _ReadRC
                 _GetRC500
                 _PutRC500
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
             _memcpy
     _handle_beep
       _delay_ms
     _read_card_content
       _Mf500PiccRead
         _FlushFIFO
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
         _WriteRC
           _PutRC500
         _memcpy
       _Mf500PiccWrite
         _FlushFIFO
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
         _WriteRC
           _PutRC500
         _memcpy
       _check_user_card
         _read_24c02
           _rece_byte
           _send_byte
           _start_i2c
           _stop_i2c
       _checksum
       _deal_floor
         _delay_ms
         _uart1_send_byte
       _ds1302_get_time
         _ds1302_read
           _ds1302_read_byte
           _ds1302_write_byte
       _ds1302_set_time
         _ds1302_write
           _ds1302_write_byte
       _read_24c02
         _rece_byte
         _send_byte
         _start_i2c
         _stop_i2c
       _uart1_send_byte
       _write_24c02
         _delay_ms
         _send_byte
         _start_i2c
         _stop_i2c
     _read_id
       _Mf500PiccSelect
         _Mf500PiccCascSelect
           _ClearBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _PcdSetTmo
             _WriteRC
               _PutRC500
           _PcdSingleResponseCmd
             _FlushFIFO
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
             _ISR_RC500
               _GetRC500
               _PutRC500
             _ReadRC
               _GetRC500
               _PutRC500
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
           _memcpy
     _rfcard
       _Mf500PiccAnticoll
         _Mf500PiccCascAnticoll
           _ClearBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _PcdSetTmo
             _WriteRC
               _PutRC500
           _PcdSingleResponseCmd
             _FlushFIFO
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
             _ISR_RC500
               _GetRC500
               _PutRC500
             _ReadRC
               _GetRC500
               _PutRC500
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
           ___awdiv
           _memcpy
       _Mf500PiccRequest
         _Mf500PiccCommonRequest
           _PcdSetTmo
             _WriteRC
               _PutRC500
           _PcdSingleResponseCmd
             _FlushFIFO
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
             _ISR_RC500
               _GetRC500
               _PutRC500
             _ReadRC
               _GetRC500
               _PutRC500
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
           _memcpy
     _same_id
   _handle_timer
   _init_hardware
     _RC500Config
       _ClearBitMask
         _ReadRC
           _GetRC500
           _PutRC500
         _WriteRC
           _PutRC500
       _PcdReset
         _GetRC500
         _PutRC500
       _PcdRfReset
         _ClearBitMask
           _ReadRC
             _GetRC500
             _PutRC500
           _WriteRC
             _PutRC500
         _SetBitMask
           _ReadRC
             _GetRC500
             _PutRC500
           _WriteRC
             _PutRC500
       _PcdSetTmo
         _WriteRC
           _PutRC500
       _WriteRC
         _PutRC500
     _RC500OutSelect
       _WriteRC
         _PutRC500
     _init_beep
     _init_ds1302
     _init_i2c
     _init_interrupt
     _init_led
     _init_mfrc500
     _init_osc
     _init_port
     _init_timer1
     _init_uart1
     _init_uart2
   _read_24c02
     _rece_byte
     _send_byte
     _start_i2c
     _stop_i2c
   _uart1_send_byte
   _write_24c02
     _delay_ms
     _send_byte
     _start_i2c
     _stop_i2c

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      49       7       91.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      10       9       20.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B7      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Thu Jan 02 09:56:15 2025

                                 pc 0002                   ?_ds1302_read_byte 0070  
                                PL2 0FBA                                  PL4 0FC3  
                                PL6 07E4                                  PL8 0FCC  
                  ??_init_interrupt 0070                                  l51 0B8E  
                                _RD 0CA8                        ___awdiv@sign 0075  
                ??_ds1302_read_byte 0070                                 PL10 17EB  
                               PL20 17FA                                 PL12 13FB  
                               PL22 0FE2                                 PL14 0FD5  
                               PL24 1403                                 PL16 0FDC  
                               PL26 1409                                 PL18 17F3  
                               PL28 140F                   ??_ds1302_set_time 0074  
                               l210 0245                                 l433 098C  
                               l632 0CE5                                 l640 0C8D  
                               l721 0E75                                 l641 0C8F  
                               l289 0783                                 l722 0E79  
                               l483 0D3D                                 l726 0F9C  
                               l638 0C88                                 l910 1274  
                               l719 0E6E                                 l912 1283  
                               l921 12B1                                 l666 0FE9  
                               l676 0FFF                                 l686 0CD2  
                               l959 1716                                 l968 16FA  
                               _GIE 005F                                 _RA0 0060  
                               _RA1 0061                                 _RC0 0070  
                               _RC1 0071                                 _RC2 0072  
                               _RB4 006C                                 _RC3 0073  
                               _RB5 006D                                 _RC4 0074  
                               _RC5 0075                find_project_key@data 0070  
                               _day 006C                                 _tt1 00DE  
                               _isr 0004                                 wreg 0009  
                        _MRcvBuffer 00A6                                S7644 07EE  
                              l1015 15A0                                l1048 0DB0  
                        _MSndBuffer 00B6                                l1174 0BA4  
                              l1177 0BA9                                l1338 0C0C  
                              l1348 0C46                                l5004 16CB  
                              l5100 17C4                                l5024 16EA  
                              l5104 17CC                                l6000 037F  
                              l5034 16F6                                l5018 16E5  
                              l5028 16EE                                l5212 105E  
                              l6100 058C                                l6020 03E8  
                              l6012 03BE                                l6004 0394  
                              l5046 170F                                l5062 0ECA  
                              l5048 1715                                l5072 179B  
                              l5312 1569                                l5232 14A5  
                              l5216 1069                                l5208 1057  
                              l6120 05F5                                l6112 05CB  
                              l6104 05A1                                l6040 0451  
                              l6032 0427                                l6024 03FD  
                              l6016 03D3                                l6008 03A9  
                              l5402 0CC6                                l5314 158A  
                              l5306 1568                                l6202 0DB3  
                              l5324 15A3                                l5252 14CC  
                              l6140 065E                                l6132 0634  
                              l6124 060A                                l6116 05E0  
                              l6108 05B6                                l6060 04BA  
                              l6052 0490                                l6044 0466  
                              l6036 043C                                l6028 0412  
                              l5078 17A4                                l5342 15B4  
                              l5254 14D3                                l6214 0DDB  
                              l6310 0E89                                l5416 0CC8  
                              l7112 09BB                                l5096 17C0  
                              l5088 17B1                                l5336 15B3  
                              l5264 14E1                                l5328 15A7  
                              l6312 0E96                                l6160 06C7  
                              l6152 069D                                l6144 0673  
                              l6136 0649                                l6128 061F  
                              l6080 0523                                l6072 04F9  
                              l6064 04CF                                l6056 04A5  
                              l6048 047B                                l7040 1733  
                              l7122 09C7                                l5282 14FB  
                              l5290 1539                                l5266 14EE  
                              l6402 1477                                l6410 1478  
                              l5522 1105                                l7132 09D5  
                              l5284 1525                                l6404 1477  
                              l6412 1480                                l6180 0730  
                              l6172 0706                                l6164 06DC  
                              l6156 06B2                                l6148 0688  
                              l6092 0562                                l6084 0538  
                              l6076 050E                                l6068 04E4  
                              l5620 11B4                                l5612 11AC  
                              l7028 1728                                l7206 0A61  
                              l7142 09DF                                l4910 15E8  
                              l5294 1540                                l6406 1477  
                              l5622 11B6                                l5614 11AE  
                              l5630 11BC                                l7304 0B2B  
                              l7216 0A6F                                l7152 09EB  
                              l4912 15F1                                l4904 15D1  
                              l6280 07C5                                l6360 1442  
                              l6192 076F                                l6184 0745  
                              l6176 071B                                l6168 06F1  
                              l6096 0577                                l6088 054D  
                              l5720 00A0                                l5624 11B8  
                              l5616 11B0                                l5632 11D6  
                              l5560 114B                                l5544 1135  
                              l7226 0A83                                l7170 0A06  
                              l4914 15FA                                l4906 15D6  
                              l4850 133F                                l4842 133E  
                              l5298 1553                                l6290 07CC  
                              l6274 07C0                                l6266 07BC  
                              l6354 143A                                l5730 00AB  
                              l5722 00A3                                l5706 125D  
                              l5626 11BA                                l5618 11B2  
                              l5570 1156                                l5562 114E  
                              l6602 12C5                                l7340 0B99  
                              l7316 0B3F                                l7324 0B77  
                              l7236 0A91                                l7180 0A33  
                              l4908 15DF                                l4852 1356  
                              l6524 0D9C                                l6268 07BF  
                              l6356 143E                                l6364 1445  
                              l6188 075A                                l5820 015D  
                              l5724 00A5                                l5716 126C  
                              l5652 11FB                                l5572 1158  
                              l5564 1150                                l5580 1177  
                              l6620 12E2                                l6630 0EAC  
                              l7318 0B75                                l7246 0AA5  
                              l7334 0B97                                l4862 1378  
                              l4854 135B                                l4942 162F  
                              l5398 1FFE                                l6358 1440  
                              l6366 144D                                l5830 0167  
                              l5822 015F                                l5814 0156  
                              l5726 00A7                                l5718 126E  
                              l5734 00AD                                l5670 1211  
                              l5574 115A                                l5566 1152  
                              l6606 12CB                                l6550 17DC  
                              l7280 0AEE                                l4952 163A  
                              l4944 1632                                l5488 0F00  
                              l6296 07D1                                l5832 0169  
                              l5824 0161                                l5840 0187  
                              l5760 00F4                                l5728 00A9  
                              l5736 00C9                                l5672 1213  
                              l5664 120B                                l5568 1154  
                              l4874 1381                                l4970 164E  
                              l4954 163D                                l4946 1636  
                              l6490 0D70                                l6298 07DC  
                              l5930 0223                                l5922 021B  
                              l5834 016B                                l5826 0163  
                              l5770 0100                                l5674 1215  
                              l5666 120D                                l5682 121B  
                              l5578 115C                                l6802 0931  
                              l6722 0890                                l6706 087D  
                              l6618 12DF                                l7602 0C6F  
                              l6636 0EB8                                l7268 0ADD  
                              l7188 0A43                                l7196 0A4D  
                              l4876 139A                                l4964 1647  
                              l4948 1638                                l4972 1651  
                              l5932 0225                                l5924 021D  
                              l5940 022B                                l5828 0165  
                              l5780 010A                                l5772 0102  
                              l5676 1217                                l5668 120F  
                              l5684 1235                                l7380 0D44  
                              ?_isr 0070                                l7294 0B21  
                              l4878 13A1                                l4894 12F6  
                              l4974 1677                                l5934 0227  
                              l5926 021F                                l5838 016D  
                              l5782 010C                                l5774 0104  
                              l5678 1219                                l5598 1199  
                              l6822 095B                                l7542 0C00  
                              l7526 0BD6                                l4896 13C7  
                              l4888 13B9                                l6488 0D6E  
                              l5960 02AD                                l5952 0283  
                              l5944 0259                                l5936 0229  
                              l5928 0221                                l5880 01C4  
                              l5872 01BC                                l5776 0106  
                              l5768 00FE                                l6808 0942  
                              l6824 095F                                l7368 0D3A  
                              l7392 0F8B                                l7536 0BF4  
                              l5882 01C6                                l5874 01BE  
                              l5890 01CC                                l5778 0108  
                              l5786 010E                                l6738 08B4  
                              l6690 0861                                l7386 0D4F  
                              l7562 0C26                                l7554 0C1E  
                              l7538 0BF6                                l4996 168F  
                              l5980 0316                                l5972 02EC  
                              l5964 02C2                                l5956 0298  
                              l5948 026E                                l5884 01C8  
                              l5876 01C0                                l5868 01B8  
                              l5892 01E6                                l5788 0128  
                              l6684 085E                                l6692 0863  
                              l6588 129B                                l7572 0C41  
                              l7646 1603                                l4998 16B1  
                              l5886 01CA                                l5878 01C2  
                              l6862 098D                                l6790 090B  
                              l6854 098B                                l6758 08CF  
                              l6598 12BB                                l7590 0C5F  
                              l7582 0C4E                                l5992 0355  
                              l5984 032B                                l5976 0301  
                              l5968 02D7                                l6688 09AB  
                              l7568 0C37                                l6890 09AE  
                              l6980 0FF1                                l5996 036A  
                              l5988 0340                                l6868 0998  
                              l7596 0C69                                STR_1 1901  
                      __CFG_WDTE$ON 0000                    ClearBitMask@mask 0075  
                              u4305 132B                                _PEIE 005E  
                              u7230 0827                                u4815 154F  
                              u4585 17B9                                u4754 1513  
                              u4835 1576                                u4755 1512  
                              u4764 151C                                u4765 151B  
                              u4935 0CCE                                u8075 0B4B  
      __end_of_PcdSingleResponseCmd 171B      __size_of_Mf500PiccCascAnticoll 014D  
     __end_of_Mf500PiccCascAnticoll 15D1                                _main 0BC8  
                              _keys 00D4                                _hour 006D  
                              _week 00E8                                _year 006F  
                              fsr0h 0005                                fsr1h 0007  
                              fsr0l 0004                                indf0 0000  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E    Mf500PiccCascAnticoll@select_code 002E  
                read_card_content@i 0040                                ltemp 007E  
                              start 0077                                ttemp 007E  
                              wtemp 007E           __size_of_find_project_key 001A  
                    WriteRC@address 0074                         _write_24c02 0BAC  
                             ??_isr 0070                        ?_init_ds1302 0070  
           PcdSingleResponseCmd@cmd 0025                  __size_of_ISR_RC500 00E8  
                             ?_main 0070                     __end_of___awdiv 17D1  
                             _EEADR 0191                               _EEPGD 0CAF  
                    read_24c02@data 0073                     __end_of_WriteRC 1778  
                   ___awdiv@divisor 0070                               _T1CON 0018  
                             _RC1IE 048D                               _RC1IF 008D  
                             _RC2IE 04A5                               _RC2IF 00A5  
                   ___awdiv@counter 0074            __size_of_uart1_send_byte 0009  
                             _TMR1H 0017                               _TMR1L 0016  
                             _PORTD 000F                  rece_byte@read_data 0070  
                             _TRISD 008F                               _MInfo 0064  
                      ?_init_timer1 0070                        ?_read_eeprom 0070  
                    __CFG_FCMEN$OFF 0000                   _read_card_content 081E  
                        _PcdRfReset 17D1                               _count 0057  
                   __end_of_read_id 0F32                               _group 005E  
                             _month 006E        PcdSingleResponseCmd@lastBits 0024  
                   __end_of_same_id 0F86                               main@i 0043  
                             main@j 0046                  ?_read_card_content 0070  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
          Mf500PiccWrite@ret_status 007D                __size_of_RC500Config 004C  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                    __end_of_GetRC500 13FB  
                             status 0003                     _check_user_card 0DB2  
           Mf500PiccRead@ret_status 002B                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                     ??_ds1302_read 0072                 ??_read_card_content 002D  
                    _checkpsw_super 0F55                     __initialization 0079  
                      __end_of_main 0C72                    __end_of_PcdReset 12E4  
                 _ds1302_write_byte 0E6B                  ?_ds1302_write_byte 0070  
                            ??_main 007E                    __end_of_PutRC500 13E5  
              __end_of_handle_timer 0F98                      __CFG_PLLEN$OFF 0000  
         __end_of_read_card_content 09B0                 ??_ds1302_write_byte 0070  
                        _SetBitMask 0FB1               __size_of_ClearBitMask 000A  
              __size_of_handle_beep 0018           __size_of_Mf500PiccLoadKey 0016  
        __end_of_Mf500PiccAuthState 0DB2                              _EEDATA 0193  
          ??_Mf500PiccCommonRequest 007C                    ___awdiv@dividend 0072  
                __size_of_PcdSetTmo 0041                              _ANSELA 018C  
                            _ANSELE 0190                              _ANSELF 040C  
                            _ANSELG 040D     Mf500PiccCascAnticoll@byteOffset 0034  
                            _RC1REG 0199                              _RC2REG 0491  
                            _RC1STA 019D           __size_of_Mf500PiccRequest 0006  
                __size_of_FlushFIFO 0004                              _RC2STA 0495  
         __size_of_Mf500HostCodeKey 0030                              i1l7500 0073  
                            i1l7452 002A                              i1l7444 0020  
                            i1l7462 003B                              i1l7448 0026  
                            i1l7464 003D                              i1l7482 0056  
                            i1l7486 005A                       ?_init_mfrc500 0070  
                            _OSCCON 0099                   __end_of_ISR_RC500 13CC  
                            _TMR1IE 0488                              _TMR1IF 0088  
                            _TX1REG 019A                              _TX1STA 019E  
                            _TX2STA 0496                      _RC500OutSelect 10FB  
              _uart1_receive_buffer 0047                    __end_of_checkpsw 0D60  
                  __end_of_checksum 0E98              __end_of_checkpsw_super 0F6E  
                     ?_ds1302_write 0072                    __end_of_delay_ms 0CE1  
                            _ReadRC 1778         read_card_content@user_count 003E  
                   GetRC500@address 0070           __end_of_ds1302_write_byte 0E85  
                ds1302_write_byte@i 0071              __size_of_init_hardware 001F  
                         ??___awdiv 0074                           ??_WriteRC 0073  
                 __end_of_PWD_TABLE 1901                 __end_of_ds1302_read 0E1E  
                  __end_of_init_i2c 10A8                              _memcpy 0EC3  
                  __end_of_init_led 10B2                    __end_of_init_osc 10C5  
                            _rfcard 0F37                    ___awdiv@quotient 0076  
                            _minute 00E6                        _ClearBitMask 1787  
                            _second 00E7             handle_config@tmp_buffer 0020  
              Mf500PiccAnticoll@snr 007D                _PcdSingleResponseCmd 1612  
              read_card_content@ret 0041                      Mf500PiccRead@i 002C  
                  ??_Mf500PiccWrite 007C                           ??_read_id 007E  
                         ??_same_id 0070             __end_of_check_user_card 0DE1  
                       ?_PcdRfReset 0070                     _ds1302_get_time 0DE1  
                  __end_of_stop_i2c 0EA9                   ??_uart1_send_byte 0070  
                     ReadRC@address 0073                      ??_init_mfrc500 0070  
   Mf500PiccCascAnticoll@ret_status 003A              __end_of_RC500OutSelect 1102  
           __end_of__initialization 009D                 _count_uart1_receive 0058  
                    ??_ds1302_write 0073                 _count_uart2_receive 0059  
       PcdSingleResponseCmd@count01 0020         PcdSingleResponseCmd@count02 0022  
                   ?_checkpsw_super 0070                    _find_project_key 0EA9  
                   _ds1302_set_time 0E1E         PcdSingleResponseCmd@waitFor 0027  
      Mf500PiccAuthState@ret_status 002B                      __pcstackCOMMON 0070  
       __end_of_Mf500PiccCascSelect 2000       PcdSingleResponseCmd@tmpStatus 0029  
                      __pidataBANK1 0000                  PcdSetTmo@tmoLength 0075  
                 __end_of_PcdSetTmo 1612                   __end_of_FlushFIFO 0EFB  
                        __end_ofPL2 0FC3                          __end_ofPL4 0FCC  
                        __end_ofPL6 07EE                          __end_ofPL8 0FD5  
                write_24c02@address 0077               ?_PcdSingleResponseCmd 0070  
              __size_of_init_ds1302 0014                    ds1302_write@data 0072  
                         ?_GetRC500 0070            __size_of_Mf500PiccSelect 0005  
        __size_of_read_card_content 0192                         ?_SetBitMask 0075  
                     _init_hardware 106B           __size_of_ds1302_read_byte 0019  
              __size_of_init_timer1 0009                          _deal_floor 1102  
              __size_of_read_eeprom 000A               __end_of_handle_config 0BA3  
                   PcdReset@count01 0073                     PcdReset@count02 0075  
   __size_of_Mf500PiccCommonRequest 0044                           ?_PcdReset 0070  
                        __pbssBANK0 0047                          __pbssBANK1 00A0  
                        __pbssBANK2 0120                     ?_RC500OutSelect 0070  
               ds1302_write@address 0073              __size_of_Mf500PiccRead 005E  
                __size_of_init_beep 0004                  __size_of_init_port 0007  
                         ?_PutRC500 0070                         _ds1302_read 0E05  
             RC500Config@ret_status 007C                             ?_ReadRC 0070  
                __size_of_rece_byte 001B          __size_of_ds1302_write_byte 001A  
                        __pmaintext 0BC8                 Mf500PiccRequest@atq 002A  
                 ds1302_read_byte@i 0071                        ?_write_24c02 0076  
                        __pintentry 0004                 __size_of_PcdRfReset 001A  
             __size_of_handle_timer 0012                  __size_of_send_byte 002A  
                           ?_memcpy 0070                             ?_rfcard 0070  
               Mf500HostCodeKey@cnt 0076                          _flag_timer 005A  
           __end_of_ds1302_get_time 0E05                          ??_GetRC500 0070  
           __size_of_handle_ic_card 0055                      ?_init_hardware 0070  
                         ?_checkpsw 0070                Mf500PiccLoadKey@keys 007C  
                         ?_checksum 0070                             _SP1BRGH 019C  
                           _SP1BRGL 019B                             _SP2BRGH 0494  
                           _SP2BRGL 0493                           ?_delay_ms 0070  
                  _Mf500PiccLoadKey 0EE1                      deal_floor@data 0020  
         Mf500PiccCommonRequest@atq 007B                    ?_check_user_card 0070  
                __size_of_start_i2c 0016                          __stringtab 1800  
                        ??_PcdReset 0072                   find_project_key@i 0071  
                  _Mf500PiccRequest 0F4F                    _Mf500HostCodeKey 0EFB  
           __end_of_ds1302_set_time 0E53                           ?_init_i2c 0070  
                         ?_init_led 0070                           ?_init_osc 0070  
                           _MpIsrIn 0053       Mf500PiccCascAnticoll@complete 0033  
                        _read_24c02 0C72               Mf500HostCodeKey@coded 0070  
                      _handle_timer 0F86                          ??_PutRC500 0071  
             _Mf500PiccCascAnticoll 1484                     __size_of_ReadRC 000F  
               __size_of_SetBitMask 0009             Mf500PiccAuthState@block 007C  
                   PutRC500@address 0071                     ISR_RC500@nbytes 0079  
                           ___awdiv 1791              _Mf500PiccCommonRequest 1027  
                           _WriteRC 1767                     write_24c02@data 0076  
            ??_PcdSingleResponseCmd 007B                             _card_id 004F  
                         ?_stop_i2c 0070                __end_of_init_mfrc500 10C1  
                        _init_uart1 10D5                          _init_uart2 10E6  
                   __size_of_memcpy 001E        Mf500PiccCascAnticoll@snr_crc 002F  
                           _ic_card 00A0                     __size_of_rfcard 0010  
                           __ptext1 106B                             __ptext2 10E6  
                           __ptext3 10D5                             __ptext4 10CC  
                           __ptext5 10C5                             __ptext6 10C1  
                           __ptext7 10B2                             __ptext8 10AB  
                           __ptext9 10A8                       _Mf500PiccRead 0786  
              __end_of_ds1302_write 0E6B                   __end_of_init_beep 108E  
                           _read_id 0F2B                        __size_of_isr 0073  
                 __end_of_init_port 10CC      Mf500PiccCommonRequest@req_code 007C  
                           _same_id 0F6E                          _keys_super 00E0  
                        ??_checkpsw 007D                          ??_checksum 0071  
             Mf500PiccAnticoll@bcnt 003D                   __end_of_rece_byte 0CFC  
                        ??_delay_ms 0072             __size_of_init_interrupt 0003  
                     ??_RC500Config 007C                         ?_deal_floor 0070  
                           clrloop0 0819                             main@pwd 0042  
              end_of_initialization 009D                   ??_Mf500PiccSelect 007E  
          Mf500PiccCascAnticoll@snr 007C               read_card_content@data 002E  
                 __end_of_send_byte 0CB0                             memcpy@d 0076  
                           memcpy@n 0072                             memcpy@s 0074  
                        ??_init_i2c 0070                          ??_init_led 0070  
                        ??_init_osc 0070                           _ISR_RC500 12E4  
                _Mf500PiccAuthState 0D60                 Mf500PiccWrite@data1 007B  
                           psplit$0 240057                   __end_of_start_i2c 0CC6  
         Mf500PiccCascAnticoll@bcnt 007B                        __pstringtext 1800  
        Mf500PiccLoadKey@ret_status 007B                          ??_stop_i2c 0070  
               ?_Mf500PiccAuthState 007B                      ?_Mf500PiccRead 007B  
                   _uart1_send_byte 0BA3                     ??_init_hardware 007E  
                         _PWD_TABLE 1801                       ??_handle_beep 0076  
                  ?_ds1302_get_time 0070                    __CFG_FOSC$INTOSC 0000  
          __end_of_find_project_key 0EC3                           _TRISAbits 008C  
                         _TRISCbits 008E                           _TRISEbits 0090  
                         _TRISGbits 030D                    _ds1302_read_byte 0F98  
  Mf500PiccCommonRequest@ret_status 007D                        ??_PcdRfReset 0078  
                         PcdReset@i 0078                    ??_checkpsw_super 007E  
    PcdSingleResponseCmd@ret_status 0028                ??_Mf500PiccAuthState 007D  
                  ?_ds1302_set_time 0070                     ClearBitMask@reg 0077  
            ?_Mf500PiccCascAnticoll 007B                     ClearBitMask@tmp 0076  
               __end_of_RC500Config 1767                         ?_read_24c02 0070  
                        ?_ISR_RC500 0070                      __end_of_ReadRC 1787  
               __size_of_deal_floor F682                  __end_of_PcdRfReset 17EB  
                     delay_ms@count 0070                         ?_init_uart1 0070  
                       ?_init_uart2 0070                __size_of_write_24c02 0012  
                      ISR_RC500@cnt 0078                        PutRC500@data 0070  
                    __end_of_memcpy 0EE1                      __end_of_rfcard 0F47  
                    _handle_ic_card 0CFC                           _PcdSetTmo 15D1  
                         _MpIsrInfo 0054                           _FlushFIFO 0EF7  
                      ??_SetBitMask 0076                         __end_ofPL10 17F3  
                       __end_ofPL20 1800                         __end_ofPL12 1403  
                       __end_ofPL22 0FE8                         __end_ofPL14 0FDC  
                       __end_ofPL24 1409                         __end_ofPL16 0FE2  
                       __end_ofPL26 140F                         __end_ofPL18 17FA  
                       __end_ofPL28 1414                 start_initialization 0079  
                  ??_RC500OutSelect 0075                   __size_of_GetRC500 0016  
                       __end_of_isr 0077                  PcdReset@ret_status 0077  
               __end_of_handle_beep 1000                     ds1302_read@temp 0073  
             ds1302_write_byte@data 0070                   __size_of_PcdReset 0074  
           Mf500HostCodeKey@uncoded 0073                  Mf500PiccRead@data1 007B  
                      ?_ds1302_read 0070                  ds1302_read@address 0072  
                          ??_ReadRC 0072               __size_of_init_mfrc500 000F  
             Mf500PiccAuthState@snr 007B            __end_of_Mf500PiccLoadKey 0EF7  
           __end_of_uart1_send_byte 0BAC                   __size_of_PutRC500 0019  
                __end_of_SetBitMask 0FBA              ISR_RC500@oldPageSelect 0077  
                    _flag_uart1_cmd 005B                      _flag_uart2_cmd 005C  
                     ??_init_ds1302 0070                     ??_Mf500PiccRead 007C  
                       __pdataBANK1 00E0               __size_of_ds1302_write 0018  
          __end_of_Mf500PiccRequest 0F55                            ??_memcpy 0074  
          __end_of_Mf500HostCodeKey 0F2B                            ??_rfcard 007E  
            __end_of_handle_ic_card 0D51        __size_of_Mf500PiccCascSelect 003F  
                        ?_PcdSetTmo 0075                  RC500OutSelect@type 0075  
                        ?_FlushFIFO 0070                       ??_init_timer1 0070  
                        rece_byte@i 0071                 __size_of_read_24c02 0014  
                     ??_read_eeprom 0070                           ___latbits 0003  
                     __pcstackBANK0 0020                      _init_interrupt 10A8  
                       WriteRC@data 0072                 __end_of__stringdata 1906  
                  check_user_card@i 0074                   __size_of_checkpsw 000F  
                 __size_of_checksum 0013                         _RC500Config 171B  
                 __size_of_delay_ms 001B                      _flag_user_card 005D  
                Mf500PiccSelect@snr 002A             __size_of_Mf500PiccWrite 0070  
                      _init_mfrc500 10B2                 __size_of_init_uart1 0011  
               __size_of_init_uart2 0015                       _sector_number 0060  
                         _card_type 0056                           __pnvBANK0 006C  
                         __pnvBANK1 00E6                      handle_config@i 0027  
                      _ds1302_write 0E53                   __size_of_init_i2c 0006  
                 __size_of_init_led 0007                         ??_ISR_RC500 0072  
                 __size_of_init_osc 0004             ?_Mf500PiccCommonRequest 007B  
                          ?___awdiv 0070                  Mf500HostCodeKey@an 0072  
                Mf500HostCodeKey@hn 0074                  Mf500HostCodeKey@ln 0075  
                          ?_WriteRC 0072              __size_of_handle_config 01F3  
                   ?_handle_ic_card 0070                           __pswtext1 07EE  
              ds1302_read_byte@data 0070                     _Mf500PiccSelect 0F32  
                          _BAUD1CON 019F                            _BAUD2CON 0497  
                 __size_of_stop_i2c 0011                          send_byte@i 0071  
            __end_of_init_interrupt 10AB                        checksum@data 0073  
                          ?_read_id 0070                         _handle_beep 0FE8  
               __end_of_init_ds1302 10A2                            ?_same_id 0070  
                      RC500Config@i 007D                           _is_enable 005F  
                       GetRC500@tmp 0071                           _init_beep 108A  
                 read_24c02@address 0072                        ??_deal_floor 0076  
                        pnum$text21 0024                           _init_port 10C5  
                         _rece_byte 0CE1                           checksum@i 0074  
               __end_of_init_timer1 10D5                 __end_of_read_eeprom 0BC8  
                          _LATEbits 0110                           delay_ms@i 0072  
                         delay_ms@j 0074                            _LATGbits 038D  
    __end_of_Mf500PiccCommonRequest 106B                           clear_ram0 0818  
          __size_of_check_user_card 002F                           _uart1_cnt 0061  
                         _uart2_cnt 0062                           _send_byte 0C86  
                 _Mf500PiccAnticoll 0F47                     _user_card_count 0063  
              _uart2_receive_buffer 0120                  Mf500PiccWrite@addr 007C  
                ?_Mf500PiccAnticoll 007D                 send_byte@write_data 0070  
          __end_of_ds1302_read_byte 0FB1                    ?_uart1_send_byte 0070  
                   deal_floor@floor 0022                           _snr_rc500 00DA  
                     ?_ClearBitMask 0075                  __end_of_deal_floor 0784  
               ??_Mf500PiccAnticoll 007E                         __stringdata 1901  
     __size_of_PcdSingleResponseCmd 0109                           main@i_954 0044  
                         _start_i2c 0CB0            Mf500PiccRequest@req_code 002B  
                       ??_PcdSetTmo 0077                            _GetRC500 13E5  
                   ?_init_interrupt 0070                         ??_FlushFIFO 0078  
                    SetBitMask@mask 0075                           _user_card 00C6  
                 ?_find_project_key 0070                          ?_init_beep 0070  
                        ?_init_port 0070                  ??_find_project_key 0070  
                    checksum@length 0070                          ?_rece_byte 0070  
           ??_Mf500PiccCascAnticoll 002A                            _PcdReset 1270  
                          _MpIsrOut 0055                       _handle_config 09B0  
         __end_of_Mf500PiccAnticoll 0F4F                        ??_read_24c02 0072  
                        ?_send_byte 0070                            _PutRC500 13CC  
                 Mf500PiccRead@addr 002A                         deal_floor@i 0021  
       Mf500PiccAuthState@auth_mode 002A                __size_of_ds1302_read 0019  
           __end_of_Mf500PiccSelect 0F37                    ISR_RC500@irqBits 007A  
                  ISR_RC500@irqMask 0076                      ??_ClearBitMask 0076  
                  __size_of___awdiv 0040                         _init_ds1302 108E  
                  __size_of_WriteRC 0011                        ??_init_uart1 0070  
                      ??_init_uart2 0070                           rfcard@ret 003E  
                __end_of__stringtab 1801                          ?_start_i2c 0070  
                read_eeprom@address 0070               __end_of_init_hardware 108A  
                          _checkpsw 0D51                            _checksum 0E85  
                       _init_timer1 10CC                    __size_of_read_id 0007  
                          _delay_ms 0CC6                         _read_eeprom 0BBE  
                __end_of_read_24c02 0C86                    __size_of_same_id 0018  
                          __ptext10 10A2                            __ptext11 108E  
                          __ptext20 081E                            __ptext12 108A  
                          __ptext21 1102                            __ptext13 10FB  
                          __ptext30 1027                            __ptext22 0E85  
                          __ptext14 171B                            __ptext31 0F47  
                          __ptext23 0DB2                            __ptext15 17D1  
                          __ptext40 0EFB                            __ptext32 1484  
                          __ptext24 1414                            __ptext16 1270  
                          __ptext41 0D60                            __ptext33 1791  
                          __ptext25 0786                            __ptext17 0F86  
                          __ptext50 1767                            __ptext42 0EC3  
                          __ptext34 0F2B                            __ptext26 0FE8  
                          __ptext18 0CFC                            __ptext51 13CC  
                          __ptext43 1612                            __ptext35 0F32  
                          __ptext27 0F55                            __ptext19 0F6E  
                          __ptext60 0C86                            __ptext52 09B0  
                          __ptext44 12E4                            __ptext36 1FC1  
                          __ptext28 0F37                            __ptext61 0CE1  
                          __ptext53 0BAC                            __ptext45 0EF7  
                          __ptext37 1787                            __ptext29 0F4F  
                          __ptext62 0EA9                            __ptext54 0CC6  
                          __ptext46 0FB1                            __ptext38 0D51  
                          __ptext63 0E1E                            __ptext55 0BA3  
                          __ptext47 1778                            __ptext39 0EE1  
                          __ptext64 0E53                            __ptext56 0BBE  
                          __ptext48 13E5                            __ptext65 0DE1  
                          __ptext57 0C72                            __ptext49 15D1  
                          __ptext66 0E05                            __ptext58 0E98  
                          __ptext67 0E6B                            __ptext59 0CB0  
                          __ptext68 0F98      Mf500PiccCascAnticoll@snr_check 0030  
                    ?_handle_config 0070            __size_of_ds1302_get_time 0024  
                    _Mf500PiccWrite 1414                         checksum@sum 0072  
               uart1_send_byte@data 0070         __size_of_Mf500PiccAuthState 0052  
                          _init_i2c 10A2                            _init_led 10AB  
                     __size_of_main 00AA                            _init_osc 10C1  
               _Mf500PiccCascSelect 1FC1                  __end_of_init_uart1 10E6  
                __end_of_init_uart2 10FB              Mf500PiccCascAnticoll@i 003C  
                     ??_write_24c02 0077            __size_of_ds1302_set_time 0035  
                 ?_Mf500PiccLoadKey 0070                   ??_check_user_card 0074  
                pnum$text21_split_1 0057                       SetBitMask@reg 0077  
                     SetBitMask@tmp 0076                  ??_Mf500PiccLoadKey 007B  
                          _stop_i2c 0E98                   ?_Mf500PiccRequest 002A  
                 ?_Mf500HostCodeKey 0070                ?_Mf500PiccCascSelect 007B  
                ??_Mf500PiccRequest 007E                  ??_Mf500HostCodeKey 0071  
                          memcpy@d1 0077                            memcpy@s1 0070  
    Mf500PiccCascSelect@select_code 007C                         ??_init_beep 0070  
            __end_of_Mf500PiccWrite 1484                        ?_RC500Config 0070  
                       ??_init_port 0070         Mf500PiccCascAnticoll@nbytes 0039  
                       ??_rece_byte 0070                            intlevel1 0000  
       Mf500PiccCascAnticoll@snr_in 0035           PcdSingleResponseCmd@irqEn 0026  
        __size_of_Mf500PiccAnticoll 0008                       ?_handle_timer 0070  
                       ??_send_byte 0070                    ??_handle_ic_card 007E  
           __size_of_checkpsw_super 0019                    ?_Mf500PiccSelect 0070  
handle_config@report_the_loss_count 0026               ??_Mf500PiccCascSelect 007C  
             __end_of_Mf500PiccRead 07E4              Mf500PiccCascSelect@snr 007B  
                       ??_start_i2c 0070          Mf500PiccCascAnticoll@nbits 003B  
               __end_of_write_24c02 0BBE                        ?_handle_beep 0070  
     Mf500PiccCascSelect@ret_status 007D    Mf500PiccCascAnticoll@dummyShift1 0032  
  Mf500PiccCascAnticoll@dummyShift2 0031                     ??_handle_config 0078  
                       _timer_count 00A4                          _TX1STAbits 019E  
                   ?_Mf500PiccWrite 007B                __end_of_ClearBitMask 1791  
                      PcdRfReset@ms 0079                      ??_handle_timer 0070  
           __size_of_RC500OutSelect 0007                         PcdRfReset@i 007A  
                 ??_ds1302_get_time 0074  

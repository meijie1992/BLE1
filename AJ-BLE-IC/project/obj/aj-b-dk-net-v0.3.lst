

Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Mon Nov 07 15:37:04 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16F1947
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text15,local,class=CODE,merge=1,delta=2
    20                           	psect	text16,local,class=CODE,merge=1,delta=2
    21                           	psect	text19,local,class=CODE,merge=1,delta=2
    22                           	psect	text21,local,class=CODE,merge=1,delta=2
    23                           	psect	text26,local,class=CODE,merge=1,delta=2
    24                           	psect	swtext1,local,class=CONST,delta=2
    25                           	psect	text33,local,class=CODE,merge=1,delta=2
    26                           	psect	text41,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	pa_nodes,global,class=CODE,delta=2
    29                           	psect	text21_split_1,local,class=CODE,merge=1,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  0008                     	;# 
    40  0009                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000D                     	;# 
    45  000E                     	;# 
    46  000F                     	;# 
    47  0010                     	;# 
    48  0011                     	;# 
    49  0012                     	;# 
    50  0013                     	;# 
    51  0014                     	;# 
    52  0015                     	;# 
    53  0016                     	;# 
    54  0016                     	;# 
    55  0017                     	;# 
    56  0018                     	;# 
    57  0019                     	;# 
    58  001A                     	;# 
    59  001B                     	;# 
    60  001C                     	;# 
    61  001E                     	;# 
    62  001F                     	;# 
    63  008C                     	;# 
    64  008D                     	;# 
    65  008E                     	;# 
    66  008F                     	;# 
    67  0090                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0095                     	;# 
    73  0096                     	;# 
    74  0097                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009B                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  010C                     	;# 
    84  010D                     	;# 
    85  010E                     	;# 
    86  010F                     	;# 
    87  0110                     	;# 
    88  0111                     	;# 
    89  0112                     	;# 
    90  0113                     	;# 
    91  0114                     	;# 
    92  0115                     	;# 
    93  0116                     	;# 
    94  0117                     	;# 
    95  0118                     	;# 
    96  0119                     	;# 
    97  011A                     	;# 
    98  011B                     	;# 
    99  011D                     	;# 
   100  011E                     	;# 
   101  011F                     	;# 
   102  018C                     	;# 
   103  0190                     	;# 
   104  0191                     	;# 
   105  0191                     	;# 
   106  0192                     	;# 
   107  0193                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0194                     	;# 
   111  0195                     	;# 
   112  0196                     	;# 
   113  0199                     	;# 
   114  0199                     	;# 
   115  019A                     	;# 
   116  019A                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019C                     	;# 
   122  019C                     	;# 
   123  019D                     	;# 
   124  019D                     	;# 
   125  019E                     	;# 
   126  019E                     	;# 
   127  019F                     	;# 
   128  020D                     	;# 
   129  0211                     	;# 
   130  0211                     	;# 
   131  0212                     	;# 
   132  0212                     	;# 
   133  0213                     	;# 
   134  0213                     	;# 
   135  0214                     	;# 
   136  0214                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0215                     	;# 
   140  0216                     	;# 
   141  0216                     	;# 
   142  0217                     	;# 
   143  0217                     	;# 
   144  0219                     	;# 
   145  021A                     	;# 
   146  021B                     	;# 
   147  021C                     	;# 
   148  021D                     	;# 
   149  021E                     	;# 
   150  021F                     	;# 
   151  028C                     	;# 
   152  028D                     	;# 
   153  0291                     	;# 
   154  0291                     	;# 
   155  0292                     	;# 
   156  0293                     	;# 
   157  0294                     	;# 
   158  0295                     	;# 
   159  0295                     	;# 
   160  0296                     	;# 
   161  0298                     	;# 
   162  0298                     	;# 
   163  0299                     	;# 
   164  029A                     	;# 
   165  029B                     	;# 
   166  029C                     	;# 
   167  029C                     	;# 
   168  029D                     	;# 
   169  029E                     	;# 
   170  029F                     	;# 
   171  030C                     	;# 
   172  030D                     	;# 
   173  0311                     	;# 
   174  0311                     	;# 
   175  0312                     	;# 
   176  0313                     	;# 
   177  0314                     	;# 
   178  0315                     	;# 
   179  0315                     	;# 
   180  0316                     	;# 
   181  0318                     	;# 
   182  0318                     	;# 
   183  0319                     	;# 
   184  031A                     	;# 
   185  031C                     	;# 
   186  031C                     	;# 
   187  031D                     	;# 
   188  031E                     	;# 
   189  038C                     	;# 
   190  038D                     	;# 
   191  0394                     	;# 
   192  0395                     	;# 
   193  0396                     	;# 
   194  040C                     	;# 
   195  040D                     	;# 
   196  0415                     	;# 
   197  0416                     	;# 
   198  0417                     	;# 
   199  041C                     	;# 
   200  041D                     	;# 
   201  041E                     	;# 
   202  048D                     	;# 
   203  0491                     	;# 
   204  0492                     	;# 
   205  0493                     	;# 
   206  0493                     	;# 
   207  0494                     	;# 
   208  0495                     	;# 
   209  0496                     	;# 
   210  0497                     	;# 
   211  0791                     	;# 
   212  0792                     	;# 
   213  0793                     	;# 
   214  0794                     	;# 
   215  0795                     	;# 
   216  0798                     	;# 
   217  0799                     	;# 
   218  079A                     	;# 
   219  079B                     	;# 
   220  079C                     	;# 
   221  079D                     	;# 
   222  07A0                     	;# 
   223  07A1                     	;# 
   224  07A2                     	;# 
   225  07A3                     	;# 
   226  07A4                     	;# 
   227  07A5                     	;# 
   228  07A6                     	;# 
   229  07A7                     	;# 
   230  07A8                     	;# 
   231  07A9                     	;# 
   232  07AA                     	;# 
   233  07AB                     	;# 
   234  07AC                     	;# 
   235  07AD                     	;# 
   236  07AE                     	;# 
   237  07AF                     	;# 
   238  07B0                     	;# 
   239  07B1                     	;# 
   240  07B2                     	;# 
   241  07B3                     	;# 
   242  07B4                     	;# 
   243  07B5                     	;# 
   244  07B6                     	;# 
   245  07B7                     	;# 
   246  0FE4                     	;# 
   247  0FE5                     	;# 
   248  0FE6                     	;# 
   249  0FE7                     	;# 
   250  0FE8                     	;# 
   251  0FE9                     	;# 
   252  0FEA                     	;# 
   253  0FEB                     	;# 
   254  0FED                     	;# 
   255  0FEE                     	;# 
   256  0FEF                     	;# 
   257  0000                     	;# 
   258  0001                     	;# 
   259  0002                     	;# 
   260  0003                     	;# 
   261  0004                     	;# 
   262  0005                     	;# 
   263  0006                     	;# 
   264  0007                     	;# 
   265  0008                     	;# 
   266  0009                     	;# 
   267  000A                     	;# 
   268  000B                     	;# 
   269  000C                     	;# 
   270  000D                     	;# 
   271  000E                     	;# 
   272  000F                     	;# 
   273  0010                     	;# 
   274  0011                     	;# 
   275  0012                     	;# 
   276  0013                     	;# 
   277  0014                     	;# 
   278  0015                     	;# 
   279  0016                     	;# 
   280  0016                     	;# 
   281  0017                     	;# 
   282  0018                     	;# 
   283  0019                     	;# 
   284  001A                     	;# 
   285  001B                     	;# 
   286  001C                     	;# 
   287  001E                     	;# 
   288  001F                     	;# 
   289  008C                     	;# 
   290  008D                     	;# 
   291  008E                     	;# 
   292  008F                     	;# 
   293  0090                     	;# 
   294  0091                     	;# 
   295  0092                     	;# 
   296  0093                     	;# 
   297  0094                     	;# 
   298  0095                     	;# 
   299  0096                     	;# 
   300  0097                     	;# 
   301  0098                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  010F                     	;# 
   313  0110                     	;# 
   314  0111                     	;# 
   315  0112                     	;# 
   316  0113                     	;# 
   317  0114                     	;# 
   318  0115                     	;# 
   319  0116                     	;# 
   320  0117                     	;# 
   321  0118                     	;# 
   322  0119                     	;# 
   323  011A                     	;# 
   324  011B                     	;# 
   325  011D                     	;# 
   326  011E                     	;# 
   327  011F                     	;# 
   328  018C                     	;# 
   329  0190                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0199                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019A                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019B                     	;# 
   347  019C                     	;# 
   348  019C                     	;# 
   349  019D                     	;# 
   350  019D                     	;# 
   351  019E                     	;# 
   352  019E                     	;# 
   353  019F                     	;# 
   354  020D                     	;# 
   355  0211                     	;# 
   356  0211                     	;# 
   357  0212                     	;# 
   358  0212                     	;# 
   359  0213                     	;# 
   360  0213                     	;# 
   361  0214                     	;# 
   362  0214                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0216                     	;# 
   367  0216                     	;# 
   368  0217                     	;# 
   369  0217                     	;# 
   370  0219                     	;# 
   371  021A                     	;# 
   372  021B                     	;# 
   373  021C                     	;# 
   374  021D                     	;# 
   375  021E                     	;# 
   376  021F                     	;# 
   377  028C                     	;# 
   378  028D                     	;# 
   379  0291                     	;# 
   380  0291                     	;# 
   381  0292                     	;# 
   382  0293                     	;# 
   383  0294                     	;# 
   384  0295                     	;# 
   385  0295                     	;# 
   386  0296                     	;# 
   387  0298                     	;# 
   388  0298                     	;# 
   389  0299                     	;# 
   390  029A                     	;# 
   391  029B                     	;# 
   392  029C                     	;# 
   393  029C                     	;# 
   394  029D                     	;# 
   395  029E                     	;# 
   396  029F                     	;# 
   397  030C                     	;# 
   398  030D                     	;# 
   399  0311                     	;# 
   400  0311                     	;# 
   401  0312                     	;# 
   402  0313                     	;# 
   403  0314                     	;# 
   404  0315                     	;# 
   405  0315                     	;# 
   406  0316                     	;# 
   407  0318                     	;# 
   408  0318                     	;# 
   409  0319                     	;# 
   410  031A                     	;# 
   411  031C                     	;# 
   412  031C                     	;# 
   413  031D                     	;# 
   414  031E                     	;# 
   415  038C                     	;# 
   416  038D                     	;# 
   417  0394                     	;# 
   418  0395                     	;# 
   419  0396                     	;# 
   420  040C                     	;# 
   421  040D                     	;# 
   422  0415                     	;# 
   423  0416                     	;# 
   424  0417                     	;# 
   425  041C                     	;# 
   426  041D                     	;# 
   427  041E                     	;# 
   428  048D                     	;# 
   429  0491                     	;# 
   430  0492                     	;# 
   431  0493                     	;# 
   432  0493                     	;# 
   433  0494                     	;# 
   434  0495                     	;# 
   435  0496                     	;# 
   436  0497                     	;# 
   437  0791                     	;# 
   438  0792                     	;# 
   439  0793                     	;# 
   440  0794                     	;# 
   441  0795                     	;# 
   442  0798                     	;# 
   443  0799                     	;# 
   444  079A                     	;# 
   445  079B                     	;# 
   446  079C                     	;# 
   447  079D                     	;# 
   448  07A0                     	;# 
   449  07A1                     	;# 
   450  07A2                     	;# 
   451  07A3                     	;# 
   452  07A4                     	;# 
   453  07A5                     	;# 
   454  07A6                     	;# 
   455  07A7                     	;# 
   456  07A8                     	;# 
   457  07A9                     	;# 
   458  07AA                     	;# 
   459  07AB                     	;# 
   460  07AC                     	;# 
   461  07AD                     	;# 
   462  07AE                     	;# 
   463  07AF                     	;# 
   464  07B0                     	;# 
   465  07B1                     	;# 
   466  07B2                     	;# 
   467  07B3                     	;# 
   468  07B4                     	;# 
   469  07B5                     	;# 
   470  07B6                     	;# 
   471  07B7                     	;# 
   472  0FE4                     	;# 
   473  0FE5                     	;# 
   474  0FE6                     	;# 
   475  0FE7                     	;# 
   476  0FE8                     	;# 
   477  0FE9                     	;# 
   478  0FEA                     	;# 
   479  0FEB                     	;# 
   480  0FED                     	;# 
   481  0FEE                     	;# 
   482  0FEF                     	;# 
   483  0000                     	;# 
   484  0001                     	;# 
   485  0002                     	;# 
   486  0003                     	;# 
   487  0004                     	;# 
   488  0005                     	;# 
   489  0006                     	;# 
   490  0007                     	;# 
   491  0008                     	;# 
   492  0009                     	;# 
   493  000A                     	;# 
   494  000B                     	;# 
   495  000C                     	;# 
   496  000D                     	;# 
   497  000E                     	;# 
   498  000F                     	;# 
   499  0010                     	;# 
   500  0011                     	;# 
   501  0012                     	;# 
   502  0013                     	;# 
   503  0014                     	;# 
   504  0015                     	;# 
   505  0016                     	;# 
   506  0016                     	;# 
   507  0017                     	;# 
   508  0018                     	;# 
   509  0019                     	;# 
   510  001A                     	;# 
   511  001B                     	;# 
   512  001C                     	;# 
   513  001E                     	;# 
   514  001F                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  008F                     	;# 
   519  0090                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0093                     	;# 
   523  0094                     	;# 
   524  0095                     	;# 
   525  0096                     	;# 
   526  0097                     	;# 
   527  0098                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  010F                     	;# 
   539  0110                     	;# 
   540  0111                     	;# 
   541  0112                     	;# 
   542  0113                     	;# 
   543  0114                     	;# 
   544  0115                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  0118                     	;# 
   548  0119                     	;# 
   549  011A                     	;# 
   550  011B                     	;# 
   551  011D                     	;# 
   552  011E                     	;# 
   553  011F                     	;# 
   554  018C                     	;# 
   555  0190                     	;# 
   556  0191                     	;# 
   557  0191                     	;# 
   558  0192                     	;# 
   559  0193                     	;# 
   560  0193                     	;# 
   561  0193                     	;# 
   562  0194                     	;# 
   563  0195                     	;# 
   564  0196                     	;# 
   565  0199                     	;# 
   566  0199                     	;# 
   567  019A                     	;# 
   568  019A                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019C                     	;# 
   574  019C                     	;# 
   575  019D                     	;# 
   576  019D                     	;# 
   577  019E                     	;# 
   578  019E                     	;# 
   579  019F                     	;# 
   580  020D                     	;# 
   581  0211                     	;# 
   582  0211                     	;# 
   583  0212                     	;# 
   584  0212                     	;# 
   585  0213                     	;# 
   586  0213                     	;# 
   587  0214                     	;# 
   588  0214                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0216                     	;# 
   593  0216                     	;# 
   594  0217                     	;# 
   595  0217                     	;# 
   596  0219                     	;# 
   597  021A                     	;# 
   598  021B                     	;# 
   599  021C                     	;# 
   600  021D                     	;# 
   601  021E                     	;# 
   602  021F                     	;# 
   603  028C                     	;# 
   604  028D                     	;# 
   605  0291                     	;# 
   606  0291                     	;# 
   607  0292                     	;# 
   608  0293                     	;# 
   609  0294                     	;# 
   610  0295                     	;# 
   611  0295                     	;# 
   612  0296                     	;# 
   613  0298                     	;# 
   614  0298                     	;# 
   615  0299                     	;# 
   616  029A                     	;# 
   617  029B                     	;# 
   618  029C                     	;# 
   619  029C                     	;# 
   620  029D                     	;# 
   621  029E                     	;# 
   622  029F                     	;# 
   623  030C                     	;# 
   624  030D                     	;# 
   625  0311                     	;# 
   626  0311                     	;# 
   627  0312                     	;# 
   628  0313                     	;# 
   629  0314                     	;# 
   630  0315                     	;# 
   631  0315                     	;# 
   632  0316                     	;# 
   633  0318                     	;# 
   634  0318                     	;# 
   635  0319                     	;# 
   636  031A                     	;# 
   637  031C                     	;# 
   638  031C                     	;# 
   639  031D                     	;# 
   640  031E                     	;# 
   641  038C                     	;# 
   642  038D                     	;# 
   643  0394                     	;# 
   644  0395                     	;# 
   645  0396                     	;# 
   646  040C                     	;# 
   647  040D                     	;# 
   648  0415                     	;# 
   649  0416                     	;# 
   650  0417                     	;# 
   651  041C                     	;# 
   652  041D                     	;# 
   653  041E                     	;# 
   654  048D                     	;# 
   655  0491                     	;# 
   656  0492                     	;# 
   657  0493                     	;# 
   658  0493                     	;# 
   659  0494                     	;# 
   660  0495                     	;# 
   661  0496                     	;# 
   662  0497                     	;# 
   663  0791                     	;# 
   664  0792                     	;# 
   665  0793                     	;# 
   666  0794                     	;# 
   667  0795                     	;# 
   668  0798                     	;# 
   669  0799                     	;# 
   670  079A                     	;# 
   671  079B                     	;# 
   672  079C                     	;# 
   673  079D                     	;# 
   674  07A0                     	;# 
   675  07A1                     	;# 
   676  07A2                     	;# 
   677  07A3                     	;# 
   678  07A4                     	;# 
   679  07A5                     	;# 
   680  07A6                     	;# 
   681  07A7                     	;# 
   682  07A8                     	;# 
   683  07A9                     	;# 
   684  07AA                     	;# 
   685  07AB                     	;# 
   686  07AC                     	;# 
   687  07AD                     	;# 
   688  07AE                     	;# 
   689  07AF                     	;# 
   690  07B0                     	;# 
   691  07B1                     	;# 
   692  07B2                     	;# 
   693  07B3                     	;# 
   694  07B4                     	;# 
   695  07B5                     	;# 
   696  07B6                     	;# 
   697  07B7                     	;# 
   698  0FE4                     	;# 
   699  0FE5                     	;# 
   700  0FE6                     	;# 
   701  0FE7                     	;# 
   702  0FE8                     	;# 
   703  0FE9                     	;# 
   704  0FEA                     	;# 
   705  0FEB                     	;# 
   706  0FED                     	;# 
   707  0FEE                     	;# 
   708  0FEF                     	;# 
   709  0000                     	;# 
   710  0001                     	;# 
   711  0002                     	;# 
   712  0003                     	;# 
   713  0004                     	;# 
   714  0005                     	;# 
   715  0006                     	;# 
   716  0007                     	;# 
   717  0008                     	;# 
   718  0009                     	;# 
   719  000A                     	;# 
   720  000B                     	;# 
   721  000C                     	;# 
   722  000D                     	;# 
   723  000E                     	;# 
   724  000F                     	;# 
   725  0010                     	;# 
   726  0011                     	;# 
   727  0012                     	;# 
   728  0013                     	;# 
   729  0014                     	;# 
   730  0015                     	;# 
   731  0016                     	;# 
   732  0016                     	;# 
   733  0017                     	;# 
   734  0018                     	;# 
   735  0019                     	;# 
   736  001A                     	;# 
   737  001B                     	;# 
   738  001C                     	;# 
   739  001E                     	;# 
   740  001F                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  008F                     	;# 
   745  0090                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0093                     	;# 
   749  0094                     	;# 
   750  0095                     	;# 
   751  0096                     	;# 
   752  0097                     	;# 
   753  0098                     	;# 
   754  0099                     	;# 
   755  009A                     	;# 
   756  009B                     	;# 
   757  009B                     	;# 
   758  009C                     	;# 
   759  009D                     	;# 
   760  009E                     	;# 
   761  010C                     	;# 
   762  010D                     	;# 
   763  010E                     	;# 
   764  010F                     	;# 
   765  0110                     	;# 
   766  0111                     	;# 
   767  0112                     	;# 
   768  0113                     	;# 
   769  0114                     	;# 
   770  0115                     	;# 
   771  0116                     	;# 
   772  0117                     	;# 
   773  0118                     	;# 
   774  0119                     	;# 
   775  011A                     	;# 
   776  011B                     	;# 
   777  011D                     	;# 
   778  011E                     	;# 
   779  011F                     	;# 
   780  018C                     	;# 
   781  0190                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0199                     	;# 
   792  0199                     	;# 
   793  019A                     	;# 
   794  019A                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019B                     	;# 
   799  019C                     	;# 
   800  019C                     	;# 
   801  019D                     	;# 
   802  019D                     	;# 
   803  019E                     	;# 
   804  019E                     	;# 
   805  019F                     	;# 
   806  020D                     	;# 
   807  0211                     	;# 
   808  0211                     	;# 
   809  0212                     	;# 
   810  0212                     	;# 
   811  0213                     	;# 
   812  0213                     	;# 
   813  0214                     	;# 
   814  0214                     	;# 
   815  0215                     	;# 
   816  0215                     	;# 
   817  0215                     	;# 
   818  0216                     	;# 
   819  0216                     	;# 
   820  0217                     	;# 
   821  0217                     	;# 
   822  0219                     	;# 
   823  021A                     	;# 
   824  021B                     	;# 
   825  021C                     	;# 
   826  021D                     	;# 
   827  021E                     	;# 
   828  021F                     	;# 
   829  028C                     	;# 
   830  028D                     	;# 
   831  0291                     	;# 
   832  0291                     	;# 
   833  0292                     	;# 
   834  0293                     	;# 
   835  0294                     	;# 
   836  0295                     	;# 
   837  0295                     	;# 
   838  0296                     	;# 
   839  0298                     	;# 
   840  0298                     	;# 
   841  0299                     	;# 
   842  029A                     	;# 
   843  029B                     	;# 
   844  029C                     	;# 
   845  029C                     	;# 
   846  029D                     	;# 
   847  029E                     	;# 
   848  029F                     	;# 
   849  030C                     	;# 
   850  030D                     	;# 
   851  0311                     	;# 
   852  0311                     	;# 
   853  0312                     	;# 
   854  0313                     	;# 
   855  0314                     	;# 
   856  0315                     	;# 
   857  0315                     	;# 
   858  0316                     	;# 
   859  0318                     	;# 
   860  0318                     	;# 
   861  0319                     	;# 
   862  031A                     	;# 
   863  031C                     	;# 
   864  031C                     	;# 
   865  031D                     	;# 
   866  031E                     	;# 
   867  038C                     	;# 
   868  038D                     	;# 
   869  0394                     	;# 
   870  0395                     	;# 
   871  0396                     	;# 
   872  040C                     	;# 
   873  040D                     	;# 
   874  0415                     	;# 
   875  0416                     	;# 
   876  0417                     	;# 
   877  041C                     	;# 
   878  041D                     	;# 
   879  041E                     	;# 
   880  048D                     	;# 
   881  0491                     	;# 
   882  0492                     	;# 
   883  0493                     	;# 
   884  0493                     	;# 
   885  0494                     	;# 
   886  0495                     	;# 
   887  0496                     	;# 
   888  0497                     	;# 
   889  0791                     	;# 
   890  0792                     	;# 
   891  0793                     	;# 
   892  0794                     	;# 
   893  0795                     	;# 
   894  0798                     	;# 
   895  0799                     	;# 
   896  079A                     	;# 
   897  079B                     	;# 
   898  079C                     	;# 
   899  079D                     	;# 
   900  07A0                     	;# 
   901  07A1                     	;# 
   902  07A2                     	;# 
   903  07A3                     	;# 
   904  07A4                     	;# 
   905  07A5                     	;# 
   906  07A6                     	;# 
   907  07A7                     	;# 
   908  07A8                     	;# 
   909  07A9                     	;# 
   910  07AA                     	;# 
   911  07AB                     	;# 
   912  07AC                     	;# 
   913  07AD                     	;# 
   914  07AE                     	;# 
   915  07AF                     	;# 
   916  07B0                     	;# 
   917  07B1                     	;# 
   918  07B2                     	;# 
   919  07B3                     	;# 
   920  07B4                     	;# 
   921  07B5                     	;# 
   922  07B6                     	;# 
   923  07B7                     	;# 
   924  0FE4                     	;# 
   925  0FE5                     	;# 
   926  0FE6                     	;# 
   927  0FE7                     	;# 
   928  0FE8                     	;# 
   929  0FE9                     	;# 
   930  0FEA                     	;# 
   931  0FEB                     	;# 
   932  0FED                     	;# 
   933  0FEE                     	;# 
   934  0FEF                     	;# 
   935  0000                     	;# 
   936  0001                     	;# 
   937  0002                     	;# 
   938  0003                     	;# 
   939  0004                     	;# 
   940  0005                     	;# 
   941  0006                     	;# 
   942  0007                     	;# 
   943  0008                     	;# 
   944  0009                     	;# 
   945  000A                     	;# 
   946  000B                     	;# 
   947  000C                     	;# 
   948  000D                     	;# 
   949  000E                     	;# 
   950  000F                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0013                     	;# 
   955  0014                     	;# 
   956  0015                     	;# 
   957  0016                     	;# 
   958  0016                     	;# 
   959  0017                     	;# 
   960  0018                     	;# 
   961  0019                     	;# 
   962  001A                     	;# 
   963  001B                     	;# 
   964  001C                     	;# 
   965  001E                     	;# 
   966  001F                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  008F                     	;# 
   971  0090                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0093                     	;# 
   975  0094                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0098                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  010F                     	;# 
   991  0110                     	;# 
   992  0111                     	;# 
   993  0112                     	;# 
   994  0113                     	;# 
   995  0114                     	;# 
   996  0115                     	;# 
   997  0116                     	;# 
   998  0117                     	;# 
   999  0118                     	;# 
  1000  0119                     	;# 
  1001  011A                     	;# 
  1002  011B                     	;# 
  1003  011D                     	;# 
  1004  011E                     	;# 
  1005  011F                     	;# 
  1006  018C                     	;# 
  1007  0190                     	;# 
  1008  0191                     	;# 
  1009  0191                     	;# 
  1010  0192                     	;# 
  1011  0193                     	;# 
  1012  0193                     	;# 
  1013  0193                     	;# 
  1014  0194                     	;# 
  1015  0195                     	;# 
  1016  0196                     	;# 
  1017  0199                     	;# 
  1018  0199                     	;# 
  1019  019A                     	;# 
  1020  019A                     	;# 
  1021  019B                     	;# 
  1022  019B                     	;# 
  1023  019B                     	;# 
  1024  019B                     	;# 
  1025  019C                     	;# 
  1026  019C                     	;# 
  1027  019D                     	;# 
  1028  019D                     	;# 
  1029  019E                     	;# 
  1030  019E                     	;# 
  1031  019F                     	;# 
  1032  020D                     	;# 
  1033  0211                     	;# 
  1034  0211                     	;# 
  1035  0212                     	;# 
  1036  0212                     	;# 
  1037  0213                     	;# 
  1038  0213                     	;# 
  1039  0214                     	;# 
  1040  0214                     	;# 
  1041  0215                     	;# 
  1042  0215                     	;# 
  1043  0215                     	;# 
  1044  0216                     	;# 
  1045  0216                     	;# 
  1046  0217                     	;# 
  1047  0217                     	;# 
  1048  0219                     	;# 
  1049  021A                     	;# 
  1050  021B                     	;# 
  1051  021C                     	;# 
  1052  021D                     	;# 
  1053  021E                     	;# 
  1054  021F                     	;# 
  1055  028C                     	;# 
  1056  028D                     	;# 
  1057  0291                     	;# 
  1058  0291                     	;# 
  1059  0292                     	;# 
  1060  0293                     	;# 
  1061  0294                     	;# 
  1062  0295                     	;# 
  1063  0295                     	;# 
  1064  0296                     	;# 
  1065  0298                     	;# 
  1066  0298                     	;# 
  1067  0299                     	;# 
  1068  029A                     	;# 
  1069  029B                     	;# 
  1070  029C                     	;# 
  1071  029C                     	;# 
  1072  029D                     	;# 
  1073  029E                     	;# 
  1074  029F                     	;# 
  1075  030C                     	;# 
  1076  030D                     	;# 
  1077  0311                     	;# 
  1078  0311                     	;# 
  1079  0312                     	;# 
  1080  0313                     	;# 
  1081  0314                     	;# 
  1082  0315                     	;# 
  1083  0315                     	;# 
  1084  0316                     	;# 
  1085  0318                     	;# 
  1086  0318                     	;# 
  1087  0319                     	;# 
  1088  031A                     	;# 
  1089  031C                     	;# 
  1090  031C                     	;# 
  1091  031D                     	;# 
  1092  031E                     	;# 
  1093  038C                     	;# 
  1094  038D                     	;# 
  1095  0394                     	;# 
  1096  0395                     	;# 
  1097  0396                     	;# 
  1098  040C                     	;# 
  1099  040D                     	;# 
  1100  0415                     	;# 
  1101  0416                     	;# 
  1102  0417                     	;# 
  1103  041C                     	;# 
  1104  041D                     	;# 
  1105  041E                     	;# 
  1106  048D                     	;# 
  1107  0491                     	;# 
  1108  0492                     	;# 
  1109  0493                     	;# 
  1110  0493                     	;# 
  1111  0494                     	;# 
  1112  0495                     	;# 
  1113  0496                     	;# 
  1114  0497                     	;# 
  1115  0791                     	;# 
  1116  0792                     	;# 
  1117  0793                     	;# 
  1118  0794                     	;# 
  1119  0795                     	;# 
  1120  0798                     	;# 
  1121  0799                     	;# 
  1122  079A                     	;# 
  1123  079B                     	;# 
  1124  079C                     	;# 
  1125  079D                     	;# 
  1126  07A0                     	;# 
  1127  07A1                     	;# 
  1128  07A2                     	;# 
  1129  07A3                     	;# 
  1130  07A4                     	;# 
  1131  07A5                     	;# 
  1132  07A6                     	;# 
  1133  07A7                     	;# 
  1134  07A8                     	;# 
  1135  07A9                     	;# 
  1136  07AA                     	;# 
  1137  07AB                     	;# 
  1138  07AC                     	;# 
  1139  07AD                     	;# 
  1140  07AE                     	;# 
  1141  07AF                     	;# 
  1142  07B0                     	;# 
  1143  07B1                     	;# 
  1144  07B2                     	;# 
  1145  07B3                     	;# 
  1146  07B4                     	;# 
  1147  07B5                     	;# 
  1148  07B6                     	;# 
  1149  07B7                     	;# 
  1150  0FE4                     	;# 
  1151  0FE5                     	;# 
  1152  0FE6                     	;# 
  1153  0FE7                     	;# 
  1154  0FE8                     	;# 
  1155  0FE9                     	;# 
  1156  0FEA                     	;# 
  1157  0FEB                     	;# 
  1158  0FED                     	;# 
  1159  0FEE                     	;# 
  1160  0FEF                     	;# 
  1161  0000                     	;# 
  1162  0001                     	;# 
  1163  0002                     	;# 
  1164  0003                     	;# 
  1165  0004                     	;# 
  1166  0005                     	;# 
  1167  0006                     	;# 
  1168  0007                     	;# 
  1169  0008                     	;# 
  1170  0009                     	;# 
  1171  000A                     	;# 
  1172  000B                     	;# 
  1173  000C                     	;# 
  1174  000D                     	;# 
  1175  000E                     	;# 
  1176  000F                     	;# 
  1177  0010                     	;# 
  1178  0011                     	;# 
  1179  0012                     	;# 
  1180  0013                     	;# 
  1181  0014                     	;# 
  1182  0015                     	;# 
  1183  0016                     	;# 
  1184  0016                     	;# 
  1185  0017                     	;# 
  1186  0018                     	;# 
  1187  0019                     	;# 
  1188  001A                     	;# 
  1189  001B                     	;# 
  1190  001C                     	;# 
  1191  001E                     	;# 
  1192  001F                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  008F                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0093                     	;# 
  1201  0094                     	;# 
  1202  0095                     	;# 
  1203  0096                     	;# 
  1204  0097                     	;# 
  1205  0098                     	;# 
  1206  0099                     	;# 
  1207  009A                     	;# 
  1208  009B                     	;# 
  1209  009B                     	;# 
  1210  009C                     	;# 
  1211  009D                     	;# 
  1212  009E                     	;# 
  1213  010C                     	;# 
  1214  010D                     	;# 
  1215  010E                     	;# 
  1216  010F                     	;# 
  1217  0110                     	;# 
  1218  0111                     	;# 
  1219  0112                     	;# 
  1220  0113                     	;# 
  1221  0114                     	;# 
  1222  0115                     	;# 
  1223  0116                     	;# 
  1224  0117                     	;# 
  1225  0118                     	;# 
  1226  0119                     	;# 
  1227  011A                     	;# 
  1228  011B                     	;# 
  1229  011D                     	;# 
  1230  011E                     	;# 
  1231  011F                     	;# 
  1232  018C                     	;# 
  1233  0190                     	;# 
  1234  0191                     	;# 
  1235  0191                     	;# 
  1236  0192                     	;# 
  1237  0193                     	;# 
  1238  0193                     	;# 
  1239  0193                     	;# 
  1240  0194                     	;# 
  1241  0195                     	;# 
  1242  0196                     	;# 
  1243  0199                     	;# 
  1244  0199                     	;# 
  1245  019A                     	;# 
  1246  019A                     	;# 
  1247  019B                     	;# 
  1248  019B                     	;# 
  1249  019B                     	;# 
  1250  019B                     	;# 
  1251  019C                     	;# 
  1252  019C                     	;# 
  1253  019D                     	;# 
  1254  019D                     	;# 
  1255  019E                     	;# 
  1256  019E                     	;# 
  1257  019F                     	;# 
  1258  020D                     	;# 
  1259  0211                     	;# 
  1260  0211                     	;# 
  1261  0212                     	;# 
  1262  0212                     	;# 
  1263  0213                     	;# 
  1264  0213                     	;# 
  1265  0214                     	;# 
  1266  0214                     	;# 
  1267  0215                     	;# 
  1268  0215                     	;# 
  1269  0215                     	;# 
  1270  0216                     	;# 
  1271  0216                     	;# 
  1272  0217                     	;# 
  1273  0217                     	;# 
  1274  0219                     	;# 
  1275  021A                     	;# 
  1276  021B                     	;# 
  1277  021C                     	;# 
  1278  021D                     	;# 
  1279  021E                     	;# 
  1280  021F                     	;# 
  1281  028C                     	;# 
  1282  028D                     	;# 
  1283  0291                     	;# 
  1284  0291                     	;# 
  1285  0292                     	;# 
  1286  0293                     	;# 
  1287  0294                     	;# 
  1288  0295                     	;# 
  1289  0295                     	;# 
  1290  0296                     	;# 
  1291  0298                     	;# 
  1292  0298                     	;# 
  1293  0299                     	;# 
  1294  029A                     	;# 
  1295  029B                     	;# 
  1296  029C                     	;# 
  1297  029C                     	;# 
  1298  029D                     	;# 
  1299  029E                     	;# 
  1300  029F                     	;# 
  1301  030C                     	;# 
  1302  030D                     	;# 
  1303  0311                     	;# 
  1304  0311                     	;# 
  1305  0312                     	;# 
  1306  0313                     	;# 
  1307  0314                     	;# 
  1308  0315                     	;# 
  1309  0315                     	;# 
  1310  0316                     	;# 
  1311  0318                     	;# 
  1312  0318                     	;# 
  1313  0319                     	;# 
  1314  031A                     	;# 
  1315  031C                     	;# 
  1316  031C                     	;# 
  1317  031D                     	;# 
  1318  031E                     	;# 
  1319  038C                     	;# 
  1320  038D                     	;# 
  1321  0394                     	;# 
  1322  0395                     	;# 
  1323  0396                     	;# 
  1324  040C                     	;# 
  1325  040D                     	;# 
  1326  0415                     	;# 
  1327  0416                     	;# 
  1328  0417                     	;# 
  1329  041C                     	;# 
  1330  041D                     	;# 
  1331  041E                     	;# 
  1332  048D                     	;# 
  1333  0491                     	;# 
  1334  0492                     	;# 
  1335  0493                     	;# 
  1336  0493                     	;# 
  1337  0494                     	;# 
  1338  0495                     	;# 
  1339  0496                     	;# 
  1340  0497                     	;# 
  1341  0791                     	;# 
  1342  0792                     	;# 
  1343  0793                     	;# 
  1344  0794                     	;# 
  1345  0795                     	;# 
  1346  0798                     	;# 
  1347  0799                     	;# 
  1348  079A                     	;# 
  1349  079B                     	;# 
  1350  079C                     	;# 
  1351  079D                     	;# 
  1352  07A0                     	;# 
  1353  07A1                     	;# 
  1354  07A2                     	;# 
  1355  07A3                     	;# 
  1356  07A4                     	;# 
  1357  07A5                     	;# 
  1358  07A6                     	;# 
  1359  07A7                     	;# 
  1360  07A8                     	;# 
  1361  07A9                     	;# 
  1362  07AA                     	;# 
  1363  07AB                     	;# 
  1364  07AC                     	;# 
  1365  07AD                     	;# 
  1366  07AE                     	;# 
  1367  07AF                     	;# 
  1368  07B0                     	;# 
  1369  07B1                     	;# 
  1370  07B2                     	;# 
  1371  07B3                     	;# 
  1372  07B4                     	;# 
  1373  07B5                     	;# 
  1374  07B6                     	;# 
  1375  07B7                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  000F                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0013                     	;# 
  1407  0014                     	;# 
  1408  0015                     	;# 
  1409  0016                     	;# 
  1410  0016                     	;# 
  1411  0017                     	;# 
  1412  0018                     	;# 
  1413  0019                     	;# 
  1414  001A                     	;# 
  1415  001B                     	;# 
  1416  001C                     	;# 
  1417  001E                     	;# 
  1418  001F                     	;# 
  1419  008C                     	;# 
  1420  008D                     	;# 
  1421  008E                     	;# 
  1422  008F                     	;# 
  1423  0090                     	;# 
  1424  0091                     	;# 
  1425  0092                     	;# 
  1426  0093                     	;# 
  1427  0094                     	;# 
  1428  0095                     	;# 
  1429  0096                     	;# 
  1430  0097                     	;# 
  1431  0098                     	;# 
  1432  0099                     	;# 
  1433  009A                     	;# 
  1434  009B                     	;# 
  1435  009B                     	;# 
  1436  009C                     	;# 
  1437  009D                     	;# 
  1438  009E                     	;# 
  1439  010C                     	;# 
  1440  010D                     	;# 
  1441  010E                     	;# 
  1442  010F                     	;# 
  1443  0110                     	;# 
  1444  0111                     	;# 
  1445  0112                     	;# 
  1446  0113                     	;# 
  1447  0114                     	;# 
  1448  0115                     	;# 
  1449  0116                     	;# 
  1450  0117                     	;# 
  1451  0118                     	;# 
  1452  0119                     	;# 
  1453  011A                     	;# 
  1454  011B                     	;# 
  1455  011D                     	;# 
  1456  011E                     	;# 
  1457  011F                     	;# 
  1458  018C                     	;# 
  1459  0190                     	;# 
  1460  0191                     	;# 
  1461  0191                     	;# 
  1462  0192                     	;# 
  1463  0193                     	;# 
  1464  0193                     	;# 
  1465  0193                     	;# 
  1466  0194                     	;# 
  1467  0195                     	;# 
  1468  0196                     	;# 
  1469  0199                     	;# 
  1470  0199                     	;# 
  1471  019A                     	;# 
  1472  019A                     	;# 
  1473  019B                     	;# 
  1474  019B                     	;# 
  1475  019B                     	;# 
  1476  019B                     	;# 
  1477  019C                     	;# 
  1478  019C                     	;# 
  1479  019D                     	;# 
  1480  019D                     	;# 
  1481  019E                     	;# 
  1482  019E                     	;# 
  1483  019F                     	;# 
  1484  020D                     	;# 
  1485  0211                     	;# 
  1486  0211                     	;# 
  1487  0212                     	;# 
  1488  0212                     	;# 
  1489  0213                     	;# 
  1490  0213                     	;# 
  1491  0214                     	;# 
  1492  0214                     	;# 
  1493  0215                     	;# 
  1494  0215                     	;# 
  1495  0215                     	;# 
  1496  0216                     	;# 
  1497  0216                     	;# 
  1498  0217                     	;# 
  1499  0217                     	;# 
  1500  0219                     	;# 
  1501  021A                     	;# 
  1502  021B                     	;# 
  1503  021C                     	;# 
  1504  021D                     	;# 
  1505  021E                     	;# 
  1506  021F                     	;# 
  1507  028C                     	;# 
  1508  028D                     	;# 
  1509  0291                     	;# 
  1510  0291                     	;# 
  1511  0292                     	;# 
  1512  0293                     	;# 
  1513  0294                     	;# 
  1514  0295                     	;# 
  1515  0295                     	;# 
  1516  0296                     	;# 
  1517  0298                     	;# 
  1518  0298                     	;# 
  1519  0299                     	;# 
  1520  029A                     	;# 
  1521  029B                     	;# 
  1522  029C                     	;# 
  1523  029C                     	;# 
  1524  029D                     	;# 
  1525  029E                     	;# 
  1526  029F                     	;# 
  1527  030C                     	;# 
  1528  030D                     	;# 
  1529  0311                     	;# 
  1530  0311                     	;# 
  1531  0312                     	;# 
  1532  0313                     	;# 
  1533  0314                     	;# 
  1534  0315                     	;# 
  1535  0315                     	;# 
  1536  0316                     	;# 
  1537  0318                     	;# 
  1538  0318                     	;# 
  1539  0319                     	;# 
  1540  031A                     	;# 
  1541  031C                     	;# 
  1542  031C                     	;# 
  1543  031D                     	;# 
  1544  031E                     	;# 
  1545  038C                     	;# 
  1546  038D                     	;# 
  1547  0394                     	;# 
  1548  0395                     	;# 
  1549  0396                     	;# 
  1550  040C                     	;# 
  1551  040D                     	;# 
  1552  0415                     	;# 
  1553  0416                     	;# 
  1554  0417                     	;# 
  1555  041C                     	;# 
  1556  041D                     	;# 
  1557  041E                     	;# 
  1558  048D                     	;# 
  1559  0491                     	;# 
  1560  0492                     	;# 
  1561  0493                     	;# 
  1562  0493                     	;# 
  1563  0494                     	;# 
  1564  0495                     	;# 
  1565  0496                     	;# 
  1566  0497                     	;# 
  1567  0791                     	;# 
  1568  0792                     	;# 
  1569  0793                     	;# 
  1570  0794                     	;# 
  1571  0795                     	;# 
  1572  0798                     	;# 
  1573  0799                     	;# 
  1574  079A                     	;# 
  1575  079B                     	;# 
  1576  079C                     	;# 
  1577  079D                     	;# 
  1578  07A0                     	;# 
  1579  07A1                     	;# 
  1580  07A2                     	;# 
  1581  07A3                     	;# 
  1582  07A4                     	;# 
  1583  07A5                     	;# 
  1584  07A6                     	;# 
  1585  07A7                     	;# 
  1586  07A8                     	;# 
  1587  07A9                     	;# 
  1588  07AA                     	;# 
  1589  07AB                     	;# 
  1590  07AC                     	;# 
  1591  07AD                     	;# 
  1592  07AE                     	;# 
  1593  07AF                     	;# 
  1594  07B0                     	;# 
  1595  07B1                     	;# 
  1596  07B2                     	;# 
  1597  07B3                     	;# 
  1598  07B4                     	;# 
  1599  07B5                     	;# 
  1600  07B6                     	;# 
  1601  07B7                     	;# 
  1602  0FE4                     	;# 
  1603  0FE5                     	;# 
  1604  0FE6                     	;# 
  1605  0FE7                     	;# 
  1606  0FE8                     	;# 
  1607  0FE9                     	;# 
  1608  0FEA                     	;# 
  1609  0FEB                     	;# 
  1610  0FED                     	;# 
  1611  0FEE                     	;# 
  1612  0FEF                     	;# 
  1613  0000                     	;# 
  1614  0001                     	;# 
  1615  0002                     	;# 
  1616  0003                     	;# 
  1617  0004                     	;# 
  1618  0005                     	;# 
  1619  0006                     	;# 
  1620  0007                     	;# 
  1621  0008                     	;# 
  1622  0009                     	;# 
  1623  000A                     	;# 
  1624  000B                     	;# 
  1625  000C                     	;# 
  1626  000D                     	;# 
  1627  000E                     	;# 
  1628  000F                     	;# 
  1629  0010                     	;# 
  1630  0011                     	;# 
  1631  0012                     	;# 
  1632  0013                     	;# 
  1633  0014                     	;# 
  1634  0015                     	;# 
  1635  0016                     	;# 
  1636  0016                     	;# 
  1637  0017                     	;# 
  1638  0018                     	;# 
  1639  0019                     	;# 
  1640  001A                     	;# 
  1641  001B                     	;# 
  1642  001C                     	;# 
  1643  001E                     	;# 
  1644  001F                     	;# 
  1645  008C                     	;# 
  1646  008D                     	;# 
  1647  008E                     	;# 
  1648  008F                     	;# 
  1649  0090                     	;# 
  1650  0091                     	;# 
  1651  0092                     	;# 
  1652  0093                     	;# 
  1653  0094                     	;# 
  1654  0095                     	;# 
  1655  0096                     	;# 
  1656  0097                     	;# 
  1657  0098                     	;# 
  1658  0099                     	;# 
  1659  009A                     	;# 
  1660  009B                     	;# 
  1661  009B                     	;# 
  1662  009C                     	;# 
  1663  009D                     	;# 
  1664  009E                     	;# 
  1665  010C                     	;# 
  1666  010D                     	;# 
  1667  010E                     	;# 
  1668  010F                     	;# 
  1669  0110                     	;# 
  1670  0111                     	;# 
  1671  0112                     	;# 
  1672  0113                     	;# 
  1673  0114                     	;# 
  1674  0115                     	;# 
  1675  0116                     	;# 
  1676  0117                     	;# 
  1677  0118                     	;# 
  1678  0119                     	;# 
  1679  011A                     	;# 
  1680  011B                     	;# 
  1681  011D                     	;# 
  1682  011E                     	;# 
  1683  011F                     	;# 
  1684  018C                     	;# 
  1685  0190                     	;# 
  1686  0191                     	;# 
  1687  0191                     	;# 
  1688  0192                     	;# 
  1689  0193                     	;# 
  1690  0193                     	;# 
  1691  0193                     	;# 
  1692  0194                     	;# 
  1693  0195                     	;# 
  1694  0196                     	;# 
  1695  0199                     	;# 
  1696  0199                     	;# 
  1697  019A                     	;# 
  1698  019A                     	;# 
  1699  019B                     	;# 
  1700  019B                     	;# 
  1701  019B                     	;# 
  1702  019B                     	;# 
  1703  019C                     	;# 
  1704  019C                     	;# 
  1705  019D                     	;# 
  1706  019D                     	;# 
  1707  019E                     	;# 
  1708  019E                     	;# 
  1709  019F                     	;# 
  1710  020D                     	;# 
  1711  0211                     	;# 
  1712  0211                     	;# 
  1713  0212                     	;# 
  1714  0212                     	;# 
  1715  0213                     	;# 
  1716  0213                     	;# 
  1717  0214                     	;# 
  1718  0214                     	;# 
  1719  0215                     	;# 
  1720  0215                     	;# 
  1721  0215                     	;# 
  1722  0216                     	;# 
  1723  0216                     	;# 
  1724  0217                     	;# 
  1725  0217                     	;# 
  1726  0219                     	;# 
  1727  021A                     	;# 
  1728  021B                     	;# 
  1729  021C                     	;# 
  1730  021D                     	;# 
  1731  021E                     	;# 
  1732  021F                     	;# 
  1733  028C                     	;# 
  1734  028D                     	;# 
  1735  0291                     	;# 
  1736  0291                     	;# 
  1737  0292                     	;# 
  1738  0293                     	;# 
  1739  0294                     	;# 
  1740  0295                     	;# 
  1741  0295                     	;# 
  1742  0296                     	;# 
  1743  0298                     	;# 
  1744  0298                     	;# 
  1745  0299                     	;# 
  1746  029A                     	;# 
  1747  029B                     	;# 
  1748  029C                     	;# 
  1749  029C                     	;# 
  1750  029D                     	;# 
  1751  029E                     	;# 
  1752  029F                     	;# 
  1753  030C                     	;# 
  1754  030D                     	;# 
  1755  0311                     	;# 
  1756  0311                     	;# 
  1757  0312                     	;# 
  1758  0313                     	;# 
  1759  0314                     	;# 
  1760  0315                     	;# 
  1761  0315                     	;# 
  1762  0316                     	;# 
  1763  0318                     	;# 
  1764  0318                     	;# 
  1765  0319                     	;# 
  1766  031A                     	;# 
  1767  031C                     	;# 
  1768  031C                     	;# 
  1769  031D                     	;# 
  1770  031E                     	;# 
  1771  038C                     	;# 
  1772  038D                     	;# 
  1773  0394                     	;# 
  1774  0395                     	;# 
  1775  0396                     	;# 
  1776  040C                     	;# 
  1777  040D                     	;# 
  1778  0415                     	;# 
  1779  0416                     	;# 
  1780  0417                     	;# 
  1781  041C                     	;# 
  1782  041D                     	;# 
  1783  041E                     	;# 
  1784  048D                     	;# 
  1785  0491                     	;# 
  1786  0492                     	;# 
  1787  0493                     	;# 
  1788  0493                     	;# 
  1789  0494                     	;# 
  1790  0495                     	;# 
  1791  0496                     	;# 
  1792  0497                     	;# 
  1793  0791                     	;# 
  1794  0792                     	;# 
  1795  0793                     	;# 
  1796  0794                     	;# 
  1797  0795                     	;# 
  1798  0798                     	;# 
  1799  0799                     	;# 
  1800  079A                     	;# 
  1801  079B                     	;# 
  1802  079C                     	;# 
  1803  079D                     	;# 
  1804  07A0                     	;# 
  1805  07A1                     	;# 
  1806  07A2                     	;# 
  1807  07A3                     	;# 
  1808  07A4                     	;# 
  1809  07A5                     	;# 
  1810  07A6                     	;# 
  1811  07A7                     	;# 
  1812  07A8                     	;# 
  1813  07A9                     	;# 
  1814  07AA                     	;# 
  1815  07AB                     	;# 
  1816  07AC                     	;# 
  1817  07AD                     	;# 
  1818  07AE                     	;# 
  1819  07AF                     	;# 
  1820  07B0                     	;# 
  1821  07B1                     	;# 
  1822  07B2                     	;# 
  1823  07B3                     	;# 
  1824  07B4                     	;# 
  1825  07B5                     	;# 
  1826  07B6                     	;# 
  1827  07B7                     	;# 
  1828  0FE4                     	;# 
  1829  0FE5                     	;# 
  1830  0FE6                     	;# 
  1831  0FE7                     	;# 
  1832  0FE8                     	;# 
  1833  0FE9                     	;# 
  1834  0FEA                     	;# 
  1835  0FEB                     	;# 
  1836  0FED                     	;# 
  1837  0FEE                     	;# 
  1838  0FEF                     	;# 
  1839                           
  1840                           	psect	eeprom_data
  1841  0000  0000 0003 0001     	db	0,3,1,255,255,255,255,255	;# 
      +       00FF 00FF 00FF     
      +       00FF 00FF          
  1842  0000                     	;# 
  1843  0001                     	;# 
  1844  0002                     	;# 
  1845  0003                     	;# 
  1846  0004                     	;# 
  1847  0005                     	;# 
  1848  0006                     	;# 
  1849  0007                     	;# 
  1850  0008                     	;# 
  1851  0009                     	;# 
  1852  000A                     	;# 
  1853  000B                     	;# 
  1854  000C                     	;# 
  1855  000D                     	;# 
  1856  000E                     	;# 
  1857  000F                     	;# 
  1858  0010                     	;# 
  1859  0011                     	;# 
  1860  0012                     	;# 
  1861  0013                     	;# 
  1862  0014                     	;# 
  1863  0015                     	;# 
  1864  0016                     	;# 
  1865  0016                     	;# 
  1866  0017                     	;# 
  1867  0018                     	;# 
  1868  0019                     	;# 
  1869  001A                     	;# 
  1870  001B                     	;# 
  1871  001C                     	;# 
  1872  001E                     	;# 
  1873  001F                     	;# 
  1874  008C                     	;# 
  1875  008D                     	;# 
  1876  008E                     	;# 
  1877  008F                     	;# 
  1878  0090                     	;# 
  1879  0091                     	;# 
  1880  0092                     	;# 
  1881  0093                     	;# 
  1882  0094                     	;# 
  1883  0095                     	;# 
  1884  0096                     	;# 
  1885  0097                     	;# 
  1886  0098                     	;# 
  1887  0099                     	;# 
  1888  009A                     	;# 
  1889  009B                     	;# 
  1890  009B                     	;# 
  1891  009C                     	;# 
  1892  009D                     	;# 
  1893  009E                     	;# 
  1894  010C                     	;# 
  1895  010D                     	;# 
  1896  010E                     	;# 
  1897  010F                     	;# 
  1898  0110                     	;# 
  1899  0111                     	;# 
  1900  0112                     	;# 
  1901  0113                     	;# 
  1902  0114                     	;# 
  1903  0115                     	;# 
  1904  0116                     	;# 
  1905  0117                     	;# 
  1906  0118                     	;# 
  1907  0119                     	;# 
  1908  011A                     	;# 
  1909  011B                     	;# 
  1910  011D                     	;# 
  1911  011E                     	;# 
  1912  011F                     	;# 
  1913  018C                     	;# 
  1914  0190                     	;# 
  1915  0191                     	;# 
  1916  0191                     	;# 
  1917  0192                     	;# 
  1918  0193                     	;# 
  1919  0193                     	;# 
  1920  0193                     	;# 
  1921  0194                     	;# 
  1922  0195                     	;# 
  1923  0196                     	;# 
  1924  0199                     	;# 
  1925  0199                     	;# 
  1926  019A                     	;# 
  1927  019A                     	;# 
  1928  019B                     	;# 
  1929  019B                     	;# 
  1930  019B                     	;# 
  1931  019B                     	;# 
  1932  019C                     	;# 
  1933  019C                     	;# 
  1934  019D                     	;# 
  1935  019D                     	;# 
  1936  019E                     	;# 
  1937  019E                     	;# 
  1938  019F                     	;# 
  1939  020D                     	;# 
  1940  0211                     	;# 
  1941  0211                     	;# 
  1942  0212                     	;# 
  1943  0212                     	;# 
  1944  0213                     	;# 
  1945  0213                     	;# 
  1946  0214                     	;# 
  1947  0214                     	;# 
  1948  0215                     	;# 
  1949  0215                     	;# 
  1950  0215                     	;# 
  1951  0216                     	;# 
  1952  0216                     	;# 
  1953  0217                     	;# 
  1954  0217                     	;# 
  1955  0219                     	;# 
  1956  021A                     	;# 
  1957  021B                     	;# 
  1958  021C                     	;# 
  1959  021D                     	;# 
  1960  021E                     	;# 
  1961  021F                     	;# 
  1962  028C                     	;# 
  1963  028D                     	;# 
  1964  0291                     	;# 
  1965  0291                     	;# 
  1966  0292                     	;# 
  1967  0293                     	;# 
  1968  0294                     	;# 
  1969  0295                     	;# 
  1970  0295                     	;# 
  1971  0296                     	;# 
  1972  0298                     	;# 
  1973  0298                     	;# 
  1974  0299                     	;# 
  1975  029A                     	;# 
  1976  029B                     	;# 
  1977  029C                     	;# 
  1978  029C                     	;# 
  1979  029D                     	;# 
  1980  029E                     	;# 
  1981  029F                     	;# 
  1982  030C                     	;# 
  1983  030D                     	;# 
  1984  0311                     	;# 
  1985  0311                     	;# 
  1986  0312                     	;# 
  1987  0313                     	;# 
  1988  0314                     	;# 
  1989  0315                     	;# 
  1990  0315                     	;# 
  1991  0316                     	;# 
  1992  0318                     	;# 
  1993  0318                     	;# 
  1994  0319                     	;# 
  1995  031A                     	;# 
  1996  031C                     	;# 
  1997  031C                     	;# 
  1998  031D                     	;# 
  1999  031E                     	;# 
  2000  038C                     	;# 
  2001  038D                     	;# 
  2002  0394                     	;# 
  2003  0395                     	;# 
  2004  0396                     	;# 
  2005  040C                     	;# 
  2006  040D                     	;# 
  2007  0415                     	;# 
  2008  0416                     	;# 
  2009  0417                     	;# 
  2010  041C                     	;# 
  2011  041D                     	;# 
  2012  041E                     	;# 
  2013  048D                     	;# 
  2014  0491                     	;# 
  2015  0492                     	;# 
  2016  0493                     	;# 
  2017  0493                     	;# 
  2018  0494                     	;# 
  2019  0495                     	;# 
  2020  0496                     	;# 
  2021  0497                     	;# 
  2022  0791                     	;# 
  2023  0792                     	;# 
  2024  0793                     	;# 
  2025  0794                     	;# 
  2026  0795                     	;# 
  2027  0798                     	;# 
  2028  0799                     	;# 
  2029  079A                     	;# 
  2030  079B                     	;# 
  2031  079C                     	;# 
  2032  079D                     	;# 
  2033  07A0                     	;# 
  2034  07A1                     	;# 
  2035  07A2                     	;# 
  2036  07A3                     	;# 
  2037  07A4                     	;# 
  2038  07A5                     	;# 
  2039  07A6                     	;# 
  2040  07A7                     	;# 
  2041  07A8                     	;# 
  2042  07A9                     	;# 
  2043  07AA                     	;# 
  2044  07AB                     	;# 
  2045  07AC                     	;# 
  2046  07AD                     	;# 
  2047  07AE                     	;# 
  2048  07AF                     	;# 
  2049  07B0                     	;# 
  2050  07B1                     	;# 
  2051  07B2                     	;# 
  2052  07B3                     	;# 
  2053  07B4                     	;# 
  2054  07B5                     	;# 
  2055  07B6                     	;# 
  2056  07B7                     	;# 
  2057  0FE4                     	;# 
  2058  0FE5                     	;# 
  2059  0FE6                     	;# 
  2060  0FE7                     	;# 
  2061  0FE8                     	;# 
  2062  0FE9                     	;# 
  2063  0FEA                     	;# 
  2064  0FEB                     	;# 
  2065  0FED                     	;# 
  2066  0FEE                     	;# 
  2067  0FEF                     	;# 
  2068  0000                     	;# 
  2069  0001                     	;# 
  2070  0002                     	;# 
  2071  0003                     	;# 
  2072  0004                     	;# 
  2073  0005                     	;# 
  2074  0006                     	;# 
  2075  0007                     	;# 
  2076  0008                     	;# 
  2077  0009                     	;# 
  2078  000A                     	;# 
  2079  000B                     	;# 
  2080  000C                     	;# 
  2081  000D                     	;# 
  2082  000E                     	;# 
  2083  000F                     	;# 
  2084  0010                     	;# 
  2085  0011                     	;# 
  2086  0012                     	;# 
  2087  0013                     	;# 
  2088  0014                     	;# 
  2089  0015                     	;# 
  2090  0016                     	;# 
  2091  0016                     	;# 
  2092  0017                     	;# 
  2093  0018                     	;# 
  2094  0019                     	;# 
  2095  001A                     	;# 
  2096  001B                     	;# 
  2097  001C                     	;# 
  2098  001E                     	;# 
  2099  001F                     	;# 
  2100  008C                     	;# 
  2101  008D                     	;# 
  2102  008E                     	;# 
  2103  008F                     	;# 
  2104  0090                     	;# 
  2105  0091                     	;# 
  2106  0092                     	;# 
  2107  0093                     	;# 
  2108  0094                     	;# 
  2109  0095                     	;# 
  2110  0096                     	;# 
  2111  0097                     	;# 
  2112  0098                     	;# 
  2113  0099                     	;# 
  2114  009A                     	;# 
  2115  009B                     	;# 
  2116  009B                     	;# 
  2117  009C                     	;# 
  2118  009D                     	;# 
  2119  009E                     	;# 
  2120  010C                     	;# 
  2121  010D                     	;# 
  2122  010E                     	;# 
  2123  010F                     	;# 
  2124  0110                     	;# 
  2125  0111                     	;# 
  2126  0112                     	;# 
  2127  0113                     	;# 
  2128  0114                     	;# 
  2129  0115                     	;# 
  2130  0116                     	;# 
  2131  0117                     	;# 
  2132  0118                     	;# 
  2133  0119                     	;# 
  2134  011A                     	;# 
  2135  011B                     	;# 
  2136  011D                     	;# 
  2137  011E                     	;# 
  2138  011F                     	;# 
  2139  018C                     	;# 
  2140  0190                     	;# 
  2141  0191                     	;# 
  2142  0191                     	;# 
  2143  0192                     	;# 
  2144  0193                     	;# 
  2145  0193                     	;# 
  2146  0193                     	;# 
  2147  0194                     	;# 
  2148  0195                     	;# 
  2149  0196                     	;# 
  2150  0199                     	;# 
  2151  0199                     	;# 
  2152  019A                     	;# 
  2153  019A                     	;# 
  2154  019B                     	;# 
  2155  019B                     	;# 
  2156  019B                     	;# 
  2157  019B                     	;# 
  2158  019C                     	;# 
  2159  019C                     	;# 
  2160  019D                     	;# 
  2161  019D                     	;# 
  2162  019E                     	;# 
  2163  019E                     	;# 
  2164  019F                     	;# 
  2165  020D                     	;# 
  2166  0211                     	;# 
  2167  0211                     	;# 
  2168  0212                     	;# 
  2169  0212                     	;# 
  2170  0213                     	;# 
  2171  0213                     	;# 
  2172  0214                     	;# 
  2173  0214                     	;# 
  2174  0215                     	;# 
  2175  0215                     	;# 
  2176  0215                     	;# 
  2177  0216                     	;# 
  2178  0216                     	;# 
  2179  0217                     	;# 
  2180  0217                     	;# 
  2181  0219                     	;# 
  2182  021A                     	;# 
  2183  021B                     	;# 
  2184  021C                     	;# 
  2185  021D                     	;# 
  2186  021E                     	;# 
  2187  021F                     	;# 
  2188  028C                     	;# 
  2189  028D                     	;# 
  2190  0291                     	;# 
  2191  0291                     	;# 
  2192  0292                     	;# 
  2193  0293                     	;# 
  2194  0294                     	;# 
  2195  0295                     	;# 
  2196  0295                     	;# 
  2197  0296                     	;# 
  2198  0298                     	;# 
  2199  0298                     	;# 
  2200  0299                     	;# 
  2201  029A                     	;# 
  2202  029B                     	;# 
  2203  029C                     	;# 
  2204  029C                     	;# 
  2205  029D                     	;# 
  2206  029E                     	;# 
  2207  029F                     	;# 
  2208  030C                     	;# 
  2209  030D                     	;# 
  2210  0311                     	;# 
  2211  0311                     	;# 
  2212  0312                     	;# 
  2213  0313                     	;# 
  2214  0314                     	;# 
  2215  0315                     	;# 
  2216  0315                     	;# 
  2217  0316                     	;# 
  2218  0318                     	;# 
  2219  0318                     	;# 
  2220  0319                     	;# 
  2221  031A                     	;# 
  2222  031C                     	;# 
  2223  031C                     	;# 
  2224  031D                     	;# 
  2225  031E                     	;# 
  2226  038C                     	;# 
  2227  038D                     	;# 
  2228  0394                     	;# 
  2229  0395                     	;# 
  2230  0396                     	;# 
  2231  040C                     	;# 
  2232  040D                     	;# 
  2233  0415                     	;# 
  2234  0416                     	;# 
  2235  0417                     	;# 
  2236  041C                     	;# 
  2237  041D                     	;# 
  2238  041E                     	;# 
  2239  048D                     	;# 
  2240  0491                     	;# 
  2241  0492                     	;# 
  2242  0493                     	;# 
  2243  0493                     	;# 
  2244  0494                     	;# 
  2245  0495                     	;# 
  2246  0496                     	;# 
  2247  0497                     	;# 
  2248  0791                     	;# 
  2249  0792                     	;# 
  2250  0793                     	;# 
  2251  0794                     	;# 
  2252  0795                     	;# 
  2253  0798                     	;# 
  2254  0799                     	;# 
  2255  079A                     	;# 
  2256  079B                     	;# 
  2257  079C                     	;# 
  2258  079D                     	;# 
  2259  07A0                     	;# 
  2260  07A1                     	;# 
  2261  07A2                     	;# 
  2262  07A3                     	;# 
  2263  07A4                     	;# 
  2264  07A5                     	;# 
  2265  07A6                     	;# 
  2266  07A7                     	;# 
  2267  07A8                     	;# 
  2268  07A9                     	;# 
  2269  07AA                     	;# 
  2270  07AB                     	;# 
  2271  07AC                     	;# 
  2272  07AD                     	;# 
  2273  07AE                     	;# 
  2274  07AF                     	;# 
  2275  07B0                     	;# 
  2276  07B1                     	;# 
  2277  07B2                     	;# 
  2278  07B3                     	;# 
  2279  07B4                     	;# 
  2280  07B5                     	;# 
  2281  07B6                     	;# 
  2282  07B7                     	;# 
  2283  0FE4                     	;# 
  2284  0FE5                     	;# 
  2285  0FE6                     	;# 
  2286  0FE7                     	;# 
  2287  0FE8                     	;# 
  2288  0FE9                     	;# 
  2289  0FEA                     	;# 
  2290  0FEB                     	;# 
  2291  0FED                     	;# 
  2292  0FEE                     	;# 
  2293  0FEF                     	;# 
  2294  0000                     	;# 
  2295  0001                     	;# 
  2296  0002                     	;# 
  2297  0003                     	;# 
  2298  0004                     	;# 
  2299  0005                     	;# 
  2300  0006                     	;# 
  2301  0007                     	;# 
  2302  0008                     	;# 
  2303  0009                     	;# 
  2304  000A                     	;# 
  2305  000B                     	;# 
  2306  000C                     	;# 
  2307  000D                     	;# 
  2308  000E                     	;# 
  2309  000F                     	;# 
  2310  0010                     	;# 
  2311  0011                     	;# 
  2312  0012                     	;# 
  2313  0013                     	;# 
  2314  0014                     	;# 
  2315  0015                     	;# 
  2316  0016                     	;# 
  2317  0016                     	;# 
  2318  0017                     	;# 
  2319  0018                     	;# 
  2320  0019                     	;# 
  2321  001A                     	;# 
  2322  001B                     	;# 
  2323  001C                     	;# 
  2324  001E                     	;# 
  2325  001F                     	;# 
  2326  008C                     	;# 
  2327  008D                     	;# 
  2328  008E                     	;# 
  2329  008F                     	;# 
  2330  0090                     	;# 
  2331  0091                     	;# 
  2332  0092                     	;# 
  2333  0093                     	;# 
  2334  0094                     	;# 
  2335  0095                     	;# 
  2336  0096                     	;# 
  2337  0097                     	;# 
  2338  0098                     	;# 
  2339  0099                     	;# 
  2340  009A                     	;# 
  2341  009B                     	;# 
  2342  009B                     	;# 
  2343  009C                     	;# 
  2344  009D                     	;# 
  2345  009E                     	;# 
  2346  010C                     	;# 
  2347  010D                     	;# 
  2348  010E                     	;# 
  2349  010F                     	;# 
  2350  0110                     	;# 
  2351  0111                     	;# 
  2352  0112                     	;# 
  2353  0113                     	;# 
  2354  0114                     	;# 
  2355  0115                     	;# 
  2356  0116                     	;# 
  2357  0117                     	;# 
  2358  0118                     	;# 
  2359  0119                     	;# 
  2360  011A                     	;# 
  2361  011B                     	;# 
  2362  011D                     	;# 
  2363  011E                     	;# 
  2364  011F                     	;# 
  2365  018C                     	;# 
  2366  0190                     	;# 
  2367  0191                     	;# 
  2368  0191                     	;# 
  2369  0192                     	;# 
  2370  0193                     	;# 
  2371  0193                     	;# 
  2372  0193                     	;# 
  2373  0194                     	;# 
  2374  0195                     	;# 
  2375  0196                     	;# 
  2376  0199                     	;# 
  2377  0199                     	;# 
  2378  019A                     	;# 
  2379  019A                     	;# 
  2380  019B                     	;# 
  2381  019B                     	;# 
  2382  019B                     	;# 
  2383  019B                     	;# 
  2384  019C                     	;# 
  2385  019C                     	;# 
  2386  019D                     	;# 
  2387  019D                     	;# 
  2388  019E                     	;# 
  2389  019E                     	;# 
  2390  019F                     	;# 
  2391  020D                     	;# 
  2392  0211                     	;# 
  2393  0211                     	;# 
  2394  0212                     	;# 
  2395  0212                     	;# 
  2396  0213                     	;# 
  2397  0213                     	;# 
  2398  0214                     	;# 
  2399  0214                     	;# 
  2400  0215                     	;# 
  2401  0215                     	;# 
  2402  0215                     	;# 
  2403  0216                     	;# 
  2404  0216                     	;# 
  2405  0217                     	;# 
  2406  0217                     	;# 
  2407  0219                     	;# 
  2408  021A                     	;# 
  2409  021B                     	;# 
  2410  021C                     	;# 
  2411  021D                     	;# 
  2412  021E                     	;# 
  2413  021F                     	;# 
  2414  028C                     	;# 
  2415  028D                     	;# 
  2416  0291                     	;# 
  2417  0291                     	;# 
  2418  0292                     	;# 
  2419  0293                     	;# 
  2420  0294                     	;# 
  2421  0295                     	;# 
  2422  0295                     	;# 
  2423  0296                     	;# 
  2424  0298                     	;# 
  2425  0298                     	;# 
  2426  0299                     	;# 
  2427  029A                     	;# 
  2428  029B                     	;# 
  2429  029C                     	;# 
  2430  029C                     	;# 
  2431  029D                     	;# 
  2432  029E                     	;# 
  2433  029F                     	;# 
  2434  030C                     	;# 
  2435  030D                     	;# 
  2436  0311                     	;# 
  2437  0311                     	;# 
  2438  0312                     	;# 
  2439  0313                     	;# 
  2440  0314                     	;# 
  2441  0315                     	;# 
  2442  0315                     	;# 
  2443  0316                     	;# 
  2444  0318                     	;# 
  2445  0318                     	;# 
  2446  0319                     	;# 
  2447  031A                     	;# 
  2448  031C                     	;# 
  2449  031C                     	;# 
  2450  031D                     	;# 
  2451  031E                     	;# 
  2452  038C                     	;# 
  2453  038D                     	;# 
  2454  0394                     	;# 
  2455  0395                     	;# 
  2456  0396                     	;# 
  2457  040C                     	;# 
  2458  040D                     	;# 
  2459  0415                     	;# 
  2460  0416                     	;# 
  2461  0417                     	;# 
  2462  041C                     	;# 
  2463  041D                     	;# 
  2464  041E                     	;# 
  2465  048D                     	;# 
  2466  0491                     	;# 
  2467  0492                     	;# 
  2468  0493                     	;# 
  2469  0493                     	;# 
  2470  0494                     	;# 
  2471  0495                     	;# 
  2472  0496                     	;# 
  2473  0497                     	;# 
  2474  0791                     	;# 
  2475  0792                     	;# 
  2476  0793                     	;# 
  2477  0794                     	;# 
  2478  0795                     	;# 
  2479  0798                     	;# 
  2480  0799                     	;# 
  2481  079A                     	;# 
  2482  079B                     	;# 
  2483  079C                     	;# 
  2484  079D                     	;# 
  2485  07A0                     	;# 
  2486  07A1                     	;# 
  2487  07A2                     	;# 
  2488  07A3                     	;# 
  2489  07A4                     	;# 
  2490  07A5                     	;# 
  2491  07A6                     	;# 
  2492  07A7                     	;# 
  2493  07A8                     	;# 
  2494  07A9                     	;# 
  2495  07AA                     	;# 
  2496  07AB                     	;# 
  2497  07AC                     	;# 
  2498  07AD                     	;# 
  2499  07AE                     	;# 
  2500  07AF                     	;# 
  2501  07B0                     	;# 
  2502  07B1                     	;# 
  2503  07B2                     	;# 
  2504  07B3                     	;# 
  2505  07B4                     	;# 
  2506  07B5                     	;# 
  2507  07B6                     	;# 
  2508  07B7                     	;# 
  2509  0FE4                     	;# 
  2510  0FE5                     	;# 
  2511  0FE6                     	;# 
  2512  0FE7                     	;# 
  2513  0FE8                     	;# 
  2514  0FE9                     	;# 
  2515  0FEA                     	;# 
  2516  0FEB                     	;# 
  2517  0FED                     	;# 
  2518  0FEE                     	;# 
  2519  0FEF                     	;# 
  2520  0000                     	;# 
  2521  0001                     	;# 
  2522  0002                     	;# 
  2523  0003                     	;# 
  2524  0004                     	;# 
  2525  0005                     	;# 
  2526  0006                     	;# 
  2527  0007                     	;# 
  2528  0008                     	;# 
  2529  0009                     	;# 
  2530  000A                     	;# 
  2531  000B                     	;# 
  2532  000C                     	;# 
  2533  000D                     	;# 
  2534  000E                     	;# 
  2535  000F                     	;# 
  2536  0010                     	;# 
  2537  0011                     	;# 
  2538  0012                     	;# 
  2539  0013                     	;# 
  2540  0014                     	;# 
  2541  0015                     	;# 
  2542  0016                     	;# 
  2543  0016                     	;# 
  2544  0017                     	;# 
  2545  0018                     	;# 
  2546  0019                     	;# 
  2547  001A                     	;# 
  2548  001B                     	;# 
  2549  001C                     	;# 
  2550  001E                     	;# 
  2551  001F                     	;# 
  2552  008C                     	;# 
  2553  008D                     	;# 
  2554  008E                     	;# 
  2555  008F                     	;# 
  2556  0090                     	;# 
  2557  0091                     	;# 
  2558  0092                     	;# 
  2559  0093                     	;# 
  2560  0094                     	;# 
  2561  0095                     	;# 
  2562  0096                     	;# 
  2563  0097                     	;# 
  2564  0098                     	;# 
  2565  0099                     	;# 
  2566  009A                     	;# 
  2567  009B                     	;# 
  2568  009B                     	;# 
  2569  009C                     	;# 
  2570  009D                     	;# 
  2571  009E                     	;# 
  2572  010C                     	;# 
  2573  010D                     	;# 
  2574  010E                     	;# 
  2575  010F                     	;# 
  2576  0110                     	;# 
  2577  0111                     	;# 
  2578  0112                     	;# 
  2579  0113                     	;# 
  2580  0114                     	;# 
  2581  0115                     	;# 
  2582  0116                     	;# 
  2583  0117                     	;# 
  2584  0118                     	;# 
  2585  0119                     	;# 
  2586  011A                     	;# 
  2587  011B                     	;# 
  2588  011D                     	;# 
  2589  011E                     	;# 
  2590  011F                     	;# 
  2591  018C                     	;# 
  2592  0190                     	;# 
  2593  0191                     	;# 
  2594  0191                     	;# 
  2595  0192                     	;# 
  2596  0193                     	;# 
  2597  0193                     	;# 
  2598  0193                     	;# 
  2599  0194                     	;# 
  2600  0195                     	;# 
  2601  0196                     	;# 
  2602  0199                     	;# 
  2603  0199                     	;# 
  2604  019A                     	;# 
  2605  019A                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019B                     	;# 
  2610  019C                     	;# 
  2611  019C                     	;# 
  2612  019D                     	;# 
  2613  019D                     	;# 
  2614  019E                     	;# 
  2615  019E                     	;# 
  2616  019F                     	;# 
  2617  020D                     	;# 
  2618  0211                     	;# 
  2619  0211                     	;# 
  2620  0212                     	;# 
  2621  0212                     	;# 
  2622  0213                     	;# 
  2623  0213                     	;# 
  2624  0214                     	;# 
  2625  0214                     	;# 
  2626  0215                     	;# 
  2627  0215                     	;# 
  2628  0215                     	;# 
  2629  0216                     	;# 
  2630  0216                     	;# 
  2631  0217                     	;# 
  2632  0217                     	;# 
  2633  0219                     	;# 
  2634  021A                     	;# 
  2635  021B                     	;# 
  2636  021C                     	;# 
  2637  021D                     	;# 
  2638  021E                     	;# 
  2639  021F                     	;# 
  2640  028C                     	;# 
  2641  028D                     	;# 
  2642  0291                     	;# 
  2643  0291                     	;# 
  2644  0292                     	;# 
  2645  0293                     	;# 
  2646  0294                     	;# 
  2647  0295                     	;# 
  2648  0295                     	;# 
  2649  0296                     	;# 
  2650  0298                     	;# 
  2651  0298                     	;# 
  2652  0299                     	;# 
  2653  029A                     	;# 
  2654  029B                     	;# 
  2655  029C                     	;# 
  2656  029C                     	;# 
  2657  029D                     	;# 
  2658  029E                     	;# 
  2659  029F                     	;# 
  2660  030C                     	;# 
  2661  030D                     	;# 
  2662  0311                     	;# 
  2663  0311                     	;# 
  2664  0312                     	;# 
  2665  0313                     	;# 
  2666  0314                     	;# 
  2667  0315                     	;# 
  2668  0315                     	;# 
  2669  0316                     	;# 
  2670  0318                     	;# 
  2671  0318                     	;# 
  2672  0319                     	;# 
  2673  031A                     	;# 
  2674  031C                     	;# 
  2675  031C                     	;# 
  2676  031D                     	;# 
  2677  031E                     	;# 
  2678  038C                     	;# 
  2679  038D                     	;# 
  2680  0394                     	;# 
  2681  0395                     	;# 
  2682  0396                     	;# 
  2683  040C                     	;# 
  2684  040D                     	;# 
  2685  0415                     	;# 
  2686  0416                     	;# 
  2687  0417                     	;# 
  2688  041C                     	;# 
  2689  041D                     	;# 
  2690  041E                     	;# 
  2691  048D                     	;# 
  2692  0491                     	;# 
  2693  0492                     	;# 
  2694  0493                     	;# 
  2695  0493                     	;# 
  2696  0494                     	;# 
  2697  0495                     	;# 
  2698  0496                     	;# 
  2699  0497                     	;# 
  2700  0791                     	;# 
  2701  0792                     	;# 
  2702  0793                     	;# 
  2703  0794                     	;# 
  2704  0795                     	;# 
  2705  0798                     	;# 
  2706  0799                     	;# 
  2707  079A                     	;# 
  2708  079B                     	;# 
  2709  079C                     	;# 
  2710  079D                     	;# 
  2711  07A0                     	;# 
  2712  07A1                     	;# 
  2713  07A2                     	;# 
  2714  07A3                     	;# 
  2715  07A4                     	;# 
  2716  07A5                     	;# 
  2717  07A6                     	;# 
  2718  07A7                     	;# 
  2719  07A8                     	;# 
  2720  07A9                     	;# 
  2721  07AA                     	;# 
  2722  07AB                     	;# 
  2723  07AC                     	;# 
  2724  07AD                     	;# 
  2725  07AE                     	;# 
  2726  07AF                     	;# 
  2727  07B0                     	;# 
  2728  07B1                     	;# 
  2729  07B2                     	;# 
  2730  07B3                     	;# 
  2731  07B4                     	;# 
  2732  07B5                     	;# 
  2733  07B6                     	;# 
  2734  07B7                     	;# 
  2735  0FE4                     	;# 
  2736  0FE5                     	;# 
  2737  0FE6                     	;# 
  2738  0FE7                     	;# 
  2739  0FE8                     	;# 
  2740  0FE9                     	;# 
  2741  0FEA                     	;# 
  2742  0FEB                     	;# 
  2743  0FED                     	;# 
  2744  0FEE                     	;# 
  2745  0FEF                     	;# 
  2746  0000                     	;# 
  2747  0001                     	;# 
  2748  0002                     	;# 
  2749  0003                     	;# 
  2750  0004                     	;# 
  2751  0005                     	;# 
  2752  0006                     	;# 
  2753  0007                     	;# 
  2754  0008                     	;# 
  2755  0009                     	;# 
  2756  000A                     	;# 
  2757  000B                     	;# 
  2758  000C                     	;# 
  2759  000D                     	;# 
  2760  000E                     	;# 
  2761  000F                     	;# 
  2762  0010                     	;# 
  2763  0011                     	;# 
  2764  0012                     	;# 
  2765  0013                     	;# 
  2766  0014                     	;# 
  2767  0015                     	;# 
  2768  0016                     	;# 
  2769  0016                     	;# 
  2770  0017                     	;# 
  2771  0018                     	;# 
  2772  0019                     	;# 
  2773  001A                     	;# 
  2774  001B                     	;# 
  2775  001C                     	;# 
  2776  001E                     	;# 
  2777  001F                     	;# 
  2778  008C                     	;# 
  2779  008D                     	;# 
  2780  008E                     	;# 
  2781  008F                     	;# 
  2782  0090                     	;# 
  2783  0091                     	;# 
  2784  0092                     	;# 
  2785  0093                     	;# 
  2786  0094                     	;# 
  2787  0095                     	;# 
  2788  0096                     	;# 
  2789  0097                     	;# 
  2790  0098                     	;# 
  2791  0099                     	;# 
  2792  009A                     	;# 
  2793  009B                     	;# 
  2794  009B                     	;# 
  2795  009C                     	;# 
  2796  009D                     	;# 
  2797  009E                     	;# 
  2798  010C                     	;# 
  2799  010D                     	;# 
  2800  010E                     	;# 
  2801  010F                     	;# 
  2802  0110                     	;# 
  2803  0111                     	;# 
  2804  0112                     	;# 
  2805  0113                     	;# 
  2806  0114                     	;# 
  2807  0115                     	;# 
  2808  0116                     	;# 
  2809  0117                     	;# 
  2810  0118                     	;# 
  2811  0119                     	;# 
  2812  011A                     	;# 
  2813  011B                     	;# 
  2814  011D                     	;# 
  2815  011E                     	;# 
  2816  011F                     	;# 
  2817  018C                     	;# 
  2818  0190                     	;# 
  2819  0191                     	;# 
  2820  0191                     	;# 
  2821  0192                     	;# 
  2822  0193                     	;# 
  2823  0193                     	;# 
  2824  0193                     	;# 
  2825  0194                     	;# 
  2826  0195                     	;# 
  2827  0196                     	;# 
  2828  0199                     	;# 
  2829  0199                     	;# 
  2830  019A                     	;# 
  2831  019A                     	;# 
  2832  019B                     	;# 
  2833  019B                     	;# 
  2834  019B                     	;# 
  2835  019B                     	;# 
  2836  019C                     	;# 
  2837  019C                     	;# 
  2838  019D                     	;# 
  2839  019D                     	;# 
  2840  019E                     	;# 
  2841  019E                     	;# 
  2842  019F                     	;# 
  2843  020D                     	;# 
  2844  0211                     	;# 
  2845  0211                     	;# 
  2846  0212                     	;# 
  2847  0212                     	;# 
  2848  0213                     	;# 
  2849  0213                     	;# 
  2850  0214                     	;# 
  2851  0214                     	;# 
  2852  0215                     	;# 
  2853  0215                     	;# 
  2854  0215                     	;# 
  2855  0216                     	;# 
  2856  0216                     	;# 
  2857  0217                     	;# 
  2858  0217                     	;# 
  2859  0219                     	;# 
  2860  021A                     	;# 
  2861  021B                     	;# 
  2862  021C                     	;# 
  2863  021D                     	;# 
  2864  021E                     	;# 
  2865  021F                     	;# 
  2866  028C                     	;# 
  2867  028D                     	;# 
  2868  0291                     	;# 
  2869  0291                     	;# 
  2870  0292                     	;# 
  2871  0293                     	;# 
  2872  0294                     	;# 
  2873  0295                     	;# 
  2874  0295                     	;# 
  2875  0296                     	;# 
  2876  0298                     	;# 
  2877  0298                     	;# 
  2878  0299                     	;# 
  2879  029A                     	;# 
  2880  029B                     	;# 
  2881  029C                     	;# 
  2882  029C                     	;# 
  2883  029D                     	;# 
  2884  029E                     	;# 
  2885  029F                     	;# 
  2886  030C                     	;# 
  2887  030D                     	;# 
  2888  0311                     	;# 
  2889  0311                     	;# 
  2890  0312                     	;# 
  2891  0313                     	;# 
  2892  0314                     	;# 
  2893  0315                     	;# 
  2894  0315                     	;# 
  2895  0316                     	;# 
  2896  0318                     	;# 
  2897  0318                     	;# 
  2898  0319                     	;# 
  2899  031A                     	;# 
  2900  031C                     	;# 
  2901  031C                     	;# 
  2902  031D                     	;# 
  2903  031E                     	;# 
  2904  038C                     	;# 
  2905  038D                     	;# 
  2906  0394                     	;# 
  2907  0395                     	;# 
  2908  0396                     	;# 
  2909  040C                     	;# 
  2910  040D                     	;# 
  2911  0415                     	;# 
  2912  0416                     	;# 
  2913  0417                     	;# 
  2914  041C                     	;# 
  2915  041D                     	;# 
  2916  041E                     	;# 
  2917  048D                     	;# 
  2918  0491                     	;# 
  2919  0492                     	;# 
  2920  0493                     	;# 
  2921  0493                     	;# 
  2922  0494                     	;# 
  2923  0495                     	;# 
  2924  0496                     	;# 
  2925  0497                     	;# 
  2926  0791                     	;# 
  2927  0792                     	;# 
  2928  0793                     	;# 
  2929  0794                     	;# 
  2930  0795                     	;# 
  2931  0798                     	;# 
  2932  0799                     	;# 
  2933  079A                     	;# 
  2934  079B                     	;# 
  2935  079C                     	;# 
  2936  079D                     	;# 
  2937  07A0                     	;# 
  2938  07A1                     	;# 
  2939  07A2                     	;# 
  2940  07A3                     	;# 
  2941  07A4                     	;# 
  2942  07A5                     	;# 
  2943  07A6                     	;# 
  2944  07A7                     	;# 
  2945  07A8                     	;# 
  2946  07A9                     	;# 
  2947  07AA                     	;# 
  2948  07AB                     	;# 
  2949  07AC                     	;# 
  2950  07AD                     	;# 
  2951  07AE                     	;# 
  2952  07AF                     	;# 
  2953  07B0                     	;# 
  2954  07B1                     	;# 
  2955  07B2                     	;# 
  2956  07B3                     	;# 
  2957  07B4                     	;# 
  2958  07B5                     	;# 
  2959  07B6                     	;# 
  2960  07B7                     	;# 
  2961  0FE4                     	;# 
  2962  0FE5                     	;# 
  2963  0FE6                     	;# 
  2964  0FE7                     	;# 
  2965  0FE8                     	;# 
  2966  0FE9                     	;# 
  2967  0FEA                     	;# 
  2968  0FEB                     	;# 
  2969  0FED                     	;# 
  2970  0FEE                     	;# 
  2971  0FEF                     	;# 
  2972  0000                     	;# 
  2973  0001                     	;# 
  2974  0002                     	;# 
  2975  0003                     	;# 
  2976  0004                     	;# 
  2977  0005                     	;# 
  2978  0006                     	;# 
  2979  0007                     	;# 
  2980  0008                     	;# 
  2981  0009                     	;# 
  2982  000A                     	;# 
  2983  000B                     	;# 
  2984  000C                     	;# 
  2985  000D                     	;# 
  2986  000E                     	;# 
  2987  000F                     	;# 
  2988  0010                     	;# 
  2989  0011                     	;# 
  2990  0012                     	;# 
  2991  0013                     	;# 
  2992  0014                     	;# 
  2993  0015                     	;# 
  2994  0016                     	;# 
  2995  0016                     	;# 
  2996  0017                     	;# 
  2997  0018                     	;# 
  2998  0019                     	;# 
  2999  001A                     	;# 
  3000  001B                     	;# 
  3001  001C                     	;# 
  3002  001E                     	;# 
  3003  001F                     	;# 
  3004  008C                     	;# 
  3005  008D                     	;# 
  3006  008E                     	;# 
  3007  008F                     	;# 
  3008  0090                     	;# 
  3009  0091                     	;# 
  3010  0092                     	;# 
  3011  0093                     	;# 
  3012  0094                     	;# 
  3013  0095                     	;# 
  3014  0096                     	;# 
  3015  0097                     	;# 
  3016  0098                     	;# 
  3017  0099                     	;# 
  3018  009A                     	;# 
  3019  009B                     	;# 
  3020  009B                     	;# 
  3021  009C                     	;# 
  3022  009D                     	;# 
  3023  009E                     	;# 
  3024  010C                     	;# 
  3025  010D                     	;# 
  3026  010E                     	;# 
  3027  010F                     	;# 
  3028  0110                     	;# 
  3029  0111                     	;# 
  3030  0112                     	;# 
  3031  0113                     	;# 
  3032  0114                     	;# 
  3033  0115                     	;# 
  3034  0116                     	;# 
  3035  0117                     	;# 
  3036  0118                     	;# 
  3037  0119                     	;# 
  3038  011A                     	;# 
  3039  011B                     	;# 
  3040  011D                     	;# 
  3041  011E                     	;# 
  3042  011F                     	;# 
  3043  018C                     	;# 
  3044  0190                     	;# 
  3045  0191                     	;# 
  3046  0191                     	;# 
  3047  0192                     	;# 
  3048  0193                     	;# 
  3049  0193                     	;# 
  3050  0193                     	;# 
  3051  0194                     	;# 
  3052  0195                     	;# 
  3053  0196                     	;# 
  3054  0199                     	;# 
  3055  0199                     	;# 
  3056  019A                     	;# 
  3057  019A                     	;# 
  3058  019B                     	;# 
  3059  019B                     	;# 
  3060  019B                     	;# 
  3061  019B                     	;# 
  3062  019C                     	;# 
  3063  019C                     	;# 
  3064  019D                     	;# 
  3065  019D                     	;# 
  3066  019E                     	;# 
  3067  019E                     	;# 
  3068  019F                     	;# 
  3069  020D                     	;# 
  3070  0211                     	;# 
  3071  0211                     	;# 
  3072  0212                     	;# 
  3073  0212                     	;# 
  3074  0213                     	;# 
  3075  0213                     	;# 
  3076  0214                     	;# 
  3077  0214                     	;# 
  3078  0215                     	;# 
  3079  0215                     	;# 
  3080  0215                     	;# 
  3081  0216                     	;# 
  3082  0216                     	;# 
  3083  0217                     	;# 
  3084  0217                     	;# 
  3085  0219                     	;# 
  3086  021A                     	;# 
  3087  021B                     	;# 
  3088  021C                     	;# 
  3089  021D                     	;# 
  3090  021E                     	;# 
  3091  021F                     	;# 
  3092  028C                     	;# 
  3093  028D                     	;# 
  3094  0291                     	;# 
  3095  0291                     	;# 
  3096  0292                     	;# 
  3097  0293                     	;# 
  3098  0294                     	;# 
  3099  0295                     	;# 
  3100  0295                     	;# 
  3101  0296                     	;# 
  3102  0298                     	;# 
  3103  0298                     	;# 
  3104  0299                     	;# 
  3105  029A                     	;# 
  3106  029B                     	;# 
  3107  029C                     	;# 
  3108  029C                     	;# 
  3109  029D                     	;# 
  3110  029E                     	;# 
  3111  029F                     	;# 
  3112  030C                     	;# 
  3113  030D                     	;# 
  3114  0311                     	;# 
  3115  0311                     	;# 
  3116  0312                     	;# 
  3117  0313                     	;# 
  3118  0314                     	;# 
  3119  0315                     	;# 
  3120  0315                     	;# 
  3121  0316                     	;# 
  3122  0318                     	;# 
  3123  0318                     	;# 
  3124  0319                     	;# 
  3125  031A                     	;# 
  3126  031C                     	;# 
  3127  031C                     	;# 
  3128  031D                     	;# 
  3129  031E                     	;# 
  3130  038C                     	;# 
  3131  038D                     	;# 
  3132  0394                     	;# 
  3133  0395                     	;# 
  3134  0396                     	;# 
  3135  040C                     	;# 
  3136  040D                     	;# 
  3137  0415                     	;# 
  3138  0416                     	;# 
  3139  0417                     	;# 
  3140  041C                     	;# 
  3141  041D                     	;# 
  3142  041E                     	;# 
  3143  048D                     	;# 
  3144  0491                     	;# 
  3145  0492                     	;# 
  3146  0493                     	;# 
  3147  0493                     	;# 
  3148  0494                     	;# 
  3149  0495                     	;# 
  3150  0496                     	;# 
  3151  0497                     	;# 
  3152  0791                     	;# 
  3153  0792                     	;# 
  3154  0793                     	;# 
  3155  0794                     	;# 
  3156  0795                     	;# 
  3157  0798                     	;# 
  3158  0799                     	;# 
  3159  079A                     	;# 
  3160  079B                     	;# 
  3161  079C                     	;# 
  3162  079D                     	;# 
  3163  07A0                     	;# 
  3164  07A1                     	;# 
  3165  07A2                     	;# 
  3166  07A3                     	;# 
  3167  07A4                     	;# 
  3168  07A5                     	;# 
  3169  07A6                     	;# 
  3170  07A7                     	;# 
  3171  07A8                     	;# 
  3172  07A9                     	;# 
  3173  07AA                     	;# 
  3174  07AB                     	;# 
  3175  07AC                     	;# 
  3176  07AD                     	;# 
  3177  07AE                     	;# 
  3178  07AF                     	;# 
  3179  07B0                     	;# 
  3180  07B1                     	;# 
  3181  07B2                     	;# 
  3182  07B3                     	;# 
  3183  07B4                     	;# 
  3184  07B5                     	;# 
  3185  07B6                     	;# 
  3186  07B7                     	;# 
  3187  0FE4                     	;# 
  3188  0FE5                     	;# 
  3189  0FE6                     	;# 
  3190  0FE7                     	;# 
  3191  0FE8                     	;# 
  3192  0FE9                     	;# 
  3193  0FEA                     	;# 
  3194  0FEB                     	;# 
  3195  0FED                     	;# 
  3196  0FEE                     	;# 
  3197  0FEF                     	;# 
  3198  0000                     	;# 
  3199  0001                     	;# 
  3200  0002                     	;# 
  3201  0003                     	;# 
  3202  0004                     	;# 
  3203  0005                     	;# 
  3204  0006                     	;# 
  3205  0007                     	;# 
  3206  0008                     	;# 
  3207  0009                     	;# 
  3208  000A                     	;# 
  3209  000B                     	;# 
  3210  000C                     	;# 
  3211  000D                     	;# 
  3212  000E                     	;# 
  3213  000F                     	;# 
  3214  0010                     	;# 
  3215  0011                     	;# 
  3216  0012                     	;# 
  3217  0013                     	;# 
  3218  0014                     	;# 
  3219  0015                     	;# 
  3220  0016                     	;# 
  3221  0016                     	;# 
  3222  0017                     	;# 
  3223  0018                     	;# 
  3224  0019                     	;# 
  3225  001A                     	;# 
  3226  001B                     	;# 
  3227  001C                     	;# 
  3228  001E                     	;# 
  3229  001F                     	;# 
  3230  008C                     	;# 
  3231  008D                     	;# 
  3232  008E                     	;# 
  3233  008F                     	;# 
  3234  0090                     	;# 
  3235  0091                     	;# 
  3236  0092                     	;# 
  3237  0093                     	;# 
  3238  0094                     	;# 
  3239  0095                     	;# 
  3240  0096                     	;# 
  3241  0097                     	;# 
  3242  0098                     	;# 
  3243  0099                     	;# 
  3244  009A                     	;# 
  3245  009B                     	;# 
  3246  009B                     	;# 
  3247  009C                     	;# 
  3248  009D                     	;# 
  3249  009E                     	;# 
  3250  010C                     	;# 
  3251  010D                     	;# 
  3252  010E                     	;# 
  3253  010F                     	;# 
  3254  0110                     	;# 
  3255  0111                     	;# 
  3256  0112                     	;# 
  3257  0113                     	;# 
  3258  0114                     	;# 
  3259  0115                     	;# 
  3260  0116                     	;# 
  3261  0117                     	;# 
  3262  0118                     	;# 
  3263  0119                     	;# 
  3264  011A                     	;# 
  3265  011B                     	;# 
  3266  011D                     	;# 
  3267  011E                     	;# 
  3268  011F                     	;# 
  3269  018C                     	;# 
  3270  0190                     	;# 
  3271  0191                     	;# 
  3272  0191                     	;# 
  3273  0192                     	;# 
  3274  0193                     	;# 
  3275  0193                     	;# 
  3276  0193                     	;# 
  3277  0194                     	;# 
  3278  0195                     	;# 
  3279  0196                     	;# 
  3280  0199                     	;# 
  3281  0199                     	;# 
  3282  019A                     	;# 
  3283  019A                     	;# 
  3284  019B                     	;# 
  3285  019B                     	;# 
  3286  019B                     	;# 
  3287  019B                     	;# 
  3288  019C                     	;# 
  3289  019C                     	;# 
  3290  019D                     	;# 
  3291  019D                     	;# 
  3292  019E                     	;# 
  3293  019E                     	;# 
  3294  019F                     	;# 
  3295  020D                     	;# 
  3296  0211                     	;# 
  3297  0211                     	;# 
  3298  0212                     	;# 
  3299  0212                     	;# 
  3300  0213                     	;# 
  3301  0213                     	;# 
  3302  0214                     	;# 
  3303  0214                     	;# 
  3304  0215                     	;# 
  3305  0215                     	;# 
  3306  0215                     	;# 
  3307  0216                     	;# 
  3308  0216                     	;# 
  3309  0217                     	;# 
  3310  0217                     	;# 
  3311  0219                     	;# 
  3312  021A                     	;# 
  3313  021B                     	;# 
  3314  021C                     	;# 
  3315  021D                     	;# 
  3316  021E                     	;# 
  3317  021F                     	;# 
  3318  028C                     	;# 
  3319  028D                     	;# 
  3320  0291                     	;# 
  3321  0291                     	;# 
  3322  0292                     	;# 
  3323  0293                     	;# 
  3324  0294                     	;# 
  3325  0295                     	;# 
  3326  0295                     	;# 
  3327  0296                     	;# 
  3328  0298                     	;# 
  3329  0298                     	;# 
  3330  0299                     	;# 
  3331  029A                     	;# 
  3332  029B                     	;# 
  3333  029C                     	;# 
  3334  029C                     	;# 
  3335  029D                     	;# 
  3336  029E                     	;# 
  3337  029F                     	;# 
  3338  030C                     	;# 
  3339  030D                     	;# 
  3340  0311                     	;# 
  3341  0311                     	;# 
  3342  0312                     	;# 
  3343  0313                     	;# 
  3344  0314                     	;# 
  3345  0315                     	;# 
  3346  0315                     	;# 
  3347  0316                     	;# 
  3348  0318                     	;# 
  3349  0318                     	;# 
  3350  0319                     	;# 
  3351  031A                     	;# 
  3352  031C                     	;# 
  3353  031C                     	;# 
  3354  031D                     	;# 
  3355  031E                     	;# 
  3356  038C                     	;# 
  3357  038D                     	;# 
  3358  0394                     	;# 
  3359  0395                     	;# 
  3360  0396                     	;# 
  3361  040C                     	;# 
  3362  040D                     	;# 
  3363  0415                     	;# 
  3364  0416                     	;# 
  3365  0417                     	;# 
  3366  041C                     	;# 
  3367  041D                     	;# 
  3368  041E                     	;# 
  3369  048D                     	;# 
  3370  0491                     	;# 
  3371  0492                     	;# 
  3372  0493                     	;# 
  3373  0493                     	;# 
  3374  0494                     	;# 
  3375  0495                     	;# 
  3376  0496                     	;# 
  3377  0497                     	;# 
  3378  0791                     	;# 
  3379  0792                     	;# 
  3380  0793                     	;# 
  3381  0794                     	;# 
  3382  0795                     	;# 
  3383  0798                     	;# 
  3384  0799                     	;# 
  3385  079A                     	;# 
  3386  079B                     	;# 
  3387  079C                     	;# 
  3388  079D                     	;# 
  3389  07A0                     	;# 
  3390  07A1                     	;# 
  3391  07A2                     	;# 
  3392  07A3                     	;# 
  3393  07A4                     	;# 
  3394  07A5                     	;# 
  3395  07A6                     	;# 
  3396  07A7                     	;# 
  3397  07A8                     	;# 
  3398  07A9                     	;# 
  3399  07AA                     	;# 
  3400  07AB                     	;# 
  3401  07AC                     	;# 
  3402  07AD                     	;# 
  3403  07AE                     	;# 
  3404  07AF                     	;# 
  3405  07B0                     	;# 
  3406  07B1                     	;# 
  3407  07B2                     	;# 
  3408  07B3                     	;# 
  3409  07B4                     	;# 
  3410  07B5                     	;# 
  3411  07B6                     	;# 
  3412  07B7                     	;# 
  3413  0FE4                     	;# 
  3414  0FE5                     	;# 
  3415  0FE6                     	;# 
  3416  0FE7                     	;# 
  3417  0FE8                     	;# 
  3418  0FE9                     	;# 
  3419  0FEA                     	;# 
  3420  0FEB                     	;# 
  3421  0FED                     	;# 
  3422  0FEE                     	;# 
  3423  0FEF                     	;# 
  3424  0000                     	;# 
  3425  0001                     	;# 
  3426  0002                     	;# 
  3427  0003                     	;# 
  3428  0004                     	;# 
  3429  0005                     	;# 
  3430  0006                     	;# 
  3431  0007                     	;# 
  3432  0008                     	;# 
  3433  0009                     	;# 
  3434  000A                     	;# 
  3435  000B                     	;# 
  3436  000C                     	;# 
  3437  000D                     	;# 
  3438  000E                     	;# 
  3439  000F                     	;# 
  3440  0010                     	;# 
  3441  0011                     	;# 
  3442  0012                     	;# 
  3443  0013                     	;# 
  3444  0014                     	;# 
  3445  0015                     	;# 
  3446  0016                     	;# 
  3447  0016                     	;# 
  3448  0017                     	;# 
  3449  0018                     	;# 
  3450  0019                     	;# 
  3451  001A                     	;# 
  3452  001B                     	;# 
  3453  001C                     	;# 
  3454  001E                     	;# 
  3455  001F                     	;# 
  3456  008C                     	;# 
  3457  008D                     	;# 
  3458  008E                     	;# 
  3459  008F                     	;# 
  3460  0090                     	;# 
  3461  0091                     	;# 
  3462  0092                     	;# 
  3463  0093                     	;# 
  3464  0094                     	;# 
  3465  0095                     	;# 
  3466  0096                     	;# 
  3467  0097                     	;# 
  3468  0098                     	;# 
  3469  0099                     	;# 
  3470  009A                     	;# 
  3471  009B                     	;# 
  3472  009B                     	;# 
  3473  009C                     	;# 
  3474  009D                     	;# 
  3475  009E                     	;# 
  3476  010C                     	;# 
  3477  010D                     	;# 
  3478  010E                     	;# 
  3479  010F                     	;# 
  3480  0110                     	;# 
  3481  0111                     	;# 
  3482  0112                     	;# 
  3483  0113                     	;# 
  3484  0114                     	;# 
  3485  0115                     	;# 
  3486  0116                     	;# 
  3487  0117                     	;# 
  3488  0118                     	;# 
  3489  0119                     	;# 
  3490  011A                     	;# 
  3491  011B                     	;# 
  3492  011D                     	;# 
  3493  011E                     	;# 
  3494  011F                     	;# 
  3495  018C                     	;# 
  3496  0190                     	;# 
  3497  0191                     	;# 
  3498  0191                     	;# 
  3499  0192                     	;# 
  3500  0193                     	;# 
  3501  0193                     	;# 
  3502  0193                     	;# 
  3503  0194                     	;# 
  3504  0195                     	;# 
  3505  0196                     	;# 
  3506  0199                     	;# 
  3507  0199                     	;# 
  3508  019A                     	;# 
  3509  019A                     	;# 
  3510  019B                     	;# 
  3511  019B                     	;# 
  3512  019B                     	;# 
  3513  019B                     	;# 
  3514  019C                     	;# 
  3515  019C                     	;# 
  3516  019D                     	;# 
  3517  019D                     	;# 
  3518  019E                     	;# 
  3519  019E                     	;# 
  3520  019F                     	;# 
  3521  020D                     	;# 
  3522  0211                     	;# 
  3523  0211                     	;# 
  3524  0212                     	;# 
  3525  0212                     	;# 
  3526  0213                     	;# 
  3527  0213                     	;# 
  3528  0214                     	;# 
  3529  0214                     	;# 
  3530  0215                     	;# 
  3531  0215                     	;# 
  3532  0215                     	;# 
  3533  0216                     	;# 
  3534  0216                     	;# 
  3535  0217                     	;# 
  3536  0217                     	;# 
  3537  0219                     	;# 
  3538  021A                     	;# 
  3539  021B                     	;# 
  3540  021C                     	;# 
  3541  021D                     	;# 
  3542  021E                     	;# 
  3543  021F                     	;# 
  3544  028C                     	;# 
  3545  028D                     	;# 
  3546  0291                     	;# 
  3547  0291                     	;# 
  3548  0292                     	;# 
  3549  0293                     	;# 
  3550  0294                     	;# 
  3551  0295                     	;# 
  3552  0295                     	;# 
  3553  0296                     	;# 
  3554  0298                     	;# 
  3555  0298                     	;# 
  3556  0299                     	;# 
  3557  029A                     	;# 
  3558  029B                     	;# 
  3559  029C                     	;# 
  3560  029C                     	;# 
  3561  029D                     	;# 
  3562  029E                     	;# 
  3563  029F                     	;# 
  3564  030C                     	;# 
  3565  030D                     	;# 
  3566  0311                     	;# 
  3567  0311                     	;# 
  3568  0312                     	;# 
  3569  0313                     	;# 
  3570  0314                     	;# 
  3571  0315                     	;# 
  3572  0315                     	;# 
  3573  0316                     	;# 
  3574  0318                     	;# 
  3575  0318                     	;# 
  3576  0319                     	;# 
  3577  031A                     	;# 
  3578  031C                     	;# 
  3579  031C                     	;# 
  3580  031D                     	;# 
  3581  031E                     	;# 
  3582  038C                     	;# 
  3583  038D                     	;# 
  3584  0394                     	;# 
  3585  0395                     	;# 
  3586  0396                     	;# 
  3587  040C                     	;# 
  3588  040D                     	;# 
  3589  0415                     	;# 
  3590  0416                     	;# 
  3591  0417                     	;# 
  3592  041C                     	;# 
  3593  041D                     	;# 
  3594  041E                     	;# 
  3595  048D                     	;# 
  3596  0491                     	;# 
  3597  0492                     	;# 
  3598  0493                     	;# 
  3599  0493                     	;# 
  3600  0494                     	;# 
  3601  0495                     	;# 
  3602  0496                     	;# 
  3603  0497                     	;# 
  3604  0791                     	;# 
  3605  0792                     	;# 
  3606  0793                     	;# 
  3607  0794                     	;# 
  3608  0795                     	;# 
  3609  0798                     	;# 
  3610  0799                     	;# 
  3611  079A                     	;# 
  3612  079B                     	;# 
  3613  079C                     	;# 
  3614  079D                     	;# 
  3615  07A0                     	;# 
  3616  07A1                     	;# 
  3617  07A2                     	;# 
  3618  07A3                     	;# 
  3619  07A4                     	;# 
  3620  07A5                     	;# 
  3621  07A6                     	;# 
  3622  07A7                     	;# 
  3623  07A8                     	;# 
  3624  07A9                     	;# 
  3625  07AA                     	;# 
  3626  07AB                     	;# 
  3627  07AC                     	;# 
  3628  07AD                     	;# 
  3629  07AE                     	;# 
  3630  07AF                     	;# 
  3631  07B0                     	;# 
  3632  07B1                     	;# 
  3633  07B2                     	;# 
  3634  07B3                     	;# 
  3635  07B4                     	;# 
  3636  07B5                     	;# 
  3637  07B6                     	;# 
  3638  07B7                     	;# 
  3639  0FE4                     	;# 
  3640  0FE5                     	;# 
  3641  0FE6                     	;# 
  3642  0FE7                     	;# 
  3643  0FE8                     	;# 
  3644  0FE9                     	;# 
  3645  0FEA                     	;# 
  3646  0FEB                     	;# 
  3647  0FED                     	;# 
  3648  0FEE                     	;# 
  3649  0FEF                     	;# 
  3650  0000                     	;# 
  3651  0001                     	;# 
  3652  0002                     	;# 
  3653  0003                     	;# 
  3654  0004                     	;# 
  3655  0005                     	;# 
  3656  0006                     	;# 
  3657  0007                     	;# 
  3658  0008                     	;# 
  3659  0009                     	;# 
  3660  000A                     	;# 
  3661  000B                     	;# 
  3662  000C                     	;# 
  3663  000D                     	;# 
  3664  000E                     	;# 
  3665  000F                     	;# 
  3666  0010                     	;# 
  3667  0011                     	;# 
  3668  0012                     	;# 
  3669  0013                     	;# 
  3670  0014                     	;# 
  3671  0015                     	;# 
  3672  0016                     	;# 
  3673  0016                     	;# 
  3674  0017                     	;# 
  3675  0018                     	;# 
  3676  0019                     	;# 
  3677  001A                     	;# 
  3678  001B                     	;# 
  3679  001C                     	;# 
  3680  001E                     	;# 
  3681  001F                     	;# 
  3682  008C                     	;# 
  3683  008D                     	;# 
  3684  008E                     	;# 
  3685  008F                     	;# 
  3686  0090                     	;# 
  3687  0091                     	;# 
  3688  0092                     	;# 
  3689  0093                     	;# 
  3690  0094                     	;# 
  3691  0095                     	;# 
  3692  0096                     	;# 
  3693  0097                     	;# 
  3694  0098                     	;# 
  3695  0099                     	;# 
  3696  009A                     	;# 
  3697  009B                     	;# 
  3698  009B                     	;# 
  3699  009C                     	;# 
  3700  009D                     	;# 
  3701  009E                     	;# 
  3702  010C                     	;# 
  3703  010D                     	;# 
  3704  010E                     	;# 
  3705  010F                     	;# 
  3706  0110                     	;# 
  3707  0111                     	;# 
  3708  0112                     	;# 
  3709  0113                     	;# 
  3710  0114                     	;# 
  3711  0115                     	;# 
  3712  0116                     	;# 
  3713  0117                     	;# 
  3714  0118                     	;# 
  3715  0119                     	;# 
  3716  011A                     	;# 
  3717  011B                     	;# 
  3718  011D                     	;# 
  3719  011E                     	;# 
  3720  011F                     	;# 
  3721  018C                     	;# 
  3722  0190                     	;# 
  3723  0191                     	;# 
  3724  0191                     	;# 
  3725  0192                     	;# 
  3726  0193                     	;# 
  3727  0193                     	;# 
  3728  0193                     	;# 
  3729  0194                     	;# 
  3730  0195                     	;# 
  3731  0196                     	;# 
  3732  0199                     	;# 
  3733  0199                     	;# 
  3734  019A                     	;# 
  3735  019A                     	;# 
  3736  019B                     	;# 
  3737  019B                     	;# 
  3738  019B                     	;# 
  3739  019B                     	;# 
  3740  019C                     	;# 
  3741  019C                     	;# 
  3742  019D                     	;# 
  3743  019D                     	;# 
  3744  019E                     	;# 
  3745  019E                     	;# 
  3746  019F                     	;# 
  3747  020D                     	;# 
  3748  0211                     	;# 
  3749  0211                     	;# 
  3750  0212                     	;# 
  3751  0212                     	;# 
  3752  0213                     	;# 
  3753  0213                     	;# 
  3754  0214                     	;# 
  3755  0214                     	;# 
  3756  0215                     	;# 
  3757  0215                     	;# 
  3758  0215                     	;# 
  3759  0216                     	;# 
  3760  0216                     	;# 
  3761  0217                     	;# 
  3762  0217                     	;# 
  3763  0219                     	;# 
  3764  021A                     	;# 
  3765  021B                     	;# 
  3766  021C                     	;# 
  3767  021D                     	;# 
  3768  021E                     	;# 
  3769  021F                     	;# 
  3770  028C                     	;# 
  3771  028D                     	;# 
  3772  0291                     	;# 
  3773  0291                     	;# 
  3774  0292                     	;# 
  3775  0293                     	;# 
  3776  0294                     	;# 
  3777  0295                     	;# 
  3778  0295                     	;# 
  3779  0296                     	;# 
  3780  0298                     	;# 
  3781  0298                     	;# 
  3782  0299                     	;# 
  3783  029A                     	;# 
  3784  029B                     	;# 
  3785  029C                     	;# 
  3786  029C                     	;# 
  3787  029D                     	;# 
  3788  029E                     	;# 
  3789  029F                     	;# 
  3790  030C                     	;# 
  3791  030D                     	;# 
  3792  0311                     	;# 
  3793  0311                     	;# 
  3794  0312                     	;# 
  3795  0313                     	;# 
  3796  0314                     	;# 
  3797  0315                     	;# 
  3798  0315                     	;# 
  3799  0316                     	;# 
  3800  0318                     	;# 
  3801  0318                     	;# 
  3802  0319                     	;# 
  3803  031A                     	;# 
  3804  031C                     	;# 
  3805  031C                     	;# 
  3806  031D                     	;# 
  3807  031E                     	;# 
  3808  038C                     	;# 
  3809  038D                     	;# 
  3810  0394                     	;# 
  3811  0395                     	;# 
  3812  0396                     	;# 
  3813  040C                     	;# 
  3814  040D                     	;# 
  3815  0415                     	;# 
  3816  0416                     	;# 
  3817  0417                     	;# 
  3818  041C                     	;# 
  3819  041D                     	;# 
  3820  041E                     	;# 
  3821  048D                     	;# 
  3822  0491                     	;# 
  3823  0492                     	;# 
  3824  0493                     	;# 
  3825  0493                     	;# 
  3826  0494                     	;# 
  3827  0495                     	;# 
  3828  0496                     	;# 
  3829  0497                     	;# 
  3830  0791                     	;# 
  3831  0792                     	;# 
  3832  0793                     	;# 
  3833  0794                     	;# 
  3834  0795                     	;# 
  3835  0798                     	;# 
  3836  0799                     	;# 
  3837  079A                     	;# 
  3838  079B                     	;# 
  3839  079C                     	;# 
  3840  079D                     	;# 
  3841  07A0                     	;# 
  3842  07A1                     	;# 
  3843  07A2                     	;# 
  3844  07A3                     	;# 
  3845  07A4                     	;# 
  3846  07A5                     	;# 
  3847  07A6                     	;# 
  3848  07A7                     	;# 
  3849  07A8                     	;# 
  3850  07A9                     	;# 
  3851  07AA                     	;# 
  3852  07AB                     	;# 
  3853  07AC                     	;# 
  3854  07AD                     	;# 
  3855  07AE                     	;# 
  3856  07AF                     	;# 
  3857  07B0                     	;# 
  3858  07B1                     	;# 
  3859  07B2                     	;# 
  3860  07B3                     	;# 
  3861  07B4                     	;# 
  3862  07B5                     	;# 
  3863  07B6                     	;# 
  3864  07B7                     	;# 
  3865  0FE4                     	;# 
  3866  0FE5                     	;# 
  3867  0FE6                     	;# 
  3868  0FE7                     	;# 
  3869  0FE8                     	;# 
  3870  0FE9                     	;# 
  3871  0FEA                     	;# 
  3872  0FEB                     	;# 
  3873  0FED                     	;# 
  3874  0FEE                     	;# 
  3875  0FEF                     	;# 
  3876  0000                     	;# 
  3877  0001                     	;# 
  3878  0002                     	;# 
  3879  0003                     	;# 
  3880  0004                     	;# 
  3881  0005                     	;# 
  3882  0006                     	;# 
  3883  0007                     	;# 
  3884  0008                     	;# 
  3885  0009                     	;# 
  3886  000A                     	;# 
  3887  000B                     	;# 
  3888  000C                     	;# 
  3889  000D                     	;# 
  3890  000E                     	;# 
  3891  000F                     	;# 
  3892  0010                     	;# 
  3893  0011                     	;# 
  3894  0012                     	;# 
  3895  0013                     	;# 
  3896  0014                     	;# 
  3897  0015                     	;# 
  3898  0016                     	;# 
  3899  0016                     	;# 
  3900  0017                     	;# 
  3901  0018                     	;# 
  3902  0019                     	;# 
  3903  001A                     	;# 
  3904  001B                     	;# 
  3905  001C                     	;# 
  3906  001E                     	;# 
  3907  001F                     	;# 
  3908  008C                     	;# 
  3909  008D                     	;# 
  3910  008E                     	;# 
  3911  008F                     	;# 
  3912  0090                     	;# 
  3913  0091                     	;# 
  3914  0092                     	;# 
  3915  0093                     	;# 
  3916  0094                     	;# 
  3917  0095                     	;# 
  3918  0096                     	;# 
  3919  0097                     	;# 
  3920  0098                     	;# 
  3921  0099                     	;# 
  3922  009A                     	;# 
  3923  009B                     	;# 
  3924  009B                     	;# 
  3925  009C                     	;# 
  3926  009D                     	;# 
  3927  009E                     	;# 
  3928  010C                     	;# 
  3929  010D                     	;# 
  3930  010E                     	;# 
  3931  010F                     	;# 
  3932  0110                     	;# 
  3933  0111                     	;# 
  3934  0112                     	;# 
  3935  0113                     	;# 
  3936  0114                     	;# 
  3937  0115                     	;# 
  3938  0116                     	;# 
  3939  0117                     	;# 
  3940  0118                     	;# 
  3941  0119                     	;# 
  3942  011A                     	;# 
  3943  011B                     	;# 
  3944  011D                     	;# 
  3945  011E                     	;# 
  3946  011F                     	;# 
  3947  018C                     	;# 
  3948  0190                     	;# 
  3949  0191                     	;# 
  3950  0191                     	;# 
  3951  0192                     	;# 
  3952  0193                     	;# 
  3953  0193                     	;# 
  3954  0193                     	;# 
  3955  0194                     	;# 
  3956  0195                     	;# 
  3957  0196                     	;# 
  3958  0199                     	;# 
  3959  0199                     	;# 
  3960  019A                     	;# 
  3961  019A                     	;# 
  3962  019B                     	;# 
  3963  019B                     	;# 
  3964  019B                     	;# 
  3965  019B                     	;# 
  3966  019C                     	;# 
  3967  019C                     	;# 
  3968  019D                     	;# 
  3969  019D                     	;# 
  3970  019E                     	;# 
  3971  019E                     	;# 
  3972  019F                     	;# 
  3973  020D                     	;# 
  3974  0211                     	;# 
  3975  0211                     	;# 
  3976  0212                     	;# 
  3977  0212                     	;# 
  3978  0213                     	;# 
  3979  0213                     	;# 
  3980  0214                     	;# 
  3981  0214                     	;# 
  3982  0215                     	;# 
  3983  0215                     	;# 
  3984  0215                     	;# 
  3985  0216                     	;# 
  3986  0216                     	;# 
  3987  0217                     	;# 
  3988  0217                     	;# 
  3989  0219                     	;# 
  3990  021A                     	;# 
  3991  021B                     	;# 
  3992  021C                     	;# 
  3993  021D                     	;# 
  3994  021E                     	;# 
  3995  021F                     	;# 
  3996  028C                     	;# 
  3997  028D                     	;# 
  3998  0291                     	;# 
  3999  0291                     	;# 
  4000  0292                     	;# 
  4001  0293                     	;# 
  4002  0294                     	;# 
  4003  0295                     	;# 
  4004  0295                     	;# 
  4005  0296                     	;# 
  4006  0298                     	;# 
  4007  0298                     	;# 
  4008  0299                     	;# 
  4009  029A                     	;# 
  4010  029B                     	;# 
  4011  029C                     	;# 
  4012  029C                     	;# 
  4013  029D                     	;# 
  4014  029E                     	;# 
  4015  029F                     	;# 
  4016  030C                     	;# 
  4017  030D                     	;# 
  4018  0311                     	;# 
  4019  0311                     	;# 
  4020  0312                     	;# 
  4021  0313                     	;# 
  4022  0314                     	;# 
  4023  0315                     	;# 
  4024  0315                     	;# 
  4025  0316                     	;# 
  4026  0318                     	;# 
  4027  0318                     	;# 
  4028  0319                     	;# 
  4029  031A                     	;# 
  4030  031C                     	;# 
  4031  031C                     	;# 
  4032  031D                     	;# 
  4033  031E                     	;# 
  4034  038C                     	;# 
  4035  038D                     	;# 
  4036  0394                     	;# 
  4037  0395                     	;# 
  4038  0396                     	;# 
  4039  040C                     	;# 
  4040  040D                     	;# 
  4041  0415                     	;# 
  4042  0416                     	;# 
  4043  0417                     	;# 
  4044  041C                     	;# 
  4045  041D                     	;# 
  4046  041E                     	;# 
  4047  048D                     	;# 
  4048  0491                     	;# 
  4049  0492                     	;# 
  4050  0493                     	;# 
  4051  0493                     	;# 
  4052  0494                     	;# 
  4053  0495                     	;# 
  4054  0496                     	;# 
  4055  0497                     	;# 
  4056  0791                     	;# 
  4057  0792                     	;# 
  4058  0793                     	;# 
  4059  0794                     	;# 
  4060  0795                     	;# 
  4061  0798                     	;# 
  4062  0799                     	;# 
  4063  079A                     	;# 
  4064  079B                     	;# 
  4065  079C                     	;# 
  4066  079D                     	;# 
  4067  07A0                     	;# 
  4068  07A1                     	;# 
  4069  07A2                     	;# 
  4070  07A3                     	;# 
  4071  07A4                     	;# 
  4072  07A5                     	;# 
  4073  07A6                     	;# 
  4074  07A7                     	;# 
  4075  07A8                     	;# 
  4076  07A9                     	;# 
  4077  07AA                     	;# 
  4078  07AB                     	;# 
  4079  07AC                     	;# 
  4080  07AD                     	;# 
  4081  07AE                     	;# 
  4082  07AF                     	;# 
  4083  07B0                     	;# 
  4084  07B1                     	;# 
  4085  07B2                     	;# 
  4086  07B3                     	;# 
  4087  07B4                     	;# 
  4088  07B5                     	;# 
  4089  07B6                     	;# 
  4090  07B7                     	;# 
  4091  0FE4                     	;# 
  4092  0FE5                     	;# 
  4093  0FE6                     	;# 
  4094  0FE7                     	;# 
  4095  0FE8                     	;# 
  4096  0FE9                     	;# 
  4097  0FEA                     	;# 
  4098  0FEB                     	;# 
  4099  0FED                     	;# 
  4100  0FEE                     	;# 
  4101  0FEF                     	;# 
  4102                           
  4103                           	psect	idataBANK1
  4104  0000                     __pidataBANK1:	
  4105                           
  4106                           	psect	stringtext
  4107  1800                     __pstringtext:	
  4108  1800                     __stringtab:	
  4109  1800  3400               	retlw	0
  4110  1801                     __end_of__stringtab:	
  4111  1801                     _PWD_TABLE:	
  4112  1801  34FF               	retlw	255
  4113  1802  34FD               	retlw	253
  4114  1803  34F9               	retlw	249
  4115  1804  34F3               	retlw	243
  4116  1805  34EB               	retlw	235
  4117  1806  34E1               	retlw	225
  4118  1807  34D5               	retlw	213
  4119  1808  34C7               	retlw	199
  4120  1809  34B7               	retlw	183
  4121  180A  34A5               	retlw	165
  4122  180B  3491               	retlw	145
  4123  180C  347B               	retlw	123
  4124  180D  3463               	retlw	99
  4125  180E  3449               	retlw	73
  4126  180F  342D               	retlw	45
  4127  1810  340F               	retlw	15
  4128  1811  34FC               	retlw	252
  4129  1812  34F8               	retlw	248
  4130  1813  34F2               	retlw	242
  4131  1814  34EA               	retlw	234
  4132  1815  34E0               	retlw	224
  4133  1816  34D4               	retlw	212
  4134  1817  34C6               	retlw	198
  4135  1818  34B6               	retlw	182
  4136  1819  34A4               	retlw	164
  4137  181A  3490               	retlw	144
  4138  181B  347A               	retlw	122
  4139  181C  3462               	retlw	98
  4140  181D  3448               	retlw	72
  4141  181E  342C               	retlw	44
  4142  181F  340E               	retlw	14
  4143  1820  3410               	retlw	16
  4144  1821  34F7               	retlw	247
  4145  1822  34F1               	retlw	241
  4146  1823  34E9               	retlw	233
  4147  1824  34DF               	retlw	223
  4148  1825  34D3               	retlw	211
  4149  1826  34C5               	retlw	197
  4150  1827  34B5               	retlw	181
  4151  1828  34A3               	retlw	163
  4152  1829  348F               	retlw	143
  4153  182A  3479               	retlw	121
  4154  182B  3461               	retlw	97
  4155  182C  3447               	retlw	71
  4156  182D  342B               	retlw	43
  4157  182E  340D               	retlw	13
  4158  182F  3411               	retlw	17
  4159  1830  342E               	retlw	46
  4160  1831  34F0               	retlw	240
  4161  1832  34E8               	retlw	232
  4162  1833  34DE               	retlw	222
  4163  1834  34D2               	retlw	210
  4164  1835  34C4               	retlw	196
  4165  1836  34B4               	retlw	180
  4166  1837  34A2               	retlw	162
  4167  1838  348E               	retlw	142
  4168  1839  3478               	retlw	120
  4169  183A  3460               	retlw	96
  4170  183B  3446               	retlw	70
  4171  183C  342A               	retlw	42
  4172  183D  340C               	retlw	12
  4173  183E  3412               	retlw	18
  4174  183F  342F               	retlw	47
  4175  1840  344A               	retlw	74
  4176  1841  34E7               	retlw	231
  4177  1842  34DD               	retlw	221
  4178  1843  34D1               	retlw	209
  4179  1844  34C3               	retlw	195
  4180  1845  34B3               	retlw	179
  4181  1846  34A1               	retlw	161
  4182  1847  348D               	retlw	141
  4183  1848  3477               	retlw	119
  4184  1849  345F               	retlw	95
  4185  184A  3445               	retlw	69
  4186  184B  3429               	retlw	41
  4187  184C  340B               	retlw	11
  4188  184D  3413               	retlw	19
  4189  184E  3430               	retlw	48
  4190  184F  344B               	retlw	75
  4191  1850  3464               	retlw	100
  4192  1851  34DC               	retlw	220
  4193  1852  34D0               	retlw	208
  4194  1853  34C2               	retlw	194
  4195  1854  34B2               	retlw	178
  4196  1855  34A0               	retlw	160
  4197  1856  348C               	retlw	140
  4198  1857  3476               	retlw	118
  4199  1858  345E               	retlw	94
  4200  1859  3444               	retlw	68
  4201  185A  3428               	retlw	40
  4202  185B  340A               	retlw	10
  4203  185C  3414               	retlw	20
  4204  185D  3431               	retlw	49
  4205  185E  344C               	retlw	76
  4206  185F  3465               	retlw	101
  4207  1860  347C               	retlw	124
  4208  1861  34CF               	retlw	207
  4209  1862  34C1               	retlw	193
  4210  1863  34B1               	retlw	177
  4211  1864  349F               	retlw	159
  4212  1865  348B               	retlw	139
  4213  1866  3475               	retlw	117
  4214  1867  345D               	retlw	93
  4215  1868  3443               	retlw	67
  4216  1869  3427               	retlw	39
  4217  186A  3409               	retlw	9
  4218  186B  3415               	retlw	21
  4219  186C  3432               	retlw	50
  4220  186D  344D               	retlw	77
  4221  186E  3466               	retlw	102
  4222  186F  347D               	retlw	125
  4223  1870  3492               	retlw	146
  4224  1871  34C0               	retlw	192
  4225  1872  34B0               	retlw	176
  4226  1873  349E               	retlw	158
  4227  1874  348A               	retlw	138
  4228  1875  3474               	retlw	116
  4229  1876  345C               	retlw	92
  4230  1877  3442               	retlw	66
  4231  1878  3426               	retlw	38
  4232  1879  3408               	retlw	8
  4233  187A  3416               	retlw	22
  4234  187B  3433               	retlw	51
  4235  187C  344E               	retlw	78
  4236  187D  3467               	retlw	103
  4237  187E  347E               	retlw	126
  4238  187F  3493               	retlw	147
  4239  1880  34A6               	retlw	166
  4240  1881  34AF               	retlw	175
  4241  1882  349D               	retlw	157
  4242  1883  3489               	retlw	137
  4243  1884  3473               	retlw	115
  4244  1885  345B               	retlw	91
  4245  1886  3441               	retlw	65
  4246  1887  3425               	retlw	37
  4247  1888  3407               	retlw	7
  4248  1889  3417               	retlw	23
  4249  188A  3434               	retlw	52
  4250  188B  344F               	retlw	79
  4251  188C  3468               	retlw	104
  4252  188D  347F               	retlw	127
  4253  188E  3494               	retlw	148
  4254  188F  34A7               	retlw	167
  4255  1890  34B8               	retlw	184
  4256  1891  349C               	retlw	156
  4257  1892  3488               	retlw	136
  4258  1893  3472               	retlw	114
  4259  1894  345A               	retlw	90
  4260  1895  3440               	retlw	64
  4261  1896  3424               	retlw	36
  4262  1897  3406               	retlw	6
  4263  1898  3418               	retlw	24
  4264  1899  3435               	retlw	53
  4265  189A  3450               	retlw	80
  4266  189B  3469               	retlw	105
  4267  189C  3480               	retlw	128
  4268  189D  3495               	retlw	149
  4269  189E  34A8               	retlw	168
  4270  189F  34B9               	retlw	185
  4271  18A0  34C8               	retlw	200
  4272  18A1  3487               	retlw	135
  4273  18A2  3471               	retlw	113
  4274  18A3  3459               	retlw	89
  4275  18A4  343F               	retlw	63
  4276  18A5  3423               	retlw	35
  4277  18A6  3405               	retlw	5
  4278  18A7  3419               	retlw	25
  4279  18A8  3436               	retlw	54
  4280  18A9  3451               	retlw	81
  4281  18AA  346A               	retlw	106
  4282  18AB  3481               	retlw	129
  4283  18AC  3496               	retlw	150
  4284  18AD  34A9               	retlw	169
  4285  18AE  34BA               	retlw	186
  4286  18AF  34C9               	retlw	201
  4287  18B0  34D6               	retlw	214
  4288  18B1  3470               	retlw	112
  4289  18B2  3458               	retlw	88
  4290  18B3  343E               	retlw	62
  4291  18B4  3422               	retlw	34
  4292  18B5  3404               	retlw	4
  4293  18B6  341A               	retlw	26
  4294  18B7  3437               	retlw	55
  4295  18B8  3452               	retlw	82
  4296  18B9  346B               	retlw	107
  4297  18BA  3482               	retlw	130
  4298  18BB  3497               	retlw	151
  4299  18BC  34AA               	retlw	170
  4300  18BD  34BB               	retlw	187
  4301  18BE  34CA               	retlw	202
  4302  18BF  34D7               	retlw	215
  4303  18C0  34E2               	retlw	226
  4304  18C1  3457               	retlw	87
  4305  18C2  343D               	retlw	61
  4306  18C3  3421               	retlw	33
  4307  18C4  3403               	retlw	3
  4308  18C5  341B               	retlw	27
  4309  18C6  3438               	retlw	56
  4310  18C7  3453               	retlw	83
  4311  18C8  346C               	retlw	108
  4312  18C9  3483               	retlw	131
  4313  18CA  3498               	retlw	152
  4314  18CB  34AB               	retlw	171
  4315  18CC  34BC               	retlw	188
  4316  18CD  34CB               	retlw	203
  4317  18CE  34D8               	retlw	216
  4318  18CF  34E3               	retlw	227
  4319  18D0  34EC               	retlw	236
  4320  18D1  343C               	retlw	60
  4321  18D2  3420               	retlw	32
  4322  18D3  3402               	retlw	2
  4323  18D4  341C               	retlw	28
  4324  18D5  3439               	retlw	57
  4325  18D6  3454               	retlw	84
  4326  18D7  346D               	retlw	109
  4327  18D8  3484               	retlw	132
  4328  18D9  3499               	retlw	153
  4329  18DA  34AC               	retlw	172
  4330  18DB  34BD               	retlw	189
  4331  18DC  34CC               	retlw	204
  4332  18DD  34D9               	retlw	217
  4333  18DE  34E4               	retlw	228
  4334  18DF  34ED               	retlw	237
  4335  18E0  34F4               	retlw	244
  4336  18E1  341F               	retlw	31
  4337  18E2  3401               	retlw	1
  4338  18E3  341D               	retlw	29
  4339  18E4  343A               	retlw	58
  4340  18E5  3455               	retlw	85
  4341  18E6  346E               	retlw	110
  4342  18E7  3485               	retlw	133
  4343  18E8  349A               	retlw	154
  4344  18E9  34AD               	retlw	173
  4345  18EA  34BE               	retlw	190
  4346  18EB  34CD               	retlw	205
  4347  18EC  34DA               	retlw	218
  4348  18ED  34E5               	retlw	229
  4349  18EE  34EE               	retlw	238
  4350  18EF  34F5               	retlw	245
  4351  18F0  34FA               	retlw	250
  4352  18F1  3400               	retlw	0
  4353  18F2  341E               	retlw	30
  4354  18F3  343B               	retlw	59
  4355  18F4  3456               	retlw	86
  4356  18F5  346F               	retlw	111
  4357  18F6  3486               	retlw	134
  4358  18F7  349B               	retlw	155
  4359  18F8  34AE               	retlw	174
  4360  18F9  34BF               	retlw	191
  4361  18FA  34CE               	retlw	206
  4362  18FB  34DB               	retlw	219
  4363  18FC  34E6               	retlw	230
  4364  18FD  34EF               	retlw	239
  4365  18FE  34F6               	retlw	246
  4366  18FF  34FB               	retlw	251
  4367  1900  34FE               	retlw	254
  4368  1901                     __end_of_PWD_TABLE:	
  4369  1901                     __stringdata:	
  4370  1901                     STR_1:	
  4371  1901  3430               	retlw	48	;'0'
  4372  1902  3430               	retlw	48	;'0'
  4373  1903  3430               	retlw	48	;'0'
  4374  1904  3430               	retlw	48	;'0'
  4375  1905  3400               	retlw	0
  4376  1906                     __end_of__stringdata:	
  4377                           
  4378                           ; #config settings
  4379  0000                     
  4380                           	psect	nvBANK0
  4381  006C                     __pnvBANK0:	
  4382  006C                     _day:	
  4383  006C                     	ds	1
  4384  006D                     _hour:	
  4385  006D                     	ds	1
  4386  006E                     _month:	
  4387  006E                     	ds	1
  4388  006F                     _year:	
  4389  006F                     	ds	1
  4390                           
  4391                           	psect	nvBANK1
  4392  00E6                     __pnvBANK1:	
  4393  00E6                     _minute:	
  4394  00E6                     	ds	1
  4395  00E7                     _second:	
  4396  00E7                     	ds	1
  4397  00E8                     _week:	
  4398  00E8                     	ds	1
  4399  000F                     _PORTD	set	15
  4400  0018                     _T1CON	set	24
  4401  0017                     _TMR1H	set	23
  4402  0016                     _TMR1L	set	22
  4403  005F                     _GIE	set	95
  4404  005E                     _PEIE	set	94
  4405  0060                     _RA0	set	96
  4406  0061                     _RA1	set	97
  4407  006C                     _RB4	set	108
  4408  006D                     _RB5	set	109
  4409  0070                     _RC0	set	112
  4410  0071                     _RC1	set	113
  4411  008D                     _RC1IF	set	141
  4412  0072                     _RC2	set	114
  4413  00A5                     _RC2IF	set	165
  4414  0073                     _RC3	set	115
  4415  0074                     _RC4	set	116
  4416  0075                     _RC5	set	117
  4417  0088                     _TMR1IF	set	136
  4418  0099                     _OSCCON	set	153
  4419  008C                     _TRISAbits	set	140
  4420  008E                     _TRISCbits	set	142
  4421  008F                     _TRISD	set	143
  4422  0090                     _TRISEbits	set	144
  4423  048D                     _RC1IE	set	1165
  4424  04A5                     _RC2IE	set	1189
  4425  0488                     _TMR1IE	set	1160
  4426  0110                     _LATEbits	set	272
  4427  0191                     _EEADR	set	401
  4428  018C                     _ANSELA	set	396
  4429  0190                     _ANSELE	set	400
  4430  019F                     _BAUD1CON	set	415
  4431  0193                     _EEDATA	set	403
  4432  0199                     _RC1REG	set	409
  4433  019D                     _RC1STA	set	413
  4434  019C                     _SP1BRGH	set	412
  4435  019B                     _SP1BRGL	set	411
  4436  019A                     _TX1REG	set	410
  4437  019E                     _TX1STA	set	414
  4438  019E                     _TX1STAbits	set	414
  4439  0CAF                     _EEPGD	set	3247
  4440  0CA8                     _RD	set	3240
  4441  030D                     _TRISGbits	set	781
  4442  038D                     _LATGbits	set	909
  4443  040C                     _ANSELF	set	1036
  4444  040D                     _ANSELG	set	1037
  4445  0497                     _BAUD2CON	set	1175
  4446  0491                     _RC2REG	set	1169
  4447  0495                     _RC2STA	set	1173
  4448  0494                     _SP2BRGH	set	1172
  4449  0493                     _SP2BRGL	set	1171
  4450  0496                     _TX2STA	set	1174
  4451                           
  4452                           	psect	cinit
  4453  0079                     start_initialization:	
  4454  0079                     __initialization:	
  4455                           
  4456                           ; Clear objects allocated to BANK0
  4457  0079  3047               	movlw	low __pbssBANK0
  4458  007A  0084               	movwf	4
  4459  007B  3000               	movlw	high __pbssBANK0
  4460  007C  0085               	movwf	5
  4461  007D  3025               	movlw	37
  4462  007E  3190  2010  3180   	fcall	clear_ram0
  4463                           
  4464                           ; Clear objects allocated to BANK1
  4465  0081  30A0               	movlw	low __pbssBANK1
  4466  0082  0084               	movwf	4
  4467  0083  3000               	movlw	high __pbssBANK1
  4468  0084  0085               	movwf	5
  4469  0085  3040               	movlw	64
  4470  0086  3190  2010  3180   	fcall	clear_ram0
  4471                           
  4472                           ; Clear objects allocated to BANK2
  4473  0089  3020               	movlw	low __pbssBANK2
  4474  008A  0084               	movwf	4
  4475  008B  3001               	movlw	high __pbssBANK2
  4476  008C  0085               	movwf	5
  4477  008D  3010               	movlw	16
  4478  008E  3190  2010         	fcall	clear_ram0
  4479                           
  4480                           ; Initialize objects allocated to BANK1
  4481  0090  0021               	movlb	1	; select bank1
  4482                           
  4483                           ;initializer for _keys_super
  4484  0091  30A1               	movlw	161
  4485  0092  00E0               	movwf	__pdataBANK1& (0+127)
  4486  0093  30A2               	movlw	162
  4487  0094  00E1               	movwf	(__pdataBANK1+1)& (0+127)
  4488  0095  30A3               	movlw	163
  4489  0096  00E2               	movwf	(__pdataBANK1+2)& (0+127)
  4490  0097  30B0               	movlw	176
  4491  0098  00E3               	movwf	(__pdataBANK1+3)& (0+127)
  4492  0099  30B1               	movlw	177
  4493  009A  00E4               	movwf	(__pdataBANK1+4)& (0+127)
  4494  009B  3000               	movlw	0
  4495  009C  00E5               	movwf	(__pdataBANK1+5)& (0+127)
  4496  009D                     end_of_initialization:	
  4497                           ;End of C runtime variable initialization code
  4498                           
  4499  009D                     __end_of__initialization:	
  4500  009D  0020               	movlb	0
  4501  009E  3188  2803         	ljmp	_main	;jump to C main() function
  4502                           
  4503                           	psect	bssBANK0
  4504  0047                     __pbssBANK0:	
  4505  0047                     _uart1_receive_buffer:	
  4506  0047                     	ds	8
  4507  004F                     _card_id:	
  4508  004F                     	ds	4
  4509  0053                     _MpIsrIn:	
  4510  0053                     	ds	1
  4511  0054                     _MpIsrInfo:	
  4512  0054                     	ds	1
  4513  0055                     _MpIsrOut:	
  4514  0055                     	ds	1
  4515  0056                     _card_type:	
  4516  0056                     	ds	1
  4517  0057                     _count:	
  4518  0057                     	ds	1
  4519  0058                     _count_uart1_receive:	
  4520  0058                     	ds	1
  4521  0059                     _count_uart2_receive:	
  4522  0059                     	ds	1
  4523  005A                     _flag_timer:	
  4524  005A                     	ds	1
  4525  005B                     _flag_uart1_cmd:	
  4526  005B                     	ds	1
  4527  005C                     _flag_uart2_cmd:	
  4528  005C                     	ds	1
  4529  005D                     _flag_user_card:	
  4530  005D                     	ds	1
  4531  005E                     _group:	
  4532  005E                     	ds	1
  4533  005F                     _is_enable:	
  4534  005F                     	ds	1
  4535  0060                     _sector_number:	
  4536  0060                     	ds	1
  4537  0061                     _uart1_cnt:	
  4538  0061                     	ds	1
  4539  0062                     _uart2_cnt:	
  4540  0062                     	ds	1
  4541  0063                     _user_card_count:	
  4542  0063                     	ds	1
  4543  0064                     _MInfo:	
  4544  0064                     	ds	8
  4545                           
  4546                           	psect	bssBANK1
  4547  00A0                     __pbssBANK1:	
  4548  00A0                     _ic_card:	
  4549  00A0                     	ds	4
  4550  00A4                     _timer_count:	
  4551  00A4                     	ds	2
  4552  00A6                     _MRcvBuffer:	
  4553  00A6                     	ds	16
  4554  00B6                     _MSndBuffer:	
  4555  00B6                     	ds	16
  4556  00C6                     _user_card:	
  4557  00C6                     	ds	14
  4558  00D4                     _keys:	
  4559  00D4                     	ds	6
  4560  00DA                     _snr_rc500:	
  4561  00DA                     	ds	4
  4562  00DE                     _tt1:	
  4563  00DE                     	ds	2
  4564                           
  4565                           	psect	dataBANK1
  4566  00E0                     __pdataBANK1:	
  4567  00E0                     _keys_super:	
  4568  00E0                     	ds	6
  4569                           
  4570                           	psect	bssBANK2
  4571  0120                     __pbssBANK2:	
  4572  0120                     _uart2_receive_buffer:	
  4573  0120                     	ds	16
  4574                           
  4575                           	psect	clrtext
  4576  1010                     clear_ram0:	
  4577                           ;	Called with FSR0 containing the base address, and
  4578                           ;	WREG with the size to clear
  4579                           
  4580  1010  0064               	clrwdt	;clear the watchdog before getting into this loop
  4581  1011                     clrloop0:	
  4582  1011  0180               	clrf	0	;clear RAM location pointed to by FSR
  4583  1012  3101               	addfsr 0,1
  4584  1013  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4585  1014  2811               	goto	clrloop0	;have we reached the end yet?
  4586  1015  3400               	retlw	0	;all done for this memory range, return
  4587                           
  4588                           	psect	cstackCOMMON
  4589  0070                     __pcstackCOMMON:	
  4590  0070                     ?_delay_ms:	
  4591  0070                     ?_uart1_send_byte:	
  4592                           ; 0 bytes @ 0x0
  4593                           
  4594  0070                     ??_uart1_send_byte:	
  4595                           ; 0 bytes @ 0x0
  4596                           
  4597  0070                     ?_ds1302_set_time:	
  4598                           ; 0 bytes @ 0x0
  4599                           
  4600  0070                     ?_ds1302_get_time:	
  4601                           ; 0 bytes @ 0x0
  4602                           
  4603  0070                     ??_read_eeprom:	
  4604                           ; 0 bytes @ 0x0
  4605                           
  4606  0070                     ?_handle_beep:	
  4607                           ; 0 bytes @ 0x0
  4608                           
  4609  0070                     ??_find_project_key:	
  4610                           ; 0 bytes @ 0x0
  4611                           
  4612  0070                     ?_handle_config:	
  4613                           ; 0 bytes @ 0x0
  4614                           
  4615  0070                     ?_deal_floor:	
  4616                           ; 0 bytes @ 0x0
  4617                           
  4618  0070                     ??_same_id:	
  4619                           ; 0 bytes @ 0x0
  4620                           
  4621  0070                     ?_handle_ic_card:	
  4622                           ; 0 bytes @ 0x0
  4623                           
  4624  0070                     ?_handle_timer:	
  4625                           ; 0 bytes @ 0x0
  4626                           
  4627  0070                     ??_handle_timer:	
  4628                           ; 0 bytes @ 0x0
  4629                           
  4630  0070                     ?_init_i2c:	
  4631                           ; 0 bytes @ 0x0
  4632                           
  4633  0070                     ??_init_i2c:	
  4634                           ; 0 bytes @ 0x0
  4635                           
  4636  0070                     ?_start_i2c:	
  4637                           ; 0 bytes @ 0x0
  4638                           
  4639  0070                     ??_start_i2c:	
  4640                           ; 0 bytes @ 0x0
  4641                           
  4642  0070                     ?_stop_i2c:	
  4643                           ; 0 bytes @ 0x0
  4644                           
  4645  0070                     ??_stop_i2c:	
  4646                           ; 0 bytes @ 0x0
  4647                           
  4648  0070                     ??_rece_byte:	
  4649                           ; 0 bytes @ 0x0
  4650                           
  4651  0070                     ?_send_byte:	
  4652                           ; 0 bytes @ 0x0
  4653                           
  4654  0070                     ??_send_byte:	
  4655                           ; 0 bytes @ 0x0
  4656                           
  4657  0070                     ?_init_beep:	
  4658                           ; 0 bytes @ 0x0
  4659                           
  4660  0070                     ??_init_beep:	
  4661                           ; 0 bytes @ 0x0
  4662                           
  4663  0070                     ?_init_ds1302:	
  4664                           ; 0 bytes @ 0x0
  4665                           
  4666  0070                     ??_init_ds1302:	
  4667                           ; 0 bytes @ 0x0
  4668                           
  4669  0070                     ?_ds1302_write_byte:	
  4670                           ; 0 bytes @ 0x0
  4671                           
  4672  0070                     ??_ds1302_write_byte:	
  4673                           ; 0 bytes @ 0x0
  4674                           
  4675  0070                     ??_ds1302_read_byte:	
  4676                           ; 0 bytes @ 0x0
  4677                           
  4678  0070                     ?_isr:	
  4679                           ; 0 bytes @ 0x0
  4680                           
  4681  0070                     ??_isr:	
  4682                           ; 0 bytes @ 0x0
  4683                           
  4684  0070                     ?_init_interrupt:	
  4685                           ; 0 bytes @ 0x0
  4686                           
  4687  0070                     ??_init_interrupt:	
  4688                           ; 0 bytes @ 0x0
  4689                           
  4690  0070                     ?_init_led:	
  4691                           ; 0 bytes @ 0x0
  4692                           
  4693  0070                     ??_init_led:	
  4694                           ; 0 bytes @ 0x0
  4695                           
  4696  0070                     ?_init_mfrc500:	
  4697                           ; 0 bytes @ 0x0
  4698                           
  4699  0070                     ??_init_mfrc500:	
  4700                           ; 0 bytes @ 0x0
  4701                           
  4702  0070                     ?_PutRC500:	
  4703                           ; 0 bytes @ 0x0
  4704                           
  4705  0070                     ??_GetRC500:	
  4706                           ; 0 bytes @ 0x0
  4707                           
  4708  0070                     ?_FlushFIFO:	
  4709                           ; 0 bytes @ 0x0
  4710                           
  4711  0070                     ?_ISR_RC500:	
  4712                           ; 0 bytes @ 0x0
  4713                           
  4714  0070                     ?_init_timer1:	
  4715                           ; 0 bytes @ 0x0
  4716                           
  4717  0070                     ??_init_timer1:	
  4718                           ; 0 bytes @ 0x0
  4719                           
  4720  0070                     ?_init_uart1:	
  4721                           ; 0 bytes @ 0x0
  4722                           
  4723  0070                     ??_init_uart1:	
  4724                           ; 0 bytes @ 0x0
  4725                           
  4726  0070                     ?_init_uart2:	
  4727                           ; 0 bytes @ 0x0
  4728                           
  4729  0070                     ??_init_uart2:	
  4730                           ; 0 bytes @ 0x0
  4731                           
  4732  0070                     ?_init_osc:	
  4733                           ; 0 bytes @ 0x0
  4734                           
  4735  0070                     ??_init_osc:	
  4736                           ; 0 bytes @ 0x0
  4737                           
  4738  0070                     ?_init_port:	
  4739                           ; 0 bytes @ 0x0
  4740                           
  4741  0070                     ??_init_port:	
  4742                           ; 0 bytes @ 0x0
  4743                           
  4744  0070                     ?_init_hardware:	
  4745                           ; 0 bytes @ 0x0
  4746                           
  4747  0070                     ?_read_24c02:	
  4748                           ; 0 bytes @ 0x0
  4749                           
  4750  0070                     ?_read_eeprom:	
  4751                           ; 1 bytes @ 0x0
  4752                           
  4753  0070                     ?_checksum:	
  4754                           ; 1 bytes @ 0x0
  4755                           
  4756  0070                     ?_Mf500PiccSelect:	
  4757                           ; 1 bytes @ 0x0
  4758                           
  4759  0070                     ?_Mf500PiccLoadKey:	
  4760                           ; 1 bytes @ 0x0
  4761                           
  4762  0070                     ?_memcpy:	
  4763                           ; 1 bytes @ 0x0
  4764                           
  4765  0070                     ?_find_project_key:	
  4766                           ; 1 bytes @ 0x0
  4767                           
  4768  0070                     ?_check_user_card:	
  4769                           ; 1 bytes @ 0x0
  4770                           
  4771  0070                     ?_read_card_content:	
  4772                           ; 1 bytes @ 0x0
  4773                           
  4774  0070                     ?_rfcard:	
  4775                           ; 1 bytes @ 0x0
  4776                           
  4777  0070                     ?_read_id:	
  4778                           ; 1 bytes @ 0x0
  4779                           
  4780  0070                     ?_same_id:	
  4781                           ; 1 bytes @ 0x0
  4782                           
  4783  0070                     ?_checkpsw_super:	
  4784                           ; 1 bytes @ 0x0
  4785                           
  4786  0070                     ?_checkpsw:	
  4787                           ; 1 bytes @ 0x0
  4788                           
  4789  0070                     ?_rece_byte:	
  4790                           ; 1 bytes @ 0x0
  4791                           
  4792  0070                     ?_ds1302_read_byte:	
  4793                           ; 1 bytes @ 0x0
  4794                           
  4795  0070                     ?_ds1302_read:	
  4796                           ; 1 bytes @ 0x0
  4797                           
  4798  0070                     ?_GetRC500:	
  4799                           ; 1 bytes @ 0x0
  4800                           
  4801  0070                     ?_ReadRC:	
  4802                           ; 1 bytes @ 0x0
  4803                           
  4804  0070                     ?_PcdRfReset:	
  4805                           ; 1 bytes @ 0x0
  4806                           
  4807  0070                     ?_PcdReset:	
  4808                           ; 1 bytes @ 0x0
  4809                           
  4810  0070                     ?_RC500Config:	
  4811                           ; 1 bytes @ 0x0
  4812                           
  4813  0070                     ?_RC500OutSelect:	
  4814                           ; 1 bytes @ 0x0
  4815                           
  4816  0070                     ?_PcdSingleResponseCmd:	
  4817                           ; 1 bytes @ 0x0
  4818                           
  4819  0070                     ?_Mf500HostCodeKey:	
  4820                           ; 1 bytes @ 0x0
  4821                           
  4822  0070                     ?_main:	
  4823                           ; 1 bytes @ 0x0
  4824                           
  4825  0070                     ?___awdiv:	
  4826                           ; 2 bytes @ 0x0
  4827                           
  4828  0070                     find_project_key@data:	
  4829                           ; 2 bytes @ 0x0
  4830                           
  4831  0070                     checksum@length:	
  4832                           ; 1 bytes @ 0x0
  4833                           
  4834  0070                     rece_byte@read_data:	
  4835                           ; 1 bytes @ 0x0
  4836                           
  4837  0070                     send_byte@write_data:	
  4838                           ; 1 bytes @ 0x0
  4839                           
  4840  0070                     read_eeprom@address:	
  4841                           ; 1 bytes @ 0x0
  4842                           
  4843  0070                     ds1302_write_byte@data:	
  4844                           ; 1 bytes @ 0x0
  4845                           
  4846  0070                     ds1302_read_byte@data:	
  4847                           ; 1 bytes @ 0x0
  4848                           
  4849  0070                     PutRC500@data:	
  4850                           ; 1 bytes @ 0x0
  4851                           
  4852  0070                     GetRC500@address:	
  4853                           ; 1 bytes @ 0x0
  4854                           
  4855  0070                     Mf500HostCodeKey@coded:	
  4856                           ; 1 bytes @ 0x0
  4857                           
  4858  0070                     uart1_send_byte@data:	
  4859                           ; 1 bytes @ 0x0
  4860                           
  4861  0070                     delay_ms@count:	
  4862                           ; 1 bytes @ 0x0
  4863                           
  4864  0070                     ___awdiv@divisor:	
  4865                           ; 2 bytes @ 0x0
  4866                           
  4867  0070                     memcpy@s1:	
  4868                           ; 2 bytes @ 0x0
  4869                           
  4870                           
  4871                           ; 2 bytes @ 0x0
  4872  0070                     	ds	1
  4873  0071                     ??_checksum:	
  4874  0071                     ??_PutRC500:	
  4875                           ; 0 bytes @ 0x1
  4876                           
  4877  0071                     ??_Mf500HostCodeKey:	
  4878                           ; 0 bytes @ 0x1
  4879                           
  4880  0071                     rece_byte@i:	
  4881                           ; 0 bytes @ 0x1
  4882                           
  4883  0071                     send_byte@i:	
  4884                           ; 1 bytes @ 0x1
  4885                           
  4886  0071                     ds1302_write_byte@i:	
  4887                           ; 1 bytes @ 0x1
  4888                           
  4889  0071                     ds1302_read_byte@i:	
  4890                           ; 1 bytes @ 0x1
  4891                           
  4892  0071                     PutRC500@address:	
  4893                           ; 1 bytes @ 0x1
  4894                           
  4895  0071                     GetRC500@tmp:	
  4896                           ; 1 bytes @ 0x1
  4897                           
  4898  0071                     find_project_key@i:	
  4899                           ; 1 bytes @ 0x1
  4900                           
  4901                           
  4902                           ; 2 bytes @ 0x1
  4903  0071                     	ds	1
  4904  0072                     ??_delay_ms:	
  4905  0072                     ??_read_24c02:	
  4906                           ; 0 bytes @ 0x2
  4907                           
  4908  0072                     ??_ds1302_read:	
  4909                           ; 0 bytes @ 0x2
  4910                           
  4911  0072                     ?_ds1302_write:	
  4912                           ; 0 bytes @ 0x2
  4913                           
  4914  0072                     ?_WriteRC:	
  4915                           ; 0 bytes @ 0x2
  4916                           
  4917  0072                     ??_ReadRC:	
  4918                           ; 0 bytes @ 0x2
  4919                           
  4920  0072                     ??_ISR_RC500:	
  4921                           ; 0 bytes @ 0x2
  4922                           
  4923  0072                     ??_PcdReset:	
  4924                           ; 0 bytes @ 0x2
  4925                           
  4926  0072                     checksum@sum:	
  4927                           ; 0 bytes @ 0x2
  4928                           
  4929  0072                     read_24c02@address:	
  4930                           ; 1 bytes @ 0x2
  4931                           
  4932  0072                     ds1302_read@address:	
  4933                           ; 1 bytes @ 0x2
  4934                           
  4935  0072                     ds1302_write@data:	
  4936                           ; 1 bytes @ 0x2
  4937                           
  4938  0072                     WriteRC@data:	
  4939                           ; 1 bytes @ 0x2
  4940                           
  4941  0072                     Mf500HostCodeKey@an:	
  4942                           ; 1 bytes @ 0x2
  4943                           
  4944  0072                     delay_ms@i:	
  4945                           ; 1 bytes @ 0x2
  4946                           
  4947  0072                     ___awdiv@dividend:	
  4948                           ; 2 bytes @ 0x2
  4949                           
  4950  0072                     memcpy@n:	
  4951                           ; 2 bytes @ 0x2
  4952                           
  4953                           
  4954                           ; 2 bytes @ 0x2
  4955  0072                     	ds	1
  4956  0073                     ??_ds1302_write:	
  4957  0073                     ??_WriteRC:	
  4958                           ; 0 bytes @ 0x3
  4959                           
  4960  0073                     checksum@data:	
  4961                           ; 0 bytes @ 0x3
  4962                           
  4963  0073                     read_24c02@data:	
  4964                           ; 1 bytes @ 0x3
  4965                           
  4966  0073                     ds1302_read@temp:	
  4967                           ; 1 bytes @ 0x3
  4968                           
  4969  0073                     ds1302_write@address:	
  4970                           ; 1 bytes @ 0x3
  4971                           
  4972  0073                     ReadRC@address:	
  4973                           ; 1 bytes @ 0x3
  4974                           
  4975  0073                     Mf500HostCodeKey@uncoded:	
  4976                           ; 1 bytes @ 0x3
  4977                           
  4978  0073                     PcdReset@count01:	
  4979                           ; 1 bytes @ 0x3
  4980                           
  4981                           
  4982                           ; 2 bytes @ 0x3
  4983  0073                     	ds	1
  4984  0074                     ??_ds1302_set_time:	
  4985  0074                     ??_ds1302_get_time:	
  4986                           ; 0 bytes @ 0x4
  4987                           
  4988  0074                     ??_memcpy:	
  4989                           ; 0 bytes @ 0x4
  4990                           
  4991  0074                     ??_check_user_card:	
  4992                           ; 0 bytes @ 0x4
  4993                           
  4994  0074                     ??___awdiv:	
  4995                           ; 0 bytes @ 0x4
  4996                           
  4997  0074                     check_user_card@i:	
  4998                           ; 0 bytes @ 0x4
  4999                           
  5000  0074                     checksum@i:	
  5001                           ; 1 bytes @ 0x4
  5002                           
  5003  0074                     WriteRC@address:	
  5004                           ; 1 bytes @ 0x4
  5005                           
  5006  0074                     Mf500HostCodeKey@hn:	
  5007                           ; 1 bytes @ 0x4
  5008                           
  5009  0074                     ___awdiv@counter:	
  5010                           ; 1 bytes @ 0x4
  5011                           
  5012  0074                     delay_ms@j:	
  5013                           ; 1 bytes @ 0x4
  5014                           
  5015  0074                     memcpy@s:	
  5016                           ; 2 bytes @ 0x4
  5017                           
  5018                           
  5019                           ; 2 bytes @ 0x4
  5020  0074                     	ds	1
  5021  0075                     ?_SetBitMask:	
  5022  0075                     ?_ClearBitMask:	
  5023                           ; 0 bytes @ 0x5
  5024                           
  5025  0075                     ?_PcdSetTmo:	
  5026                           ; 0 bytes @ 0x5
  5027                           
  5028  0075                     ??_RC500OutSelect:	
  5029                           ; 0 bytes @ 0x5
  5030                           
  5031  0075                     SetBitMask@mask:	
  5032                           ; 0 bytes @ 0x5
  5033                           
  5034  0075                     ClearBitMask@mask:	
  5035                           ; 1 bytes @ 0x5
  5036                           
  5037  0075                     RC500OutSelect@type:	
  5038                           ; 1 bytes @ 0x5
  5039                           
  5040  0075                     Mf500HostCodeKey@ln:	
  5041                           ; 1 bytes @ 0x5
  5042                           
  5043  0075                     ___awdiv@sign:	
  5044                           ; 1 bytes @ 0x5
  5045                           
  5046  0075                     PcdSetTmo@tmoLength:	
  5047                           ; 1 bytes @ 0x5
  5048                           
  5049  0075                     PcdReset@count02:	
  5050                           ; 2 bytes @ 0x5
  5051                           
  5052                           
  5053                           ; 2 bytes @ 0x5
  5054  0075                     	ds	1
  5055  0076                     ?_write_24c02:	
  5056  0076                     ??_handle_beep:	
  5057                           ; 0 bytes @ 0x6
  5058                           
  5059  0076                     ??_deal_floor:	
  5060                           ; 0 bytes @ 0x6
  5061                           
  5062  0076                     ??_SetBitMask:	
  5063                           ; 0 bytes @ 0x6
  5064                           
  5065  0076                     ??_ClearBitMask:	
  5066                           ; 0 bytes @ 0x6
  5067                           
  5068  0076                     write_24c02@data:	
  5069                           ; 0 bytes @ 0x6
  5070                           
  5071  0076                     SetBitMask@tmp:	
  5072                           ; 1 bytes @ 0x6
  5073                           
  5074  0076                     ClearBitMask@tmp:	
  5075                           ; 1 bytes @ 0x6
  5076                           
  5077  0076                     ISR_RC500@irqMask:	
  5078                           ; 1 bytes @ 0x6
  5079                           
  5080  0076                     Mf500HostCodeKey@cnt:	
  5081                           ; 1 bytes @ 0x6
  5082                           
  5083  0076                     memcpy@d:	
  5084                           ; 1 bytes @ 0x6
  5085                           
  5086  0076                     ___awdiv@quotient:	
  5087                           ; 1 bytes @ 0x6
  5088                           
  5089                           
  5090                           ; 2 bytes @ 0x6
  5091  0076                     	ds	1
  5092  0077                     ??_write_24c02:	
  5093  0077                     ??_PcdSetTmo:	
  5094                           ; 0 bytes @ 0x7
  5095                           
  5096  0077                     write_24c02@address:	
  5097                           ; 0 bytes @ 0x7
  5098                           
  5099  0077                     SetBitMask@reg:	
  5100                           ; 1 bytes @ 0x7
  5101                           
  5102  0077                     ClearBitMask@reg:	
  5103                           ; 1 bytes @ 0x7
  5104                           
  5105  0077                     ISR_RC500@oldPageSelect:	
  5106                           ; 1 bytes @ 0x7
  5107                           
  5108  0077                     PcdReset@ret_status:	
  5109                           ; 1 bytes @ 0x7
  5110                           
  5111  0077                     memcpy@d1:	
  5112                           ; 1 bytes @ 0x7
  5113                           
  5114                           
  5115                           ; 1 bytes @ 0x7
  5116  0077                     	ds	1
  5117  0078                     ??_handle_config:	
  5118  0078                     ??_FlushFIFO:	
  5119                           ; 0 bytes @ 0x8
  5120                           
  5121  0078                     ??_PcdRfReset:	
  5122                           ; 0 bytes @ 0x8
  5123                           
  5124  0078                     ISR_RC500@cnt:	
  5125                           ; 0 bytes @ 0x8
  5126                           
  5127  0078                     PcdReset@i:	
  5128                           ; 1 bytes @ 0x8
  5129                           
  5130                           
  5131                           ; 2 bytes @ 0x8
  5132  0078                     	ds	1
  5133  0079                     PcdRfReset@ms:	
  5134  0079                     ISR_RC500@nbytes:	
  5135                           ; 1 bytes @ 0x9
  5136                           
  5137                           
  5138                           ; 1 bytes @ 0x9
  5139  0079                     	ds	1
  5140  007A                     ISR_RC500@irqBits:	
  5141  007A                     PcdRfReset@i:	
  5142                           ; 1 bytes @ 0xA
  5143                           
  5144                           
  5145                           ; 2 bytes @ 0xA
  5146  007A                     	ds	1
  5147  007B                     ??_Mf500PiccLoadKey:	
  5148  007B                     ??_PcdSingleResponseCmd:	
  5149                           ; 0 bytes @ 0xB
  5150                           
  5151  007B                     ?_Mf500PiccRead:	
  5152                           ; 0 bytes @ 0xB
  5153                           
  5154  007B                     ?_Mf500PiccWrite:	
  5155                           ; 1 bytes @ 0xB
  5156                           
  5157  007B                     ?_Mf500PiccAuthState:	
  5158                           ; 1 bytes @ 0xB
  5159                           
  5160  007B                     ?_Mf500PiccCommonRequest:	
  5161                           ; 1 bytes @ 0xB
  5162                           
  5163  007B                     ?_Mf500PiccCascAnticoll:	
  5164                           ; 1 bytes @ 0xB
  5165                           
  5166  007B                     ?_Mf500PiccCascSelect:	
  5167                           ; 1 bytes @ 0xB
  5168                           
  5169  007B                     Mf500PiccCommonRequest@atq:	
  5170                           ; 1 bytes @ 0xB
  5171                           
  5172  007B                     Mf500PiccCascAnticoll@bcnt:	
  5173                           ; 1 bytes @ 0xB
  5174                           
  5175  007B                     Mf500PiccCascSelect@snr:	
  5176                           ; 1 bytes @ 0xB
  5177                           
  5178  007B                     Mf500PiccAuthState@snr:	
  5179                           ; 1 bytes @ 0xB
  5180                           
  5181  007B                     Mf500PiccLoadKey@ret_status:	
  5182                           ; 1 bytes @ 0xB
  5183                           
  5184  007B                     Mf500PiccRead@data1:	
  5185                           ; 1 bytes @ 0xB
  5186                           
  5187  007B                     Mf500PiccWrite@data1:	
  5188                           ; 1 bytes @ 0xB
  5189                           
  5190                           
  5191                           ; 1 bytes @ 0xB
  5192  007B                     	ds	1
  5193  007C                     ??_Mf500PiccRead:	
  5194  007C                     ??_Mf500PiccWrite:	
  5195                           ; 0 bytes @ 0xC
  5196                           
  5197  007C                     ??_RC500Config:	
  5198                           ; 0 bytes @ 0xC
  5199                           
  5200  007C                     ??_Mf500PiccCommonRequest:	
  5201                           ; 0 bytes @ 0xC
  5202                           
  5203  007C                     ??_Mf500PiccCascSelect:	
  5204                           ; 0 bytes @ 0xC
  5205                           
  5206  007C                     RC500Config@ret_status:	
  5207                           ; 0 bytes @ 0xC
  5208                           
  5209  007C                     Mf500PiccCommonRequest@req_code:	
  5210                           ; 1 bytes @ 0xC
  5211                           
  5212  007C                     Mf500PiccCascAnticoll@snr:	
  5213                           ; 1 bytes @ 0xC
  5214                           
  5215  007C                     Mf500PiccCascSelect@select_code:	
  5216                           ; 1 bytes @ 0xC
  5217                           
  5218  007C                     Mf500PiccAuthState@block:	
  5219                           ; 1 bytes @ 0xC
  5220                           
  5221  007C                     Mf500PiccLoadKey@keys:	
  5222                           ; 1 bytes @ 0xC
  5223                           
  5224  007C                     Mf500PiccWrite@addr:	
  5225                           ; 1 bytes @ 0xC
  5226                           
  5227                           
  5228                           ; 1 bytes @ 0xC
  5229  007C                     	ds	1
  5230  007D                     ??_Mf500PiccAuthState:	
  5231  007D                     ??_checkpsw:	
  5232                           ; 0 bytes @ 0xD
  5233                           
  5234  007D                     ?_Mf500PiccAnticoll:	
  5235                           ; 0 bytes @ 0xD
  5236                           
  5237  007D                     RC500Config@i:	
  5238                           ; 1 bytes @ 0xD
  5239                           
  5240  007D                     Mf500PiccCommonRequest@ret_status:	
  5241                           ; 1 bytes @ 0xD
  5242                           
  5243  007D                     Mf500PiccAnticoll@snr:	
  5244                           ; 1 bytes @ 0xD
  5245                           
  5246  007D                     Mf500PiccCascSelect@ret_status:	
  5247                           ; 1 bytes @ 0xD
  5248                           
  5249  007D                     Mf500PiccWrite@ret_status:	
  5250                           ; 1 bytes @ 0xD
  5251                           
  5252                           
  5253                           ; 1 bytes @ 0xD
  5254  007D                     	ds	1
  5255  007E                     ??_Mf500PiccRequest:	
  5256  007E                     ??_Mf500PiccAnticoll:	
  5257                           ; 0 bytes @ 0xE
  5258                           
  5259  007E                     ??_Mf500PiccSelect:	
  5260                           ; 0 bytes @ 0xE
  5261                           
  5262  007E                     ??_rfcard:	
  5263                           ; 0 bytes @ 0xE
  5264                           
  5265  007E                     ??_read_id:	
  5266                           ; 0 bytes @ 0xE
  5267                           
  5268  007E                     ??_checkpsw_super:	
  5269                           ; 0 bytes @ 0xE
  5270                           
  5271  007E                     ??_handle_ic_card:	
  5272                           ; 0 bytes @ 0xE
  5273                           
  5274  007E                     ??_init_hardware:	
  5275                           ; 0 bytes @ 0xE
  5276                           
  5277  007E                     ??_main:	
  5278                           ; 0 bytes @ 0xE
  5279                           
  5280                           
  5281                           	psect	cstackBANK0
  5282  0020                     __pcstackBANK0:	
  5283                           ; 0 bytes @ 0xE
  5284                           
  5285  0020                     deal_floor@data:	
  5286  0020                     PcdSingleResponseCmd@count01:	
  5287                           ; 1 bytes @ 0x0
  5288                           
  5289  0020                     handle_config@tmp_buffer:	
  5290                           ; 2 bytes @ 0x0
  5291                           
  5292                           
  5293                           ; 6 bytes @ 0x0
  5294  0020                     	ds	1
  5295  0021                     deal_floor@i:	
  5296                           
  5297                           ; 1 bytes @ 0x1
  5298  0021                     	ds	1
  5299  0022                     PcdSingleResponseCmd@count02:	
  5300  0022                     deal_floor@floor:	
  5301                           ; 2 bytes @ 0x2
  5302                           
  5303                           
  5304                           ; 8 bytes @ 0x2
  5305  0022                     	ds	2
  5306  0024                     PcdSingleResponseCmd@lastBits:	
  5307                           
  5308                           ; 1 bytes @ 0x4
  5309  0024                     	ds	1
  5310  0025                     PcdSingleResponseCmd@cmd:	
  5311                           
  5312                           ; 1 bytes @ 0x5
  5313  0025                     	ds	1
  5314  0026                     handle_config@report_the_loss_count:	
  5315  0026                     PcdSingleResponseCmd@irqEn:	
  5316                           ; 1 bytes @ 0x6
  5317                           
  5318                           
  5319                           ; 1 bytes @ 0x6
  5320  0026                     	ds	1
  5321  0027                     PcdSingleResponseCmd@waitFor:	
  5322  0027                     handle_config@i:	
  5323                           ; 1 bytes @ 0x7
  5324                           
  5325                           
  5326                           ; 2 bytes @ 0x7
  5327  0027                     	ds	1
  5328  0028                     PcdSingleResponseCmd@ret_status:	
  5329                           
  5330                           ; 1 bytes @ 0x8
  5331  0028                     	ds	1
  5332  0029                     PcdSingleResponseCmd@tmpStatus:	
  5333                           
  5334                           ; 1 bytes @ 0x9
  5335  0029                     	ds	1
  5336  002A                     ??_Mf500PiccCascAnticoll:	
  5337  002A                     ?_Mf500PiccRequest:	
  5338                           ; 0 bytes @ 0xA
  5339                           
  5340  002A                     Mf500PiccRequest@atq:	
  5341                           ; 1 bytes @ 0xA
  5342                           
  5343  002A                     Mf500PiccSelect@snr:	
  5344                           ; 1 bytes @ 0xA
  5345                           
  5346  002A                     Mf500PiccAuthState@auth_mode:	
  5347                           ; 1 bytes @ 0xA
  5348                           
  5349  002A                     Mf500PiccRead@addr:	
  5350                           ; 1 bytes @ 0xA
  5351                           
  5352                           
  5353                           ; 1 bytes @ 0xA
  5354  002A                     	ds	1
  5355  002B                     Mf500PiccRequest@req_code:	
  5356  002B                     Mf500PiccAuthState@ret_status:	
  5357                           ; 1 bytes @ 0xB
  5358                           
  5359  002B                     Mf500PiccRead@ret_status:	
  5360                           ; 1 bytes @ 0xB
  5361                           
  5362                           
  5363                           ; 1 bytes @ 0xB
  5364  002B                     	ds	1
  5365  002C                     Mf500PiccRead@i:	
  5366                           
  5367                           ; 1 bytes @ 0xC
  5368  002C                     	ds	1
  5369  002D                     ??_read_card_content:	
  5370                           
  5371                           ; 0 bytes @ 0xD
  5372  002D                     	ds	1
  5373  002E                     Mf500PiccCascAnticoll@select_code:	
  5374  002E                     read_card_content@data:	
  5375                           ; 1 bytes @ 0xE
  5376                           
  5377                           
  5378                           ; 16 bytes @ 0xE
  5379  002E                     	ds	1
  5380  002F                     Mf500PiccCascAnticoll@snr_crc:	
  5381                           
  5382                           ; 1 bytes @ 0xF
  5383  002F                     	ds	1
  5384  0030                     Mf500PiccCascAnticoll@snr_check:	
  5385                           
  5386                           ; 1 bytes @ 0x10
  5387  0030                     	ds	1
  5388  0031                     Mf500PiccCascAnticoll@dummyShift2:	
  5389                           
  5390                           ; 1 bytes @ 0x11
  5391  0031                     	ds	1
  5392  0032                     Mf500PiccCascAnticoll@dummyShift1:	
  5393                           
  5394                           ; 1 bytes @ 0x12
  5395  0032                     	ds	1
  5396  0033                     Mf500PiccCascAnticoll@complete:	
  5397                           
  5398                           ; 1 bytes @ 0x13
  5399  0033                     	ds	1
  5400  0034                     Mf500PiccCascAnticoll@byteOffset:	
  5401                           
  5402                           ; 1 bytes @ 0x14
  5403  0034                     	ds	1
  5404  0035                     Mf500PiccCascAnticoll@snr_in:	
  5405                           
  5406                           ; 4 bytes @ 0x15
  5407  0035                     	ds	4
  5408  0039                     Mf500PiccCascAnticoll@nbytes:	
  5409                           
  5410                           ; 1 bytes @ 0x19
  5411  0039                     	ds	1
  5412  003A                     Mf500PiccCascAnticoll@ret_status:	
  5413                           
  5414                           ; 1 bytes @ 0x1A
  5415  003A                     	ds	1
  5416  003B                     Mf500PiccCascAnticoll@nbits:	
  5417                           
  5418                           ; 1 bytes @ 0x1B
  5419  003B                     	ds	1
  5420  003C                     Mf500PiccCascAnticoll@i:	
  5421                           
  5422                           ; 1 bytes @ 0x1C
  5423  003C                     	ds	1
  5424  003D                     Mf500PiccAnticoll@bcnt:	
  5425                           
  5426                           ; 1 bytes @ 0x1D
  5427  003D                     	ds	1
  5428  003E                     rfcard@ret:	
  5429  003E                     read_card_content@user_count:	
  5430                           ; 1 bytes @ 0x1E
  5431                           
  5432                           
  5433                           ; 2 bytes @ 0x1E
  5434  003E                     	ds	2
  5435  0040                     read_card_content@i:	
  5436                           
  5437                           ; 1 bytes @ 0x20
  5438  0040                     	ds	1
  5439  0041                     read_card_content@ret:	
  5440                           
  5441                           ; 1 bytes @ 0x21
  5442  0041                     	ds	1
  5443  0042                     main@pwd:	
  5444                           
  5445                           ; 1 bytes @ 0x22
  5446  0042                     	ds	1
  5447  0043                     main@i:	
  5448                           
  5449                           ; 1 bytes @ 0x23
  5450  0043                     	ds	1
  5451  0044                     main@i_954:	
  5452                           
  5453                           ; 2 bytes @ 0x24
  5454  0044                     	ds	2
  5455  0046                     main@j:	
  5456                           
  5457                           ; 1 bytes @ 0x26
  5458  0046                     	ds	1
  5459                           
  5460                           	psect	maintext
  5461  0803                     __pmaintext:	
  5462 ;;
  5463 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  5464 ;;
  5465 ;; *************** function _main *****************
  5466 ;; Defined at:
  5467 ;;		line 281 in file "D:\WORKproject\AJ-BLE-IC\source\main\main.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;		None
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  i               2   36[BANK0 ] unsigned short 
  5472 ;;  j               1   38[BANK0 ] unsigned char 
  5473 ;;  i               1   35[BANK0 ] unsigned char 
  5474 ;;  pwd             1   34[BANK0 ] unsigned char 
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  2  1332[COMMON] int 
  5477 ;; Registers used:
  5478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5479 ;; Tracked objects:
  5480 ;;		On entry : 17F/0
  5481 ;;		On exit  : 1E/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;Total ram usage:        5 bytes
  5489 ;; Hardware stack levels required when called:   11
  5490 ;; This function calls:
  5491 ;;		_delay_ms
  5492 ;;		_handle_config
  5493 ;;		_handle_ic_card
  5494 ;;		_handle_timer
  5495 ;;		_init_hardware
  5496 ;;		_read_24c02
  5497 ;;		_uart1_send_byte
  5498 ;;		_write_24c02
  5499 ;; This function is called by:
  5500 ;;		Startup code after reset
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           
  5505                           ;psect for function _main
  5506  0803                     _main:	
  5507                           
  5508                           ;main.c: 287: init_hardware();
  5509                           
  5510                           ;incstack = 0
  5511                           ; Regs used in _main: [allreg]
  5512  0803  3190  206F  3188   	fcall	_init_hardware
  5513                           
  5514                           ;main.c: 288: (RA0 = 0x00);
  5515  0806  100C               	bcf	12,0	;volatile
  5516                           
  5517                           ;main.c: 289: (RA1 = 0x00);
  5518  0807  108C               	bcf	12,1	;volatile
  5519                           
  5520                           ;main.c: 290: (RC5 = 0x00);
  5521                           
  5522                           ;main.c: 291: delay_ms(500);
  5523  0808  27C5  3188         	fcall	PL20	;call to abstracted procedure
  5524  080A  22C7  3188         	fcall	_delay_ms
  5525                           
  5526                           ;main.c: 292: (RC5 = 0x01);
  5527  080C  0020               	movlb	0	; select bank0
  5528  080D  168E               	bsf	14,5	;volatile
  5529                           
  5530                           ;main.c: 293: (RA0 = 0x01);
  5531  080E  140C               	bsf	12,0	;volatile
  5532                           
  5533                           ;main.c: 294: (RA1 = 0x01);
  5534  080F  148C               	bsf	12,1	;volatile
  5535                           
  5536                           ;main.c: 296: for (BYTE i = 0x00; i < 0x04; i++)
  5537  0810  01C3               	clrf	main@i
  5538  0811                     l7492:	
  5539                           
  5540                           ;main.c: 297: {
  5541                           ;main.c: 298: card_id[i] = 0x00;
  5542  0811  0843               	movf	main@i,w
  5543  0812  3E4F               	addlw	_card_id& (0+255)
  5544  0813  0086               	movwf	6
  5545  0814  3004               	movlw	4
  5546  0815  0187               	clrf	7
  5547  0816  0181               	clrf	1
  5548  0817  0AC3               	incf	main@i,f
  5549  0818  0243               	subwf	main@i,w
  5550  0819  1C03               	skipc
  5551  081A  2811               	goto	l7492
  5552                           
  5553                           ;main.c: 299: }
  5554                           ;main.c: 301: sector_number = read_24c02(0x09);
  5555  081B  3009               	movlw	9
  5556  081C  258A  3188         	fcall	_read_24c02
  5557  081E  0020               	movlb	0	; select bank0
  5558  081F  00E0               	movwf	_sector_number
  5559                           
  5560                           ;main.c: 302: group = read_24c02(0x01);
  5561  0820  3001               	movlw	1
  5562  0821  258A  3188         	fcall	_read_24c02
  5563  0823  0020               	movlb	0	; select bank0
  5564  0824  00DE               	movwf	_group
  5565                           
  5566                           ;main.c: 303: if (read_24c02(0x00) == 0xAA)
  5567  0825  3000               	movlw	0
  5568  0826  258A  3188         	fcall	_read_24c02
  5569  0828  3AAA               	xorlw	170
  5570  0829  1D03               	skipz
  5571  082A  282F               	goto	l7502
  5572                           
  5573                           ;main.c: 304: {
  5574                           ;main.c: 305: is_enable = 0x01;
  5575  082B  0020               	movlb	0	; select bank0
  5576  082C  01DF               	clrf	_is_enable
  5577  082D  0ADF               	incf	_is_enable,f
  5578                           
  5579                           ;main.c: 307: }
  5580  082E  2831               	goto	l7504
  5581  082F                     l7502:	
  5582                           
  5583                           ;main.c: 308: else
  5584                           ;main.c: 309: {
  5585                           ;main.c: 310: is_enable = 0x00;
  5586  082F  0020               	movlb	0	; select bank0
  5587  0830  01DF               	clrf	_is_enable
  5588  0831                     l7504:	
  5589                           
  5590                           ;main.c: 311: }
  5591                           ;main.c: 313: if (read_24c02(0xFF) == 0xFF)
  5592  0831  30FF               	movlw	255
  5593  0832  258A  3188         	fcall	_read_24c02
  5594  0834  3AFF               	xorlw	255
  5595  0835  1D03               	skipz
  5596  0836  283B               	goto	l7508
  5597  0837  30FF               	movlw	255
  5598                           
  5599                           ;main.c: 314: {
  5600                           ;main.c: 315: write_24c02(0xFF, 0x00);
  5601  0838  01F6               	clrf	write_24c02@data
  5602  0839  22AB  3188         	fcall	_write_24c02
  5603  083B                     l7508:	
  5604                           
  5605                           ;main.c: 316: }
  5606                           ;main.c: 318: if (is_enable)
  5607  083B  0020               	movlb	0	; select bank0
  5608  083C  085F               	movf	_is_enable,w
  5609  083D  1903               	btfsc	3,2
  5610  083E  2847               	goto	l1338
  5611                           
  5612                           ;main.c: 319: {
  5613                           ;main.c: 320: uart1_send_byte(0xF0);
  5614  083F  30F0               	movlw	240
  5615  0840  22A2  3188         	fcall	_uart1_send_byte
  5616                           
  5617                           ;main.c: 321: uart1_send_byte(0xF1);
  5618  0842  30F1               	movlw	241
  5619  0843  22A2  3188         	fcall	_uart1_send_byte
  5620                           
  5621                           ;main.c: 322: uart1_send_byte(0xFF);
  5622  0845  30FF               	movlw	255
  5623  0846  284F               	goto	L1
  5624  0847                     l1338:	
  5625                           ;main.c: 323: }
  5626                           
  5627                           
  5628                           ;main.c: 324: else
  5629                           ;main.c: 325: {
  5630                           ;main.c: 326: (RA0 = 0x01);
  5631  0847  140C               	bsf	12,0	;volatile
  5632                           
  5633                           ;main.c: 327: uart1_send_byte(0xF0);
  5634  0848  30F0               	movlw	240
  5635  0849  22A2  3188         	fcall	_uart1_send_byte
  5636                           
  5637                           ;main.c: 328: uart1_send_byte(0xF1);
  5638  084B  30F1               	movlw	241
  5639  084C  22A2  3188         	fcall	_uart1_send_byte
  5640                           
  5641                           ;main.c: 329: uart1_send_byte(0xFE);
  5642  084E  30FE               	movlw	254
  5643  084F                     L1:	
  5644  084F  22A2  3188         	fcall	_uart1_send_byte
  5645                           
  5646                           ;main.c: 330: }
  5647                           ;main.c: 332: if (read_24c02(0x02) == 0xEF)
  5648  0851  3002               	movlw	2
  5649  0852  258A  3188         	fcall	_read_24c02
  5650  0854  3AEF               	xorlw	239
  5651  0855  1D03               	skipz
  5652  0856  2881               	goto	l1348
  5653                           
  5654                           ;main.c: 333: {
  5655                           ;main.c: 334: for (BYTE j = 0x00; j < 0x06; j++)
  5656  0857  0020               	movlb	0	; select bank0
  5657  0858  01C6               	clrf	main@j
  5658  0859                     l7520:	
  5659                           
  5660                           ;main.c: 335: {
  5661                           ;main.c: 336: pwd = read_24c02(0x03 + j);
  5662  0859  0846               	movf	main@j,w
  5663  085A  3E03               	addlw	3
  5664  085B  258A  3188         	fcall	_read_24c02
  5665  085D  0020               	movlb	0	; select bank0
  5666  085E  00C2               	movwf	main@pwd
  5667                           
  5668                           ;main.c: 337: for (WORD i = 0x00; i < 0x100; i++)
  5669  085F  01C4               	clrf	main@i_954
  5670  0860  01C5               	clrf	main@i_954+1
  5671  0861                     l7528:	
  5672                           
  5673                           ;main.c: 338: {
  5674                           ;main.c: 339: if (PWD_TABLE[i] == pwd)
  5675  0861  3001               	movlw	low (_PWD_TABLE| (0+32768))
  5676  0862  0744               	addwf	main@i_954,w
  5677  0863  0084               	movwf	4
  5678  0864  3098               	movlw	high (_PWD_TABLE| (0+32768))
  5679  0865  3D45               	addwfc	main@i_954+1,w
  5680  0866  0085               	movwf	5
  5681  0867  0800               	movf	0,w	;code access
  5682  0868  0642               	xorwf	main@pwd,w
  5683  0869  1D03               	skipz
  5684  086A  2872               	goto	l7534
  5685                           
  5686                           ;main.c: 340: {
  5687                           ;main.c: 341: keys[j] = i;
  5688  086B  0846               	movf	main@j,w
  5689  086C  3ED4               	addlw	_keys& (0+255)
  5690  086D  0086               	movwf	6
  5691  086E  0187               	clrf	7
  5692  086F  0844               	movf	main@i_954,w
  5693  0870  0081               	movwf	1
  5694                           
  5695                           ;main.c: 342: break;
  5696  0871  287C               	goto	l7538
  5697  0872                     l7534:	
  5698  0872  0AC4               	incf	main@i_954,f
  5699  0873  1903               	skipnz
  5700  0874  0AC5               	incf	main@i_954+1,f
  5701  0875  3001               	movlw	1
  5702  0876  0245               	subwf	main@i_954+1,w
  5703  0877  3000               	movlw	0
  5704  0878  1903               	skipnz
  5705  0879  0244               	subwf	main@i_954,w
  5706  087A  1C03               	skipc
  5707  087B  2861               	goto	l7528
  5708  087C                     l7538:	
  5709  087C  3006               	movlw	6
  5710  087D  0AC6               	incf	main@j,f
  5711  087E  0246               	subwf	main@j,w
  5712  087F  1C03               	skipc
  5713  0880  2859               	goto	l7520
  5714  0881                     l1348:	
  5715                           ;main.c: 354: }
  5716                           ;main.c: 357: do {
  5717                           
  5718  0881  0064               	clrwdt	;# 
  5719                           
  5720                           ;main.c: 359: if (flag_uart1_cmd)
  5721  0882  0020               	movlb	0	; select bank0
  5722  0883  085B               	movf	_flag_uart1_cmd,w
  5723  0884  1903               	btfsc	3,2
  5724  0885  2889               	goto	l7548
  5725                           
  5726                           ;main.c: 360: {
  5727                           ;main.c: 361: flag_uart1_cmd = 0x00;
  5728  0886  01DB               	clrf	_flag_uart1_cmd
  5729                           
  5730                           ;main.c: 362: handle_config();
  5731  0887  20AD  3188         	fcall	_handle_config
  5732  0889                     l7548:	
  5733                           
  5734                           ;main.c: 363: }
  5735                           ;main.c: 364: if (flag_uart2_cmd)
  5736  0889  085C               	movf	_flag_uart2_cmd,w
  5737  088A  1903               	btfsc	3,2
  5738  088B  28A4               	goto	l7562
  5739                           
  5740                           ;main.c: 365: {
  5741                           ;main.c: 366: flag_uart2_cmd = 0x00;
  5742  088C  01DC               	clrf	_flag_uart2_cmd
  5743                           
  5744                           ;main.c: 368: if(uart2_receive_buffer[1]==0xf0)
  5745  088D  0022               	movlb	2	; select bank2
  5746  088E  0821               	movf	(_uart2_receive_buffer^(0+256)+1),w
  5747  088F  3AF0               	xorlw	240
  5748  0890  1D03               	skipz
  5749  0891  289A               	goto	l7556
  5750                           
  5751                           ;main.c: 369: {
  5752                           ;main.c: 370: uart1_send_byte(uart2_receive_buffer[1]);
  5753  0892  0821               	movf	(_uart2_receive_buffer^(0+256)+1),w
  5754  0893  22A2  3188         	fcall	_uart1_send_byte
  5755                           
  5756                           ;main.c: 372: uart1_send_byte(uart2_receive_buffer[2]);
  5757  0895  0022               	movlb	2	; select bank2
  5758  0896  0822               	movf	(_uart2_receive_buffer^(0+256)+2),w
  5759  0897  22A2  3188         	fcall	_uart1_send_byte
  5760                           
  5761                           ;main.c: 374: uart1_send_byte(uart2_receive_buffer[3]);
  5762  0899  0022               	movlb	2	; select bank2
  5763  089A                     l7556:	
  5764                           ;main.c: 375: }
  5765                           
  5766                           
  5767                           ;main.c: 376: else
  5768                           ;main.c: 377: {
  5769                           ;main.c: 378: uart1_send_byte(uart2_receive_buffer[3]);
  5770  089A  0823               	movf	(_uart2_receive_buffer^(0+256)+3),w
  5771  089B  22A2  3188         	fcall	_uart1_send_byte
  5772                           
  5773                           ;main.c: 379: }
  5774                           ;main.c: 380: (RC5 = 0x00);
  5775  089D  0020               	movlb	0	; select bank0
  5776                           
  5777                           ;main.c: 381: delay_ms(500);
  5778  089E  27C5  3188         	fcall	PL20	;call to abstracted procedure
  5779  08A0  22C7  3188         	fcall	_delay_ms
  5780                           
  5781                           ;main.c: 382: (RC5 = 0x01);
  5782  08A2  0020               	movlb	0	; select bank0
  5783  08A3  168E               	bsf	14,5	;volatile
  5784  08A4                     l7562:	
  5785                           
  5786                           ;main.c: 385: }
  5787                           ;main.c: 386: if (flag_timer)
  5788  08A4  085A               	movf	_flag_timer,w
  5789  08A5  1903               	btfsc	3,2
  5790  08A6  28AA               	goto	l7568
  5791                           
  5792                           ;main.c: 387: {
  5793                           ;main.c: 388: flag_timer = 0x00;
  5794  08A7  01DA               	clrf	_flag_timer
  5795                           
  5796                           ;main.c: 389: handle_timer();
  5797  08A8  27EE  3188         	fcall	_handle_timer
  5798  08AA                     l7568:	
  5799                           
  5800                           ;main.c: 390: }
  5801                           ;main.c: 391: handle_ic_card();
  5802  08AA  26CC  3188         	fcall	_handle_ic_card
  5803                           
  5804                           ;main.c: 392: } while (1);
  5805  08AC  2881               	goto	l1348
  5806  08AD                     __end_of_main:	
  5807  08AD                     __ptext52:	
  5808 ;; *************** function _handle_config *****************
  5809 ;; Defined at:
  5810 ;;		line 69 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_config.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;		None
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  tmp_buffer      6    0[BANK0 ] unsigned char [6]
  5815 ;;  i               2    7[BANK0 ] unsigned short 
  5816 ;;  report_the_l    1    6[BANK0 ] unsigned char 
  5817 ;; Return value:  Size  Location     Type
  5818 ;;		None               void
  5819 ;; Registers used:
  5820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5821 ;; Tracked objects:
  5822 ;;		On entry : 1F/0
  5823 ;;		On exit  : 1F/0
  5824 ;;		Unchanged: 0/0
  5825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5827 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5828 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5829 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5830 ;;Total ram usage:       11 bytes
  5831 ;; Hardware stack levels used:    1
  5832 ;; Hardware stack levels required when called:    4
  5833 ;; This function calls:
  5834 ;;		_delay_ms
  5835 ;;		_ds1302_get_time
  5836 ;;		_ds1302_set_time
  5837 ;;		_find_project_key
  5838 ;;		_read_24c02
  5839 ;;		_read_eeprom
  5840 ;;		_uart1_send_byte
  5841 ;;		_write_24c02
  5842 ;; This function is called by:
  5843 ;;		_main
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           
  5848                           ;psect for function _handle_config
  5849  08AD                     _handle_config:	
  5850                           
  5851                           ;handle_config.c: 74: BYTE tmp_buffer[6];
  5852                           ;handle_config.c: 75: BYTE report_the_loss_count = 0x00;
  5853                           
  5854                           ;incstack = 0
  5855                           ; Regs used in _handle_config: [allreg]
  5856  08AD  01A6               	clrf	handle_config@report_the_loss_count
  5857                           
  5858                           ;handle_config.c: 77: if (uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7] == 
      +                          0xAA)
  5859  08AE  0847               	movf	_uart1_receive_buffer,w
  5860  08AF  3A55               	xorlw	85
  5861  08B0  1D03               	skipz
  5862  08B1  28C4               	goto	l4754
  5863  08B2  084E               	movf	_uart1_receive_buffer+7,w
  5864  08B3  3AAA               	xorlw	170
  5865  08B4  1D03               	skipz
  5866  08B5  28C4               	goto	l4754
  5867                           
  5868                           ;handle_config.c: 78: {
  5869                           ;handle_config.c: 79: for (i = 0x00; i < 0x100; i++)
  5870  08B6  01A7               	clrf	handle_config@i
  5871  08B7  01A8               	clrf	handle_config@i+1
  5872  08B8                     l4744:	
  5873                           
  5874                           ;handle_config.c: 80: {
  5875                           ;handle_config.c: 81: write_24c02(i, 0xFF);
  5876  08B8  30FF               	movlw	255
  5877  08B9  00F6               	movwf	write_24c02@data
  5878  08BA  0827               	movf	handle_config@i,w
  5879  08BB  22AB  3188         	fcall	_write_24c02
  5880  08BD  27BE  3188         	fcall	PL14	;call to abstracted procedure
  5881  08BF  1903               	skipnz
  5882  08C0  0227               	subwf	handle_config@i,w
  5883  08C1  1C03               	skipc
  5884  08C2  28B8               	goto	l4744
  5885                           
  5886                           ;handle_config.c: 86: }
  5887  08C3  2A8D               	goto	l51
  5888  08C4                     l4754:	
  5889                           
  5890                           ;handle_config.c: 87: else if (uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xAB)
  5891  08C4  0847               	movf	_uart1_receive_buffer,w
  5892  08C5  3A55               	xorlw	85
  5893  08C6  1D03               	skipz
  5894  08C7  28D2               	goto	l4766
  5895  08C8  084E               	movf	_uart1_receive_buffer+7,w
  5896  08C9  3AAB               	xorlw	171
  5897  08CA  1D03               	skipz
  5898  08CB  28D2               	goto	l4766
  5899                           
  5900                           ;handle_config.c: 88: {
  5901                           ;handle_config.c: 89: write_24c02(uart1_receive_buffer[1], uart1_receive_buffer[2]);
  5902  08CC  0849               	movf	_uart1_receive_buffer+2,w
  5903  08CD  00F6               	movwf	write_24c02@data
  5904  08CE  0848               	movf	_uart1_receive_buffer+1,w
  5905  08CF  22AB  3188         	fcall	_write_24c02
  5906  08D1  2A8D               	goto	l51
  5907  08D2                     l4766:	
  5908                           
  5909                           ;handle_config.c: 94: else if(uart1_receive_buffer[0] == 0xAA && uart1_receive_buffer[7]
      +                           == 0x55)
  5910  08D2  0847               	movf	_uart1_receive_buffer,w
  5911  08D3  3AAA               	xorlw	170
  5912  08D4  1D03               	skipz
  5913  08D5  28E8               	goto	l4786
  5914  08D6  084E               	movf	_uart1_receive_buffer+7,w
  5915  08D7  3A55               	xorlw	85
  5916  08D8  1D03               	skipz
  5917  08D9  28E8               	goto	l4786
  5918                           
  5919                           ;handle_config.c: 95: {
  5920                           ;handle_config.c: 96: for (i = 0x00; i < 0x100; i++)
  5921  08DA  01A7               	clrf	handle_config@i
  5922  08DB  01A8               	clrf	handle_config@i+1
  5923  08DC                     l4776:	
  5924                           
  5925                           ;handle_config.c: 97: {
  5926                           ;handle_config.c: 98: uart1_send_byte(read_24c02(i));
  5927  08DC  0827               	movf	handle_config@i,w
  5928  08DD  258A  3188         	fcall	_read_24c02
  5929  08DF  22A2  3188         	fcall	_uart1_send_byte
  5930  08E1  27BE  3188         	fcall	PL14	;call to abstracted procedure
  5931  08E3  1903               	skipnz
  5932  08E4  0227               	subwf	handle_config@i,w
  5933  08E5  1803               	btfsc	3,0
  5934  08E6  2A8D               	goto	l51
  5935  08E7  28DC               	goto	l4776
  5936  08E8                     l4786:	
  5937                           
  5938                           ;handle_config.c: 104: else if(uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xBB)
  5939  08E8  0847               	movf	_uart1_receive_buffer,w
  5940  08E9  3A55               	xorlw	85
  5941  08EA  1D03               	skipz
  5942  08EB  2903               	goto	l4804
  5943  08EC  084E               	movf	_uart1_receive_buffer+7,w
  5944  08ED  3ABB               	xorlw	187
  5945  08EE  1D03               	skipz
  5946  08EF  2903               	goto	l4804
  5947                           
  5948                           ;handle_config.c: 105: {
  5949                           ;handle_config.c: 106: year = uart1_receive_buffer[1];
  5950  08F0  0848               	movf	_uart1_receive_buffer+1,w
  5951  08F1  00EF               	movwf	_year
  5952                           
  5953                           ;handle_config.c: 107: month = uart1_receive_buffer[2];
  5954  08F2  0849               	movf	_uart1_receive_buffer+2,w
  5955  08F3  00EE               	movwf	_month
  5956                           
  5957                           ;handle_config.c: 108: day = uart1_receive_buffer[3];
  5958  08F4  084A               	movf	_uart1_receive_buffer+3,w
  5959  08F5  00EC               	movwf	_day
  5960                           
  5961                           ;handle_config.c: 109: hour = uart1_receive_buffer[4];
  5962  08F6  084B               	movf	_uart1_receive_buffer+4,w
  5963  08F7  00ED               	movwf	_hour
  5964                           
  5965                           ;handle_config.c: 110: minute = uart1_receive_buffer[5];
  5966  08F8  084C               	movf	_uart1_receive_buffer+5,w
  5967  08F9  0021               	movlb	1	; select bank1
  5968  08FA  00E6               	movwf	_minute^(0+128)
  5969                           
  5970                           ;handle_config.c: 111: second = 0x00;
  5971  08FB  01E7               	clrf	_second^(0+128)
  5972                           
  5973                           ;handle_config.c: 112: week = uart1_receive_buffer[6];
  5974  08FC  0020               	movlb	0	; select bank0
  5975  08FD  084D               	movf	_uart1_receive_buffer+6,w
  5976  08FE  0021               	movlb	1	; select bank1
  5977  08FF  00E8               	movwf	_week^(0+128)
  5978                           
  5979                           ;handle_config.c: 113: ds1302_set_time();
  5980  0900  2339  3188         	fcall	_ds1302_set_time
  5981  0902  2A8D               	goto	l51
  5982  0903                     l4804:	
  5983                           
  5984                           ;handle_config.c: 118: else if(uart1_receive_buffer[0] == 0xBB && uart1_receive_buffer[7
      +                          ] == 0x55)
  5985  0903  0847               	movf	_uart1_receive_buffer,w
  5986  0904  3ABB               	xorlw	187
  5987  0905  1D03               	skipz
  5988  0906  2930               	goto	l4836
  5989  0907  084E               	movf	_uart1_receive_buffer+7,w
  5990  0908  3A55               	xorlw	85
  5991  0909  1D03               	skipz
  5992  090A  2930               	goto	l4836
  5993                           
  5994                           ;handle_config.c: 119: {
  5995                           ;handle_config.c: 120: ds1302_get_time();
  5996  090B  22E2  3188         	fcall	_ds1302_get_time
  5997                           
  5998                           ;handle_config.c: 121: uart1_send_byte(0xBB);
  5999  090D  30BB               	movlw	187
  6000  090E  22A2  3188         	fcall	_uart1_send_byte
  6001                           
  6002                           ;handle_config.c: 122: uart1_send_byte(0x06);
  6003  0910  3006               	movlw	6
  6004  0911  22A2  3188         	fcall	_uart1_send_byte
  6005                           
  6006                           ;handle_config.c: 123: uart1_send_byte(year);
  6007  0913  0020               	movlb	0	; select bank0
  6008  0914  086F               	movf	_year,w
  6009  0915  22A2  3188         	fcall	_uart1_send_byte
  6010                           
  6011                           ;handle_config.c: 124: uart1_send_byte(month);
  6012  0917  0020               	movlb	0	; select bank0
  6013  0918  086E               	movf	_month,w
  6014  0919  22A2  3188         	fcall	_uart1_send_byte
  6015                           
  6016                           ;handle_config.c: 125: uart1_send_byte(day);
  6017  091B  0020               	movlb	0	; select bank0
  6018  091C  086C               	movf	_day,w
  6019  091D  22A2  3188         	fcall	_uart1_send_byte
  6020                           
  6021                           ;handle_config.c: 126: uart1_send_byte(hour);
  6022  091F  0020               	movlb	0	; select bank0
  6023  0920  086D               	movf	_hour,w
  6024  0921  22A2  3188         	fcall	_uart1_send_byte
  6025                           
  6026                           ;handle_config.c: 127: uart1_send_byte(minute);
  6027  0923  0021               	movlb	1	; select bank1
  6028  0924  0866               	movf	_minute^(0+128),w
  6029  0925  22A2  3188         	fcall	_uart1_send_byte
  6030                           
  6031                           ;handle_config.c: 128: uart1_send_byte(second);
  6032  0927  0021               	movlb	1	; select bank1
  6033  0928  0867               	movf	_second^(0+128),w
  6034  0929  22A2  3188         	fcall	_uart1_send_byte
  6035                           
  6036                           ;handle_config.c: 129: uart1_send_byte(week);
  6037  092B  0021               	movlb	1	; select bank1
  6038  092C  0868               	movf	_week^(0+128),w
  6039  092D  22A2  3188         	fcall	_uart1_send_byte
  6040  092F  2A74               	goto	l4988
  6041  0930                     l4836:	
  6042                           ;handle_config.c: 130: uart1_send_byte(0x55);
  6043                           
  6044                           
  6045                           ;handle_config.c: 135: else if(uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xCC)
  6046  0930  0847               	movf	_uart1_receive_buffer,w
  6047  0931  3A55               	xorlw	85
  6048  0932  1D03               	skipz
  6049  0933  294A               	goto	l4852
  6050  0934  084E               	movf	_uart1_receive_buffer+7,w
  6051  0935  3ACC               	xorlw	204
  6052  0936  1D03               	skipz
  6053  0937  294A               	goto	l4852
  6054                           
  6055                           ;handle_config.c: 136: {
  6056                           ;handle_config.c: 137: if (uart1_receive_buffer[1] == 0x01)
  6057  0938  0B48               	decfsz	_uart1_receive_buffer+1,w
  6058  0939  2940               	goto	l4844
  6059                           
  6060                           ;handle_config.c: 138: {
  6061                           ;handle_config.c: 139: write_24c02(0x00, 0xAA);
  6062  093A  30AA               	movlw	170
  6063  093B  00F6               	movwf	write_24c02@data
  6064  093C  3000               	movlw	0
  6065  093D  22AB  3188         	fcall	_write_24c02
  6066                           
  6067                           ;handle_config.c: 140: }
  6068  093F  2A8D               	goto	l51
  6069  0940                     l4844:	
  6070                           
  6071                           ;handle_config.c: 141: else if (uart1_receive_buffer[1] == 0x02)
  6072  0940  0848               	movf	_uart1_receive_buffer+1,w
  6073  0941  3A02               	xorlw	2
  6074  0942  1D03               	skipz
  6075  0943  2A8D               	goto	l51
  6076                           
  6077                           ;handle_config.c: 142: {
  6078                           ;handle_config.c: 143: write_24c02(0x00, 0x55);
  6079  0944  3055               	movlw	85
  6080  0945  00F6               	movwf	write_24c02@data
  6081  0946  3000               	movlw	0
  6082  0947  22AB  3188         	fcall	_write_24c02
  6083                           
  6084                           ;handle_config.c: 144: }
  6085  0949  2A8D               	goto	l51
  6086  094A                     l4852:	
  6087                           
  6088                           ;handle_config.c: 153: else if(uart1_receive_buffer[0] == 0xCC && uart1_receive_buffer[7
      +                          ] == 0x55)
  6089  094A  0847               	movf	_uart1_receive_buffer,w
  6090  094B  3ACC               	xorlw	204
  6091  094C  1D03               	skipz
  6092  094D  295E               	goto	l4868
  6093  094E  084E               	movf	_uart1_receive_buffer+7,w
  6094  094F  3A55               	xorlw	85
  6095  0950  1D03               	skipz
  6096  0951  295E               	goto	l4868
  6097                           
  6098                           ;handle_config.c: 154: {
  6099                           ;handle_config.c: 155: uart1_send_byte(0xCC);
  6100  0952  30CC               	movlw	204
  6101  0953  22A2  3188         	fcall	_uart1_send_byte
  6102                           
  6103                           ;handle_config.c: 156: uart1_send_byte(0x04);
  6104  0955  3004               	movlw	4
  6105  0956  22A2  3188         	fcall	_uart1_send_byte
  6106                           
  6107                           ;handle_config.c: 157: uart1_send_byte(read_24c02(0x00));
  6108  0958  3000               	movlw	0
  6109  0959  258A  3188         	fcall	_read_24c02
  6110  095B  22A2  3188         	fcall	_uart1_send_byte
  6111  095D  2A74               	goto	l4988
  6112  095E                     l4868:	
  6113                           ;handle_config.c: 158: uart1_send_byte(0x55);
  6114                           
  6115                           
  6116                           ;handle_config.c: 164: else if(uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xDD)
  6117  095E  0847               	movf	_uart1_receive_buffer,w
  6118  095F  3A55               	xorlw	85
  6119  0960  1D03               	skipz
  6120  0961  296C               	goto	l4880
  6121  0962  084E               	movf	_uart1_receive_buffer+7,w
  6122  0963  3ADD               	xorlw	221
  6123  0964  1D03               	skipz
  6124  0965  296C               	goto	l4880
  6125                           
  6126                           ;handle_config.c: 165: {
  6127                           ;handle_config.c: 166: write_24c02(0x09, uart1_receive_buffer[1]);
  6128  0966  0848               	movf	_uart1_receive_buffer+1,w
  6129  0967  00F6               	movwf	write_24c02@data
  6130  0968  3009               	movlw	9
  6131  0969  22AB  3188         	fcall	_write_24c02
  6132  096B  2A8D               	goto	l51
  6133  096C                     l4880:	
  6134                           
  6135                           ;handle_config.c: 171: else if(uart1_receive_buffer[0] == 0xDD && uart1_receive_buffer[7
      +                          ] == 0x55)
  6136  096C  0847               	movf	_uart1_receive_buffer,w
  6137  096D  3ADD               	xorlw	221
  6138  096E  1D03               	skipz
  6139  096F  2980               	goto	l4896
  6140  0970  084E               	movf	_uart1_receive_buffer+7,w
  6141  0971  3A55               	xorlw	85
  6142  0972  1D03               	skipz
  6143  0973  2980               	goto	l4896
  6144                           
  6145                           ;handle_config.c: 172: {
  6146                           ;handle_config.c: 173: uart1_send_byte(0xDD);
  6147  0974  30DD               	movlw	221
  6148  0975  22A2  3188         	fcall	_uart1_send_byte
  6149                           
  6150                           ;handle_config.c: 174: uart1_send_byte(0x04);
  6151  0977  3004               	movlw	4
  6152  0978  22A2  3188         	fcall	_uart1_send_byte
  6153                           
  6154                           ;handle_config.c: 175: uart1_send_byte(read_24c02(0x09));
  6155  097A  3009               	movlw	9
  6156  097B  258A  3188         	fcall	_read_24c02
  6157  097D  22A2  3188         	fcall	_uart1_send_byte
  6158  097F  2A74               	goto	l4988
  6159  0980                     l4896:	
  6160                           ;handle_config.c: 176: uart1_send_byte(0x55);
  6161                           
  6162                           
  6163                           ;handle_config.c: 182: else if(uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xEE)
  6164  0980  0847               	movf	_uart1_receive_buffer,w
  6165  0981  3A55               	xorlw	85
  6166  0982  1D03               	skipz
  6167  0983  298E               	goto	l4908
  6168  0984  084E               	movf	_uart1_receive_buffer+7,w
  6169  0985  3AEE               	xorlw	238
  6170  0986  1D03               	skipz
  6171  0987  298E               	goto	l4908
  6172                           
  6173                           ;handle_config.c: 183: {
  6174                           ;handle_config.c: 184: write_24c02(0x01, uart1_receive_buffer[1]);
  6175  0988  0848               	movf	_uart1_receive_buffer+1,w
  6176  0989  00F6               	movwf	write_24c02@data
  6177  098A  3001               	movlw	1
  6178  098B  22AB  3188         	fcall	_write_24c02
  6179  098D  2A8D               	goto	l51
  6180  098E                     l4908:	
  6181                           
  6182                           ;handle_config.c: 189: else if(uart1_receive_buffer[0] == 0xEE && uart1_receive_buffer[7
      +                          ] == 0x55)
  6183  098E  0847               	movf	_uart1_receive_buffer,w
  6184  098F  3AEE               	xorlw	238
  6185  0990  1D03               	skipz
  6186  0991  29A2               	goto	l4924
  6187  0992  084E               	movf	_uart1_receive_buffer+7,w
  6188  0993  3A55               	xorlw	85
  6189  0994  1D03               	skipz
  6190  0995  29A2               	goto	l4924
  6191                           
  6192                           ;handle_config.c: 190: {
  6193                           ;handle_config.c: 191: uart1_send_byte(0xEE);
  6194  0996  30EE               	movlw	238
  6195  0997  22A2  3188         	fcall	_uart1_send_byte
  6196                           
  6197                           ;handle_config.c: 192: uart1_send_byte(0x04);
  6198  0999  3004               	movlw	4
  6199  099A  22A2  3188         	fcall	_uart1_send_byte
  6200                           
  6201                           ;handle_config.c: 193: uart1_send_byte(read_24c02(0x01));
  6202  099C  3001               	movlw	1
  6203  099D  258A  3188         	fcall	_read_24c02
  6204  099F  22A2  3188         	fcall	_uart1_send_byte
  6205  09A1  2A74               	goto	l4988
  6206  09A2                     l4924:	
  6207                           ;handle_config.c: 194: uart1_send_byte(0x55);
  6208                           
  6209                           
  6210                           ;handle_config.c: 200: else if(uart1_receive_buffer[0] == 0x55 && uart1_receive_buffer[7
      +                          ] == 0xFF)
  6211  09A2  0847               	movf	_uart1_receive_buffer,w
  6212  09A3  3A55               	xorlw	85
  6213  09A4  1D03               	skipz
  6214  09A5  29DA               	goto	l4936
  6215  09A6  084E               	movf	_uart1_receive_buffer+7,w
  6216  09A7  3AFF               	xorlw	255
  6217  09A8  1D03               	skipz
  6218  09A9  29DA               	goto	l4936
  6219                           
  6220                           ;handle_config.c: 201: {
  6221                           ;handle_config.c: 202: write_24c02(0x02, 0xEF);
  6222  09AA  30EF               	movlw	239
  6223  09AB  00F6               	movwf	write_24c02@data
  6224  09AC  3002               	movlw	2
  6225  09AD  22AB  3188         	fcall	_write_24c02
  6226                           
  6227                           ;handle_config.c: 203: write_24c02(0x03 + 0x00, PWD_TABLE[uart1_receive_buffer[1]]);
  6228  09AF  0020               	movlb	0	; select bank0
  6229  09B0  0848               	movf	_uart1_receive_buffer+1,w
  6230  09B1  27A2  3188         	fcall	PL4	;call to abstracted procedure
  6231  09B3  3003               	movlw	3
  6232  09B4  22AB  3188         	fcall	_write_24c02
  6233                           
  6234                           ;handle_config.c: 204: write_24c02(0x03 + 0x01, PWD_TABLE[uart1_receive_buffer[2]]);
  6235  09B6  0020               	movlb	0	; select bank0
  6236  09B7  0849               	movf	_uart1_receive_buffer+2,w
  6237  09B8  27A2  3188         	fcall	PL4	;call to abstracted procedure
  6238  09BA  3004               	movlw	4
  6239  09BB  22AB  3188         	fcall	_write_24c02
  6240                           
  6241                           ;handle_config.c: 205: write_24c02(0x03 + 0x02, PWD_TABLE[uart1_receive_buffer[3]]);
  6242  09BD  0020               	movlb	0	; select bank0
  6243  09BE  084A               	movf	_uart1_receive_buffer+3,w
  6244  09BF  27A2  3188         	fcall	PL4	;call to abstracted procedure
  6245  09C1  3005               	movlw	5
  6246  09C2  22AB  3188         	fcall	_write_24c02
  6247                           
  6248                           ;handle_config.c: 206: write_24c02(0x03 + 0x03, PWD_TABLE[uart1_receive_buffer[4]]);
  6249  09C4  0020               	movlb	0	; select bank0
  6250  09C5  084B               	movf	_uart1_receive_buffer+4,w
  6251  09C6  27A2  3188         	fcall	PL4	;call to abstracted procedure
  6252  09C8  3006               	movlw	6
  6253  09C9  22AB  3188         	fcall	_write_24c02
  6254                           
  6255                           ;handle_config.c: 207: write_24c02(0x03 + 0x04, PWD_TABLE[uart1_receive_buffer[5]]);
  6256  09CB  0020               	movlb	0	; select bank0
  6257  09CC  084C               	movf	_uart1_receive_buffer+5,w
  6258  09CD  27A2  3188         	fcall	PL4	;call to abstracted procedure
  6259  09CF  3007               	movlw	7
  6260  09D0  22AB  3188         	fcall	_write_24c02
  6261                           
  6262                           ;handle_config.c: 208: write_24c02(0x03 + 0x05, PWD_TABLE[uart1_receive_buffer[6]]);
  6263  09D2  0020               	movlb	0	; select bank0
  6264  09D3  084D               	movf	_uart1_receive_buffer+6,w
  6265  09D4  27A2  3188         	fcall	PL4	;call to abstracted procedure
  6266  09D6  3008               	movlw	8
  6267  09D7  22AB  3188         	fcall	_write_24c02
  6268  09D9  2A8D               	goto	l51
  6269  09DA                     l4936:	
  6270                           
  6271                           ;handle_config.c: 213: else if(uart1_receive_buffer[0] == 0xFF && uart1_receive_buffer[7
      +                          ] == 0x55)
  6272  09DA  0847               	movf	_uart1_receive_buffer,w
  6273  09DB  3AFF               	xorlw	255
  6274  09DC  1D03               	skipz
  6275  09DD  2A2A               	goto	l4972
  6276  09DE  084E               	movf	_uart1_receive_buffer+7,w
  6277  09DF  3A55               	xorlw	85
  6278  09E0  1D03               	skipz
  6279  09E1  2A2A               	goto	l4972
  6280                           
  6281                           ;handle_config.c: 214: {
  6282                           ;handle_config.c: 215: uart1_send_byte(0xFF);
  6283  09E2  30FF               	movlw	255
  6284  09E3  22A2  3188         	fcall	_uart1_send_byte
  6285                           
  6286                           ;handle_config.c: 216: uart1_send_byte(0x09);
  6287  09E5  3009               	movlw	9
  6288  09E6  22A2  3188         	fcall	_uart1_send_byte
  6289                           
  6290                           ;handle_config.c: 217: for (i = 0x00; i < 0x06; i++)
  6291  09E8  0020               	movlb	0	; select bank0
  6292  09E9  01A7               	clrf	handle_config@i
  6293  09EA  01A8               	clrf	handle_config@i+1
  6294  09EB                     l4948:	
  6295                           
  6296                           ;handle_config.c: 218: {
  6297                           ;handle_config.c: 219: tmp_buffer[i] = find_project_key(read_24c02(0x03 + i));
  6298  09EB  0827               	movf	handle_config@i,w
  6299  09EC  3E03               	addlw	3
  6300  09ED  258A  3188         	fcall	_read_24c02
  6301  09EF  2386  3188         	fcall	_find_project_key
  6302  09F1  00F8               	movwf	??_handle_config
  6303  09F2  0020               	movlb	0	; select bank0
  6304  09F3  0827               	movf	handle_config@i,w
  6305  09F4  3E20               	addlw	handle_config@tmp_buffer& (0+255)
  6306  09F5  0086               	movwf	6
  6307  09F6  0187               	clrf	7
  6308  09F7  0878               	movf	??_handle_config,w
  6309  09F8  0081               	movwf	1
  6310  09F9  0AA7               	incf	handle_config@i,f
  6311  09FA  1903               	skipnz
  6312  09FB  0AA8               	incf	handle_config@i+1,f
  6313  09FC  3000               	movlw	0
  6314  09FD  0228               	subwf	handle_config@i+1,w
  6315  09FE  3006               	movlw	6
  6316  09FF  1903               	skipnz
  6317  0A00  0227               	subwf	handle_config@i,w
  6318  0A01  1C03               	skipc
  6319  0A02  29EB               	goto	l4948
  6320                           
  6321                           ;handle_config.c: 220: }
  6322                           ;handle_config.c: 221: uart1_send_byte(tmp_buffer[0]);
  6323  0A03  0820               	movf	handle_config@tmp_buffer,w
  6324  0A04  22A2  3188         	fcall	_uart1_send_byte
  6325                           
  6326                           ;handle_config.c: 222: uart1_send_byte(tmp_buffer[1]);
  6327  0A06  0020               	movlb	0	; select bank0
  6328  0A07  0821               	movf	handle_config@tmp_buffer+1,w
  6329  0A08  22A2  3188         	fcall	_uart1_send_byte
  6330                           
  6331                           ;handle_config.c: 223: uart1_send_byte(tmp_buffer[2]);
  6332  0A0A  0020               	movlb	0	; select bank0
  6333  0A0B  0822               	movf	handle_config@tmp_buffer+2,w
  6334  0A0C  22A2  3188         	fcall	_uart1_send_byte
  6335                           
  6336                           ;handle_config.c: 224: uart1_send_byte(tmp_buffer[3]);
  6337  0A0E  0020               	movlb	0	; select bank0
  6338  0A0F  0823               	movf	handle_config@tmp_buffer+3,w
  6339  0A10  22A2  3188         	fcall	_uart1_send_byte
  6340                           
  6341                           ;handle_config.c: 225: uart1_send_byte(tmp_buffer[4]);
  6342  0A12  0020               	movlb	0	; select bank0
  6343  0A13  0824               	movf	handle_config@tmp_buffer+4,w
  6344  0A14  22A2  3188         	fcall	_uart1_send_byte
  6345                           
  6346                           ;handle_config.c: 226: uart1_send_byte(tmp_buffer[5]);
  6347  0A16  0020               	movlb	0	; select bank0
  6348  0A17  0825               	movf	handle_config@tmp_buffer+5,w
  6349  0A18  22A2  3188         	fcall	_uart1_send_byte
  6350                           
  6351                           ;handle_config.c: 227: uart1_send_byte(0x55);
  6352  0A1A  3055               	movlw	85
  6353  0A1B  22A2  3188         	fcall	_uart1_send_byte
  6354                           
  6355                           ;handle_config.c: 228: for (i = 0x00; i < 0x06; i++)
  6356  0A1D  0020               	movlb	0	; select bank0
  6357  0A1E  01A7               	clrf	handle_config@i
  6358  0A1F  01A8               	clrf	handle_config@i+1
  6359  0A20                     l4962:	
  6360                           
  6361                           ;handle_config.c: 229: {
  6362                           ;handle_config.c: 230: tmp_buffer[i] = 0x00;
  6363  0A20  0827               	movf	handle_config@i,w
  6364  0A21  3E20               	addlw	handle_config@tmp_buffer& (0+255)
  6365  0A22  27B5  3188         	fcall	PL8	;call to abstracted procedure
  6366  0A24  3006               	movlw	6
  6367  0A25  1903               	skipnz
  6368  0A26  0227               	subwf	handle_config@i,w
  6369  0A27  1803               	btfsc	3,0
  6370  0A28  2A8D               	goto	l51
  6371  0A29  2A20               	goto	l4962
  6372  0A2A                     l4972:	
  6373                           
  6374                           ;handle_config.c: 255: else if(uart1_receive_buffer[0] == 0x99 && uart1_receive_buffer[7
      +                          ] == 0x55)
  6375  0A2A  0847               	movf	_uart1_receive_buffer,w
  6376  0A2B  3A99               	xorlw	153
  6377  0A2C  1D03               	skipz
  6378  0A2D  2A76               	goto	l4994
  6379  0A2E  084E               	movf	_uart1_receive_buffer+7,w
  6380  0A2F  3A55               	xorlw	85
  6381  0A30  1D03               	skipz
  6382  0A31  2A76               	goto	l4994
  6383                           
  6384                           ;handle_config.c: 256: {
  6385                           ;handle_config.c: 257: report_the_loss_count = read_24c02(0xFF);
  6386  0A32  30FF               	movlw	255
  6387  0A33  258A  3188         	fcall	_read_24c02
  6388  0A35  0020               	movlb	0	; select bank0
  6389  0A36  00A6               	movwf	handle_config@report_the_loss_count
  6390                           
  6391                           ;handle_config.c: 258: uart1_send_byte(0x99);
  6392  0A37  3099               	movlw	153
  6393  0A38  22A2  3188         	fcall	_uart1_send_byte
  6394                           
  6395                           ;handle_config.c: 259: for (i = 0x01; i < (report_the_loss_count + 0x01); i++)
  6396  0A3A  0020               	movlb	0	; select bank0
  6397  0A3B  01A7               	clrf	handle_config@i
  6398  0A3C  0AA7               	incf	handle_config@i,f
  6399  0A3D  01A8               	clrf	handle_config@i+1
  6400  0A3E                     l4986:	
  6401  0A3E  0826               	movf	handle_config@report_the_loss_count,w
  6402  0A3F  3E01               	addlw	1
  6403  0A40  00F8               	movwf	??_handle_config
  6404  0A41  3000               	movlw	0
  6405  0A42  1803               	skipnc
  6406  0A43  3001               	movlw	1
  6407  0A44  00F9               	movwf	??_handle_config+1
  6408  0A45  0228               	subwf	handle_config@i+1,w
  6409  0A46  1D03               	skipz
  6410  0A47  2A4A               	goto	u4625
  6411  0A48  0878               	movf	??_handle_config,w
  6412  0A49  0227               	subwf	handle_config@i,w
  6413  0A4A                     u4625:	
  6414  0A4A  1803               	btfsc	3,0
  6415  0A4B  2A74               	goto	l4988
  6416                           
  6417                           ;handle_config.c: 260: {
  6418                           ;handle_config.c: 261: uart1_send_byte(read_24c02(0x40 + (i - 0x01) * 0x04 + 0x00));
  6419  0A4C  0827               	movf	handle_config@i,w
  6420  0A4D  0709               	addwf	9,w
  6421  0A4E  0709               	addwf	9,w
  6422  0A4F  3E3C               	addlw	60
  6423  0A50  258A  3188         	fcall	_read_24c02
  6424  0A52  22A2  3188         	fcall	_uart1_send_byte
  6425                           
  6426                           ;handle_config.c: 262: uart1_send_byte(read_24c02(0x40 + (i - 0x01) * 0x04 + 0x01));
  6427  0A54  0020               	movlb	0	; select bank0
  6428  0A55  0827               	movf	handle_config@i,w
  6429  0A56  0709               	addwf	9,w
  6430  0A57  0709               	addwf	9,w
  6431  0A58  3E3D               	addlw	61
  6432  0A59  258A  3188         	fcall	_read_24c02
  6433  0A5B  22A2  3188         	fcall	_uart1_send_byte
  6434                           
  6435                           ;handle_config.c: 263: uart1_send_byte(read_24c02(0x40 + (i - 0x01) * 0x04 + 0x02));
  6436  0A5D  0020               	movlb	0	; select bank0
  6437  0A5E  0827               	movf	handle_config@i,w
  6438  0A5F  0709               	addwf	9,w
  6439  0A60  0709               	addwf	9,w
  6440  0A61  3E3E               	addlw	62
  6441  0A62  258A  3188         	fcall	_read_24c02
  6442  0A64  22A2  3188         	fcall	_uart1_send_byte
  6443                           
  6444                           ;handle_config.c: 264: uart1_send_byte(read_24c02(0x40 + (i - 0x01) * 0x04 + 0x03));
  6445  0A66  0020               	movlb	0	; select bank0
  6446  0A67  0827               	movf	handle_config@i,w
  6447  0A68  0709               	addwf	9,w
  6448  0A69  0709               	addwf	9,w
  6449  0A6A  3E3F               	addlw	63
  6450  0A6B  258A  3188         	fcall	_read_24c02
  6451  0A6D  22A2  3188         	fcall	_uart1_send_byte
  6452  0A6F  0020               	movlb	0	; select bank0
  6453  0A70  0AA7               	incf	handle_config@i,f
  6454  0A71  1903               	skipnz
  6455  0A72  0AA8               	incf	handle_config@i+1,f
  6456  0A73  2A3E               	goto	l4986
  6457  0A74                     l4988:	
  6458                           
  6459                           ;handle_config.c: 265: }
  6460                           ;handle_config.c: 266: uart1_send_byte(0x55);
  6461  0A74  3055               	movlw	85
  6462  0A75  2A8B               	goto	L23
  6463  0A76                     l4994:	
  6464                           ;handle_config.c: 268: delay_ms(100);
  6465                           
  6466                           ;handle_config.c: 267: (RC5 = 0x00);
  6467                           
  6468                           
  6469                           ;handle_config.c: 272: else if (uart1_receive_buffer[0] == 0x88 && uart1_receive_buffer[
      +                          7] == 0x55)
  6470  0A76  0847               	movf	_uart1_receive_buffer,w
  6471  0A77  3A88               	xorlw	136
  6472  0A78  1D03               	skipz
  6473  0A79  2A96               	goto	l5004
  6474  0A7A  084E               	movf	_uart1_receive_buffer+7,w
  6475  0A7B  3A55               	xorlw	85
  6476  0A7C  1D03               	skipz
  6477  0A7D  2A96               	goto	l5004
  6478                           
  6479                           ;handle_config.c: 273: {
  6480                           ;handle_config.c: 274: uart1_send_byte(read_eeprom(0x00));
  6481  0A7E  3000               	movlw	0
  6482  0A7F  22BD  3188         	fcall	_read_eeprom
  6483  0A81  22A2  3188         	fcall	_uart1_send_byte
  6484                           
  6485                           ;handle_config.c: 275: uart1_send_byte(read_eeprom(0x01));
  6486  0A83  3001               	movlw	1
  6487  0A84  22BD  3188         	fcall	_read_eeprom
  6488  0A86  22A2  3188         	fcall	_uart1_send_byte
  6489                           
  6490                           ;handle_config.c: 276: uart1_send_byte(read_eeprom(0x02));
  6491  0A88  3002               	movlw	2
  6492  0A89  22BD  3188         	fcall	_read_eeprom
  6493  0A8B                     L23:	
  6494  0A8B  22A2  3188         	fcall	_uart1_send_byte
  6495  0A8D                     l51:	
  6496                           
  6497                           ;handle_config.c: 82: }
  6498                           ;handle_config.c: 83: (RC5 = 0x00);
  6499  0A8D  0020               	movlb	0	; select bank0
  6500  0A8E  128E               	bcf	14,5	;volatile
  6501                           
  6502                           ;handle_config.c: 84: delay_ms(100);
  6503  0A8F  3064               	movlw	100
  6504  0A90  00F0               	movwf	delay_ms@count
  6505  0A91  01F1               	clrf	delay_ms@count+1
  6506  0A92  22C7  3188         	fcall	_delay_ms
  6507                           
  6508                           ;handle_config.c: 85: (RC5 = 0x01);
  6509  0A94  0020               	movlb	0	; select bank0
  6510  0A95  168E               	bsf	14,5	;volatile
  6511  0A96                     l5004:	
  6512                           
  6513                           ;handle_config.c: 284: }
  6514                           ;handle_config.c: 285: for (i = 0x00; i < 0x08; i++)
  6515  0A96  01A7               	clrf	handle_config@i
  6516  0A97  01A8               	clrf	handle_config@i+1
  6517  0A98                     l5010:	
  6518                           
  6519                           ;handle_config.c: 286: {
  6520                           ;handle_config.c: 287: uart1_receive_buffer[i] = 0x00;
  6521  0A98  0827               	movf	handle_config@i,w
  6522  0A99  3E47               	addlw	_uart1_receive_buffer& (0+255)
  6523  0A9A  27B5  3188         	fcall	PL8	;call to abstracted procedure
  6524  0A9C  3008               	movlw	8
  6525  0A9D  1903               	skipnz
  6526  0A9E  0227               	subwf	handle_config@i,w
  6527  0A9F  1803               	btfsc	3,0
  6528  0AA0  0008               	return
  6529  0AA1  2A98               	goto	l5010
  6530  0AA2                     __end_of_handle_config:	
  6531  0AA2                     __ptext55:	
  6532 ;; *************** function _uart1_send_byte *****************
  6533 ;; Defined at:
  6534 ;;		line 99 in file "D:\WORKproject\AJ-BLE-IC\source\driver\uart.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  data            1    wreg     unsigned char 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;  data            1    0[COMMON] unsigned char 
  6539 ;; Return value:  Size  Location     Type
  6540 ;;		None               void
  6541 ;; Registers used:
  6542 ;;		wreg
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 1F/3
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;Total ram usage:        1 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    1
  6555 ;; This function calls:
  6556 ;;		Nothing
  6557 ;; This function is called by:
  6558 ;;		_handle_config
  6559 ;;		_deal_floor
  6560 ;;		_read_card_content
  6561 ;;		_main
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function _uart1_send_byte
  6567  0AA2                     _uart1_send_byte:	
  6568                           
  6569                           ;incstack = 0
  6570                           ; Regs used in _uart1_send_byte: [wreg]
  6571                           ;uart1_send_byte@data stored from wreg
  6572  0AA2  00F0               	movwf	uart1_send_byte@data
  6573  0AA3                     l1174:	
  6574                           ;uart.c: 103: while (!TX1STAbits.TRMT);
  6575                           
  6576  0AA3  0023               	movlb	3	; select bank3
  6577  0AA4  1C9E               	btfss	30,1	;volatile
  6578  0AA5  2AA3               	goto	l1174
  6579                           
  6580                           ;uart.c: 104: TX1REG = data;
  6581  0AA6  0870               	movf	uart1_send_byte@data,w
  6582  0AA7  009A               	movwf	26	;volatile
  6583  0AA8                     l1177:	
  6584                           ;uart.c: 105: while (!TX1STAbits.TRMT);
  6585                           
  6586  0AA8  189E               	btfsc	30,1	;volatile
  6587  0AA9  0008               	return
  6588  0AAA  2AA8               	goto	l1177
  6589  0AAB                     __end_of_uart1_send_byte:	
  6590  0AAB                     __ptext53:	
  6591 ;; *************** function _write_24c02 *****************
  6592 ;; Defined at:
  6593 ;;		line 144 in file "D:\WORKproject\AJ-BLE-IC\source\driver\24c02.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;  address         1    wreg     unsigned char 
  6596 ;;  data            1    6[COMMON] unsigned char 
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;  address         1    7[COMMON] unsigned char 
  6599 ;; Return value:  Size  Location     Type
  6600 ;;		None               void
  6601 ;; Registers used:
  6602 ;;		wreg, status,2, status,0, pclath, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6608 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;Total ram usage:        2 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    2
  6615 ;; This function calls:
  6616 ;;		_delay_ms
  6617 ;;		_send_byte
  6618 ;;		_start_i2c
  6619 ;;		_stop_i2c
  6620 ;; This function is called by:
  6621 ;;		_handle_config
  6622 ;;		_read_card_content
  6623 ;;		_main
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           
  6628                           ;psect for function _write_24c02
  6629  0AAB                     _write_24c02:	
  6630                           
  6631                           ;incstack = 0
  6632                           ; Regs used in _write_24c02: [wreg+status,2+status,0+pclath+cstack]
  6633                           ;write_24c02@address stored from wreg
  6634  0AAB  00F7               	movwf	write_24c02@address
  6635                           
  6636                           ;24c02.c: 149: start_i2c();
  6637  0AAC  25C8  3188         	fcall	_start_i2c
  6638                           
  6639                           ;24c02.c: 150: send_byte(0xA0);
  6640  0AAE  30A0               	movlw	160
  6641  0AAF  259E  3188         	fcall	_send_byte
  6642                           
  6643                           ;24c02.c: 151: send_byte(address);
  6644  0AB1  0877               	movf	write_24c02@address,w
  6645  0AB2  259E  3188         	fcall	_send_byte
  6646                           
  6647                           ;24c02.c: 152: send_byte(data);
  6648  0AB4  0876               	movf	write_24c02@data,w
  6649  0AB5  259E  3188         	fcall	_send_byte
  6650                           
  6651                           ;24c02.c: 153: stop_i2c();
  6652  0AB7  23A0  3188         	fcall	_stop_i2c
  6653                           
  6654                           ;24c02.c: 154: delay_ms(0x05);
  6655  0AB9  3005               	movlw	5
  6656  0ABA  00F0               	movwf	delay_ms@count
  6657  0ABB  01F1               	clrf	delay_ms@count+1
  6658  0ABC  2AC7               	ljmp	l5026
  6659  0ABD                     __end_of_write_24c02:	
  6660  0ABD                     __ptext56:	
  6661 ;; *************** function _read_eeprom *****************
  6662 ;; Defined at:
  6663 ;;		line 176 in file "D:\WORKproject\AJ-BLE-IC\source\driver\24c02.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  address         1    wreg     unsigned char 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  address         1    0[COMMON] unsigned char 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  1    wreg      unsigned char 
  6670 ;; Registers used:
  6671 ;;		wreg
  6672 ;; Tracked objects:
  6673 ;;		On entry : 1C/0
  6674 ;;		On exit  : 1F/3
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;Total ram usage:        1 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    1
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_handle_config
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _read_eeprom
  6693  0ABD                     _read_eeprom:	
  6694                           
  6695                           ;incstack = 0
  6696                           ; Regs used in _read_eeprom: [wreg]
  6697                           ;read_eeprom@address stored from wreg
  6698  0ABD  00F0               	movwf	read_eeprom@address
  6699                           
  6700                           ;24c02.c: 180: GIE = 0x00;
  6701  0ABE  138B               	bcf	11,7	;volatile
  6702                           
  6703                           ;24c02.c: 181: EEADR = address;
  6704  0ABF  0023               	movlb	3	; select bank3
  6705  0AC0  0091               	movwf	17	;volatile
  6706  0AC1  0192               	clrf	18	;volatile
  6707                           
  6708                           ;24c02.c: 182: EEPGD = 0x00;
  6709  0AC2  1395               	bcf	21,7	;volsfr
  6710                           
  6711                           ;24c02.c: 183: RD = 0x01;
  6712  0AC3  1415               	bsf	21,0	;volsfr
  6713                           
  6714                           ;24c02.c: 184: GIE = 0x01;
  6715  0AC4  178B               	bsf	11,7	;volatile
  6716                           
  6717                           ;24c02.c: 186: return EEDATA;
  6718  0AC5  0813               	movf	19,w	;volatile
  6719  0AC6  0008               	return
  6720  0AC7                     __end_of_read_eeprom:	
  6721  0AC7                     __ptext54:	
  6722 ;; *************** function _delay_ms *****************
  6723 ;; Defined at:
  6724 ;;		line 70 in file "D:\WORKproject\AJ-BLE-IC\source\driver\delay.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;  count           2    0[COMMON] unsigned short 
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;  j               2    4[COMMON] unsigned short 
  6729 ;;  i               2    2[COMMON] unsigned short 
  6730 ;; Return value:  Size  Location     Type
  6731 ;;		None               void
  6732 ;; Registers used:
  6733 ;;		wreg, status,2, status,0
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6739 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;Total ram usage:        6 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    1
  6746 ;; This function calls:
  6747 ;;		Nothing
  6748 ;; This function is called by:
  6749 ;;		_handle_config
  6750 ;;		_deal_floor
  6751 ;;		_write_24c02
  6752 ;;		_handle_beep
  6753 ;;		_main
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           
  6758                           ;psect for function _delay_ms
  6759  0AC7                     _delay_ms:	
  6760  0AC7                     l5026:	
  6761                           ;incstack = 0
  6762                           ; Regs used in _delay_ms: [wreg+status,2+status,0]
  6763                           
  6764                           
  6765                           ;delay.c: 74: WORD i, j;
  6766                           ;delay.c: 76: for (i = 0; i < count; i++)
  6767  0AC7  01F2               	clrf	delay_ms@i
  6768  0AC8  01F3               	clrf	delay_ms@i+1
  6769  0AC9                     l5040:	
  6770  0AC9  0871               	movf	delay_ms@count+1,w
  6771  0ACA  0273               	subwf	delay_ms@i+1,w
  6772  0ACB  1D03               	skipz
  6773  0ACC  2ACF               	goto	u4675
  6774  0ACD  0870               	movf	delay_ms@count,w
  6775  0ACE  0272               	subwf	delay_ms@i,w
  6776  0ACF                     u4675:	
  6777  0ACF  1803               	btfsc	3,0
  6778  0AD0  0008               	return
  6779                           
  6780                           ;delay.c: 77: {
  6781                           ;delay.c: 78: for (j = 0; j < 150; j++)
  6782  0AD1  01F4               	clrf	delay_ms@j
  6783  0AD2  01F5               	clrf	delay_ms@j+1
  6784  0AD3                     l686:	
  6785  0AD3  0064               	clrwdt	;# 
  6786  0AD4  0AF4               	incf	delay_ms@j,f
  6787  0AD5  1903               	skipnz
  6788  0AD6  0AF5               	incf	delay_ms@j+1,f
  6789  0AD7  3000               	movlw	0
  6790  0AD8  0275               	subwf	delay_ms@j+1,w
  6791  0AD9  3096               	movlw	150
  6792  0ADA  1903               	skipnz
  6793  0ADB  0274               	subwf	delay_ms@j,w
  6794  0ADC  1C03               	skipc
  6795  0ADD  2AD3               	goto	l686
  6796  0ADE  0AF2               	incf	delay_ms@i,f
  6797  0ADF  1903               	skipnz
  6798  0AE0  0AF3               	incf	delay_ms@i+1,f
  6799  0AE1  2AC9               	goto	l5040
  6800  0AE2                     __end_of_delay_ms:	
  6801  0AE2                     __ptext65:	
  6802 ;; *************** function _ds1302_get_time *****************
  6803 ;; Defined at:
  6804 ;;		line 173 in file "D:\WORKproject\AJ-BLE-IC\source\driver\ds1302.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;		None
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;		None
  6809 ;; Return value:  Size  Location     Type
  6810 ;;		None               void
  6811 ;; Registers used:
  6812 ;;		wreg, status,2, status,0, pclath, cstack
  6813 ;; Tracked objects:
  6814 ;;		On entry : 1E/1
  6815 ;;		On exit  : 1F/1
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;Total ram usage:        0 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    3
  6825 ;; This function calls:
  6826 ;;		_ds1302_read
  6827 ;; This function is called by:
  6828 ;;		_handle_config
  6829 ;;		_read_card_content
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           
  6834                           ;psect for function _ds1302_get_time
  6835  0AE2                     _ds1302_get_time:	
  6836                           
  6837                           ;ds1302.c: 177: year = ds1302_read(0x8D);
  6838                           
  6839                           ;incstack = 0
  6840                           ; Regs used in _ds1302_get_time: [wreg+status,2+status,0+pclath+cstack]
  6841  0AE2  308D               	movlw	141
  6842  0AE3  2306  3188         	fcall	_ds1302_read
  6843  0AE5  0020               	movlb	0	; select bank0
  6844  0AE6  00EF               	movwf	_year
  6845                           
  6846                           ;ds1302.c: 178: month = ds1302_read(0x89);
  6847  0AE7  3089               	movlw	137
  6848  0AE8  2306  3188         	fcall	_ds1302_read
  6849  0AEA  0020               	movlb	0	; select bank0
  6850  0AEB  00EE               	movwf	_month
  6851                           
  6852                           ;ds1302.c: 179: day = ds1302_read(0x87);
  6853  0AEC  3087               	movlw	135
  6854  0AED  2306  3188         	fcall	_ds1302_read
  6855  0AEF  0020               	movlb	0	; select bank0
  6856  0AF0  00EC               	movwf	_day
  6857                           
  6858                           ;ds1302.c: 180: hour = ds1302_read(0x85);
  6859  0AF1  3085               	movlw	133
  6860  0AF2  2306  3188         	fcall	_ds1302_read
  6861  0AF4  0020               	movlb	0	; select bank0
  6862  0AF5  00ED               	movwf	_hour
  6863  0AF6  3083               	movlw	131
  6864                           
  6865                           ;ds1302.c: 181: hour &= 0x7F;
  6866  0AF7  13ED               	bcf	_hour,7
  6867                           
  6868                           ;ds1302.c: 182: minute = ds1302_read(0x83);
  6869  0AF8  2306  3188         	fcall	_ds1302_read
  6870  0AFA  0021               	movlb	1	; select bank1
  6871  0AFB  00E6               	movwf	_minute^(0+128)
  6872                           
  6873                           ;ds1302.c: 183: second = ds1302_read(0x81);
  6874  0AFC  3081               	movlw	129
  6875  0AFD  2306  3188         	fcall	_ds1302_read
  6876  0AFF  0021               	movlb	1	; select bank1
  6877  0B00  00E7               	movwf	_second^(0+128)
  6878                           
  6879                           ;ds1302.c: 184: week = ds1302_read(0x8B);
  6880  0B01  308B               	movlw	139
  6881  0B02  2306               	fcall	_ds1302_read
  6882  0B03  0021               	movlb	1	; select bank1
  6883  0B04  00E8               	movwf	_week^(0+128)
  6884  0B05  0008               	return
  6885  0B06                     __end_of_ds1302_get_time:	
  6886  0B06                     __ptext66:	
  6887 ;; *************** function _ds1302_read *****************
  6888 ;; Defined at:
  6889 ;;		line 124 in file "D:\WORKproject\AJ-BLE-IC\source\driver\ds1302.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;  address         1    wreg     unsigned char 
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;  address         1    2[COMMON] unsigned char 
  6894 ;;  temp            1    3[COMMON] unsigned char 
  6895 ;; Return value:  Size  Location     Type
  6896 ;;                  1    wreg      unsigned char 
  6897 ;; Registers used:
  6898 ;;		wreg, status,2, status,0, pclath, cstack
  6899 ;; Tracked objects:
  6900 ;;		On entry : 1E/1
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;Total ram usage:        2 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; Hardware stack levels required when called:    2
  6911 ;; This function calls:
  6912 ;;		_ds1302_read_byte
  6913 ;;		_ds1302_write_byte
  6914 ;; This function is called by:
  6915 ;;		_ds1302_get_time
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           
  6920                           ;psect for function _ds1302_read
  6921  0B06                     _ds1302_read:	
  6922                           
  6923                           ;incstack = 0
  6924                           ; Regs used in _ds1302_read: [wreg+status,2+status,0+pclath+cstack]
  6925                           ;ds1302_read@address stored from wreg
  6926  0B06  00F2               	movwf	ds1302_read@address
  6927                           
  6928                           ;ds1302.c: 128: BYTE temp;
  6929                           ;ds1302.c: 130: (RC0) = 0x00;
  6930  0B07  0020               	movlb	0	; select bank0
  6931  0B08  100E               	bcf	14,0	;volatile
  6932                           
  6933                           ;ds1302.c: 131: __nop();
  6934  0B09  0000               	nop
  6935                           
  6936                           ;ds1302.c: 132: __nop();
  6937  0B0A  0000               	nop
  6938                           
  6939                           ;ds1302.c: 133: (RC2) = 0x00;
  6940  0B0B  0020               	movlb	0	; select bank0
  6941  0B0C  110E               	bcf	14,2	;volatile
  6942                           
  6943                           ;ds1302.c: 134: __nop();
  6944  0B0D  0000               	nop
  6945                           
  6946                           ;ds1302.c: 135: __nop();
  6947  0B0E  0000               	nop
  6948                           
  6949                           ;ds1302.c: 136: (RC0) = 0x01;
  6950  0B0F  0020               	movlb	0	; select bank0
  6951  0B10  140E               	bsf	14,0	;volatile
  6952                           
  6953                           ;ds1302.c: 137: __nop();
  6954  0B11  0000               	nop
  6955                           
  6956                           ;ds1302.c: 138: __nop();
  6957  0B12  0000               	nop
  6958                           
  6959                           ;ds1302.c: 139: ds1302_write_byte(address);
  6960  0B13  0872               	movf	ds1302_read@address,w
  6961  0B14  231F  3188         	fcall	_ds1302_write_byte
  6962                           
  6963                           ;ds1302.c: 140: temp = ds1302_read_byte();
  6964  0B16  23B1               	fcall	_ds1302_read_byte
  6965  0B17  00F3               	movwf	ds1302_read@temp
  6966                           
  6967                           ;ds1302.c: 141: (RC0) = 0x00;
  6968  0B18  0020               	movlb	0	; select bank0
  6969  0B19  100E               	bcf	14,0	;volatile
  6970                           
  6971                           ;ds1302.c: 142: (RC2) = 0x01;
  6972  0B1A  150E               	bsf	14,2	;volatile
  6973                           
  6974                           ;ds1302.c: 143: __nop();
  6975  0B1B  0000               	nop
  6976                           
  6977                           ;ds1302.c: 144: __nop();
  6978  0B1C  0000               	nop
  6979                           
  6980                           ;ds1302.c: 146: return temp;
  6981  0B1D  0873               	movf	ds1302_read@temp,w
  6982  0B1E  0008               	return
  6983  0B1F                     __end_of_ds1302_read:	
  6984  0B1F                     __ptext67:	
  6985 ;; *************** function _ds1302_write_byte *****************
  6986 ;; Defined at:
  6987 ;;		line 66 in file "D:\WORKproject\AJ-BLE-IC\source\driver\ds1302.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  data            1    wreg     unsigned char 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;  data            1    0[COMMON] unsigned char 
  6992 ;;  i               1    1[COMMON] unsigned char 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;		None               void
  6995 ;; Registers used:
  6996 ;;		wreg, status,2, status,0
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/1
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;Total ram usage:        2 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    1
  7009 ;; This function calls:
  7010 ;;		Nothing
  7011 ;; This function is called by:
  7012 ;;		_ds1302_read
  7013 ;;		_ds1302_write
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           
  7018                           ;psect for function _ds1302_write_byte
  7019  0B1F                     _ds1302_write_byte:	
  7020                           
  7021                           ;incstack = 0
  7022                           ; Regs used in _ds1302_write_byte: [wreg+status,2+status,0]
  7023                           ;ds1302_write_byte@data stored from wreg
  7024  0B1F  00F0               	movwf	ds1302_write_byte@data
  7025                           
  7026                           ;ds1302.c: 70: BYTE i;
  7027                           ;ds1302.c: 72: for (i = 8; i > 0; i--)
  7028  0B20  3008               	movlw	8
  7029  0B21  00F1               	movwf	ds1302_write_byte@i
  7030  0B22                     l719:	
  7031                           
  7032                           ;ds1302.c: 73: {
  7033                           ;ds1302.c: 74: if (data & 0x01)
  7034  0B22  1C70               	btfss	ds1302_write_byte@data,0
  7035  0B23  2B29               	goto	l721
  7036                           
  7037                           ;ds1302.c: 75: {
  7038                           ;ds1302.c: 76: (RC1) = 0x01;
  7039  0B24  0020               	movlb	0	; select bank0
  7040  0B25  148E               	bsf	14,1	;volatile
  7041                           
  7042                           ;ds1302.c: 77: __nop();
  7043  0B26  0000               	nop
  7044                           
  7045                           ;ds1302.c: 78: __nop();
  7046  0B27  0000               	nop
  7047                           
  7048                           ;ds1302.c: 79: }
  7049  0B28  2B2D               	goto	l722
  7050  0B29                     l721:	
  7051                           
  7052                           ;ds1302.c: 80: else
  7053                           ;ds1302.c: 81: {
  7054                           ;ds1302.c: 82: (RC1) = 0x00;
  7055  0B29  0020               	movlb	0	; select bank0
  7056  0B2A  108E               	bcf	14,1	;volatile
  7057                           
  7058                           ;ds1302.c: 83: __nop();
  7059  0B2B  0000               	nop
  7060                           
  7061                           ;ds1302.c: 84: __nop();
  7062  0B2C  0000               	nop
  7063  0B2D                     l722:	
  7064                           
  7065                           ;ds1302.c: 85: }
  7066                           ;ds1302.c: 86: (RC2) = 0x00;
  7067  0B2D  0020               	movlb	0	; select bank0
  7068  0B2E  110E               	bcf	14,2	;volatile
  7069                           
  7070                           ;ds1302.c: 87: __nop();
  7071  0B2F  0000               	nop
  7072                           
  7073                           ;ds1302.c: 88: __nop();
  7074  0B30  0000               	nop
  7075                           
  7076                           ;ds1302.c: 89: (RC2) = 0x01;
  7077  0B31  0020               	movlb	0	; select bank0
  7078  0B32  150E               	bsf	14,2	;volatile
  7079                           
  7080                           ;ds1302.c: 90: __nop();
  7081  0B33  0000               	nop
  7082                           
  7083                           ;ds1302.c: 91: __nop();
  7084  0B34  0000               	nop
  7085                           
  7086                           ;ds1302.c: 92: data = data >> 1;
  7087  0B35  36F0               	lsrf	ds1302_write_byte@data,f
  7088  0B36  0BF1               	decfsz	ds1302_write_byte@i,f
  7089  0B37  2B22               	goto	l719
  7090  0B38  0008               	return
  7091  0B39                     __end_of_ds1302_write_byte:	
  7092  0B39                     __ptext63:	
  7093 ;; *************** function _ds1302_set_time *****************
  7094 ;; Defined at:
  7095 ;;		line 188 in file "D:\WORKproject\AJ-BLE-IC\source\driver\ds1302.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;		None
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;		None
  7100 ;; Return value:  Size  Location     Type
  7101 ;;		None               void
  7102 ;; Registers used:
  7103 ;;		wreg, status,2, status,0, pclath, cstack
  7104 ;; Tracked objects:
  7105 ;;		On entry : 1F/1
  7106 ;;		On exit  : 0/0
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;Total ram usage:        0 bytes
  7114 ;; Hardware stack levels used:    1
  7115 ;; Hardware stack levels required when called:    3
  7116 ;; This function calls:
  7117 ;;		_ds1302_write
  7118 ;; This function is called by:
  7119 ;;		_handle_config
  7120 ;;		_read_card_content
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           
  7125                           ;psect for function _ds1302_set_time
  7126  0B39                     _ds1302_set_time:	
  7127                           
  7128                           ;incstack = 0
  7129                           ; Regs used in _ds1302_set_time: [wreg+status,2+status,0+pclath+cstack]
  7130  0B39  308E               	movlw	142
  7131                           
  7132                           ;ds1302.c: 193: ds1302_write(0x8E, 0x00);
  7133  0B3A  01F2               	clrf	ds1302_write@data
  7134  0B3B  236E  3188         	fcall	_ds1302_write
  7135                           
  7136                           ;ds1302.c: 196: ds1302_write(0x80, second & 0x7F);
  7137  0B3D  0021               	movlb	1	; select bank1
  7138  0B3E  0867               	movf	_second^(0+128),w
  7139  0B3F  00F2               	movwf	ds1302_write@data
  7140  0B40  3080               	movlw	128
  7141  0B41  13F2               	bcf	ds1302_write@data,7
  7142  0B42  236E  3188         	fcall	_ds1302_write
  7143                           
  7144                           ;ds1302.c: 197: ds1302_write(0x82, minute );
  7145  0B44  0021               	movlb	1	; select bank1
  7146  0B45  0866               	movf	_minute^(0+128),w
  7147  0B46  00F2               	movwf	ds1302_write@data
  7148  0B47  3082               	movlw	130
  7149  0B48  236E  3188         	fcall	_ds1302_write
  7150                           
  7151                           ;ds1302.c: 198: ds1302_write(0x84, hour & 0x3F);
  7152  0B4A  0020               	movlb	0	; select bank0
  7153  0B4B  086D               	movf	_hour,w
  7154  0B4C  00F2               	movwf	ds1302_write@data
  7155  0B4D  303F               	movlw	63
  7156  0B4E  05F2               	andwf	ds1302_write@data,f
  7157  0B4F  3084               	movlw	132
  7158  0B50  236E  3188         	fcall	_ds1302_write
  7159                           
  7160                           ;ds1302.c: 199: ds1302_write(0x86, day);
  7161  0B52  0020               	movlb	0	; select bank0
  7162  0B53  086C               	movf	_day,w
  7163  0B54  00F2               	movwf	ds1302_write@data
  7164  0B55  3086               	movlw	134
  7165  0B56  236E  3188         	fcall	_ds1302_write
  7166                           
  7167                           ;ds1302.c: 200: ds1302_write(0x88, month);
  7168  0B58  0020               	movlb	0	; select bank0
  7169  0B59  086E               	movf	_month,w
  7170  0B5A  00F2               	movwf	ds1302_write@data
  7171  0B5B  3088               	movlw	136
  7172  0B5C  236E  3188         	fcall	_ds1302_write
  7173                           
  7174                           ;ds1302.c: 201: ds1302_write(0x8C, year);
  7175  0B5E  0020               	movlb	0	; select bank0
  7176  0B5F  086F               	movf	_year,w
  7177  0B60  00F2               	movwf	ds1302_write@data
  7178  0B61  308C               	movlw	140
  7179  0B62  236E  3188         	fcall	_ds1302_write
  7180                           
  7181                           ;ds1302.c: 202: ds1302_write(0x8A, week);
  7182  0B64  0021               	movlb	1	; select bank1
  7183  0B65  0868               	movf	_week^(0+128),w
  7184  0B66  00F2               	movwf	ds1302_write@data
  7185  0B67  308A               	movlw	138
  7186  0B68  236E  3188         	fcall	_ds1302_write
  7187                           
  7188                           ;ds1302.c: 205: ds1302_write(0x8E, 0x80);
  7189  0B6A  3080               	movlw	128
  7190  0B6B  00F2               	movwf	ds1302_write@data
  7191  0B6C  308E               	movlw	142
  7192  0B6D  2B6E               	ljmp	_ds1302_write
  7193  0B6E                     __end_of_ds1302_set_time:	
  7194  0B6E                     __ptext64:	
  7195 ;; *************** function _ds1302_write *****************
  7196 ;; Defined at:
  7197 ;;		line 150 in file "D:\WORKproject\AJ-BLE-IC\source\driver\ds1302.c"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;  address         1    wreg     unsigned char 
  7200 ;;  data            1    2[COMMON] unsigned char 
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;  address         1    3[COMMON] unsigned char 
  7203 ;; Return value:  Size  Location     Type
  7204 ;;		None               void
  7205 ;; Registers used:
  7206 ;;		wreg, status,2, status,0, pclath, cstack
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/1
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7212 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7213 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7215 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;Total ram usage:        2 bytes
  7217 ;; Hardware stack levels used:    1
  7218 ;; Hardware stack levels required when called:    2
  7219 ;; This function calls:
  7220 ;;		_ds1302_write_byte
  7221 ;; This function is called by:
  7222 ;;		_ds1302_set_time
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           
  7227                           ;psect for function _ds1302_write
  7228  0B6E                     _ds1302_write:	
  7229                           
  7230                           ;incstack = 0
  7231                           ; Regs used in _ds1302_write: [wreg+status,2+status,0+pclath+cstack]
  7232                           ;ds1302_write@address stored from wreg
  7233  0B6E  00F3               	movwf	ds1302_write@address
  7234                           
  7235                           ;ds1302.c: 155: (RC0) = 0x00;
  7236  0B6F  0020               	movlb	0	; select bank0
  7237  0B70  100E               	bcf	14,0	;volatile
  7238                           
  7239                           ;ds1302.c: 156: __nop();
  7240  0B71  0000               	nop
  7241                           
  7242                           ;ds1302.c: 157: __nop();
  7243  0B72  0000               	nop
  7244                           
  7245                           ;ds1302.c: 158: (RC2) = 0x00;
  7246  0B73  0020               	movlb	0	; select bank0
  7247  0B74  110E               	bcf	14,2	;volatile
  7248                           
  7249                           ;ds1302.c: 159: __nop();
  7250  0B75  0000               	nop
  7251                           
  7252                           ;ds1302.c: 160: __nop();
  7253  0B76  0000               	nop
  7254                           
  7255                           ;ds1302.c: 161: (RC0) = 0x01;
  7256  0B77  0020               	movlb	0	; select bank0
  7257  0B78  140E               	bsf	14,0	;volatile
  7258                           
  7259                           ;ds1302.c: 162: __nop();
  7260  0B79  0000               	nop
  7261                           
  7262                           ;ds1302.c: 163: __nop();
  7263  0B7A  0000               	nop
  7264                           
  7265                           ;ds1302.c: 164: ds1302_write_byte(address);
  7266  0B7B  0873               	movf	ds1302_write@address,w
  7267  0B7C  231F  3188         	fcall	_ds1302_write_byte
  7268                           
  7269                           ;ds1302.c: 165: ds1302_write_byte(data);
  7270  0B7E  0872               	movf	ds1302_write@data,w
  7271  0B7F  231F               	fcall	_ds1302_write_byte
  7272                           
  7273                           ;ds1302.c: 166: (RC0) = 0x00;
  7274  0B80  0020               	movlb	0	; select bank0
  7275  0B81  100E               	bcf	14,0	;volatile
  7276                           
  7277                           ;ds1302.c: 167: (RC2) = 0x01;
  7278  0B82  150E               	bsf	14,2	;volatile
  7279                           
  7280                           ;ds1302.c: 168: __nop();
  7281  0B83  0000               	nop
  7282                           
  7283                           ;ds1302.c: 169: __nop();
  7284  0B84  0000               	nop
  7285  0B85  0008               	return
  7286  0B86                     __end_of_ds1302_write:	
  7287  0B86                     __ptext62:	
  7288 ;; *************** function _find_project_key *****************
  7289 ;; Defined at:
  7290 ;;		line 51 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_config.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;  data            1    wreg     unsigned char 
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;  data            1    0[COMMON] unsigned char 
  7295 ;;  i               2    1[COMMON] unsigned short 
  7296 ;; Return value:  Size  Location     Type
  7297 ;;                  1    wreg      unsigned char 
  7298 ;; Registers used:
  7299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7300 ;; Tracked objects:
  7301 ;;		On entry : 0/0
  7302 ;;		On exit  : 0/0
  7303 ;;		Unchanged: 0/0
  7304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7306 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7308 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7309 ;;Total ram usage:        3 bytes
  7310 ;; Hardware stack levels used:    1
  7311 ;; Hardware stack levels required when called:    1
  7312 ;; This function calls:
  7313 ;;		Nothing
  7314 ;; This function is called by:
  7315 ;;		_handle_config
  7316 ;; This function uses a non-reentrant model
  7317 ;;
  7318                           
  7319                           
  7320                           ;psect for function _find_project_key
  7321  0B86                     _find_project_key:	
  7322                           
  7323                           ;incstack = 0
  7324                           ; Regs used in _find_project_key: [wreg-fsr0h+status,2+status,0+pclath]
  7325                           ;find_project_key@data stored from wreg
  7326  0B86  00F0               	movwf	find_project_key@data
  7327                           
  7328                           ;handle_config.c: 55: WORD i;
  7329                           ;handle_config.c: 57: for (i = 0x00; i < 0x100; i++)
  7330  0B87  01F1               	clrf	find_project_key@i
  7331  0B88  01F2               	clrf	find_project_key@i+1
  7332  0B89                     l4718:	
  7333                           
  7334                           ;handle_config.c: 58: {
  7335                           ;handle_config.c: 59: if (data == PWD_TABLE[i])
  7336  0B89  3001               	movlw	low (_PWD_TABLE| (0+32768))
  7337  0B8A  0771               	addwf	find_project_key@i,w
  7338  0B8B  0084               	movwf	4
  7339  0B8C  3098               	movlw	high (_PWD_TABLE| (0+32768))
  7340  0B8D  3D72               	addwfc	find_project_key@i+1,w
  7341  0B8E  0085               	movwf	5
  7342  0B8F  0800               	movf	0,w	;code access
  7343  0B90  0670               	xorwf	find_project_key@data,w
  7344  0B91  1D03               	skipz
  7345  0B92  2B95               	goto	l4724
  7346                           
  7347                           ;handle_config.c: 60: {
  7348                           ;handle_config.c: 61: return i;
  7349  0B93  0871               	movf	find_project_key@i,w
  7350  0B94  0008               	return
  7351  0B95                     l4724:	
  7352  0B95  0AF1               	incf	find_project_key@i,f
  7353  0B96  1903               	skipnz
  7354  0B97  0AF2               	incf	find_project_key@i+1,f
  7355  0B98  3001               	movlw	1
  7356  0B99  0272               	subwf	find_project_key@i+1,w
  7357  0B9A  3000               	movlw	0
  7358  0B9B  1903               	skipnz
  7359  0B9C  0271               	subwf	find_project_key@i,w
  7360  0B9D  1803               	btfsc	3,0
  7361                           
  7362                           ;handle_config.c: 62: }
  7363                           ;handle_config.c: 63: }
  7364                           ;handle_config.c: 65: return 0x00;
  7365  0B9E  3400               	retlw	0
  7366  0B9F  2B89               	goto	l4718
  7367  0BA0                     __end_of_find_project_key:	
  7368  0BA0                     __ptext58:	
  7369 ;; *************** function _stop_i2c *****************
  7370 ;; Defined at:
  7371 ;;		line 72 in file "D:\WORKproject\AJ-BLE-IC\source\driver\24c02.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;		None
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;		None
  7376 ;; Return value:  Size  Location     Type
  7377 ;;		None               void
  7378 ;; Registers used:
  7379 ;;		None
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;Total ram usage:        0 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    1
  7392 ;; This function calls:
  7393 ;;		Nothing
  7394 ;; This function is called by:
  7395 ;;		_write_24c02
  7396 ;;		_read_24c02
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           
  7401                           ;psect for function _stop_i2c
  7402  0BA0                     _stop_i2c:	
  7403                           
  7404                           ;24c02.c: 76: RC4 = 0x00;
  7405                           
  7406                           ;incstack = 0
  7407                           ; Regs used in _stop_i2c: []
  7408  0BA0  0020               	movlb	0	; select bank0
  7409  0BA1  120E               	bcf	14,4	;volatile
  7410                           
  7411                           ;24c02.c: 77: __nop();
  7412  0BA2  0000               	nop
  7413                           
  7414                           ;24c02.c: 78: RC3 = 0x01;
  7415  0BA3  0020               	movlb	0	; select bank0
  7416  0BA4  158E               	bsf	14,3	;volatile
  7417                           
  7418                           ;24c02.c: 79: __nop();__nop();__nop();__nop();__nop();
  7419  0BA5  0000               	nop
  7420  0BA6  0000               	nop
  7421  0BA7  0000               	nop
  7422  0BA8  0000               	nop
  7423  0BA9  0000               	nop
  7424                           
  7425                           ;24c02.c: 80: RC4 = 0x01;
  7426  0BAA  0020               	movlb	0	; select bank0
  7427  0BAB  160E               	bsf	14,4	;volatile
  7428                           
  7429                           ;24c02.c: 81: __nop();__nop();__nop();__nop();
  7430  0BAC  0000               	nop
  7431  0BAD  0000               	nop
  7432  0BAE  0000               	nop
  7433  0BAF  0000               	nop
  7434  0BB0  0008               	return
  7435  0BB1                     __end_of_stop_i2c:	
  7436  0BB1                     __ptext68:	
  7437 ;; *************** function _ds1302_read_byte *****************
  7438 ;; Defined at:
  7439 ;;		line 97 in file "D:\WORKproject\AJ-BLE-IC\source\driver\ds1302.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;		None
  7442 ;; Auto vars:     Size  Location     Type
  7443 ;;  i               1    1[COMMON] unsigned char 
  7444 ;;  data            1    0[COMMON] unsigned char 
  7445 ;; Return value:  Size  Location     Type
  7446 ;;                  1    wreg      unsigned char 
  7447 ;; Registers used:
  7448 ;;		wreg, status,2, status,0
  7449 ;; Tracked objects:
  7450 ;;		On entry : 0/1
  7451 ;;		On exit  : 1F/1
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;Total ram usage:        2 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:    1
  7461 ;; This function calls:
  7462 ;;		Nothing
  7463 ;; This function is called by:
  7464 ;;		_ds1302_read
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           
  7469                           ;psect for function _ds1302_read_byte
  7470  0BB1                     _ds1302_read_byte:	
  7471                           
  7472                           ;ds1302.c: 101: BYTE i, data = 0x00;
  7473                           
  7474                           ;incstack = 0
  7475                           ; Regs used in _ds1302_read_byte: [wreg+status,2+status,0]
  7476  0BB1  01F0               	clrf	ds1302_read_byte@data
  7477                           
  7478                           ;ds1302.c: 103: (TRISCbits.TRISC1) = 0x01;
  7479  0BB2  0021               	movlb	1	; select bank1
  7480  0BB3  148E               	bsf	14,1	;volatile
  7481                           
  7482                           ;ds1302.c: 104: for (i = 0x00; i < 0x08; i++)
  7483  0BB4  01F1               	clrf	ds1302_read_byte@i
  7484  0BB5                     l726:	
  7485                           
  7486                           ;ds1302.c: 105: {
  7487                           ;ds1302.c: 106: data = data >> 0x01;
  7488  0BB5  36F0               	lsrf	ds1302_read_byte@data,f
  7489                           
  7490                           ;ds1302.c: 107: (RC2) = 0x01;
  7491  0BB6  0020               	movlb	0	; select bank0
  7492  0BB7  150E               	bsf	14,2	;volatile
  7493                           
  7494                           ;ds1302.c: 108: __nop();
  7495  0BB8  0000               	nop
  7496                           
  7497                           ;ds1302.c: 109: __nop();
  7498  0BB9  0000               	nop
  7499                           
  7500                           ;ds1302.c: 110: (RC2) = 0x00;
  7501  0BBA  0020               	movlb	0	; select bank0
  7502  0BBB  110E               	bcf	14,2	;volatile
  7503                           
  7504                           ;ds1302.c: 111: __nop();
  7505  0BBC  0000               	nop
  7506                           
  7507                           ;ds1302.c: 112: __nop();
  7508  0BBD  0000               	nop
  7509                           
  7510                           ;ds1302.c: 113: if ((RC1))
  7511  0BBE  0020               	movlb	0	; select bank0
  7512  0BBF  188E               	btfsc	14,1	;volatile
  7513                           
  7514                           ;ds1302.c: 114: {
  7515                           ;ds1302.c: 115: data = data | 0x80;
  7516  0BC0  17F0               	bsf	ds1302_read_byte@data,7
  7517  0BC1  3008               	movlw	8
  7518  0BC2  0AF1               	incf	ds1302_read_byte@i,f
  7519  0BC3  0271               	subwf	ds1302_read_byte@i,w
  7520  0BC4  1C03               	skipc
  7521  0BC5  2BB5               	goto	l726
  7522                           
  7523                           ;ds1302.c: 116: }
  7524                           ;ds1302.c: 117: }
  7525                           ;ds1302.c: 118: (TRISCbits.TRISC1) = 0x00;
  7526  0BC6  0021               	movlb	1	; select bank1
  7527  0BC7  108E               	bcf	14,1	;volatile
  7528                           
  7529                           ;ds1302.c: 120: return data;
  7530  0BC8  0870               	movf	ds1302_read_byte@data,w
  7531  0BC9  0008               	return
  7532  0BCA                     __end_of_ds1302_read_byte:	
  7533  0BCA                     __ptext20:	
  7534 ;; *************** function _read_card_content *****************
  7535 ;; Defined at:
  7536 ;;		line 144 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_ic_card.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;		None
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;  user_count      2   30[BANK0 ] unsigned short 
  7541 ;;  data           16   14[BANK0 ] unsigned char [16]
  7542 ;;  ret             1   33[BANK0 ] unsigned char 
  7543 ;;  i               1   32[BANK0 ] unsigned char 
  7544 ;; Return value:  Size  Location     Type
  7545 ;;                  1    wreg      unsigned char 
  7546 ;; Registers used:
  7547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7548 ;; Tracked objects:
  7549 ;;		On entry : 0/0
  7550 ;;		On exit  : 1E/0
  7551 ;;		Unchanged: 0/0
  7552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7556 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7557 ;;Total ram usage:       21 bytes
  7558 ;; Hardware stack levels used:    1
  7559 ;; Hardware stack levels required when called:    7
  7560 ;; This function calls:
  7561 ;;		_Mf500PiccRead
  7562 ;;		_Mf500PiccWrite
  7563 ;;		_check_user_card
  7564 ;;		_checksum
  7565 ;;		_deal_floor
  7566 ;;		_ds1302_get_time
  7567 ;;		_ds1302_set_time
  7568 ;;		_read_24c02
  7569 ;;		_uart1_send_byte
  7570 ;;		_write_24c02
  7571 ;; This function is called by:
  7572 ;;		_handle_ic_card
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           
  7577                           ;psect for function _read_card_content
  7578  0BCA                     _read_card_content:	
  7579                           
  7580                           ;handle_ic_card.c: 149: BYTE ret = 0x00;
  7581                           
  7582                           ;incstack = 0
  7583                           ; Regs used in _read_card_content: [allreg]
  7584  0BCA  0020               	movlb	0	; select bank0
  7585  0BCB  302E               	movlw	low read_card_content@data
  7586  0BCC  01C1               	clrf	read_card_content@ret
  7587                           
  7588                           ;handle_ic_card.c: 150: BYTE data[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      +                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  7589  0BCD  0086               	movwf	6
  7590  0BCE  3000               	movlw	high read_card_content@data
  7591  0BCF  0087               	movwf	7
  7592  0BD0  3010               	movlw	16
  7593  0BD1  00AD               	movwf	??_read_card_content
  7594  0BD2  3000               	movlw	0
  7595  0BD3                     u6600:	
  7596  0BD3  001E               	movwi fsr1++
  7597  0BD4  0BAD               	decfsz	??_read_card_content,f
  7598  0BD5  2BD3               	goto	u6600
  7599                           
  7600                           ;handle_ic_card.c: 220: ret = Mf500PiccRead(0x04 * sector_number + 0x00, data);
  7601  0BD6  302E               	movlw	read_card_content@data& (0+255)
  7602  0BD7  00FB               	movwf	Mf500PiccRead@data1
  7603  0BD8  0860               	movf	_sector_number,w
  7604  0BD9  0709               	addwf	9,w
  7605  0BDA  0709               	addwf	9,w
  7606  0BDB  260C  3188         	fcall	_Mf500PiccRead
  7607  0BDD  00C1               	movwf	read_card_content@ret
  7608                           
  7609                           ;handle_ic_card.c: 221: if (ret == 0)
  7610  0BDE  08C1               	movf	read_card_content@ret,f
  7611  0BDF  1D03               	skipz
  7612  0BE0  2C0C               	goto	l5824
  7613                           
  7614                           ;handle_ic_card.c: 222: {
  7615                           ;handle_ic_card.c: 241: if (data[15] == checksum(data, 15))
  7616  0BE1  300F               	movlw	15
  7617  0BE2  00F0               	movwf	checksum@length
  7618  0BE3  302E               	movlw	read_card_content@data& (0+255)
  7619  0BE4  25DE  3188         	fcall	_checksum
  7620  0BE6  063D               	xorwf	read_card_content@data+15,w
  7621  0BE7  1D03               	skipz
  7622  0BE8  2C0C               	goto	l5824
  7623                           
  7624                           ;handle_ic_card.c: 242: {
  7625                           ;handle_ic_card.c: 243: if (data[0] == 0xA0)
  7626  0BE9  082E               	movf	read_card_content@data,w
  7627  0BEA  3AA0               	xorlw	160
  7628  0BEB  1D03               	skipz
  7629  0BEC  2C28               	goto	l5840
  7630                           
  7631                           ;handle_ic_card.c: 244: {
  7632                           ;handle_ic_card.c: 245: card_type = 0x03;
  7633  0BED  3003               	movlw	3
  7634  0BEE  00D6               	movwf	_card_type
  7635                           
  7636                           ;handle_ic_card.c: 246: if (is_enable)
  7637  0BEF  085F               	movf	_is_enable,w
  7638  0BF0  1903               	btfsc	3,2
  7639  0BF1  2C0E               	goto	l5826
  7640                           
  7641                           ;handle_ic_card.c: 247: {
  7642                           ;handle_ic_card.c: 248: if (!check_user_card())
  7643  0BF2  255B  3188         	fcall	_check_user_card
  7644  0BF4  3800               	iorlw	0
  7645  0BF5  1D03               	skipz
  7646  0BF6  2C0C               	goto	l5824
  7647                           
  7648                           ;handle_ic_card.c: 249: {
  7649                           ;handle_ic_card.c: 250: write_24c02(0x00, 0x55);
  7650  0BF7  3055               	movlw	85
  7651  0BF8  00F6               	movwf	write_24c02@data
  7652  0BF9  3000               	movlw	0
  7653  0BFA  22AB  3188         	fcall	_write_24c02
  7654                           
  7655                           ;handle_ic_card.c: 251: is_enable = 0x00;
  7656  0BFC  0020               	movlb	0	; select bank0
  7657  0BFD  30F0               	movlw	240
  7658  0BFE  01DF               	clrf	_is_enable
  7659                           
  7660                           ;handle_ic_card.c: 252: uart1_send_byte(0xF0);
  7661  0BFF  22A2  3188         	fcall	_uart1_send_byte
  7662                           
  7663                           ;handle_ic_card.c: 253: uart1_send_byte(0xF1);
  7664  0C01  30F1               	movlw	241
  7665  0C02  22A2  3188         	fcall	_uart1_send_byte
  7666                           
  7667                           ;handle_ic_card.c: 254: uart1_send_byte(0xFE);
  7668  0C04  30FE               	movlw	254
  7669  0C05  22A2  3188         	fcall	_uart1_send_byte
  7670                           
  7671                           ;handle_ic_card.c: 255: (RA0 = 0x01);
  7672  0C07  0020               	movlb	0	; select bank0
  7673  0C08  140C               	bsf	12,0	;volatile
  7674  0C09                     l5818:	
  7675                           
  7676                           ;handle_ic_card.c: 256: RB4 = 0x00;
  7677  0C09  120D               	bcf	13,4	;volatile
  7678                           
  7679                           ;handle_ic_card.c: 257: RB5 = 0x00;
  7680  0C0A  128D               	bcf	13,5	;volatile
  7681                           
  7682                           ;handle_ic_card.c: 259: }
  7683  0C0B  2D56               	goto	l5822
  7684  0C0C                     l5824:	
  7685                           
  7686                           ;handle_ic_card.c: 260: else
  7687                           ;handle_ic_card.c: 261: {
  7688                           ;handle_ic_card.c: 262: ret = 0x00;
  7689  0C0C  01C1               	clrf	read_card_content@ret
  7690  0C0D  2D59               	goto	l6024
  7691  0C0E                     l5826:	
  7692                           
  7693                           ;handle_ic_card.c: 265: else
  7694                           ;handle_ic_card.c: 266: {
  7695                           ;handle_ic_card.c: 267: if (!check_user_card())
  7696  0C0E  255B  3188         	fcall	_check_user_card
  7697  0C10  3800               	iorlw	0
  7698  0C11  1D03               	skipz
  7699  0C12  2C0C               	goto	l5824
  7700                           
  7701                           ;handle_ic_card.c: 268: {
  7702                           ;handle_ic_card.c: 269: write_24c02(0x00, 0xAA);
  7703  0C13  30AA               	movlw	170
  7704  0C14  00F6               	movwf	write_24c02@data
  7705  0C15  3000               	movlw	0
  7706  0C16  22AB  3188         	fcall	_write_24c02
  7707                           
  7708                           ;handle_ic_card.c: 270: is_enable = 0x01;
  7709  0C18  0020               	movlb	0	; select bank0
  7710  0C19  30F0               	movlw	240
  7711  0C1A  01DF               	clrf	_is_enable
  7712  0C1B  0ADF               	incf	_is_enable,f
  7713                           
  7714                           ;handle_ic_card.c: 271: uart1_send_byte(0xF0);
  7715  0C1C  22A2  3188         	fcall	_uart1_send_byte
  7716                           
  7717                           ;handle_ic_card.c: 272: uart1_send_byte(0xF1);
  7718  0C1E  30F1               	movlw	241
  7719  0C1F  22A2  3188         	fcall	_uart1_send_byte
  7720                           
  7721                           ;handle_ic_card.c: 273: uart1_send_byte(0xFF);
  7722  0C21  30FF               	movlw	255
  7723  0C22  22A2  3188         	fcall	_uart1_send_byte
  7724                           
  7725                           ;handle_ic_card.c: 274: RB4 = 0x01;
  7726  0C24  0020               	movlb	0	; select bank0
  7727  0C25  160D               	bsf	13,4	;volatile
  7728                           
  7729                           ;handle_ic_card.c: 275: RB5 = 0x01;
  7730  0C26  168D               	bsf	13,5	;volatile
  7731  0C27  2D56               	goto	l5822
  7732  0C28                     l5840:	
  7733                           
  7734                           ;handle_ic_card.c: 284: else if (data[0] == 0xA1)
  7735  0C28  082E               	movf	read_card_content@data,w
  7736  0C29  3AA1               	xorlw	161
  7737  0C2A  1D03               	skipz
  7738  0C2B  2C3B               	goto	l5856
  7739                           
  7740                           ;handle_ic_card.c: 285: {
  7741                           ;handle_ic_card.c: 286: card_type = 0x02;
  7742  0C2C  3002               	movlw	2
  7743  0C2D  00D6               	movwf	_card_type
  7744                           
  7745                           ;handle_ic_card.c: 287: if (is_enable)
  7746  0C2E  085F               	movf	_is_enable,w
  7747  0C2F  1903               	btfsc	3,2
  7748  0C30  2C0C               	goto	l5824
  7749                           
  7750                           ;handle_ic_card.c: 288: {
  7751                           ;handle_ic_card.c: 289: if (!check_user_card())
  7752  0C31  255B  3188         	fcall	_check_user_card
  7753  0C33  3800               	iorlw	0
  7754  0C34  1D03               	skipz
  7755  0C35  2C0C               	goto	l5824
  7756                           
  7757                           ;handle_ic_card.c: 290: {
  7758                           ;handle_ic_card.c: 291: group = data[1];
  7759  0C36  082F               	movf	read_card_content@data+1,w
  7760  0C37  00DE               	movwf	_group
  7761                           
  7762                           ;handle_ic_card.c: 292: write_24c02(0x01, group);
  7763  0C38  00F6               	movwf	write_24c02@data
  7764  0C39  3001               	movlw	1
  7765  0C3A  2D55               	goto	L5
  7766  0C3B                     l5856:	
  7767                           
  7768                           ;handle_ic_card.c: 305: else if (data[0] == 0xA2)
  7769  0C3B  082E               	movf	read_card_content@data,w
  7770  0C3C  3AA2               	xorlw	162
  7771  0C3D  1D03               	skipz
  7772  0C3E  2C5F               	goto	l5872
  7773                           
  7774                           ;handle_ic_card.c: 306: {
  7775                           ;handle_ic_card.c: 307: card_type = 0x06;
  7776  0C3F  3006               	movlw	6
  7777  0C40  00D6               	movwf	_card_type
  7778                           
  7779                           ;handle_ic_card.c: 308: if (is_enable)
  7780  0C41  085F               	movf	_is_enable,w
  7781  0C42  1903               	btfsc	3,2
  7782  0C43  2C0C               	goto	l5824
  7783                           
  7784                           ;handle_ic_card.c: 309: {
  7785                           ;handle_ic_card.c: 310: if (!check_user_card())
  7786  0C44  255B  3188         	fcall	_check_user_card
  7787  0C46  3800               	iorlw	0
  7788  0C47  1D03               	skipz
  7789  0C48  2C0C               	goto	l5824
  7790                           
  7791                           ;handle_ic_card.c: 311: {
  7792                           ;handle_ic_card.c: 312: year = data[1];
  7793  0C49  082F               	movf	read_card_content@data+1,w
  7794  0C4A  00EF               	movwf	_year
  7795                           
  7796                           ;handle_ic_card.c: 313: month = data[2];
  7797  0C4B  0830               	movf	read_card_content@data+2,w
  7798  0C4C  00EE               	movwf	_month
  7799                           
  7800                           ;handle_ic_card.c: 314: day = data[3];
  7801  0C4D  0831               	movf	read_card_content@data+3,w
  7802  0C4E  00EC               	movwf	_day
  7803                           
  7804                           ;handle_ic_card.c: 315: hour = data[4];
  7805  0C4F  0832               	movf	read_card_content@data+4,w
  7806  0C50  00ED               	movwf	_hour
  7807                           
  7808                           ;handle_ic_card.c: 316: minute = data[5];
  7809  0C51  0833               	movf	read_card_content@data+5,w
  7810  0C52  0021               	movlb	1	; select bank1
  7811  0C53  00E6               	movwf	_minute^(0+128)
  7812                           
  7813                           ;handle_ic_card.c: 317: second = data[6];
  7814  0C54  0020               	movlb	0	; select bank0
  7815  0C55  0834               	movf	read_card_content@data+6,w
  7816  0C56  0021               	movlb	1	; select bank1
  7817  0C57  00E7               	movwf	_second^(0+128)
  7818                           
  7819                           ;handle_ic_card.c: 318: week = data[7];
  7820  0C58  0020               	movlb	0	; select bank0
  7821  0C59  0835               	movf	read_card_content@data+7,w
  7822  0C5A  0021               	movlb	1	; select bank1
  7823  0C5B  00E8               	movwf	_week^(0+128)
  7824                           
  7825                           ;handle_ic_card.c: 319: ds1302_set_time();
  7826  0C5C  2339  3188         	fcall	_ds1302_set_time
  7827  0C5E  2D56               	goto	l5822
  7828  0C5F                     l5872:	
  7829                           
  7830                           ;handle_ic_card.c: 332: else if (data[0] == 0xA3)
  7831  0C5F  082E               	movf	read_card_content@data,w
  7832  0C60  3AA3               	xorlw	163
  7833  0C61  1D03               	skipz
  7834  0C62  2C7A               	goto	l5892
  7835                           
  7836                           ;handle_ic_card.c: 333: {
  7837                           ;handle_ic_card.c: 334: card_type = 0x04;
  7838  0C63  3004               	movlw	4
  7839  0C64  00D6               	movwf	_card_type
  7840                           
  7841                           ;handle_ic_card.c: 335: if (is_enable)
  7842  0C65  085F               	movf	_is_enable,w
  7843  0C66  1903               	btfsc	3,2
  7844  0C67  2C0C               	goto	l5824
  7845                           
  7846                           ;handle_ic_card.c: 336: {
  7847                           ;handle_ic_card.c: 337: if (!check_user_card())
  7848  0C68  255B  3188         	fcall	_check_user_card
  7849  0C6A  3800               	iorlw	0
  7850  0C6B  1D03               	skipz
  7851  0C6C  2C0C               	goto	l5824
  7852                           
  7853                           ;handle_ic_card.c: 338: {
  7854                           ;handle_ic_card.c: 339: uart1_send_byte(0xF0);
  7855  0C6D  30F0               	movlw	240
  7856  0C6E  22A2  3188         	fcall	_uart1_send_byte
  7857                           
  7858                           ;handle_ic_card.c: 340: uart1_send_byte(0xF1);
  7859  0C70  30F1               	movlw	241
  7860  0C71  22A2  3188         	fcall	_uart1_send_byte
  7861                           
  7862                           ;handle_ic_card.c: 341: uart1_send_byte(0xFC);
  7863  0C73  30FC               	movlw	252
  7864  0C74  22A2  3188         	fcall	_uart1_send_byte
  7865                           
  7866                           ;handle_ic_card.c: 342: flag_user_card = 0x01;
  7867  0C76  0020               	movlb	0	; select bank0
  7868  0C77  01DD               	clrf	_flag_user_card
  7869  0C78  0ADD               	incf	_flag_user_card,f
  7870  0C79  2C09               	goto	l5818
  7871  0C7A                     l5892:	
  7872                           
  7873                           ;handle_ic_card.c: 357: else if (data[0] == 0xA4)
  7874  0C7A  082E               	movf	read_card_content@data,w
  7875  0C7B  3AA4               	xorlw	164
  7876  0C7C  1D03               	skipz
  7877  0C7D  2D43               	goto	l6002
  7878                           
  7879                           ;handle_ic_card.c: 358: {
  7880                           ;handle_ic_card.c: 359: card_type = 0x01;
  7881  0C7E  01D6               	clrf	_card_type
  7882  0C7F  0AD6               	incf	_card_type,f
  7883                           
  7884                           ;handle_ic_card.c: 360: if (is_enable)
  7885  0C80  085F               	movf	_is_enable,w
  7886  0C81  1903               	btfsc	3,2
  7887  0C82  2D36               	goto	l5988
  7888                           
  7889                           ;handle_ic_card.c: 361: {
  7890                           ;handle_ic_card.c: 362: if (!check_user_card())
  7891  0C83  255B  3188         	fcall	_check_user_card
  7892  0C85  3800               	iorlw	0
  7893  0C86  1D03               	skipz
  7894  0C87  2D36               	goto	l5988
  7895                           
  7896                           ;handle_ic_card.c: 363: {
  7897                           ;handle_ic_card.c: 364: user_card[0] = data[1];
  7898  0C88  082F               	movf	read_card_content@data+1,w
  7899  0C89  0021               	movlb	1	; select bank1
  7900  0C8A  00C6               	movwf	_user_card^(0+128)
  7901                           
  7902                           ;handle_ic_card.c: 365: if (user_card[0] == read_24c02(0x01))
  7903  0C8B  3001               	movlw	1
  7904  0C8C  258A  3188         	fcall	_read_24c02
  7905  0C8E  0021               	movlb	1	; select bank1
  7906  0C8F  0646               	xorwf	_user_card^(0+128),w
  7907  0C90  1D03               	skipz
  7908  0C91  3400               	retlw	0
  7909                           
  7910                           ;handle_ic_card.c: 366: {
  7911                           ;handle_ic_card.c: 367: user_card[1] = data[2];
  7912  0C92  0020               	movlb	0	; select bank0
  7913  0C93  0830               	movf	read_card_content@data+2,w
  7914  0C94  0021               	movlb	1	; select bank1
  7915  0C95  00C7               	movwf	(_user_card^(0+128)+1)
  7916                           
  7917                           ;handle_ic_card.c: 368: if (user_card[1] == 0x01)
  7918  0C96  0B47               	decfsz	(_user_card^(0+128)+1),w
  7919  0C97  2CB6               	goto	l5924
  7920                           
  7921                           ;handle_ic_card.c: 371: user_count = data[3] << 0x08 | data[4];
  7922  0C98  0020               	movlb	0	; select bank0
  7923  0C99  0831               	movf	read_card_content@data+3,w
  7924  0C9A  00BF               	movwf	read_card_content@user_count+1
  7925  0C9B  0832               	movf	read_card_content@data+4,w
  7926  0C9C  00BE               	movwf	read_card_content@user_count
  7927                           
  7928                           ;handle_ic_card.c: 372: if (user_count == 0x00)
  7929  0C9D  043F               	iorwf	read_card_content@user_count+1,w
  7930  0C9E  1903               	btfsc	3,2
  7931                           
  7932                           ;handle_ic_card.c: 373: {
  7933                           ;handle_ic_card.c: 374: return 0x00;
  7934  0C9F  3400               	retlw	0
  7935                           
  7936                           ;handle_ic_card.c: 376: else
  7937                           ;handle_ic_card.c: 377: {
  7938                           ;handle_ic_card.c: 378: user_count--;
  7939  0CA0  3001               	movlw	1
  7940  0CA1  02BE               	subwf	read_card_content@user_count,f
  7941  0CA2  3000               	movlw	0
  7942  0CA3  3BBF               	subwfb	read_card_content@user_count+1,f
  7943                           
  7944                           ;handle_ic_card.c: 379: data[3] = user_count / 256;
  7945  0CA4  083F               	movf	read_card_content@user_count+1,w
  7946  0CA5  00B1               	movwf	read_card_content@data+3
  7947                           
  7948                           ;handle_ic_card.c: 380: data[4] = user_count % 256;
  7949  0CA6  083E               	movf	read_card_content@user_count,w
  7950  0CA7  00B2               	movwf	read_card_content@data+4
  7951                           
  7952                           ;handle_ic_card.c: 381: data[15] = checksum(data, 15);
  7953  0CA8  300F               	movlw	15
  7954  0CA9  00F0               	movwf	checksum@length
  7955  0CAA  302E               	movlw	read_card_content@data& (0+255)
  7956  0CAB  25DE               	fcall	_checksum
  7957  0CAC  00BD               	movwf	read_card_content@data+15
  7958                           
  7959                           ;handle_ic_card.c: 382: Mf500PiccWrite(0x04 * sector_number + 0x00, data);
  7960  0CAD  302E               	movlw	read_card_content@data& (0+255)
  7961  0CAE  00FB               	movwf	Mf500PiccWrite@data1
  7962  0CAF  0860               	movf	_sector_number,w
  7963  0CB0  0709               	addwf	9,w
  7964  0CB1  0709               	addwf	9,w
  7965  0CB2  3194  2466  3188   	fcall	_Mf500PiccWrite
  7966  0CB5  2D0A               	goto	l5958
  7967  0CB6                     l5924:	
  7968                           
  7969                           ;handle_ic_card.c: 385: else if (user_card[1] == 0x02)
  7970  0CB6  0847               	movf	(_user_card^(0+128)+1),w
  7971  0CB7  3A02               	xorlw	2
  7972  0CB8  1D03               	skipz
  7973  0CB9  2D06               	goto	l5956
  7974                           
  7975                           ;handle_ic_card.c: 386: {
  7976                           ;handle_ic_card.c: 387: user_card[2] = data[3];
  7977  0CBA  0020               	movlb	0	; select bank0
  7978  0CBB  0831               	movf	read_card_content@data+3,w
  7979  0CBC  0021               	movlb	1	; select bank1
  7980  0CBD  00C8               	movwf	(_user_card^(0+128)+2)
  7981                           
  7982                           ;handle_ic_card.c: 388: user_card[3] = data[4];
  7983  0CBE  0020               	movlb	0	; select bank0
  7984  0CBF  0832               	movf	read_card_content@data+4,w
  7985  0CC0  0021               	movlb	1	; select bank1
  7986  0CC1  00C9               	movwf	(_user_card^(0+128)+3)
  7987                           
  7988                           ;handle_ic_card.c: 389: user_card[4] = data[5];
  7989  0CC2  0020               	movlb	0	; select bank0
  7990  0CC3  0833               	movf	read_card_content@data+5,w
  7991  0CC4  0021               	movlb	1	; select bank1
  7992  0CC5  00CA               	movwf	(_user_card^(0+128)+4)
  7993                           
  7994                           ;handle_ic_card.c: 390: user_card[5] = data[6];
  7995  0CC6  0020               	movlb	0	; select bank0
  7996  0CC7  0834               	movf	read_card_content@data+6,w
  7997  0CC8  0021               	movlb	1	; select bank1
  7998  0CC9  00CB               	movwf	(_user_card^(0+128)+5)
  7999                           
  8000                           ;handle_ic_card.c: 391: ds1302_get_time();
  8001  0CCA  22E2  3188         	fcall	_ds1302_get_time
  8002                           
  8003                           ;handle_ic_card.c: 392: if ((year > user_card[2]) ||
  8004                           ;handle_ic_card.c: 393: ((year == user_card[2]) && (month > user_card[3])) ||
  8005                           ;handle_ic_card.c: 394: ((year == user_card[2]) && (month == user_card[3]) && (day > use
      +                          r_card[4])) ||
  8006                           ;handle_ic_card.c: 395: ((year == user_card[2]) && (month == user_card[3]) && (day == us
      +                          er_card[4]) && (hour >= user_card[5])))
  8007  0CCC  0020               	movlb	0	; select bank0
  8008  0CCD  086F               	movf	_year,w
  8009  0CCE  0021               	movlb	1	; select bank1
  8010  0CCF  0248               	subwf	(_user_card^(0+128)+2),w
  8011  0CD0  1C03               	skipc
  8012  0CD1  3400               	retlw	0
  8013  0CD2  0848               	movf	(_user_card^(0+128)+2),w
  8014  0CD3  0020               	movlb	0	; select bank0
  8015  0CD4  066F               	xorwf	_year,w
  8016  0CD5  1D03               	skipz
  8017  0CD6  2CDC               	goto	l5936
  8018  0CD7  086E               	movf	_month,w
  8019  0CD8  0021               	movlb	1	; select bank1
  8020  0CD9  0249               	subwf	(_user_card^(0+128)+3),w
  8021  0CDA  1C03               	skipc
  8022  0CDB  3400               	retlw	0
  8023  0CDC                     l5936:	
  8024  0CDC  0021               	movlb	1	; select bank1
  8025  0CDD  0848               	movf	(_user_card^(0+128)+2),w
  8026  0CDE  0020               	movlb	0	; select bank0
  8027  0CDF  066F               	xorwf	_year,w
  8028  0CE0  1D03               	skipz
  8029  0CE1  2CED               	goto	l5942
  8030  0CE2  0021               	movlb	1	; select bank1
  8031  0CE3  0849               	movf	(_user_card^(0+128)+3),w
  8032  0CE4  0020               	movlb	0	; select bank0
  8033  0CE5  066E               	xorwf	_month,w
  8034  0CE6  1D03               	skipz
  8035  0CE7  2CED               	goto	l5942
  8036  0CE8  086C               	movf	_day,w
  8037  0CE9  0021               	movlb	1	; select bank1
  8038  0CEA  024A               	subwf	(_user_card^(0+128)+4),w
  8039  0CEB  1C03               	skipc
  8040  0CEC  3400               	retlw	0
  8041  0CED                     l5942:	
  8042  0CED  0021               	movlb	1	; select bank1
  8043  0CEE  0848               	movf	(_user_card^(0+128)+2),w
  8044  0CEF  0020               	movlb	0	; select bank0
  8045  0CF0  066F               	xorwf	_year,w
  8046  0CF1  1D03               	skipz
  8047  0CF2  2D0A               	goto	l5958
  8048  0CF3  0021               	movlb	1	; select bank1
  8049  0CF4  0849               	movf	(_user_card^(0+128)+3),w
  8050  0CF5  0020               	movlb	0	; select bank0
  8051  0CF6  066E               	xorwf	_month,w
  8052  0CF7  1D03               	skipz
  8053  0CF8  2D0A               	goto	l5958
  8054  0CF9  0021               	movlb	1	; select bank1
  8055  0CFA  084A               	movf	(_user_card^(0+128)+4),w
  8056  0CFB  0020               	movlb	0	; select bank0
  8057  0CFC  066C               	xorwf	_day,w
  8058  0CFD  1D03               	skipz
  8059  0CFE  2D0A               	goto	l5958
  8060  0CFF  0021               	movlb	1	; select bank1
  8061  0D00  084B               	movf	(_user_card^(0+128)+5),w
  8062  0D01  0020               	movlb	0	; select bank0
  8063  0D02  026D               	subwf	_hour,w
  8064  0D03  1803               	btfsc	3,0
  8065  0D04  3400               	retlw	0
  8066  0D05  2D0A               	goto	l5958
  8067  0D06                     l5956:	
  8068                           
  8069                           ;handle_ic_card.c: 404: else
  8070                           ;handle_ic_card.c: 405: {
  8071                           ;handle_ic_card.c: 406: user_card[2] = 0x00;
  8072  0D06  01C8               	clrf	(_user_card^(0+128)+2)
  8073                           
  8074                           ;handle_ic_card.c: 407: user_card[3] = 0x00;
  8075  0D07  01C9               	clrf	(_user_card^(0+128)+3)
  8076                           
  8077                           ;handle_ic_card.c: 408: user_card[4] = 0x00;
  8078  0D08  01CA               	clrf	(_user_card^(0+128)+4)
  8079                           
  8080                           ;handle_ic_card.c: 409: user_card[5] = 0x00;
  8081  0D09  01CB               	clrf	(_user_card^(0+128)+5)
  8082  0D0A                     l5958:	
  8083                           
  8084                           ;handle_ic_card.c: 410: }
  8085                           ;handle_ic_card.c: 411: user_card[6] = data[14];
  8086  0D0A  0020               	movlb	0	; select bank0
  8087  0D0B  083C               	movf	read_card_content@data+14,w
  8088  0D0C  0021               	movlb	1	; select bank1
  8089  0D0D  00CC               	movwf	(_user_card^(0+128)+6)
  8090                           
  8091                           ;handle_ic_card.c: 412: user_card[7] = data[13];
  8092  0D0E  0020               	movlb	0	; select bank0
  8093  0D0F  083B               	movf	read_card_content@data+13,w
  8094  0D10  0021               	movlb	1	; select bank1
  8095  0D11  00CD               	movwf	(_user_card^(0+128)+7)
  8096                           
  8097                           ;handle_ic_card.c: 413: user_card[8] = data[12];
  8098  0D12  0020               	movlb	0	; select bank0
  8099  0D13  083A               	movf	read_card_content@data+12,w
  8100  0D14  0021               	movlb	1	; select bank1
  8101  0D15  00CE               	movwf	(_user_card^(0+128)+8)
  8102                           
  8103                           ;handle_ic_card.c: 414: user_card[9] = data[11];
  8104  0D16  0020               	movlb	0	; select bank0
  8105  0D17  0839               	movf	read_card_content@data+11,w
  8106  0D18  0021               	movlb	1	; select bank1
  8107  0D19  00CF               	movwf	(_user_card^(0+128)+9)
  8108                           
  8109                           ;handle_ic_card.c: 415: user_card[10] = data[10];
  8110  0D1A  0020               	movlb	0	; select bank0
  8111  0D1B  0838               	movf	read_card_content@data+10,w
  8112  0D1C  0021               	movlb	1	; select bank1
  8113  0D1D  00D0               	movwf	(_user_card^(0+128)+10)
  8114                           
  8115                           ;handle_ic_card.c: 416: user_card[11] = data[9];
  8116  0D1E  0020               	movlb	0	; select bank0
  8117  0D1F  0837               	movf	read_card_content@data+9,w
  8118  0D20  0021               	movlb	1	; select bank1
  8119  0D21  00D1               	movwf	(_user_card^(0+128)+11)
  8120                           
  8121                           ;handle_ic_card.c: 417: user_card[12] = data[8];
  8122  0D22  0020               	movlb	0	; select bank0
  8123  0D23  0836               	movf	read_card_content@data+8,w
  8124  0D24  0021               	movlb	1	; select bank1
  8125  0D25  00D2               	movwf	(_user_card^(0+128)+12)
  8126                           
  8127                           ;handle_ic_card.c: 418: user_card[13] = data[7];
  8128  0D26  0020               	movlb	0	; select bank0
  8129  0D27  0835               	movf	read_card_content@data+7,w
  8130  0D28  0021               	movlb	1	; select bank1
  8131  0D29  00D3               	movwf	(_user_card^(0+128)+13)
  8132                           
  8133                           ;handle_ic_card.c: 419: deal_floor(user_card);
  8134  0D2A  30C6               	movlw	_user_card& (0+255)
  8135  0D2B  3191  2106  3188   	fcall	_deal_floor
  8136                           
  8137                           ;handle_ic_card.c: 420: flag_user_card = 0x01;
  8138  0D2E  0020               	movlb	0	; select bank0
  8139  0D2F  01DD               	clrf	_flag_user_card
  8140  0D30  0ADD               	incf	_flag_user_card,f
  8141                           
  8142                           ;handle_ic_card.c: 421: RB4 = 0x00;
  8143  0D31  120D               	bcf	13,4	;volatile
  8144                           
  8145                           ;handle_ic_card.c: 422: RB5 = 0x00;
  8146  0D32  128D               	bcf	13,5	;volatile
  8147                           
  8148                           ;handle_ic_card.c: 423: ret = 0x01;
  8149  0D33  01C1               	clrf	read_card_content@ret
  8150  0D34  0AC1               	incf	read_card_content@ret,f
  8151                           
  8152                           ;handle_ic_card.c: 424: }
  8153  0D35  2D37               	goto	l433
  8154  0D36                     l5988:	
  8155                           
  8156                           ;handle_ic_card.c: 430: else
  8157                           ;handle_ic_card.c: 431: {
  8158                           ;handle_ic_card.c: 432: ret = 0x00;
  8159  0D36  01C1               	clrf	read_card_content@ret
  8160  0D37                     l433:	
  8161                           
  8162                           ;handle_ic_card.c: 438: }
  8163                           ;handle_ic_card.c: 439: for (i = 0x00; i < 14; i++)
  8164  0D37  01C0               	clrf	read_card_content@i
  8165  0D38                     l5996:	
  8166                           
  8167                           ;handle_ic_card.c: 440: {
  8168                           ;handle_ic_card.c: 441: user_card[i] = 0x00;
  8169  0D38  0840               	movf	read_card_content@i,w
  8170  0D39  3EC6               	addlw	_user_card& (0+255)
  8171  0D3A  0086               	movwf	6
  8172  0D3B  300E               	movlw	14
  8173  0D3C  0187               	clrf	7
  8174  0D3D  0181               	clrf	1
  8175  0D3E  0AC0               	incf	read_card_content@i,f
  8176  0D3F  0240               	subwf	read_card_content@i,w
  8177  0D40  1803               	btfsc	3,0
  8178  0D41  2D59               	goto	l6024
  8179  0D42  2D38               	goto	l5996
  8180  0D43                     l6002:	
  8181                           
  8182                           ;handle_ic_card.c: 444: else if (data[0] == 0xA8)
  8183  0D43  082E               	movf	read_card_content@data,w
  8184  0D44  3AA8               	xorlw	168
  8185  0D45  1D03               	skipz
  8186  0D46  2C0C               	goto	l5824
  8187                           
  8188                           ;handle_ic_card.c: 445: {
  8189                           ;handle_ic_card.c: 446: card_type = 0x08;
  8190  0D47  3008               	movlw	8
  8191  0D48  00D6               	movwf	_card_type
  8192                           
  8193                           ;handle_ic_card.c: 447: if (is_enable)
  8194  0D49  085F               	movf	_is_enable,w
  8195  0D4A  1903               	btfsc	3,2
  8196  0D4B  2C0C               	goto	l5824
  8197                           
  8198                           ;handle_ic_card.c: 448: {
  8199                           ;handle_ic_card.c: 449: if (!check_user_card())
  8200  0D4C  255B  3188         	fcall	_check_user_card
  8201  0D4E  3800               	iorlw	0
  8202  0D4F  1D03               	skipz
  8203  0D50  2C0C               	goto	l5824
  8204                           
  8205                           ;handle_ic_card.c: 450: {
  8206                           ;handle_ic_card.c: 451: sector_number = data[1];
  8207  0D51  082F               	movf	read_card_content@data+1,w
  8208  0D52  00E0               	movwf	_sector_number
  8209                           
  8210                           ;handle_ic_card.c: 452: write_24c02(0x09, sector_number);
  8211  0D53  00F6               	movwf	write_24c02@data
  8212  0D54  3009               	movlw	9
  8213  0D55                     L5:	
  8214  0D55  22AB               	fcall	_write_24c02
  8215  0D56                     l5822:	
  8216                           
  8217                           ;handle_ic_card.c: 258: ret = 0x01;
  8218  0D56  0020               	movlb	0	; select bank0
  8219  0D57  01C1               	clrf	read_card_content@ret
  8220  0D58  0AC1               	incf	read_card_content@ret,f
  8221  0D59                     l6024:	
  8222                           
  8223                           ;handle_ic_card.c: 478: }
  8224                           ;handle_ic_card.c: 480: return ret;
  8225  0D59  0841               	movf	read_card_content@ret,w
  8226  0D5A  0008               	return
  8227  0D5B                     __end_of_read_card_content:	
  8228  0D5B                     __ptext23:	
  8229 ;; *************** function _check_user_card *****************
  8230 ;; Defined at:
  8231 ;;		line 123 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_ic_card.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;		None
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;  i               1    4[COMMON] unsigned char 
  8236 ;; Return value:  Size  Location     Type
  8237 ;;                  1    wreg      unsigned char 
  8238 ;; Registers used:
  8239 ;;		wreg, status,2, status,0, pclath, cstack
  8240 ;; Tracked objects:
  8241 ;;		On entry : 1F/0
  8242 ;;		On exit  : 1F/0
  8243 ;;		Unchanged: 0/0
  8244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;Total ram usage:        1 bytes
  8250 ;; Hardware stack levels used:    1
  8251 ;; Hardware stack levels required when called:    3
  8252 ;; This function calls:
  8253 ;;		_read_24c02
  8254 ;; This function is called by:
  8255 ;;		_read_card_content
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259                           
  8260                           ;psect for function _check_user_card
  8261  0D5B                     _check_user_card:	
  8262                           
  8263                           ;handle_ic_card.c: 127: BYTE i;
  8264                           ;handle_ic_card.c: 129: for (i = 0x00; i < 0x2C; i++)
  8265                           
  8266                           ;incstack = 0
  8267                           ; Regs used in _check_user_card: [wreg+status,2+status,0+pclath+cstack]
  8268  0D5B  01F4               	clrf	check_user_card@i
  8269  0D5C                     l5770:	
  8270                           
  8271                           ;handle_ic_card.c: 130: {
  8272                           ;handle_ic_card.c: 131: if ((card_id[3] == read_24c02(0x40 + (i * 0x04) + 0x00)) &&
  8273                           ;handle_ic_card.c: 132: (card_id[2] == read_24c02(0x40 + (i * 0x04) + 0x01)) &&
  8274                           ;handle_ic_card.c: 133: (card_id[1] == read_24c02(0x40 + (i * 0x04) + 0x02)) &&
  8275                           ;handle_ic_card.c: 134: (card_id[0] == read_24c02(0x40 + (i * 0x04) + 0x03)))
  8276  0D5C  0874               	movf	check_user_card@i,w
  8277  0D5D  0709               	addwf	9,w
  8278  0D5E  0709               	addwf	9,w
  8279  0D5F  3E40               	addlw	64
  8280  0D60  258A  3188         	fcall	_read_24c02
  8281  0D62  0020               	movlb	0	; select bank0
  8282  0D63  0652               	xorwf	_card_id+3,w
  8283  0D64  1D03               	skipz
  8284  0D65  2D84               	goto	l5782
  8285  0D66  0874               	movf	check_user_card@i,w
  8286  0D67  0709               	addwf	9,w
  8287  0D68  0709               	addwf	9,w
  8288  0D69  3E41               	addlw	65
  8289  0D6A  258A  3188         	fcall	_read_24c02
  8290  0D6C  0020               	movlb	0	; select bank0
  8291  0D6D  0651               	xorwf	_card_id+2,w
  8292  0D6E  1D03               	skipz
  8293  0D6F  2D84               	goto	l5782
  8294  0D70  0874               	movf	check_user_card@i,w
  8295  0D71  0709               	addwf	9,w
  8296  0D72  0709               	addwf	9,w
  8297  0D73  3E42               	addlw	66
  8298  0D74  258A  3188         	fcall	_read_24c02
  8299  0D76  0020               	movlb	0	; select bank0
  8300  0D77  0650               	xorwf	_card_id+1,w
  8301  0D78  1D03               	skipz
  8302  0D79  2D84               	goto	l5782
  8303  0D7A  0874               	movf	check_user_card@i,w
  8304  0D7B  0709               	addwf	9,w
  8305  0D7C  0709               	addwf	9,w
  8306  0D7D  3E43               	addlw	67
  8307  0D7E  258A  3188         	fcall	_read_24c02
  8308  0D80  0020               	movlb	0	; select bank0
  8309  0D81  064F               	xorwf	_card_id,w
  8310  0D82  1903               	btfsc	3,2
  8311                           
  8312                           ;handle_ic_card.c: 135: {
  8313                           ;handle_ic_card.c: 136: return 0x01;
  8314  0D83  3401               	retlw	1
  8315  0D84                     l5782:	
  8316  0D84  302C               	movlw	44
  8317  0D85  0AF4               	incf	check_user_card@i,f
  8318  0D86  0274               	subwf	check_user_card@i,w
  8319  0D87  1803               	btfsc	3,0
  8320                           
  8321                           ;handle_ic_card.c: 137: }
  8322                           ;handle_ic_card.c: 138: }
  8323                           ;handle_ic_card.c: 140: return 0x00;
  8324  0D88  3400               	retlw	0
  8325  0D89  2D5C               	goto	l5770
  8326  0D8A                     __end_of_check_user_card:	
  8327  0D8A                     __ptext57:	
  8328 ;; *************** function _read_24c02 *****************
  8329 ;; Defined at:
  8330 ;;		line 158 in file "D:\WORKproject\AJ-BLE-IC\source\driver\24c02.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;  address         1    wreg     unsigned char 
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;  address         1    2[COMMON] unsigned char 
  8335 ;;  data            1    3[COMMON] unsigned char 
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  1    wreg      unsigned char 
  8338 ;; Registers used:
  8339 ;;		wreg, status,2, status,0, pclath, cstack
  8340 ;; Tracked objects:
  8341 ;;		On entry : 1C/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;Total ram usage:        2 bytes
  8350 ;; Hardware stack levels used:    1
  8351 ;; Hardware stack levels required when called:    2
  8352 ;; This function calls:
  8353 ;;		_rece_byte
  8354 ;;		_send_byte
  8355 ;;		_start_i2c
  8356 ;;		_stop_i2c
  8357 ;; This function is called by:
  8358 ;;		_handle_config
  8359 ;;		_check_user_card
  8360 ;;		_read_card_content
  8361 ;;		_main
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           
  8366                           ;psect for function _read_24c02
  8367  0D8A                     _read_24c02:	
  8368                           
  8369                           ;incstack = 0
  8370                           ; Regs used in _read_24c02: [wreg+status,2+status,0+pclath+cstack]
  8371                           ;read_24c02@address stored from wreg
  8372  0D8A  00F2               	movwf	read_24c02@address
  8373                           
  8374                           ;24c02.c: 164: start_i2c();
  8375  0D8B  25C8  3188         	fcall	_start_i2c
  8376                           
  8377                           ;24c02.c: 165: send_byte(0xa0);
  8378  0D8D  30A0               	movlw	160
  8379  0D8E  259E  3188         	fcall	_send_byte
  8380                           
  8381                           ;24c02.c: 166: send_byte(address);
  8382  0D90  0872               	movf	read_24c02@address,w
  8383  0D91  259E  3188         	fcall	_send_byte
  8384                           
  8385                           ;24c02.c: 167: start_i2c();
  8386  0D93  25C8  3188         	fcall	_start_i2c
  8387                           
  8388                           ;24c02.c: 168: send_byte(0xa1);
  8389  0D95  30A1               	movlw	161
  8390  0D96  259E  3188         	fcall	_send_byte
  8391                           
  8392                           ;24c02.c: 169: data = rece_byte();
  8393  0D98  25F1  3188         	fcall	_rece_byte
  8394  0D9A  00F3               	movwf	read_24c02@data
  8395                           
  8396                           ;24c02.c: 170: stop_i2c();
  8397  0D9B  23A0               	fcall	_stop_i2c
  8398                           
  8399                           ;24c02.c: 172: return data;
  8400  0D9C  0873               	movf	read_24c02@data,w
  8401  0D9D  0008               	return
  8402  0D9E                     __end_of_read_24c02:	
  8403  0D9E                     __ptext60:	
  8404 ;; *************** function _send_byte *****************
  8405 ;; Defined at:
  8406 ;;		line 111 in file "D:\WORKproject\AJ-BLE-IC\source\driver\24c02.c"
  8407 ;; Parameters:    Size  Location     Type
  8408 ;;  write_data      1    wreg     unsigned char 
  8409 ;; Auto vars:     Size  Location     Type
  8410 ;;  write_data      1    0[COMMON] unsigned char 
  8411 ;;  i               1    1[COMMON] unsigned char 
  8412 ;; Return value:  Size  Location     Type
  8413 ;;		None               void
  8414 ;; Registers used:
  8415 ;;		wreg, status,2, status,0
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8424 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;Total ram usage:        2 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    1
  8428 ;; This function calls:
  8429 ;;		Nothing
  8430 ;; This function is called by:
  8431 ;;		_write_24c02
  8432 ;;		_read_24c02
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           
  8437                           ;psect for function _send_byte
  8438  0D9E                     _send_byte:	
  8439                           
  8440                           ;incstack = 0
  8441                           ; Regs used in _send_byte: [wreg+status,2+status,0]
  8442                           ;send_byte@write_data stored from wreg
  8443  0D9E  00F0               	movwf	send_byte@write_data
  8444                           
  8445                           ;24c02.c: 115: BYTE i;
  8446                           ;24c02.c: 117: for (i = 0x00; i < 0x08; i++)
  8447  0D9F  01F1               	clrf	send_byte@i
  8448  0DA0                     l638:	
  8449                           
  8450                           ;24c02.c: 118: {
  8451                           ;24c02.c: 119: if (write_data & 0x80)
  8452  0DA0  1FF0               	btfss	send_byte@write_data,7
  8453  0DA1  2DA5               	goto	l640
  8454                           
  8455                           ;24c02.c: 120: {
  8456                           ;24c02.c: 121: RC4 = 0x01;
  8457  0DA2  0020               	movlb	0	; select bank0
  8458  0DA3  160E               	bsf	14,4	;volatile
  8459                           
  8460                           ;24c02.c: 122: }
  8461  0DA4  2DA7               	goto	l641
  8462  0DA5                     l640:	
  8463                           
  8464                           ;24c02.c: 123: else
  8465                           ;24c02.c: 124: {
  8466                           ;24c02.c: 125: RC4 = 0x00;
  8467  0DA5  0020               	movlb	0	; select bank0
  8468  0DA6  120E               	bcf	14,4	;volatile
  8469  0DA7                     l641:	
  8470                           
  8471                           ;24c02.c: 126: }
  8472                           ;24c02.c: 127: __nop();
  8473  0DA7  0000               	nop
  8474                           
  8475                           ;24c02.c: 128: RC3 = 0x01;
  8476  0DA8  0020               	movlb	0	; select bank0
  8477  0DA9  158E               	bsf	14,3	;volatile
  8478                           
  8479                           ;24c02.c: 129: __nop();__nop();__nop();__nop();__nop();
  8480  0DAA  0000               	nop
  8481  0DAB  0000               	nop
  8482  0DAC  0000               	nop
  8483  0DAD  0000               	nop
  8484  0DAE  0000               	nop
  8485                           
  8486                           ;24c02.c: 130: RC3 = 0x00;
  8487  0DAF  0020               	movlb	0	; select bank0
  8488  0DB0  118E               	bcf	14,3	;volatile
  8489                           
  8490                           ;24c02.c: 131: __nop();
  8491  0DB1  0000               	nop
  8492  0DB2  3008               	movlw	8
  8493                           
  8494                           ;24c02.c: 132: write_data <<= 0x01;
  8495  0DB3  35F0               	lslf	send_byte@write_data,f
  8496  0DB4  0AF1               	incf	send_byte@i,f
  8497  0DB5  0271               	subwf	send_byte@i,w
  8498  0DB6  1C03               	skipc
  8499  0DB7  2DA0               	goto	l638
  8500                           
  8501                           ;24c02.c: 133: }
  8502                           ;24c02.c: 134: __nop();__nop();
  8503  0DB8  0000               	nop
  8504  0DB9  0000               	nop
  8505                           
  8506                           ;24c02.c: 135: RC4 = 0x01;
  8507  0DBA  0020               	movlb	0	; select bank0
  8508  0DBB  160E               	bsf	14,4	;volatile
  8509                           
  8510                           ;24c02.c: 136: __nop();__nop();
  8511  0DBC  0000               	nop
  8512  0DBD  0000               	nop
  8513                           
  8514                           ;24c02.c: 137: RC3 = 0x01;
  8515  0DBE  0020               	movlb	0	; select bank0
  8516  0DBF  158E               	bsf	14,3	;volatile
  8517                           
  8518                           ;24c02.c: 138: __nop();__nop();__nop();
  8519  0DC0  0000               	nop
  8520  0DC1  0000               	nop
  8521  0DC2  0000               	nop
  8522                           
  8523                           ;24c02.c: 139: RC3 = 0x00;
  8524  0DC3  0020               	movlb	0	; select bank0
  8525  0DC4  118E               	bcf	14,3	;volatile
  8526                           
  8527                           ;24c02.c: 140: __nop();__nop();
  8528  0DC5  0000               	nop
  8529  0DC6  0000               	nop
  8530  0DC7  0008               	return
  8531  0DC8                     __end_of_send_byte:	
  8532  0DC8                     __ptext59:	
  8533 ;; *************** function _start_i2c *****************
  8534 ;; Defined at:
  8535 ;;		line 57 in file "D:\WORKproject\AJ-BLE-IC\source\driver\24c02.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;		None
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;		None
  8540 ;; Return value:  Size  Location     Type
  8541 ;;		None               void
  8542 ;; Registers used:
  8543 ;;		None
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;Total ram usage:        0 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    1
  8556 ;; This function calls:
  8557 ;;		Nothing
  8558 ;; This function is called by:
  8559 ;;		_write_24c02
  8560 ;;		_read_24c02
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           
  8565                           ;psect for function _start_i2c
  8566  0DC8                     _start_i2c:	
  8567                           
  8568                           ;24c02.c: 61: RC4 = 0x01;
  8569                           
  8570                           ;incstack = 0
  8571                           ; Regs used in _start_i2c: []
  8572  0DC8  0020               	movlb	0	; select bank0
  8573  0DC9  160E               	bsf	14,4	;volatile
  8574                           
  8575                           ;24c02.c: 62: __nop();
  8576  0DCA  0000               	nop
  8577                           
  8578                           ;24c02.c: 63: RC3 = 0x01;
  8579  0DCB  0020               	movlb	0	; select bank0
  8580  0DCC  158E               	bsf	14,3	;volatile
  8581                           
  8582                           ;24c02.c: 64: __nop();__nop();__nop();__nop();__nop();
  8583  0DCD  0000               	nop
  8584  0DCE  0000               	nop
  8585  0DCF  0000               	nop
  8586  0DD0  0000               	nop
  8587  0DD1  0000               	nop
  8588                           
  8589                           ;24c02.c: 65: RC4 = 0x00;
  8590  0DD2  0020               	movlb	0	; select bank0
  8591  0DD3  120E               	bcf	14,4	;volatile
  8592                           
  8593                           ;24c02.c: 66: __nop();__nop();__nop();__nop();__nop();
  8594  0DD4  0000               	nop
  8595  0DD5  0000               	nop
  8596  0DD6  0000               	nop
  8597  0DD7  0000               	nop
  8598  0DD8  0000               	nop
  8599                           
  8600                           ;24c02.c: 67: RC3 = 0x00;
  8601  0DD9  0020               	movlb	0	; select bank0
  8602  0DDA  118E               	bcf	14,3	;volatile
  8603                           
  8604                           ;24c02.c: 68: __nop();__nop();
  8605  0DDB  0000               	nop
  8606  0DDC  0000               	nop
  8607  0DDD  0008               	return
  8608  0DDE                     __end_of_start_i2c:	
  8609  0DDE                     __ptext22:	
  8610 ;; *************** function _checksum *****************
  8611 ;; Defined at:
  8612 ;;		line 113 in file "D:\WORKproject\AJ-BLE-IC\source\application\other.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  data            1    wreg     PTR unsigned char 
  8615 ;;		 -> read_card_content@data(16), 
  8616 ;;  length          1    0[COMMON] unsigned char 
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;  data            1    3[COMMON] PTR unsigned char 
  8619 ;;		 -> read_card_content@data(16), 
  8620 ;;  i               1    4[COMMON] unsigned char 
  8621 ;;  sum             1    2[COMMON] unsigned char 
  8622 ;; Return value:  Size  Location     Type
  8623 ;;                  1    wreg      unsigned char 
  8624 ;; Registers used:
  8625 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8626 ;; Tracked objects:
  8627 ;;		On entry : 1F/0
  8628 ;;		On exit  : 1F/0
  8629 ;;		Unchanged: 1F/0
  8630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8631 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8635 ;;Total ram usage:        5 bytes
  8636 ;; Hardware stack levels used:    1
  8637 ;; Hardware stack levels required when called:    1
  8638 ;; This function calls:
  8639 ;;		Nothing
  8640 ;; This function is called by:
  8641 ;;		_read_card_content
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645                           
  8646                           ;psect for function _checksum
  8647  0DDE                     _checksum:	
  8648                           
  8649                           ;incstack = 0
  8650                           ; Regs used in _checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  8651                           ;checksum@data stored from wreg
  8652  0DDE  00F3               	movwf	checksum@data
  8653                           
  8654                           ;other.c: 118: BYTE i = 0x00;
  8655  0DDF  01F4               	clrf	checksum@i
  8656                           
  8657                           ;other.c: 119: BYTE sum = 0x00;
  8658  0DE0  01F2               	clrf	checksum@sum
  8659                           
  8660                           ;other.c: 121: for (i = 0x00; i < length; i++)
  8661  0DE1  01F4               	clrf	checksum@i
  8662  0DE2                     l6116:	
  8663  0DE2  0870               	movf	checksum@length,w
  8664  0DE3  0274               	subwf	checksum@i,w
  8665  0DE4  1803               	btfsc	3,0
  8666  0DE5  2DEF               	goto	l6118
  8667                           
  8668                           ;other.c: 122: {
  8669                           ;other.c: 123: sum += data[i];
  8670  0DE6  0874               	movf	checksum@i,w
  8671  0DE7  0773               	addwf	checksum@data,w
  8672  0DE8  00F1               	movwf	??_checksum
  8673  0DE9  0086               	movwf	6
  8674  0DEA  0187               	clrf	7
  8675  0DEB  0801               	movf	1,w
  8676  0DEC  07F2               	addwf	checksum@sum,f
  8677  0DED  0AF4               	incf	checksum@i,f
  8678  0DEE  2DE2               	goto	l6116
  8679  0DEF                     l6118:	
  8680                           
  8681                           ;other.c: 124: }
  8682                           ;other.c: 126: return sum;
  8683  0DEF  0872               	movf	checksum@sum,w
  8684  0DF0  0008               	return
  8685  0DF1                     __end_of_checksum:	
  8686  0DF1                     __ptext61:	
  8687 ;; *************** function _rece_byte *****************
  8688 ;; Defined at:
  8689 ;;		line 85 in file "D:\WORKproject\AJ-BLE-IC\source\driver\24c02.c"
  8690 ;; Parameters:    Size  Location     Type
  8691 ;;		None
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;  i               1    1[COMMON] unsigned char 
  8694 ;;  read_data       1    0[COMMON] unsigned char 
  8695 ;; Return value:  Size  Location     Type
  8696 ;;                  1    wreg      unsigned char 
  8697 ;; Registers used:
  8698 ;;		wreg, status,2, status,0
  8699 ;; Tracked objects:
  8700 ;;		On entry : 0/0
  8701 ;;		On exit  : 1F/1
  8702 ;;		Unchanged: 0/0
  8703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;Total ram usage:        2 bytes
  8709 ;; Hardware stack levels used:    1
  8710 ;; Hardware stack levels required when called:    1
  8711 ;; This function calls:
  8712 ;;		Nothing
  8713 ;; This function is called by:
  8714 ;;		_read_24c02
  8715 ;; This function uses a non-reentrant model
  8716 ;;
  8717                           
  8718                           
  8719                           ;psect for function _rece_byte
  8720  0DF1                     _rece_byte:	
  8721                           
  8722                           ;24c02.c: 90: BYTE read_data = 0x00;
  8723                           
  8724                           ;incstack = 0
  8725                           ; Regs used in _rece_byte: [wreg+status,2+status,0]
  8726  0DF1  01F0               	clrf	rece_byte@read_data
  8727                           
  8728                           ;24c02.c: 92: (TRISCbits.TRISC4) = 0x01;
  8729  0DF2  0021               	movlb	1	; select bank1
  8730  0DF3  160E               	bsf	14,4	;volatile
  8731                           
  8732                           ;24c02.c: 93: for (i = 0x00; i < 0x08; i++)
  8733  0DF4  01F1               	clrf	rece_byte@i
  8734  0DF5                     l632:	
  8735                           
  8736                           ;24c02.c: 94: {
  8737                           ;24c02.c: 95: __nop();__nop();__nop();
  8738  0DF5  0000               	nop
  8739  0DF6  0000               	nop
  8740  0DF7  0000               	nop
  8741                           
  8742                           ;24c02.c: 96: RC3 = 0x01;
  8743  0DF8  0020               	movlb	0	; select bank0
  8744  0DF9  158E               	bsf	14,3	;volatile
  8745                           
  8746                           ;24c02.c: 97: __nop();__nop();
  8747  0DFA  0000               	nop
  8748  0DFB  0000               	nop
  8749                           
  8750                           ;24c02.c: 98: read_data <<= 0x01;
  8751  0DFC  35F0               	lslf	rece_byte@read_data,f
  8752                           
  8753                           ;24c02.c: 99: if (RC4 == 0x01)
  8754  0DFD  0020               	movlb	0	; select bank0
  8755  0DFE  1A0E               	btfsc	14,4	;volatile
  8756                           
  8757                           ;24c02.c: 100: {
  8758                           ;24c02.c: 101: read_data = read_data + 0x01;
  8759  0DFF  0AF0               	incf	rece_byte@read_data,f
  8760                           
  8761                           ;24c02.c: 102: }
  8762                           ;24c02.c: 103: __nop();
  8763  0E00  0000               	nop
  8764                           
  8765                           ;24c02.c: 104: RC3 = 0x00;
  8766  0E01  0020               	movlb	0	; select bank0
  8767  0E02  118E               	bcf	14,3	;volatile
  8768  0E03  3008               	movlw	8
  8769  0E04  0AF1               	incf	rece_byte@i,f
  8770  0E05  0271               	subwf	rece_byte@i,w
  8771  0E06  1C03               	skipc
  8772  0E07  2DF5               	goto	l632
  8773                           
  8774                           ;24c02.c: 105: }
  8775                           ;24c02.c: 106: (TRISCbits.TRISC4) = 0x00;
  8776  0E08  0021               	movlb	1	; select bank1
  8777  0E09  120E               	bcf	14,4	;volatile
  8778                           
  8779                           ;24c02.c: 107: return read_data;
  8780  0E0A  0870               	movf	rece_byte@read_data,w
  8781  0E0B  0008               	return
  8782  0E0C                     __end_of_rece_byte:	
  8783  0E0C                     __ptext25:	
  8784 ;; *************** function _Mf500PiccRead *****************
  8785 ;; Defined at:
  8786 ;;		line 895 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;  addr            1    wreg     unsigned char 
  8789 ;;  data1           1   11[COMMON] PTR unsigned char 
  8790 ;;		 -> read_card_content@data(16), 
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;  addr            1   10[BANK0 ] unsigned char 
  8793 ;;  i               1   12[BANK0 ] unsigned char 
  8794 ;;  ret_status      1   11[BANK0 ] char 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  1    wreg      unsigned char 
  8797 ;; Registers used:
  8798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8799 ;; Tracked objects:
  8800 ;;		On entry : 1F/0
  8801 ;;		On exit  : 1F/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8804 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;Total ram usage:        5 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    6
  8811 ;; This function calls:
  8812 ;;		_FlushFIFO
  8813 ;;		_PcdSetTmo
  8814 ;;		_PcdSingleResponseCmd
  8815 ;;		_WriteRC
  8816 ;;		_memcpy
  8817 ;; This function is called by:
  8818 ;;		_read_card_content
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           
  8823                           ;psect for function _Mf500PiccRead
  8824  0E0C                     _Mf500PiccRead:	
  8825                           
  8826                           ;incstack = 0
  8827                           ; Regs used in _Mf500PiccRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8828                           ;Mf500PiccRead@addr stored from wreg
  8829  0E0C  00AA               	movwf	Mf500PiccRead@addr
  8830                           
  8831                           ;mfrc500.c: 904: FlushFIFO();
  8832  0E0D  2666               	fcall	_FlushFIFO
  8833                           
  8834                           ;mfrc500.c: 905: PcdSetTmo(4);
  8835  0E0E  3004               	movlw	4
  8836  0E0F  00F5               	movwf	PcdSetTmo@tmoLength
  8837  0E10  01F6               	clrf	PcdSetTmo@tmoLength+1
  8838  0E11  3196  2623  3188   	fcall	_PcdSetTmo
  8839                           
  8840                           ;mfrc500.c: 906: WriteRC(0x22, 0xF);
  8841  0E14  300F               	movlw	15
  8842  0E15  00F2               	movwf	WriteRC@data
  8843  0E16  3022               	movlw	34
  8844  0E17  3197  27BA  3188   	fcall	_WriteRC
  8845                           
  8846                           ;mfrc500.c: 907: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
  8847  0E1A  0020               	movlb	0	; select bank0
  8848  0E1B  3030               	movlw	48
  8849  0E1C  3197  27E2  3188   	fcall	PL2	;call to abstracted procedure
  8850                           
  8851                           ;mfrc500.c: 908: MSndBuffer[0] = 0x30;
  8852  0E1F  0021               	movlb	1	; select bank1
  8853  0E20  00B6               	movwf	_MSndBuffer^(0+128)
  8854                           
  8855                           ;mfrc500.c: 909: MSndBuffer[1] = addr;
  8856  0E21  0020               	movlb	0	; select bank0
  8857  0E22  082A               	movf	Mf500PiccRead@addr,w
  8858  0E23  0021               	movlb	1	; select bank1
  8859  0E24  00B7               	movwf	(_MSndBuffer^(0+128)+1)
  8860                           
  8861                           ;mfrc500.c: 910: MInfo.nBytesToSend = 2;
  8862  0E25  3002               	movlw	2
  8863  0E26  0020               	movlb	0	; select bank0
  8864  0E27  00E7               	movwf	_MInfo+3
  8865                           
  8866                           ;mfrc500.c: 911: ret_status = PcdSingleResponseCmd(0x1e);
  8867  0E28  301E               	movlw	30
  8868  0E29  3196  2664  3188   	fcall	_PcdSingleResponseCmd
  8869  0E2C  00AB               	movwf	Mf500PiccRead@ret_status
  8870                           
  8871                           ;mfrc500.c: 912: if (ret_status != 0)
  8872  0E2D  082B               	movf	Mf500PiccRead@ret_status,w
  8873  0E2E  1903               	btfsc	3,2
  8874  0E2F  2E49               	goto	l6086
  8875                           
  8876                           ;mfrc500.c: 913: {
  8877                           ;mfrc500.c: 914: if (ret_status != (-1))
  8878  0E30  0A2B               	incf	Mf500PiccRead@ret_status,w
  8879  0E31  1903               	skipnz
  8880  0E32  2E43               	goto	l6074
  8881                           
  8882                           ;mfrc500.c: 915: {
  8883                           ;mfrc500.c: 916: if (MInfo.nBitsReceived == 4)
  8884  0E33  0869               	movf	_MInfo+5,w
  8885  0E34  3A04               	xorlw	4
  8886  0E35  1D03               	skipz
  8887  0E36  2E43               	goto	l6074
  8888                           
  8889                           ;mfrc500.c: 917: {
  8890                           ;mfrc500.c: 918: MRcvBuffer[0] &= 0x0f;
  8891  0E37  300F               	movlw	15
  8892  0E38  0021               	movlb	1	; select bank1
  8893  0E39  05A6               	andwf	_MRcvBuffer^(0+128),f
  8894                           
  8895                           ;mfrc500.c: 919: if ((MRcvBuffer[0] & 0x0a) == 0)
  8896  0E3A  0826               	movf	_MRcvBuffer^(0+128),w
  8897  0E3B  390A               	andlw	10
  8898  0E3C  1D03               	btfss	3,2
  8899  0E3D  2E40               	goto	l6072
  8900                           
  8901                           ;mfrc500.c: 920: {
  8902                           ;mfrc500.c: 921: ret_status = (-10);
  8903  0E3E  30F6               	movlw	-10
  8904  0E3F  2E41               	goto	L8
  8905  0E40                     l6072:	
  8906                           ;mfrc500.c: 922: }
  8907                           
  8908                           
  8909                           ;mfrc500.c: 923: else
  8910                           ;mfrc500.c: 924: {
  8911                           ;mfrc500.c: 925: ret_status = (-6);
  8912  0E40  30FA               	movlw	-6
  8913  0E41                     L8:	
  8914  0E41  0020               	movlb	0	; select bank0
  8915  0E42  00AB               	movwf	Mf500PiccRead@ret_status
  8916  0E43                     l6074:	
  8917                           
  8918                           ;mfrc500.c: 926: }
  8919                           ;mfrc500.c: 927: }
  8920                           ;mfrc500.c: 928: }
  8921                           ;mfrc500.c: 929: for (i = 0; i < 16; i++)
  8922  0E43  01AC               	clrf	Mf500PiccRead@i
  8923  0E44                     l6080:	
  8924                           
  8925                           ;mfrc500.c: 930: {
  8926                           ;mfrc500.c: 931: data1[i] = 0;
  8927  0E44  27AB  3188         	fcall	PL6	;call to abstracted procedure
  8928  0E46  1803               	btfsc	3,0
  8929  0E47  2E5E               	goto	l6104
  8930  0E48  2E44               	goto	l6080
  8931  0E49                     l6086:	
  8932                           
  8933                           ;mfrc500.c: 934: else
  8934                           ;mfrc500.c: 935: {
  8935                           ;mfrc500.c: 937: if (MInfo.nBytesReceived != 16)
  8936  0E49  0868               	movf	_MInfo+4,w
  8937  0E4A  3A10               	xorlw	16
  8938  0E4B  1903               	skipnz
  8939  0E4C  2E55               	goto	l6102
  8940                           
  8941                           ;mfrc500.c: 938: {
  8942                           ;mfrc500.c: 939: ret_status = (-12);
  8943  0E4D  30F4               	movlw	-12
  8944  0E4E  00AB               	movwf	Mf500PiccRead@ret_status
  8945                           
  8946                           ;mfrc500.c: 940: for (i = 0; i < 16; i++)
  8947  0E4F  01AC               	clrf	Mf500PiccRead@i
  8948  0E50                     l6096:	
  8949                           
  8950                           ;mfrc500.c: 941: {
  8951                           ;mfrc500.c: 942: data1[i] = 0x00;
  8952  0E50  27AB  3188         	fcall	PL6	;call to abstracted procedure
  8953  0E52  1803               	btfsc	3,0
  8954  0E53  2E5E               	goto	l6104
  8955  0E54  2E50               	goto	l6096
  8956  0E55                     l6102:	
  8957                           
  8958                           ;mfrc500.c: 945: else
  8959                           ;mfrc500.c: 946: {
  8960                           ;mfrc500.c: 947: memcpy(data1, MRcvBuffer, 16);
  8961  0E55  30A6               	movlw	low _MRcvBuffer
  8962  0E56  00F0               	movwf	memcpy@s1
  8963  0E57  3000               	movlw	high _MRcvBuffer
  8964  0E58  00F1               	movwf	memcpy@s1+1
  8965  0E59  3010               	movlw	16
  8966  0E5A  00F2               	movwf	memcpy@n
  8967  0E5B  01F3               	clrf	memcpy@n+1
  8968  0E5C  087B               	movf	Mf500PiccRead@data1,w
  8969  0E5D  26AE               	fcall	_memcpy
  8970  0E5E                     l6104:	
  8971                           
  8972                           ;mfrc500.c: 948: }
  8973                           ;mfrc500.c: 949: }
  8974                           ;mfrc500.c: 950: PcdSetTmo(1);
  8975  0E5E  01F5               	clrf	PcdSetTmo@tmoLength
  8976  0E5F  0AF5               	incf	PcdSetTmo@tmoLength,f
  8977  0E60  01F6               	clrf	PcdSetTmo@tmoLength+1
  8978  0E61  3196  2623         	fcall	_PcdSetTmo
  8979                           
  8980                           ;mfrc500.c: 952: return ret_status;
  8981  0E63  0020               	movlb	0	; select bank0
  8982  0E64  082B               	movf	Mf500PiccRead@ret_status,w
  8983  0E65  0008               	return
  8984  0E66                     __end_of_Mf500PiccRead:	
  8985  0E66                     __ptext45:	
  8986 ;; *************** function _FlushFIFO *****************
  8987 ;; Defined at:
  8988 ;;		line 195 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
  8989 ;; Parameters:    Size  Location     Type
  8990 ;;		None
  8991 ;; Auto vars:     Size  Location     Type
  8992 ;;		None
  8993 ;; Return value:  Size  Location     Type
  8994 ;;		None               void
  8995 ;; Registers used:
  8996 ;;		wreg, status,2, status,0, pclath, cstack
  8997 ;; Tracked objects:
  8998 ;;		On entry : 1E/0
  8999 ;;		On exit  : 1F/1
  9000 ;;		Unchanged: 0/0
  9001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;Total ram usage:        0 bytes
  9007 ;; Hardware stack levels used:    1
  9008 ;; Hardware stack levels required when called:    4
  9009 ;; This function calls:
  9010 ;;		_SetBitMask
  9011 ;; This function is called by:
  9012 ;;		_PcdSingleResponseCmd
  9013 ;;		_Mf500PiccLoadKey
  9014 ;;		_Mf500PiccRead
  9015 ;;		_Mf500PiccWrite
  9016 ;; This function uses a non-reentrant model
  9017 ;;
  9018                           
  9019                           
  9020                           ;psect for function _FlushFIFO
  9021  0E66                     _FlushFIFO:	
  9022                           
  9023                           ;incstack = 0
  9024                           ; Regs used in _FlushFIFO: [wreg+status,2+status,0+pclath+cstack]
  9025  0E66  3009               	movlw	9
  9026                           
  9027                           ;mfrc500.c: 199: SetBitMask(0x09, 0x01);
  9028  0E67  01F5               	clrf	SetBitMask@mask
  9029  0E68  0AF5               	incf	SetBitMask@mask,f
  9030  0E69  3197  2FDA         	ljmp	_SetBitMask
  9031  0E6B                     __end_of_FlushFIFO:	
  9032  0E6B                     __ptext30:	
  9033 ;; *************** function _Mf500PiccCommonRequest *****************
  9034 ;; Defined at:
  9035 ;;		line 574 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;  req_code        1    wreg     unsigned char 
  9038 ;;  atq             1   11[COMMON] PTR unsigned char 
  9039 ;;		 -> tt1(2), 
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;  req_code        1   12[COMMON] unsigned char 
  9042 ;;  ret_status      1   13[COMMON] unsigned char 
  9043 ;; Return value:  Size  Location     Type
  9044 ;;                  1    wreg      unsigned char 
  9045 ;; Registers used:
  9046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9047 ;; Tracked objects:
  9048 ;;		On entry : 1F/0
  9049 ;;		On exit  : 1E/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9052 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9053 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;Total ram usage:        3 bytes
  9057 ;; Hardware stack levels used:    1
  9058 ;; Hardware stack levels required when called:    6
  9059 ;; This function calls:
  9060 ;;		_PcdSetTmo
  9061 ;;		_PcdSingleResponseCmd
  9062 ;;		_WriteRC
  9063 ;;		_memcpy
  9064 ;; This function is called by:
  9065 ;;		_Mf500PiccRequest
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           
  9070                           ;psect for function _Mf500PiccCommonRequest
  9071  0E6B                     _Mf500PiccCommonRequest:	
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in _Mf500PiccCommonRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9075                           ;Mf500PiccCommonRequest@req_code stored from wreg
  9076  0E6B  00FC               	movwf	Mf500PiccCommonRequest@req_code
  9077                           
  9078                           ;mfrc500.c: 581: PcdSetTmo(106);
  9079  0E6C  306A               	movlw	106
  9080  0E6D  00F5               	movwf	PcdSetTmo@tmoLength
  9081  0E6E  01F6               	clrf	PcdSetTmo@tmoLength+1
  9082  0E6F  3196  2623  3188   	fcall	_PcdSetTmo
  9083                           
  9084                           ;mfrc500.c: 583: WriteRC(0x22, 0x03);
  9085  0E72  3003               	movlw	3
  9086  0E73  00F2               	movwf	WriteRC@data
  9087  0E74  3022               	movlw	34
  9088  0E75  3197  27BA  3188   	fcall	_WriteRC
  9089                           
  9090                           ;mfrc500.c: 584: WriteRC(0x09, 0x08);
  9091  0E78  3008               	movlw	8
  9092  0E79  00F2               	movwf	WriteRC@data
  9093  0E7A  3009               	movlw	9
  9094  0E7B  3197  27BA  3188   	fcall	_WriteRC
  9095                           
  9096                           ;mfrc500.c: 586: WriteRC(0x0F, 0x07);
  9097  0E7E  3007               	movlw	7
  9098  0E7F  00F2               	movwf	WriteRC@data
  9099  0E80  300F               	movlw	15
  9100  0E81  3197  27BA  3188   	fcall	_WriteRC
  9101                           
  9102                           ;mfrc500.c: 588: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
  9103  0E84  0020               	movlb	0	; select bank0
  9104  0E85  3197  27E2  3188   	fcall	PL2	;call to abstracted procedure
  9105                           
  9106                           ;mfrc500.c: 590: MSndBuffer[0] = req_code;
  9107  0E88  087C               	movf	Mf500PiccCommonRequest@req_code,w
  9108  0E89  0021               	movlb	1	; select bank1
  9109  0E8A  00B6               	movwf	_MSndBuffer^(0+128)
  9110                           
  9111                           ;mfrc500.c: 591: MInfo.nBytesToSend = 0x01;
  9112  0E8B  0020               	movlb	0	; select bank0
  9113  0E8C  301E               	movlw	30
  9114  0E8D  01E7               	clrf	_MInfo+3
  9115  0E8E  0AE7               	incf	_MInfo+3,f
  9116                           
  9117                           ;mfrc500.c: 592: ret_status = PcdSingleResponseCmd(0x1e);
  9118  0E8F  3196  2664  3188   	fcall	_PcdSingleResponseCmd
  9119  0E92  00FD               	movwf	Mf500PiccCommonRequest@ret_status
  9120                           
  9121                           ;mfrc500.c: 593: if (ret_status)
  9122  0E93  087D               	movf	Mf500PiccCommonRequest@ret_status,w
  9123  0E94  1903               	btfsc	3,2
  9124  0E95  2E9B               	goto	l7180
  9125                           
  9126                           ;mfrc500.c: 594: {
  9127                           ;mfrc500.c: 595: *atq = 0x00;
  9128  0E96  087B               	movf	Mf500PiccCommonRequest@atq,w
  9129  0E97  0086               	movwf	6
  9130  0E98  0187               	clrf	7
  9131  0E99  0181               	clrf	1
  9132                           
  9133                           ;mfrc500.c: 596: }
  9134  0E9A  2EAC               	goto	l7188
  9135  0E9B                     l7180:	
  9136                           
  9137                           ;mfrc500.c: 597: else
  9138                           ;mfrc500.c: 598: {
  9139                           ;mfrc500.c: 599: if (MInfo.nBitsReceived != 0x10)
  9140  0E9B  0869               	movf	_MInfo+5,w
  9141  0E9C  3A10               	xorlw	16
  9142  0E9D  1903               	skipnz
  9143  0E9E  2EA2               	goto	l7184
  9144                           
  9145                           ;mfrc500.c: 600: {
  9146                           ;mfrc500.c: 601: ret_status = (-11);
  9147  0E9F  30F5               	movlw	245
  9148  0EA0  00FD               	movwf	Mf500PiccCommonRequest@ret_status
  9149                           
  9150                           ;mfrc500.c: 602: }
  9151  0EA1  2EAC               	goto	l7188
  9152  0EA2                     l7184:	
  9153  0EA2  30A6               	movlw	low _MRcvBuffer
  9154                           
  9155                           ;mfrc500.c: 603: else
  9156                           ;mfrc500.c: 604: {
  9157                           ;mfrc500.c: 605: ret_status = 0;
  9158  0EA3  01FD               	clrf	Mf500PiccCommonRequest@ret_status
  9159                           
  9160                           ;mfrc500.c: 606: memcpy(atq, MRcvBuffer, 0x02);
  9161  0EA4  00F0               	movwf	memcpy@s1
  9162  0EA5  3000               	movlw	high _MRcvBuffer
  9163  0EA6  00F1               	movwf	memcpy@s1+1
  9164  0EA7  3002               	movlw	2
  9165  0EA8  00F2               	movwf	memcpy@n
  9166  0EA9  01F3               	clrf	memcpy@n+1
  9167  0EAA  087B               	movf	Mf500PiccCommonRequest@atq,w
  9168  0EAB  26AE               	fcall	_memcpy
  9169  0EAC                     l7188:	
  9170                           
  9171                           ;mfrc500.c: 607: }
  9172                           ;mfrc500.c: 608: }
  9173                           ;mfrc500.c: 610: return ret_status;
  9174  0EAC  087D               	movf	Mf500PiccCommonRequest@ret_status,w
  9175  0EAD  0008               	return
  9176  0EAE                     __end_of_Mf500PiccCommonRequest:	
  9177  0EAE                     __ptext42:	
  9178 ;; *************** function _memcpy *****************
  9179 ;; Defined at:
  9180 ;;		line 11 in file "D:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\memcpy.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;  d1              1    wreg     PTR void 
  9183 ;;		 -> Mf500PiccCascAnticoll@snr_in(4), MSndBuffer(16), snr_rc500(4), tt1(2), 
  9184 ;;		 -> read_card_content@data(16), 
  9185 ;;  s1              2    0[COMMON] PTR const void 
  9186 ;;		 -> STR_1(5), Mf500PiccCascAnticoll@snr_in(4), MRcvBuffer(16), snr_rc500(4), 
  9187 ;;		 -> read_card_content@data(16), 
  9188 ;;  n               2    2[COMMON] unsigned int 
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;  d1              1    7[COMMON] PTR void 
  9191 ;;		 -> Mf500PiccCascAnticoll@snr_in(4), MSndBuffer(16), snr_rc500(4), tt1(2), 
  9192 ;;		 -> read_card_content@data(16), 
  9193 ;;  s               2    4[COMMON] PTR const unsigned char 
  9194 ;;		 -> STR_1(5), Mf500PiccCascAnticoll@snr_in(4), MRcvBuffer(16), snr_rc500(4), 
  9195 ;;		 -> read_card_content@data(16), 
  9196 ;;  d               1    6[COMMON] PTR unsigned char 
  9197 ;;		 -> Mf500PiccCascAnticoll@snr_in(4), MSndBuffer(16), snr_rc500(4), tt1(2), 
  9198 ;;		 -> read_card_content@data(16), 
  9199 ;; Return value:  Size  Location     Type
  9200 ;;                  1    wreg      PTR void 
  9201 ;; Registers used:
  9202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  9203 ;; Tracked objects:
  9204 ;;		On entry : 1E/0
  9205 ;;		On exit  : 1E/0
  9206 ;;		Unchanged: 1E/0
  9207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9208 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9211 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9212 ;;Total ram usage:        8 bytes
  9213 ;; Hardware stack levels used:    1
  9214 ;; Hardware stack levels required when called:    1
  9215 ;; This function calls:
  9216 ;;		Nothing
  9217 ;; This function is called by:
  9218 ;;		_Mf500PiccCommonRequest
  9219 ;;		_Mf500PiccCascAnticoll
  9220 ;;		_Mf500PiccCascSelect
  9221 ;;		_Mf500PiccAuthState
  9222 ;;		_Mf500PiccRead
  9223 ;;		_Mf500PiccWrite
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           
  9228                           ;psect for function _memcpy
  9229  0EAE                     _memcpy:	
  9230                           
  9231                           ;incstack = 0
  9232                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  9233                           ;memcpy@d1 stored from wreg
  9234  0EAE  00F7               	movwf	memcpy@d1
  9235  0EAF  0871               	movf	memcpy@s1+1,w
  9236  0EB0  00F5               	movwf	memcpy@s+1
  9237  0EB1  0870               	movf	memcpy@s1,w
  9238  0EB2  00F4               	movwf	memcpy@s
  9239  0EB3  0877               	movf	memcpy@d1,w
  9240  0EB4  00F6               	movwf	memcpy@d
  9241  0EB5                     l7200:	
  9242  0EB5  3001               	movlw	1
  9243  0EB6  02F2               	subwf	memcpy@n,f
  9244  0EB7  3000               	movlw	0
  9245  0EB8  3BF3               	subwfb	memcpy@n+1,f
  9246  0EB9  0A72               	incf	memcpy@n,w
  9247  0EBA  1903               	skipnz
  9248  0EBB  0A73               	incf	memcpy@n+1,w
  9249  0EBC  1903               	btfsc	3,2
  9250  0EBD  0008               	return
  9251  0EBE  0876               	movf	memcpy@d,w
  9252  0EBF  0086               	movwf	6
  9253  0EC0  0187               	clrf	7
  9254  0EC1  0874               	movf	memcpy@s,w
  9255  0EC2  0084               	movwf	4
  9256  0EC3  0875               	movf	memcpy@s+1,w
  9257  0EC4  0085               	movwf	5
  9258  0EC5  0800               	movf	0,w	;code access
  9259  0EC6  0081               	movwf	1
  9260  0EC7  0AF4               	incf	memcpy@s,f
  9261  0EC8  1903               	skipnz
  9262  0EC9  0AF5               	incf	memcpy@s+1,f
  9263  0ECA  0AF6               	incf	memcpy@d,f
  9264  0ECB  2EB5               	goto	l7200
  9265  0ECC                     __end_of_memcpy:	
  9266  0ECC                     __ptext18:	
  9267 ;; *************** function _handle_ic_card *****************
  9268 ;; Defined at:
  9269 ;;		line 595 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_ic_card.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;		None
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;		None
  9274 ;; Return value:  Size  Location     Type
  9275 ;;		None               void
  9276 ;; Registers used:
  9277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9278 ;; Tracked objects:
  9279 ;;		On entry : 1F/0
  9280 ;;		On exit  : 1E/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;Total ram usage:        0 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:   10
  9290 ;; This function calls:
  9291 ;;		_checkpsw
  9292 ;;		_checkpsw_super
  9293 ;;		_handle_beep
  9294 ;;		_read_card_content
  9295 ;;		_read_id
  9296 ;;		_rfcard
  9297 ;;		_same_id
  9298 ;; This function is called by:
  9299 ;;		_main
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           
  9304                           ;psect for function _handle_ic_card
  9305  0ECC                     _handle_ic_card:	
  9306                           
  9307                           ;handle_ic_card.c: 599: if (!rfcard())
  9308                           
  9309                           ;incstack = 0
  9310                           ; Regs used in _handle_ic_card: [allreg]
  9311  0ECC  278A  3188         	fcall	_rfcard
  9312  0ECE  3800               	iorlw	0
  9313  0ECF  1D03               	skipz
  9314  0ED0  2F16               	goto	l6456
  9315                           
  9316                           ;handle_ic_card.c: 600: {
  9317                           ;handle_ic_card.c: 601: count = 0x05;
  9318  0ED1  3005               	movlw	5
  9319  0ED2  00D7               	movwf	_count
  9320                           
  9321                           ;handle_ic_card.c: 602: if (read_id())
  9322  0ED3  277E  3188         	fcall	_read_id
  9323  0ED5  3A00               	xorlw	0
  9324  0ED6  1903               	skipnz
  9325  0ED7  0008               	return
  9326                           
  9327                           ;handle_ic_card.c: 603: {
  9328                           ;handle_ic_card.c: 604: if (!same_id())
  9329  0ED8  3187  27E8  3188   	fcall	_same_id
  9330  0EDB  3800               	iorlw	0
  9331  0EDC  1D03               	skipz
  9332  0EDD  0008               	return
  9333  0EDE  0064               	clrwdt	;# 
  9334                           
  9335                           ;handle_ic_card.c: 607: card_id[0] = snr_rc500[0];
  9336  0EDF  0021               	movlb	1	; select bank1
  9337  0EE0  085A               	movf	_snr_rc500^(0+128),w
  9338  0EE1  0020               	movlb	0	; select bank0
  9339  0EE2  00CF               	movwf	_card_id
  9340                           
  9341                           ;handle_ic_card.c: 608: card_id[1] = snr_rc500[1];
  9342  0EE3  0021               	movlb	1	; select bank1
  9343  0EE4  085B               	movf	(_snr_rc500^(0+128)+1),w
  9344  0EE5  0020               	movlb	0	; select bank0
  9345  0EE6  00D0               	movwf	_card_id+1
  9346                           
  9347                           ;handle_ic_card.c: 609: card_id[2] = snr_rc500[2];
  9348  0EE7  0021               	movlb	1	; select bank1
  9349  0EE8  085C               	movf	(_snr_rc500^(0+128)+2),w
  9350  0EE9  0020               	movlb	0	; select bank0
  9351  0EEA  00D1               	movwf	_card_id+2
  9352                           
  9353                           ;handle_ic_card.c: 610: card_id[3] = snr_rc500[3];
  9354  0EEB  0021               	movlb	1	; select bank1
  9355  0EEC  085D               	movf	(_snr_rc500^(0+128)+3),w
  9356  0EED  0020               	movlb	0	; select bank0
  9357  0EEE  00D2               	movwf	_card_id+3
  9358                           
  9359                           ;handle_ic_card.c: 611: ic_card[0] = card_id[3];
  9360  0EEF  0021               	movlb	1	; select bank1
  9361  0EF0  00A0               	movwf	_ic_card^(0+128)
  9362                           
  9363                           ;handle_ic_card.c: 612: ic_card[1] = card_id[2];
  9364  0EF1  0020               	movlb	0	; select bank0
  9365  0EF2  0851               	movf	_card_id+2,w
  9366  0EF3  0021               	movlb	1	; select bank1
  9367  0EF4  00A1               	movwf	(_ic_card^(0+128)+1)
  9368                           
  9369                           ;handle_ic_card.c: 613: ic_card[2] = card_id[1];
  9370  0EF5  0020               	movlb	0	; select bank0
  9371  0EF6  0850               	movf	_card_id+1,w
  9372  0EF7  0021               	movlb	1	; select bank1
  9373  0EF8  00A2               	movwf	(_ic_card^(0+128)+2)
  9374                           
  9375                           ;handle_ic_card.c: 614: ic_card[3] = card_id[0];
  9376  0EF9  0020               	movlb	0	; select bank0
  9377  0EFA  084F               	movf	_card_id,w
  9378  0EFB  0021               	movlb	1	; select bank1
  9379  0EFC  00A3               	movwf	(_ic_card^(0+128)+3)
  9380                           
  9381                           ;handle_ic_card.c: 619: if (checkpsw())
  9382  0EFD  2723  3188         	fcall	_checkpsw
  9383  0EFF  3A00               	xorlw	0
  9384  0F00  1903               	skipnz
  9385  0F01  2F0F               	goto	l483
  9386  0F02  0064               	clrwdt	;# 
  9387  0F03                     L4:	
  9388                           
  9389                           ;handle_ic_card.c: 623: {
  9390                           ;handle_ic_card.c: 624: flag_record = 0x01;
  9391  0F03  23CA  3188         	fcall	_read_card_content
  9392  0F05  3A00               	xorlw	0
  9393  0F06  1903               	skipnz
  9394  0F07  2F0C               	goto	l6444
  9395                           
  9396                           ;handle_ic_card.c: 625: handle_beep();
  9397  0F08  3190  2016         	fcall	_handle_beep
  9398                           
  9399                           ;handle_ic_card.c: 626: count = 0x05;
  9400  0F0A  3005               	movlw	5
  9401  0F0B  00D7               	movwf	_count
  9402  0F0C                     l6444:	
  9403                           ;handle_ic_card.c: 627: }
  9404                           
  9405                           
  9406                           ;handle_ic_card.c: 631: }
  9407                           ;handle_ic_card.c: 632: card_type = 0x00;
  9408  0F0C  0020               	movlb	0	; select bank0
  9409  0F0D  01D6               	clrf	_card_type
  9410                           
  9411                           ;handle_ic_card.c: 633: }
  9412  0F0E  0008               	return
  9413  0F0F                     l483:	
  9414  0F0F  0064               	clrwdt	;# 
  9415                           
  9416                           ;handle_ic_card.c: 637: if (checkpsw_super())
  9417  0F10  27D0  3188         	fcall	_checkpsw_super
  9418  0F12  3A00               	xorlw	0
  9419  0F13  1903               	skipnz
  9420  0F14  0008               	return
  9421  0F15  2F03               	goto	L4
  9422  0F16                     l6456:	
  9423                           ;handle_ic_card.c: 659: }
  9424                           ;handle_ic_card.c: 660: }
  9425                           
  9426                           ;handle_ic_card.c: 656: else
  9427                           ;handle_ic_card.c: 657: {
  9428                           
  9429                           ;handle_ic_card.c: 638: {
  9430                           ;handle_ic_card.c: 639: if (read_card_content())
  9431                           
  9432                           
  9433                           ;handle_ic_card.c: 666: else
  9434                           ;handle_ic_card.c: 667: {
  9435                           ;handle_ic_card.c: 668: if (count > 0x0A)
  9436  0F16  300B               	movlw	11
  9437  0F17  0257               	subwf	_count,w
  9438  0F18  1C03               	skipc
  9439  0F19  2F21               	goto	l6462
  9440  0F1A  3005               	movlw	5
  9441                           
  9442                           ;handle_ic_card.c: 669: {
  9443                           ;handle_ic_card.c: 670: card_id[0] = 0x00;
  9444  0F1B  01CF               	clrf	_card_id
  9445                           
  9446                           ;handle_ic_card.c: 671: card_id[1] = 0x00;
  9447  0F1C  01D0               	clrf	_card_id+1
  9448                           
  9449                           ;handle_ic_card.c: 672: card_id[2] = 0x00;
  9450  0F1D  01D1               	clrf	_card_id+2
  9451                           
  9452                           ;handle_ic_card.c: 673: card_id[3] = 0x00;
  9453  0F1E  01D2               	clrf	_card_id+3
  9454                           
  9455                           ;handle_ic_card.c: 674: count = 0x05;
  9456  0F1F  00D7               	movwf	_count
  9457                           
  9458                           ;handle_ic_card.c: 675: }
  9459  0F20  0008               	return
  9460  0F21                     l6462:	
  9461                           
  9462                           ;handle_ic_card.c: 676: else
  9463                           ;handle_ic_card.c: 677: {
  9464                           ;handle_ic_card.c: 678: count++;
  9465  0F21  0AD7               	incf	_count,f
  9466  0F22  0008               	return
  9467  0F23                     __end_of_handle_ic_card:	
  9468  0F23                     __ptext38:	
  9469 ;; *************** function _checkpsw *****************
  9470 ;; Defined at:
  9471 ;;		line 573 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_ic_card.c"
  9472 ;; Parameters:    Size  Location     Type
  9473 ;;		None
  9474 ;; Auto vars:     Size  Location     Type
  9475 ;;		None
  9476 ;; Return value:  Size  Location     Type
  9477 ;;                  1    wreg      unsigned char 
  9478 ;; Registers used:
  9479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9480 ;; Tracked objects:
  9481 ;;		On entry : 1F/1
  9482 ;;		On exit  : 1F/0
  9483 ;;		Unchanged: 0/0
  9484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;Total ram usage:        0 bytes
  9490 ;; Hardware stack levels used:    1
  9491 ;; Hardware stack levels required when called:    7
  9492 ;; This function calls:
  9493 ;;		_Mf500PiccAuthState
  9494 ;;		_Mf500PiccLoadKey
  9495 ;; This function is called by:
  9496 ;;		_handle_ic_card
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           
  9501                           ;psect for function _checkpsw
  9502  0F23                     _checkpsw:	
  9503                           
  9504                           ;handle_ic_card.c: 577: if (Mf500PiccLoadKey(keys) == 0)
  9505                           
  9506                           ;incstack = 0
  9507                           ; Regs used in _checkpsw: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9508  0F23  30D4               	movlw	_keys& (0+255)
  9509  0F24  2737  3188         	fcall	_Mf500PiccLoadKey
  9510  0F26  3800               	iorlw	0
  9511  0F27  1D03               	skipz
  9512  0F28  3400               	retlw	0
  9513                           
  9514                           ;handle_ic_card.c: 578: {
  9515                           ;handle_ic_card.c: 579: if (Mf500PiccAuthState(0x60, snr_rc500, 4 * sector_number) == 0)
  9516  0F29  30DA               	movlw	_snr_rc500& (0+255)
  9517  0F2A  00FB               	movwf	Mf500PiccAuthState@snr
  9518  0F2B  0860               	movf	_sector_number,w
  9519  0F2C  0709               	addwf	9,w
  9520  0F2D  0709               	addwf	9,w
  9521  0F2E  00FC               	movwf	Mf500PiccAuthState@block
  9522  0F2F  3060               	movlw	96
  9523  0F30  3194  2418  3188   	fcall	_Mf500PiccAuthState
  9524  0F33  3800               	iorlw	0
  9525  0F34  1903               	btfsc	3,2
  9526                           
  9527                           ;handle_ic_card.c: 580: {
  9528                           ;handle_ic_card.c: 581: return 0x01;
  9529  0F35  3401               	retlw	1
  9530                           
  9531                           ;handle_ic_card.c: 583: else
  9532                           ;handle_ic_card.c: 584: {
  9533                           ;handle_ic_card.c: 585: return 0x00;
  9534  0F36  3400               	retlw	0
  9535  0F37                     __end_of_checkpsw:	
  9536  0F37                     __ptext39:	
  9537 ;; *************** function _Mf500PiccLoadKey *****************
  9538 ;; Defined at:
  9539 ;;		line 877 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;  keys            1    wreg     PTR unsigned char 
  9542 ;;		 -> keys(6), keys_super(6), 
  9543 ;; Auto vars:     Size  Location     Type
  9544 ;;  keys            1   12[COMMON] PTR unsigned char 
  9545 ;;		 -> keys(6), keys_super(6), 
  9546 ;;  ret_status      1   11[COMMON] unsigned char 
  9547 ;; Return value:  Size  Location     Type
  9548 ;;                  1    wreg      unsigned char 
  9549 ;; Registers used:
  9550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9551 ;; Tracked objects:
  9552 ;;		On entry : 1E/0
  9553 ;;		On exit  : 1F/0
  9554 ;;		Unchanged: 0/0
  9555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9559 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9560 ;;Total ram usage:        2 bytes
  9561 ;; Hardware stack levels used:    1
  9562 ;; Hardware stack levels required when called:    6
  9563 ;; This function calls:
  9564 ;;		_FlushFIFO
  9565 ;;		_Mf500HostCodeKey
  9566 ;;		_PcdSetTmo
  9567 ;;		_PcdSingleResponseCmd
  9568 ;; This function is called by:
  9569 ;;		_checkpsw_super
  9570 ;;		_checkpsw
  9571 ;; This function uses a non-reentrant model
  9572 ;;
  9573                           
  9574                           
  9575                           ;psect for function _Mf500PiccLoadKey
  9576  0F37                     _Mf500PiccLoadKey:	
  9577                           
  9578                           ;incstack = 0
  9579                           ; Regs used in _Mf500PiccLoadKey: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9580                           ;Mf500PiccLoadKey@keys stored from wreg
  9581  0F37  00FC               	movwf	Mf500PiccLoadKey@keys
  9582                           
  9583                           ;mfrc500.c: 883: Mf500HostCodeKey(keys, MSndBuffer);
  9584  0F38  30B6               	movlw	_MSndBuffer& (0+255)
  9585  0F39  00F0               	movwf	Mf500HostCodeKey@coded
  9586  0F3A  087C               	movf	Mf500PiccLoadKey@keys,w
  9587  0F3B  274E               	fcall	_Mf500HostCodeKey
  9588                           
  9589                           ;mfrc500.c: 885: PcdSetTmo(106);
  9590  0F3C  306A               	movlw	106
  9591  0F3D  00F5               	movwf	PcdSetTmo@tmoLength
  9592  0F3E  01F6               	clrf	PcdSetTmo@tmoLength+1
  9593  0F3F  3196  2623  3188   	fcall	_PcdSetTmo
  9594                           
  9595                           ;mfrc500.c: 886: FlushFIFO();
  9596  0F42  2666               	fcall	_FlushFIFO
  9597                           
  9598                           ;mfrc500.c: 887: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
  9599  0F43  0020               	movlb	0	; select bank0
  9600  0F44  300C               	movlw	12
  9601  0F45  3197  27E2  3188   	fcall	PL2	;call to abstracted procedure
  9602                           
  9603                           ;mfrc500.c: 888: MInfo.nBytesToSend = 12;
  9604  0F48  00E7               	movwf	_MInfo+3
  9605                           
  9606                           ;mfrc500.c: 889: ret_status = PcdSingleResponseCmd(0x19);
  9607  0F49  3019               	movlw	25
  9608  0F4A  3196  2664         	fcall	_PcdSingleResponseCmd
  9609  0F4C  00FB               	movwf	Mf500PiccLoadKey@ret_status
  9610                           
  9611                           ;mfrc500.c: 891: return ret_status;
  9612  0F4D  0008               	return
  9613  0F4E                     __end_of_Mf500PiccLoadKey:	
  9614  0F4E                     __ptext40:	
  9615 ;; *************** function _Mf500HostCodeKey *****************
  9616 ;; Defined at:
  9617 ;;		line 795 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  uncoded         1    wreg     PTR unsigned char 
  9620 ;;		 -> keys(6), keys_super(6), 
  9621 ;;  coded           1    0[COMMON] PTR unsigned char 
  9622 ;;		 -> MSndBuffer(16), 
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  uncoded         1    3[COMMON] PTR unsigned char 
  9625 ;;		 -> keys(6), keys_super(6), 
  9626 ;;  cnt             1    6[COMMON] unsigned char 
  9627 ;;  ln              1    5[COMMON] unsigned char 
  9628 ;;  hn              1    4[COMMON] unsigned char 
  9629 ;;  an              1    2[COMMON] unsigned char 
  9630 ;; Return value:  Size  Location     Type
  9631 ;;                  1    wreg      unsigned char 
  9632 ;; Registers used:
  9633 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9634 ;; Tracked objects:
  9635 ;;		On entry : 1E/0
  9636 ;;		On exit  : 1E/0
  9637 ;;		Unchanged: 1E/0
  9638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9639 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;Total ram usage:        7 bytes
  9644 ;; Hardware stack levels used:    1
  9645 ;; Hardware stack levels required when called:    1
  9646 ;; This function calls:
  9647 ;;		Nothing
  9648 ;; This function is called by:
  9649 ;;		_Mf500PiccLoadKey
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653                           
  9654                           ;psect for function _Mf500HostCodeKey
  9655  0F4E                     _Mf500HostCodeKey:	
  9656                           
  9657                           ;incstack = 0
  9658                           ; Regs used in _Mf500HostCodeKey: [wreg+fsr1l+fsr1h+status,2+status,0]
  9659                           ;Mf500HostCodeKey@uncoded stored from wreg
  9660  0F4E  00F3               	movwf	Mf500HostCodeKey@uncoded
  9661                           
  9662                           ;mfrc500.c: 800: unsigned char cnt = 0;
  9663  0F4F  01F6               	clrf	Mf500HostCodeKey@cnt
  9664                           
  9665                           ;mfrc500.c: 802: unsigned char ln = 0;
  9666  0F50  01F5               	clrf	Mf500HostCodeKey@ln
  9667                           
  9668                           ;mfrc500.c: 803: unsigned char hn = 0;
  9669  0F51  01F4               	clrf	Mf500HostCodeKey@hn
  9670                           
  9671                           ;mfrc500.c: 805: for (cnt = 0; cnt < 6; cnt++)
  9672  0F52  01F6               	clrf	Mf500HostCodeKey@cnt
  9673  0F53                     l7390:	
  9674                           
  9675                           ;mfrc500.c: 806: {
  9676                           ;mfrc500.c: 807: ln = uncoded[cnt] & 0x0F;
  9677  0F53  0876               	movf	Mf500HostCodeKey@cnt,w
  9678  0F54  0773               	addwf	Mf500HostCodeKey@uncoded,w
  9679  0F55  00F1               	movwf	??_Mf500HostCodeKey
  9680  0F56  0086               	movwf	6
  9681  0F57  0187               	clrf	7
  9682  0F58  0801               	movf	1,w
  9683  0F59  00F5               	movwf	Mf500HostCodeKey@ln
  9684  0F5A  300F               	movlw	15
  9685  0F5B  05F5               	andwf	Mf500HostCodeKey@ln,f
  9686                           
  9687                           ;mfrc500.c: 808: an = uncoded[cnt];
  9688  0F5C  0876               	movf	Mf500HostCodeKey@cnt,w
  9689  0F5D  0773               	addwf	Mf500HostCodeKey@uncoded,w
  9690  0F5E  00F1               	movwf	??_Mf500HostCodeKey
  9691  0F5F  0086               	movwf	6
  9692  0F60  0801               	movf	1,w
  9693  0F61  00F2               	movwf	Mf500HostCodeKey@an
  9694                           
  9695                           ;mfrc500.c: 809: hn = an >> 4;
  9696  0F62  0E72               	swapf	Mf500HostCodeKey@an,w
  9697  0F63  390F               	andlw	15
  9698  0F64  00F4               	movwf	Mf500HostCodeKey@hn
  9699                           
  9700                           ;mfrc500.c: 810: coded[cnt * 2 + 1] = (~ln << 4) | ln;
  9701  0F65  3576               	lslf	Mf500HostCodeKey@cnt,w
  9702  0F66  0770               	addwf	Mf500HostCodeKey@coded,w
  9703  0F67  00F1               	movwf	??_Mf500HostCodeKey
  9704  0F68  0A71               	incf	??_Mf500HostCodeKey,w
  9705  0F69  0086               	movwf	6
  9706  0F6A  0975               	comf	Mf500HostCodeKey@ln,w
  9707  0F6B  0E89               	swapf	9,f
  9708  0F6C  39F0               	andlw	240
  9709  0F6D  0475               	iorwf	Mf500HostCodeKey@ln,w
  9710  0F6E  0081               	movwf	1
  9711                           
  9712                           ;mfrc500.c: 811: coded[cnt * 2] = (~hn << 4) | hn;
  9713  0F6F  3576               	lslf	Mf500HostCodeKey@cnt,w
  9714  0F70  0770               	addwf	Mf500HostCodeKey@coded,w
  9715  0F71  00F1               	movwf	??_Mf500HostCodeKey
  9716  0F72  0086               	movwf	6
  9717  0F73  0974               	comf	Mf500HostCodeKey@hn,w
  9718  0F74  0E89               	swapf	9,f
  9719  0F75  39F0               	andlw	240
  9720  0F76  0474               	iorwf	Mf500HostCodeKey@hn,w
  9721  0F77  0081               	movwf	1
  9722  0F78  3006               	movlw	6
  9723  0F79  0AF6               	incf	Mf500HostCodeKey@cnt,f
  9724  0F7A  0276               	subwf	Mf500HostCodeKey@cnt,w
  9725  0F7B  1803               	btfsc	3,0
  9726  0F7C  0008               	return
  9727  0F7D  2F53               	goto	l7390
  9728  0F7E                     __end_of_Mf500HostCodeKey:	
  9729  0F7E                     __ptext34:	
  9730 ;; *************** function _read_id *****************
  9731 ;; Defined at:
  9732 ;;		line 503 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_ic_card.c"
  9733 ;; Parameters:    Size  Location     Type
  9734 ;;		None
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;		None
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      unsigned char 
  9739 ;; Registers used:
  9740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9741 ;; Tracked objects:
  9742 ;;		On entry : 1F/0
  9743 ;;		On exit  : 1F/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;Total ram usage:        0 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    8
  9753 ;; This function calls:
  9754 ;;		_Mf500PiccSelect
  9755 ;; This function is called by:
  9756 ;;		_checkpsw_super
  9757 ;;		_handle_ic_card
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           
  9762                           ;psect for function _read_id
  9763  0F7E                     _read_id:	
  9764                           
  9765                           ;handle_ic_card.c: 508: if (Mf500PiccSelect(snr_rc500) == 0)
  9766                           
  9767                           ;incstack = 0
  9768                           ; Regs used in _read_id: [allreg]
  9769  0F7E  30DA               	movlw	_snr_rc500& (0+255)
  9770  0F7F  2785  3188         	fcall	_Mf500PiccSelect
  9771  0F81  3800               	iorlw	0
  9772  0F82  1903               	btfsc	3,2
  9773                           
  9774                           ;handle_ic_card.c: 509: {
  9775                           ;handle_ic_card.c: 510: return 0x01;
  9776  0F83  3401               	retlw	1
  9777                           
  9778                           ;handle_ic_card.c: 512: else
  9779                           ;handle_ic_card.c: 513: {
  9780                           ;handle_ic_card.c: 514: return 0x00;
  9781  0F84  3400               	retlw	0
  9782  0F85                     __end_of_read_id:	
  9783  0F85                     __ptext35:	
  9784 ;; *************** function _Mf500PiccSelect *****************
  9785 ;; Defined at:
  9786 ;;		line 785 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;  snr             1    wreg     PTR unsigned char 
  9789 ;;		 -> snr_rc500(4), 
  9790 ;; Auto vars:     Size  Location     Type
  9791 ;;  snr             1   10[BANK0 ] PTR unsigned char 
  9792 ;;		 -> snr_rc500(4), 
  9793 ;; Return value:  Size  Location     Type
  9794 ;;                  1    wreg      unsigned char 
  9795 ;; Registers used:
  9796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9797 ;; Tracked objects:
  9798 ;;		On entry : 1F/0
  9799 ;;		On exit  : 1F/0
  9800 ;;		Unchanged: 0/0
  9801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;Total ram usage:        1 bytes
  9807 ;; Hardware stack levels used:    1
  9808 ;; Hardware stack levels required when called:    7
  9809 ;; This function calls:
  9810 ;;		_Mf500PiccCascSelect
  9811 ;; This function is called by:
  9812 ;;		_read_id
  9813 ;; This function uses a non-reentrant model
  9814 ;;
  9815                           
  9816                           
  9817                           ;psect for function _Mf500PiccSelect
  9818  0F85                     _Mf500PiccSelect:	
  9819                           
  9820                           ;incstack = 0
  9821                           ; Regs used in _Mf500PiccSelect: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9822                           ;Mf500PiccSelect@snr stored from wreg
  9823  0F85  00AA               	movwf	Mf500PiccSelect@snr
  9824                           
  9825                           ;mfrc500.c: 791: return Mf500PiccCascSelect(0x93, snr);
  9826  0F86  00FB               	movwf	Mf500PiccCascSelect@snr
  9827  0F87  3093               	movlw	147
  9828  0F88  3187  2FA0         	ljmp	_Mf500PiccCascSelect
  9829  0F8A                     __end_of_Mf500PiccSelect:	
  9830  0F8A                     __ptext28:	
  9831 ;; *************** function _rfcard *****************
  9832 ;; Defined at:
  9833 ;;		line 484 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_ic_card.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;		None
  9836 ;; Auto vars:     Size  Location     Type
  9837 ;;  ret             1   30[BANK0 ] unsigned char 
  9838 ;; Return value:  Size  Location     Type
  9839 ;;                  1    wreg      unsigned char 
  9840 ;; Registers used:
  9841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9842 ;; Tracked objects:
  9843 ;;		On entry : 0/0
  9844 ;;		On exit  : 1F/0
  9845 ;;		Unchanged: 0/0
  9846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;Total ram usage:        1 bytes
  9852 ;; Hardware stack levels used:    1
  9853 ;; Hardware stack levels required when called:    8
  9854 ;; This function calls:
  9855 ;;		_Mf500PiccAnticoll
  9856 ;;		_Mf500PiccRequest
  9857 ;; This function is called by:
  9858 ;;		_checkpsw_super
  9859 ;;		_handle_ic_card
  9860 ;; This function uses a non-reentrant model
  9861 ;;
  9862                           
  9863                           
  9864                           ;psect for function _rfcard
  9865  0F8A                     _rfcard:	
  9866                           
  9867                           ;incstack = 0
  9868                           ; Regs used in _rfcard: [allreg]
  9869  0F8A  30DE               	movlw	_tt1& (0+255)
  9870  0F8B  0020               	movlb	0	; select bank0
  9871  0F8C  00AA               	movwf	Mf500PiccRequest@atq
  9872  0F8D  3026               	movlw	38
  9873  0F8E  27CB  3188         	fcall	_Mf500PiccRequest
  9874                           
  9875                           ;handle_ic_card.c: 491: ret = Mf500PiccAnticoll(0, snr_rc500);
  9876  0F90  30DA               	movlw	_snr_rc500& (0+255)
  9877  0F91  00FD               	movwf	Mf500PiccAnticoll@snr
  9878  0F92  3000               	movlw	0
  9879  0F93  279A  3188         	fcall	_Mf500PiccAnticoll
  9880  0F95  00BE               	movwf	rfcard@ret
  9881                           
  9882                           ;handle_ic_card.c: 492: if (ret != 0)
  9883  0F96  083E               	movf	rfcard@ret,w
  9884  0F97  1D03               	skipz
  9885                           
  9886                           ;handle_ic_card.c: 493: {
  9887                           ;handle_ic_card.c: 494: return 0x01;
  9888  0F98  3401               	retlw	1
  9889                           
  9890                           ;handle_ic_card.c: 498: }
  9891                           ;handle_ic_card.c: 500: return 0x00;
  9892  0F99  3400               	retlw	0
  9893  0F9A                     __end_of_rfcard:	
  9894  0F9A                     __ptext31:	
  9895 ;; *************** function _Mf500PiccAnticoll *****************
  9896 ;; Defined at:
  9897 ;;		line 741 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
  9898 ;; Parameters:    Size  Location     Type
  9899 ;;  bcnt            1    wreg     unsigned char 
  9900 ;;  snr             1   13[COMMON] PTR unsigned char 
  9901 ;;		 -> snr_rc500(4), 
  9902 ;; Auto vars:     Size  Location     Type
  9903 ;;  bcnt            1   29[BANK0 ] unsigned char 
  9904 ;; Return value:  Size  Location     Type
  9905 ;;                  1    wreg      unsigned char 
  9906 ;; Registers used:
  9907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9908 ;; Tracked objects:
  9909 ;;		On entry : 1E/0
  9910 ;;		On exit  : 1F/0
  9911 ;;		Unchanged: 0/0
  9912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9913 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9916 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;Total ram usage:        2 bytes
  9918 ;; Hardware stack levels used:    1
  9919 ;; Hardware stack levels required when called:    7
  9920 ;; This function calls:
  9921 ;;		_Mf500PiccCascAnticoll
  9922 ;; This function is called by:
  9923 ;;		_rfcard
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           
  9928                           ;psect for function _Mf500PiccAnticoll
  9929  0F9A                     _Mf500PiccAnticoll:	
  9930                           
  9931                           ;incstack = 0
  9932                           ; Regs used in _Mf500PiccAnticoll: [allreg]
  9933                           ;Mf500PiccAnticoll@bcnt stored from wreg
  9934  0F9A  0020               	movlb	0	; select bank0
  9935  0F9B  00BD               	movwf	Mf500PiccAnticoll@bcnt
  9936                           
  9937                           ;mfrc500.c: 746: return Mf500PiccCascAnticoll(0x93, bcnt, snr);
  9938  0F9C  00FB               	movwf	Mf500PiccCascAnticoll@bcnt
  9939  0F9D  087D               	movf	Mf500PiccAnticoll@snr,w
  9940  0F9E  00FC               	movwf	Mf500PiccCascAnticoll@snr
  9941  0F9F  3093               	movlw	147
  9942  0FA0  3194  2CD5         	ljmp	_Mf500PiccCascAnticoll
  9943  0FA2                     __end_of_Mf500PiccAnticoll:	
  9944  0FA2                     PL4:	
  9945  0FA2  3E01               	addlw	low (_PWD_TABLE| (0+32768))
  9946  0FA3  0084               	movwf	4
  9947  0FA4  3098               	movlw	high (_PWD_TABLE| (0+32768))
  9948  0FA5  1803               	skipnc
  9949  0FA6  3E01               	addlw	1
  9950  0FA7  0085               	movwf	5
  9951  0FA8  0800               	movf	0,w	;code access
  9952  0FA9  00F6               	movwf	write_24c02@data
  9953  0FAA  0008               	return
  9954  0FAB                     __end_ofPL4:	
  9955  0FAB                     PL6:	
  9956  0FAB  082C               	movf	Mf500PiccRead@i,w
  9957  0FAC  077B               	addwf	Mf500PiccRead@data1,w
  9958  0FAD  00FC               	movwf	??_Mf500PiccRead
  9959  0FAE  0086               	movwf	6
  9960  0FAF  3010               	movlw	16
  9961  0FB0  0187               	clrf	7
  9962  0FB1  0181               	clrf	1
  9963  0FB2  0AAC               	incf	Mf500PiccRead@i,f
  9964  0FB3  022C               	subwf	Mf500PiccRead@i,w
  9965  0FB4  0008               	return
  9966  0FB5                     __end_ofPL6:	
  9967  0FB5                     PL8:	
  9968  0FB5  0086               	movwf	6
  9969  0FB6  0187               	clrf	7
  9970  0FB7  0181               	clrf	1
  9971  0FB8  0AA7               	incf	handle_config@i,f
  9972  0FB9  1903               	skipnz
  9973  0FBA  0AA8               	incf	handle_config@i+1,f
  9974  0FBB  3000               	movlw	0
  9975  0FBC  0228               	subwf	handle_config@i+1,w
  9976  0FBD  0008               	return
  9977  0FBE                     __end_ofPL8:	
  9978  0FBE                     PL14:	
  9979  0FBE  0020               	movlb	0	; select bank0
  9980  0FBF  0AA7               	incf	handle_config@i,f
  9981  0FC0  1903               	skipnz
  9982  0FC1  0AA8               	incf	handle_config@i+1,f
  9983  0FC2  3001               	movlw	1
  9984  0FC3  0228               	subwf	handle_config@i+1,w
  9985  0FC4  3400               	retlw	0
  9986  0FC5                     __end_ofPL14:	
  9987  0FC5                     PL20:	
  9988  0FC5  128E               	bcf	14,5	;volatile
  9989  0FC6  30F4               	movlw	244
  9990  0FC7  00F0               	movwf	delay_ms@count
  9991  0FC8  3001               	movlw	1
  9992  0FC9  00F1               	movwf	delay_ms@count+1
  9993  0FCA  0008               	return
  9994  0FCB                     __end_ofPL20:	
  9995  0FCB                     __ptext29:	
  9996 ;; *************** function _Mf500PiccRequest *****************
  9997 ;; Defined at:
  9998 ;;		line 614 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;  req_code        1    wreg     unsigned char 
 10001 ;;  atq             1   10[BANK0 ] PTR unsigned char 
 10002 ;;		 -> tt1(2), 
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;  req_code        1   11[BANK0 ] unsigned char 
 10005 ;; Return value:  Size  Location     Type
 10006 ;;                  1    wreg      unsigned char 
 10007 ;; Registers used:
 10008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 10009 ;; Tracked objects:
 10010 ;;		On entry : 1F/0
 10011 ;;		On exit  : 1E/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10014 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;Total ram usage:        2 bytes
 10019 ;; Hardware stack levels used:    1
 10020 ;; Hardware stack levels required when called:    7
 10021 ;; This function calls:
 10022 ;;		_Mf500PiccCommonRequest
 10023 ;; This function is called by:
 10024 ;;		_rfcard
 10025 ;; This function uses a non-reentrant model
 10026 ;;
 10027                           
 10028                           
 10029                           ;psect for function _Mf500PiccRequest
 10030  0FCB                     _Mf500PiccRequest:	
 10031                           
 10032                           ;incstack = 0
 10033                           ; Regs used in _Mf500PiccRequest: [allreg]
 10034                           ;Mf500PiccRequest@req_code stored from wreg
 10035  0FCB  00AB               	movwf	Mf500PiccRequest@req_code
 10036                           
 10037                           ;mfrc500.c: 619: return Mf500PiccCommonRequest(req_code, atq);
 10038  0FCC  082A               	movf	Mf500PiccRequest@atq,w
 10039  0FCD  00FB               	movwf	Mf500PiccCommonRequest@atq
 10040  0FCE  082B               	movf	Mf500PiccRequest@req_code,w
 10041  0FCF  2E6B               	ljmp	_Mf500PiccCommonRequest
 10042  0FD0                     __end_of_Mf500PiccRequest:	
 10043  0FD0                     __ptext27:	
 10044 ;; *************** function _checkpsw_super *****************
 10045 ;; Defined at:
 10046 ;;		line 537 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_ic_card.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;		None
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;		None
 10051 ;; Return value:  Size  Location     Type
 10052 ;;                  1    wreg      unsigned char 
 10053 ;; Registers used:
 10054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 10055 ;; Tracked objects:
 10056 ;;		On entry : 0/0
 10057 ;;		On exit  : 1F/0
 10058 ;;		Unchanged: 0/0
 10059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;Total ram usage:        0 bytes
 10065 ;; Hardware stack levels used:    1
 10066 ;; Hardware stack levels required when called:    9
 10067 ;; This function calls:
 10068 ;;		_Mf500PiccAuthState
 10069 ;;		_Mf500PiccLoadKey
 10070 ;;		_read_id
 10071 ;;		_rfcard
 10072 ;; This function is called by:
 10073 ;;		_handle_ic_card
 10074 ;; This function uses a non-reentrant model
 10075 ;;
 10076                           
 10077                           
 10078                           ;psect for function _checkpsw_super
 10079  0FD0                     _checkpsw_super:	
 10080                           
 10081                           ;handle_ic_card.c: 541: if (!rfcard())
 10082                           
 10083                           ;incstack = 0
 10084                           ; Regs used in _checkpsw_super: [allreg]
 10085  0FD0  278A  3188         	fcall	_rfcard
 10086  0FD2  3800               	iorlw	0
 10087  0FD3  1D03               	skipz
 10088  0FD4  3400               	retlw	0
 10089                           
 10090                           ;handle_ic_card.c: 542: {
 10091                           ;handle_ic_card.c: 543: if (read_id())
 10092  0FD5  277E  3188         	fcall	_read_id
 10093  0FD7  3A00               	xorlw	0
 10094  0FD8  1903               	skipnz
 10095  0FD9  3400               	retlw	0
 10096                           
 10097                           ;handle_ic_card.c: 544: {
 10098                           ;handle_ic_card.c: 545: if (Mf500PiccLoadKey(keys_super) == 0)
 10099  0FDA  30E0               	movlw	_keys_super& (0+255)
 10100  0FDB  2737  3188         	fcall	_Mf500PiccLoadKey
 10101  0FDD  3800               	iorlw	0
 10102  0FDE  1D03               	skipz
 10103  0FDF  3400               	retlw	0
 10104                           
 10105                           ;handle_ic_card.c: 546: {
 10106                           ;handle_ic_card.c: 547: if (Mf500PiccAuthState(0x60, snr_rc500, 4 * sector_number) == 0)
 10107  0FE0  30DA               	movlw	_snr_rc500& (0+255)
 10108  0FE1  00FB               	movwf	Mf500PiccAuthState@snr
 10109  0FE2  0860               	movf	_sector_number,w
 10110  0FE3  0709               	addwf	9,w
 10111  0FE4  0709               	addwf	9,w
 10112  0FE5  00FC               	movwf	Mf500PiccAuthState@block
 10113  0FE6  3060               	movlw	96
 10114  0FE7  3194  2418  3188   	fcall	_Mf500PiccAuthState
 10115  0FEA  3800               	iorlw	0
 10116  0FEB  1903               	btfsc	3,2
 10117                           
 10118                           ;handle_ic_card.c: 548: {
 10119                           ;handle_ic_card.c: 549: return 0x01;
 10120  0FEC  3401               	retlw	1
 10121                           
 10122                           ;handle_ic_card.c: 551: else
 10123                           ;handle_ic_card.c: 552: {
 10124                           ;handle_ic_card.c: 553: return 0x00;
 10125  0FED  3400               	retlw	0
 10126  0FEE                     __end_of_checkpsw_super:	
 10127  0FEE                     __ptext17:	
 10128 ;; *************** function _handle_timer *****************
 10129 ;; Defined at:
 10130 ;;		line 44 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_timer.c"
 10131 ;; Parameters:    Size  Location     Type
 10132 ;;		None
 10133 ;; Auto vars:     Size  Location     Type
 10134 ;;		None
 10135 ;; Return value:  Size  Location     Type
 10136 ;;		None               void
 10137 ;; Registers used:
 10138 ;;		wreg, status,2, status,0
 10139 ;; Tracked objects:
 10140 ;;		On entry : 1F/0
 10141 ;;		On exit  : 1F/0
 10142 ;;		Unchanged: 0/0
 10143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;Total ram usage:        0 bytes
 10149 ;; Hardware stack levels used:    1
 10150 ;; Hardware stack levels required when called:    1
 10151 ;; This function calls:
 10152 ;;		Nothing
 10153 ;; This function is called by:
 10154 ;;		_main
 10155 ;; This function uses a non-reentrant model
 10156 ;;
 10157                           
 10158                           
 10159                           ;psect for function _handle_timer
 10160  0FEE                     _handle_timer:	
 10161                           
 10162                           ;handle_timer.c: 48: if (is_enable)
 10163                           
 10164                           ;incstack = 0
 10165                           ; Regs used in _handle_timer: [wreg+status,2+status,0]
 10166  0FEE  085F               	movf	_is_enable,w
 10167  0FEF  1903               	btfsc	3,2
 10168  0FF0  2FF3               	goto	l6494
 10169                           
 10170                           ;handle_timer.c: 49: {
 10171                           ;handle_timer.c: 50: (RA0 ^= 0x01);
 10172  0FF1  3001               	movlw	1
 10173  0FF2  068C               	xorwf	12,f
 10174  0FF3                     l6494:	
 10175                           ;handle_timer.c: 51: }
 10176                           
 10177                           
 10178                           ;handle_timer.c: 55: }
 10179                           ;handle_timer.c: 57: if (flag_user_card)
 10180  0FF3  085D               	movf	_flag_user_card,w
 10181  0FF4  1903               	btfsc	3,2
 10182  0FF5  0008               	return
 10183  0FF6  3008               	movlw	8
 10184                           
 10185                           ;handle_timer.c: 58: {
 10186                           ;handle_timer.c: 59: user_card_count++;
 10187  0FF7  0AE3               	incf	_user_card_count,f
 10188                           
 10189                           ;handle_timer.c: 60: if (user_card_count >= 0x08)
 10190  0FF8  0263               	subwf	_user_card_count,w
 10191  0FF9  1C03               	skipc
 10192  0FFA  0008               	return
 10193                           
 10194                           ;handle_timer.c: 61: {
 10195                           ;handle_timer.c: 62: user_card_count = 0x00;
 10196  0FFB  01E3               	clrf	_user_card_count
 10197                           
 10198                           ;handle_timer.c: 63: flag_user_card = 0x00;
 10199  0FFC  01DD               	clrf	_flag_user_card
 10200                           
 10201                           ;handle_timer.c: 64: RB4 = 0x01;
 10202  0FFD  160D               	bsf	13,4	;volatile
 10203                           
 10204                           ;handle_timer.c: 65: RB5 = 0x01;
 10205  0FFE  168D               	bsf	13,5	;volatile
 10206  0FFF  0008               	return
 10207  1000                     __end_of_handle_timer:	
 10208                           
 10209                           	psect	text1
 10210  106F                     __ptext1:	
 10211 ;; *************** function _init_hardware *****************
 10212 ;; Defined at:
 10213 ;;		line 247 in file "D:\WORKproject\AJ-BLE-IC\source\main\main.c"
 10214 ;; Parameters:    Size  Location     Type
 10215 ;;		None
 10216 ;; Auto vars:     Size  Location     Type
 10217 ;;		None
 10218 ;; Return value:  Size  Location     Type
 10219 ;;		None               void
 10220 ;; Registers used:
 10221 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10222 ;; Tracked objects:
 10223 ;;		On entry : 17F/0
 10224 ;;		On exit  : 1F/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;Total ram usage:        0 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:    6
 10234 ;; This function calls:
 10235 ;;		_RC500Config
 10236 ;;		_RC500OutSelect
 10237 ;;		_init_beep
 10238 ;;		_init_ds1302
 10239 ;;		_init_i2c
 10240 ;;		_init_interrupt
 10241 ;;		_init_led
 10242 ;;		_init_mfrc500
 10243 ;;		_init_osc
 10244 ;;		_init_port
 10245 ;;		_init_timer1
 10246 ;;		_init_uart1
 10247 ;;		_init_uart2
 10248 ;; This function is called by:
 10249 ;;		_main
 10250 ;; This function uses a non-reentrant model
 10251 ;;
 10252                           
 10253                           
 10254                           ;psect for function _init_hardware
 10255  106F                     _init_hardware:	
 10256                           
 10257                           ;main.c: 251: init_osc();
 10258                           
 10259                           ;incstack = 0
 10260                           ; Regs used in _init_hardware: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10261  106F  20C5  3190         	fcall	_init_osc
 10262                           
 10263                           ;main.c: 252: init_port();
 10264  1071  20C9  3190         	fcall	_init_port
 10265                           
 10266                           ;main.c: 253: init_led();
 10267  1073  20AF  3190         	fcall	_init_led
 10268                           
 10269                           ;main.c: 254: init_timer1();
 10270  1075  20D0  3190         	fcall	_init_timer1
 10271                           
 10272                           ;main.c: 255: init_beep();
 10273  1077  208E  3190         	fcall	_init_beep
 10274                           
 10275                           ;main.c: 256: init_uart1();
 10276  1079  20D9  3190         	fcall	_init_uart1
 10277                           
 10278                           ;main.c: 257: init_uart2();
 10279  107B  20EA  3190         	fcall	_init_uart2
 10280                           
 10281                           ;main.c: 258: init_ds1302();
 10282  107D  2092  3190         	fcall	_init_ds1302
 10283                           
 10284                           ;main.c: 259: init_i2c();
 10285  107F  20A6  3190         	fcall	_init_i2c
 10286                           
 10287                           ;main.c: 260: init_interrupt();
 10288  1081  20AC  3190         	fcall	_init_interrupt
 10289                           
 10290                           ;main.c: 261: init_mfrc500();
 10291  1083  20B6               	fcall	_init_mfrc500
 10292                           
 10293                           ;main.c: 262: RC500Config();
 10294  1084  3197  276D  3190   	fcall	_RC500Config
 10295                           
 10296                           ;main.c: 263: RC500OutSelect(0x02);
 10297  1087  3002               	movlw	2
 10298  1088  20FF               	fcall	_RC500OutSelect
 10299  1089  0064               	clrwdt	;# 
 10300                           
 10301                           ;main.c: 265: RB4 = 0x01;
 10302  108A  0020               	movlb	0	; select bank0
 10303  108B  160D               	bsf	13,4	;volatile
 10304                           
 10305                           ;main.c: 266: RB5 = 0x01;
 10306  108C  168D               	bsf	13,5	;volatile
 10307  108D  0008               	return
 10308  108E                     __end_of_init_hardware:	
 10309  108E                     __ptext12:	
 10310 ;; *************** function _init_beep *****************
 10311 ;; Defined at:
 10312 ;;		line 53 in file "D:\WORKproject\AJ-BLE-IC\source\driver\beep.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;		None
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;		None
 10317 ;; Return value:  Size  Location     Type
 10318 ;;		None               void
 10319 ;; Registers used:
 10320 ;;		None
 10321 ;; Tracked objects:
 10322 ;;		On entry : 17F/1
 10323 ;;		On exit  : 17F/0
 10324 ;;		Unchanged: 160/0
 10325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;Total ram usage:        0 bytes
 10331 ;; Hardware stack levels used:    1
 10332 ;; Hardware stack levels required when called:    1
 10333 ;; This function calls:
 10334 ;;		Nothing
 10335 ;; This function is called by:
 10336 ;;		_init_hardware
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           
 10341                           ;psect for function _init_beep
 10342  108E                     _init_beep:	
 10343                           
 10344                           ;beep.c: 57: (TRISCbits.TRISC5) = 0x00;
 10345                           
 10346                           ;incstack = 0
 10347                           ; Regs used in _init_beep: []
 10348  108E  128E               	bcf	14,5	;volatile
 10349                           
 10350                           ;beep.c: 58: (RC5 = 0x01);
 10351  108F  0020               	movlb	0	; select bank0
 10352  1090  168E               	bsf	14,5	;volatile
 10353  1091  0008               	return
 10354  1092                     __end_of_init_beep:	
 10355  1092                     __ptext11:	
 10356 ;; *************** function _init_ds1302 *****************
 10357 ;; Defined at:
 10358 ;;		line 44 in file "D:\WORKproject\AJ-BLE-IC\source\driver\ds1302.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;		None
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;		None
 10363 ;; Return value:  Size  Location     Type
 10364 ;;		None               void
 10365 ;; Registers used:
 10366 ;;		wreg
 10367 ;; Tracked objects:
 10368 ;;		On entry : 1F/1
 10369 ;;		On exit  : 1F/1
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;Total ram usage:        0 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    1
 10379 ;; This function calls:
 10380 ;;		Nothing
 10381 ;; This function is called by:
 10382 ;;		_init_hardware
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           
 10387                           ;psect for function _init_ds1302
 10388  1092                     _init_ds1302:	
 10389                           
 10390                           ;ds1302.c: 48: (RC0) = 0x00;
 10391                           
 10392                           ;incstack = 0
 10393                           ; Regs used in _init_ds1302: [wreg]
 10394  1092  0020               	movlb	0	; select bank0
 10395  1093  100E               	bcf	14,0	;volatile
 10396                           
 10397                           ;ds1302.c: 49: (RC2) = 0x01;
 10398  1094  150E               	bsf	14,2	;volatile
 10399                           
 10400                           ;ds1302.c: 50: (RC1) = 0x01;
 10401  1095  148E               	bsf	14,1	;volatile
 10402                           
 10403                           ;ds1302.c: 51: (TRISCbits.TRISC0) = 0x00;
 10404  1096  0021               	movlb	1	; select bank1
 10405  1097  100E               	bcf	14,0	;volatile
 10406                           
 10407                           ;ds1302.c: 52: (TRISCbits.TRISC2) = 0x00;
 10408  1098  110E               	bcf	14,2	;volatile
 10409                           
 10410                           ;ds1302.c: 53: (TRISCbits.TRISC1) = 0x00;
 10411  1099  108E               	bcf	14,1	;volatile
 10412                           
 10413                           ;ds1302.c: 56: year = 0x08;
 10414  109A  3008               	movlw	8
 10415  109B  0020               	movlb	0	; select bank0
 10416  109C  00EF               	movwf	_year
 10417                           
 10418                           ;ds1302.c: 57: month = 0x08;
 10419  109D  00EE               	movwf	_month
 10420                           
 10421                           ;ds1302.c: 58: day = 0x08;
 10422  109E  00EC               	movwf	_day
 10423                           
 10424                           ;ds1302.c: 59: hour = 0x08;
 10425  109F  00ED               	movwf	_hour
 10426                           
 10427                           ;ds1302.c: 60: minute = 0x08;
 10428  10A0  0021               	movlb	1	; select bank1
 10429  10A1  00E6               	movwf	_minute^(0+128)
 10430                           
 10431                           ;ds1302.c: 61: second = 0x08;
 10432  10A2  00E7               	movwf	_second^(0+128)
 10433                           
 10434                           ;ds1302.c: 62: week = 0x01;
 10435  10A3  01E8               	clrf	_week^(0+128)
 10436  10A4  0AE8               	incf	_week^(0+128),f
 10437  10A5  0008               	return
 10438  10A6                     __end_of_init_ds1302:	
 10439  10A6                     __ptext10:	
 10440 ;; *************** function _init_i2c *****************
 10441 ;; Defined at:
 10442 ;;		line 45 in file "D:\WORKproject\AJ-BLE-IC\source\driver\24c02.c"
 10443 ;; Parameters:    Size  Location     Type
 10444 ;;		None
 10445 ;; Auto vars:     Size  Location     Type
 10446 ;;		None
 10447 ;; Return value:  Size  Location     Type
 10448 ;;		None               void
 10449 ;; Registers used:
 10450 ;;		None
 10451 ;; Tracked objects:
 10452 ;;		On entry : 1F/1
 10453 ;;		On exit  : 1F/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;Total ram usage:        0 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:    1
 10463 ;; This function calls:
 10464 ;;		Nothing
 10465 ;; This function is called by:
 10466 ;;		_init_hardware
 10467 ;; This function uses a non-reentrant model
 10468 ;;
 10469                           
 10470                           
 10471                           ;psect for function _init_i2c
 10472  10A6                     _init_i2c:	
 10473                           
 10474                           ;24c02.c: 49: (TRISCbits.TRISC3) = 0x00;
 10475                           
 10476                           ;incstack = 0
 10477                           ; Regs used in _init_i2c: []
 10478  10A6  118E               	bcf	14,3	;volatile
 10479                           
 10480                           ;24c02.c: 50: (TRISCbits.TRISC4) = 0x00;
 10481  10A7  120E               	bcf	14,4	;volatile
 10482                           
 10483                           ;24c02.c: 52: RC3 = 0x01;
 10484  10A8  0020               	movlb	0	; select bank0
 10485  10A9  158E               	bsf	14,3	;volatile
 10486                           
 10487                           ;24c02.c: 53: RC4 = 0x01;
 10488  10AA  160E               	bsf	14,4	;volatile
 10489  10AB  0008               	return
 10490  10AC                     __end_of_init_i2c:	
 10491  10AC                     __ptext9:	
 10492 ;; *************** function _init_interrupt *****************
 10493 ;; Defined at:
 10494 ;;		line 217 in file "D:\WORKproject\AJ-BLE-IC\source\driver\interrupt.c"
 10495 ;; Parameters:    Size  Location     Type
 10496 ;;		None
 10497 ;; Auto vars:     Size  Location     Type
 10498 ;;		None
 10499 ;; Return value:  Size  Location     Type
 10500 ;;		None               void
 10501 ;; Registers used:
 10502 ;;		None
 10503 ;; Tracked objects:
 10504 ;;		On entry : 1F/0
 10505 ;;		On exit  : 1F/0
 10506 ;;		Unchanged: 1F/0
 10507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;Total ram usage:        0 bytes
 10513 ;; Hardware stack levels used:    1
 10514 ;; Hardware stack levels required when called:    1
 10515 ;; This function calls:
 10516 ;;		Nothing
 10517 ;; This function is called by:
 10518 ;;		_init_hardware
 10519 ;; This function uses a non-reentrant model
 10520 ;;
 10521                           
 10522                           
 10523                           ;psect for function _init_interrupt
 10524  10AC                     _init_interrupt:	
 10525                           
 10526                           ;interrupt.c: 221: PEIE = 0x01;
 10527                           
 10528                           ;incstack = 0
 10529                           ; Regs used in _init_interrupt: []
 10530  10AC  170B               	bsf	11,6	;volatile
 10531                           
 10532                           ;interrupt.c: 222: GIE = 0x01;
 10533  10AD  178B               	bsf	11,7	;volatile
 10534  10AE  0008               	return
 10535  10AF                     __end_of_init_interrupt:	
 10536  10AF                     __ptext8:	
 10537 ;; *************** function _init_led *****************
 10538 ;; Defined at:
 10539 ;;		line 44 in file "D:\WORKproject\AJ-BLE-IC\source\driver\led.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;		None
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;		None
 10544 ;; Return value:  Size  Location     Type
 10545 ;;		None               void
 10546 ;; Registers used:
 10547 ;;		None
 10548 ;; Tracked objects:
 10549 ;;		On entry : 17F/8
 10550 ;;		On exit  : 17F/0
 10551 ;;		Unchanged: 160/0
 10552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;Total ram usage:        0 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:    1
 10560 ;; This function calls:
 10561 ;;		Nothing
 10562 ;; This function is called by:
 10563 ;;		_init_hardware
 10564 ;; This function uses a non-reentrant model
 10565 ;;
 10566                           
 10567                           
 10568                           ;psect for function _init_led
 10569  10AF                     _init_led:	
 10570                           
 10571                           ;led.c: 48: (TRISAbits.TRISA0) = 0x00;
 10572                           
 10573                           ;incstack = 0
 10574                           ; Regs used in _init_led: []
 10575  10AF  0021               	movlb	1	; select bank1
 10576  10B0  100C               	bcf	12,0	;volatile
 10577                           
 10578                           ;led.c: 49: (TRISAbits.TRISA1) = 0x00;
 10579  10B1  108C               	bcf	12,1	;volatile
 10580                           
 10581                           ;led.c: 50: (RA0 = 0x01);
 10582  10B2  0020               	movlb	0	; select bank0
 10583  10B3  140C               	bsf	12,0	;volatile
 10584                           
 10585                           ;led.c: 51: (RA1 = 0x01);
 10586  10B4  148C               	bsf	12,1	;volatile
 10587  10B5  0008               	return
 10588  10B6                     __end_of_init_led:	
 10589  10B6                     __ptext7:	
 10590 ;; *************** function _init_mfrc500 *****************
 10591 ;; Defined at:
 10592 ;;		line 55 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;		None
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;		None
 10597 ;; Return value:  Size  Location     Type
 10598 ;;		None               void
 10599 ;; Registers used:
 10600 ;;		wreg
 10601 ;; Tracked objects:
 10602 ;;		On entry : 1F/0
 10603 ;;		On exit  : 1F/2
 10604 ;;		Unchanged: 0/0
 10605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;Total ram usage:        0 bytes
 10611 ;; Hardware stack levels used:    1
 10612 ;; Hardware stack levels required when called:    1
 10613 ;; This function calls:
 10614 ;;		Nothing
 10615 ;; This function is called by:
 10616 ;;		_init_hardware
 10617 ;; This function uses a non-reentrant model
 10618 ;;
 10619                           
 10620                           
 10621                           ;psect for function _init_mfrc500
 10622  10B6                     _init_mfrc500:	
 10623                           
 10624                           ;mfrc500.c: 59: (TRISEbits.TRISE3) = 0x00;
 10625                           
 10626                           ;incstack = 0
 10627                           ; Regs used in _init_mfrc500: [wreg]
 10628  10B6  0021               	movlb	1	; select bank1
 10629  10B7  1190               	bcf	16,3	;volatile
 10630                           
 10631                           ;mfrc500.c: 60: (TRISEbits.TRISE4) = 0x00;
 10632  10B8  1210               	bcf	16,4	;volatile
 10633                           
 10634                           ;mfrc500.c: 61: (TRISEbits.TRISE6) = 0x00;
 10635  10B9  1310               	bcf	16,6	;volatile
 10636                           
 10637                           ;mfrc500.c: 62: (TRISEbits.TRISE7) = 0x00;
 10638  10BA  1390               	bcf	16,7	;volatile
 10639                           
 10640                           ;mfrc500.c: 63: (TRISEbits.TRISE5) = 0x00;
 10641  10BB  1290               	bcf	16,5	;volatile
 10642                           
 10643                           ;mfrc500.c: 64: TRISD = 0xFF;
 10644  10BC  30FF               	movlw	255
 10645  10BD  008F               	movwf	15	;volatile
 10646                           
 10647                           ;mfrc500.c: 66: (LATEbits.LATE3 = 0x00);
 10648  10BE  0022               	movlb	2	; select bank2
 10649  10BF  1190               	bcf	16,3	;volatile
 10650                           
 10651                           ;mfrc500.c: 67: (LATEbits.LATE4 = 0x01);
 10652  10C0  1610               	bsf	16,4	;volatile
 10653                           
 10654                           ;mfrc500.c: 68: (LATEbits.LATE5 = 0x01);
 10655  10C1  1690               	bsf	16,5	;volatile
 10656                           
 10657                           ;mfrc500.c: 69: (LATEbits.LATE6 = 0x01);
 10658  10C2  1710               	bsf	16,6	;volatile
 10659                           
 10660                           ;mfrc500.c: 70: (LATEbits.LATE7 = 0x00);
 10661  10C3  1390               	bcf	16,7	;volatile
 10662  10C4  0008               	return
 10663  10C5                     __end_of_init_mfrc500:	
 10664  10C5                     __ptext6:	
 10665 ;; *************** function _init_osc *****************
 10666 ;; Defined at:
 10667 ;;		line 206 in file "D:\WORKproject\AJ-BLE-IC\source\main\main.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;		None
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;		None
 10672 ;; Return value:  Size  Location     Type
 10673 ;;		None               void
 10674 ;; Registers used:
 10675 ;;		wreg
 10676 ;; Tracked objects:
 10677 ;;		On entry : 17F/0
 10678 ;;		On exit  : 17F/1
 10679 ;;		Unchanged: 160/0
 10680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;Total ram usage:        0 bytes
 10686 ;; Hardware stack levels used:    1
 10687 ;; Hardware stack levels required when called:    1
 10688 ;; This function calls:
 10689 ;;		Nothing
 10690 ;; This function is called by:
 10691 ;;		_init_hardware
 10692 ;; This function uses a non-reentrant model
 10693 ;;
 10694                           
 10695                           
 10696                           ;psect for function _init_osc
 10697  10C5                     _init_osc:	
 10698                           
 10699                           ;main.c: 210: OSCCON = 0x70;
 10700                           
 10701                           ;incstack = 0
 10702                           ; Regs used in _init_osc: [wreg]
 10703  10C5  3070               	movlw	112
 10704  10C6  0021               	movlb	1	; select bank1
 10705  10C7  0099               	movwf	25	;volatile
 10706  10C8  0008               	return
 10707  10C9                     __end_of_init_osc:	
 10708  10C9                     __ptext5:	
 10709 ;; *************** function _init_port *****************
 10710 ;; Defined at:
 10711 ;;		line 225 in file "D:\WORKproject\AJ-BLE-IC\source\main\main.c"
 10712 ;; Parameters:    Size  Location     Type
 10713 ;;		None
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;		None
 10716 ;; Return value:  Size  Location     Type
 10717 ;;		None               void
 10718 ;; Registers used:
 10719 ;;		status,2
 10720 ;; Tracked objects:
 10721 ;;		On entry : 17F/1
 10722 ;;		On exit  : 17F/8
 10723 ;;		Unchanged: 160/0
 10724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;Total ram usage:        0 bytes
 10730 ;; Hardware stack levels used:    1
 10731 ;; Hardware stack levels required when called:    1
 10732 ;; This function calls:
 10733 ;;		Nothing
 10734 ;; This function is called by:
 10735 ;;		_init_hardware
 10736 ;; This function uses a non-reentrant model
 10737 ;;
 10738                           
 10739                           
 10740                           ;psect for function _init_port
 10741  10C9                     _init_port:	
 10742                           
 10743                           ;main.c: 229: ANSELA = 0x00;
 10744                           
 10745                           ;incstack = 0
 10746                           ; Regs used in _init_port: [status,2]
 10747  10C9  0023               	movlb	3	; select bank3
 10748  10CA  018C               	clrf	12	;volatile
 10749                           
 10750                           ;main.c: 230: ANSELE = 0x00;
 10751  10CB  0190               	clrf	16	;volatile
 10752                           
 10753                           ;main.c: 231: ANSELF = 0x00;
 10754  10CC  0028               	movlb	8	; select bank8
 10755  10CD  018C               	clrf	12	;volatile
 10756                           
 10757                           ;main.c: 232: ANSELG = 0x00;
 10758  10CE  018D               	clrf	13	;volatile
 10759  10CF  0008               	return
 10760  10D0                     __end_of_init_port:	
 10761  10D0                     __ptext4:	
 10762 ;; *************** function _init_timer1 *****************
 10763 ;; Defined at:
 10764 ;;		line 38 in file "D:\WORKproject\AJ-BLE-IC\source\driver\timer.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;		None
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;		None
 10769 ;; Return value:  Size  Location     Type
 10770 ;;		None               void
 10771 ;; Registers used:
 10772 ;;		wreg
 10773 ;; Tracked objects:
 10774 ;;		On entry : 17F/0
 10775 ;;		On exit  : 17F/1
 10776 ;;		Unchanged: 160/0
 10777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10782 ;;Total ram usage:        0 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; Hardware stack levels required when called:    1
 10785 ;; This function calls:
 10786 ;;		Nothing
 10787 ;; This function is called by:
 10788 ;;		_init_hardware
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791                           
 10792                           
 10793                           ;psect for function _init_timer1
 10794  10D0                     _init_timer1:	
 10795                           
 10796                           ;timer.c: 42: TMR1H = 0xE0;
 10797                           
 10798                           ;incstack = 0
 10799                           ; Regs used in _init_timer1: [wreg]
 10800  10D0  30E0               	movlw	224
 10801  10D1  0097               	movwf	23	;volatile
 10802                           
 10803                           ;timer.c: 43: TMR1L = 0xC0;
 10804  10D2  30C0               	movlw	192
 10805  10D3  0096               	movwf	22	;volatile
 10806                           
 10807                           ;timer.c: 44: T1CON = 0x41;
 10808  10D4  3041               	movlw	65
 10809  10D5  0098               	movwf	24	;volatile
 10810                           
 10811                           ;timer.c: 49: TMR1IE = 0x01;
 10812  10D6  0021               	movlb	1	; select bank1
 10813  10D7  1411               	bsf	17,0	;volatile
 10814  10D8  0008               	return
 10815  10D9                     __end_of_init_timer1:	
 10816  10D9                     __ptext3:	
 10817 ;; *************** function _init_uart1 *****************
 10818 ;; Defined at:
 10819 ;;		line 56 in file "D:\WORKproject\AJ-BLE-IC\source\driver\uart.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;		None
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;		None
 10824 ;; Return value:  Size  Location     Type
 10825 ;;		None               void
 10826 ;; Registers used:
 10827 ;;		wreg, status,2
 10828 ;; Tracked objects:
 10829 ;;		On entry : 17F/0
 10830 ;;		On exit  : 17F/1
 10831 ;;		Unchanged: 160/0
 10832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;Total ram usage:        0 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:    1
 10840 ;; This function calls:
 10841 ;;		Nothing
 10842 ;; This function is called by:
 10843 ;;		_init_hardware
 10844 ;; This function uses a non-reentrant model
 10845 ;;
 10846                           
 10847                           
 10848                           ;psect for function _init_uart1
 10849  10D9                     _init_uart1:	
 10850                           
 10851                           ;uart.c: 60: SP1BRGL = 51;
 10852                           
 10853                           ;incstack = 0
 10854                           ; Regs used in _init_uart1: [wreg+status,2]
 10855  10D9  3033               	movlw	51
 10856  10DA  0023               	movlb	3	; select bank3
 10857  10DB  009B               	movwf	27	;volatile
 10858                           
 10859                           ;uart.c: 61: SP1BRGH = 0;
 10860  10DC  019C               	clrf	28	;volatile
 10861                           
 10862                           ;uart.c: 62: BAUD1CON = 0x08;
 10863  10DD  3008               	movlw	8
 10864  10DE  009F               	movwf	31	;volatile
 10865                           
 10866                           ;uart.c: 72: (TRISCbits.TRISC6) = 0x00;
 10867  10DF  0021               	movlb	1	; select bank1
 10868  10E0  130E               	bcf	14,6	;volatile
 10869                           
 10870                           ;uart.c: 73: (TRISCbits.TRISC7) = 0x01;
 10871  10E1  178E               	bsf	14,7	;volatile
 10872                           
 10873                           ;uart.c: 74: TX1STA = 0x20;
 10874  10E2  3020               	movlw	32
 10875  10E3  0023               	movlb	3	; select bank3
 10876  10E4  009E               	movwf	30	;volatile
 10877                           
 10878                           ;uart.c: 83: RC1STA = 0x90;
 10879  10E5  3090               	movlw	144
 10880  10E6  009D               	movwf	29	;volatile
 10881                           
 10882                           ;uart.c: 84: RC1IE = 0x01;
 10883  10E7  0021               	movlb	1	; select bank1
 10884  10E8  1691               	bsf	17,5	;volatile
 10885  10E9  0008               	return
 10886  10EA                     __end_of_init_uart1:	
 10887  10EA                     __ptext2:	
 10888 ;; *************** function _init_uart2 *****************
 10889 ;; Defined at:
 10890 ;;		line 197 in file "D:\WORKproject\AJ-BLE-IC\source\driver\uart.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;		None
 10893 ;; Auto vars:     Size  Location     Type
 10894 ;;		None
 10895 ;; Return value:  Size  Location     Type
 10896 ;;		None               void
 10897 ;; Registers used:
 10898 ;;		wreg, status,2
 10899 ;; Tracked objects:
 10900 ;;		On entry : 1F/1
 10901 ;;		On exit  : 1F/1
 10902 ;;		Unchanged: 0/0
 10903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;Total ram usage:        0 bytes
 10909 ;; Hardware stack levels used:    1
 10910 ;; Hardware stack levels required when called:    1
 10911 ;; This function calls:
 10912 ;;		Nothing
 10913 ;; This function is called by:
 10914 ;;		_init_hardware
 10915 ;; This function uses a non-reentrant model
 10916 ;;
 10917                           
 10918                           
 10919                           ;psect for function _init_uart2
 10920  10EA                     _init_uart2:	
 10921                           
 10922                           ;uart.c: 201: (TRISGbits.TRISG0) = 0x00;
 10923                           
 10924                           ;incstack = 0
 10925                           ; Regs used in _init_uart2: [wreg+status,2]
 10926  10EA  0026               	movlb	6	; select bank6
 10927  10EB  100D               	bcf	13,0	;volatile
 10928                           
 10929                           ;uart.c: 202: (LATGbits.LATG0 = 0);
 10930  10EC  0027               	movlb	7	; select bank7
 10931  10ED  100D               	bcf	13,0	;volatile
 10932                           
 10933                           ;uart.c: 203: SP2BRGL = 51;
 10934  10EE  3033               	movlw	51
 10935  10EF  0029               	movlb	9	; select bank9
 10936  10F0  0093               	movwf	19	;volatile
 10937                           
 10938                           ;uart.c: 204: SP2BRGH = 0;
 10939  10F1  0194               	clrf	20	;volatile
 10940                           
 10941                           ;uart.c: 205: BAUD2CON = 0x08;
 10942  10F2  3008               	movlw	8
 10943  10F3  0097               	movwf	23	;volatile
 10944                           
 10945                           ;uart.c: 215: (TRISGbits.TRISG1) = 0x00;
 10946  10F4  0026               	movlb	6	; select bank6
 10947  10F5  108D               	bcf	13,1	;volatile
 10948                           
 10949                           ;uart.c: 216: (TRISGbits.TRISG2) = 0x01;
 10950  10F6  150D               	bsf	13,2	;volatile
 10951                           
 10952                           ;uart.c: 217: TX2STA = 0x20;
 10953  10F7  3020               	movlw	32
 10954  10F8  0029               	movlb	9	; select bank9
 10955  10F9  0096               	movwf	22	;volatile
 10956                           
 10957                           ;uart.c: 226: RC2STA = 0x90;
 10958  10FA  3090               	movlw	144
 10959  10FB  0095               	movwf	21	;volatile
 10960                           
 10961                           ;uart.c: 227: RC2IE = 0x01;
 10962  10FC  0021               	movlb	1	; select bank1
 10963  10FD  1694               	bsf	20,5	;volatile
 10964  10FE  0008               	return
 10965  10FF                     __end_of_init_uart2:	
 10966  10FF                     __ptext13:	
 10967 ;; *************** function _RC500OutSelect *****************
 10968 ;; Defined at:
 10969 ;;		line 402 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 10970 ;; Parameters:    Size  Location     Type
 10971 ;;  type            1    wreg     unsigned char 
 10972 ;; Auto vars:     Size  Location     Type
 10973 ;;  type            1    5[COMMON] unsigned char 
 10974 ;; Return value:  Size  Location     Type
 10975 ;;                  1    wreg      unsigned char 
 10976 ;; Registers used:
 10977 ;;		wreg, status,2, status,0, pclath, cstack
 10978 ;; Tracked objects:
 10979 ;;		On entry : 1C/2
 10980 ;;		On exit  : 1F/1
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;Total ram usage:        1 bytes
 10988 ;; Hardware stack levels used:    1
 10989 ;; Hardware stack levels required when called:    3
 10990 ;; This function calls:
 10991 ;;		_WriteRC
 10992 ;; This function is called by:
 10993 ;;		_init_hardware
 10994 ;; This function uses a non-reentrant model
 10995 ;;
 10996                           
 10997                           
 10998                           ;psect for function _RC500OutSelect
 10999  10FF                     _RC500OutSelect:	
 11000                           
 11001                           ;incstack = 0
 11002                           ; Regs used in _RC500OutSelect: [wreg+status,2+status,0+pclath+cstack]
 11003                           ;RC500OutSelect@type stored from wreg
 11004  10FF  00F5               	movwf	RC500OutSelect@type
 11005                           
 11006                           ;mfrc500.c: 406: WriteRC(0x26, type & 0x7);
 11007  1100  00F2               	movwf	WriteRC@data
 11008  1101  3007               	movlw	7
 11009  1102  05F2               	andwf	WriteRC@data,f
 11010  1103  3026               	movlw	38
 11011  1104  3197  2FBA         	ljmp	_WriteRC
 11012  1106                     __end_of_RC500OutSelect:	
 11013                           
 11014                           	psect	text15
 11015  0786                     __ptext15:	
 11016 ;; *************** function _PcdRfReset *****************
 11017 ;; Defined at:
 11018 ;;		line 203 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 11019 ;; Parameters:    Size  Location     Type
 11020 ;;  ms              1    wreg     unsigned char 
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;  ms              1    9[COMMON] unsigned char 
 11023 ;;  i               2   10[COMMON] unsigned int 
 11024 ;;  ret_status      1    0        unsigned char 
 11025 ;; Return value:  Size  Location     Type
 11026 ;;                  1    wreg      unsigned char 
 11027 ;; Registers used:
 11028 ;;		wreg, status,2, status,0, pclath, cstack
 11029 ;; Tracked objects:
 11030 ;;		On entry : 1F/1
 11031 ;;		On exit  : 1F/1
 11032 ;;		Unchanged: 0/0
 11033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;Total ram usage:        4 bytes
 11039 ;; Hardware stack levels used:    1
 11040 ;; Hardware stack levels required when called:    4
 11041 ;; This function calls:
 11042 ;;		_ClearBitMask
 11043 ;;		_SetBitMask
 11044 ;; This function is called by:
 11045 ;;		_RC500Config
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           
 11050                           ;psect for function _PcdRfReset
 11051  0786                     _PcdRfReset:	
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in _PcdRfReset: [wreg+status,2+status,0+pclath+cstack]
 11055                           ;PcdRfReset@ms stored from wreg
 11056  0786  00F9               	movwf	PcdRfReset@ms
 11057                           
 11058                           ;mfrc500.c: 208: unsigned int i;
 11059                           ;mfrc500.c: 210: ClearBitMask(0x11, 0x03);
 11060  0787  3003               	movlw	3
 11061  0788  00F5               	movwf	ClearBitMask@mask
 11062  0789  3011               	movlw	17
 11063  078A  27DD  3187         	fcall	_ClearBitMask
 11064                           
 11065                           ;mfrc500.c: 211: if (ms > 0)
 11066  078C  0879               	movf	PcdRfReset@ms,w
 11067  078D  1903               	btfsc	3,2
 11068  078E  0008               	return
 11069                           
 11070                           ;mfrc500.c: 212: {
 11071                           ;mfrc500.c: 213: for (i = 0; i < 1050; i++);
 11072  078F  01FA               	clrf	PcdRfReset@i
 11073  0790  01FB               	clrf	PcdRfReset@i+1
 11074  0791                     l6814:	
 11075  0791  0AFA               	incf	PcdRfReset@i,f
 11076  0792  1903               	skipnz
 11077  0793  0AFB               	incf	PcdRfReset@i+1,f
 11078  0794  3004               	movlw	4
 11079  0795  027B               	subwf	PcdRfReset@i+1,w
 11080  0796  301A               	movlw	26
 11081  0797  1903               	skipnz
 11082  0798  027A               	subwf	PcdRfReset@i,w
 11083  0799  1C03               	skipc
 11084  079A  2F91               	goto	l6814
 11085                           
 11086                           ;mfrc500.c: 214: SetBitMask(0x11, 0x03);
 11087  079B  3003               	movlw	3
 11088  079C  00F5               	movwf	SetBitMask@mask
 11089  079D  3011               	movlw	17
 11090  079E  3197  2FDA         	ljmp	_SetBitMask
 11091  07A0                     __end_of_PcdRfReset:	
 11092  07A0                     __ptext36:	
 11093 ;; *************** function _Mf500PiccCascSelect *****************
 11094 ;; Defined at:
 11095 ;;		line 750 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 11096 ;; Parameters:    Size  Location     Type
 11097 ;;  select_code     1    wreg     unsigned char 
 11098 ;;  snr             1   11[COMMON] PTR unsigned char 
 11099 ;;		 -> snr_rc500(4), 
 11100 ;; Auto vars:     Size  Location     Type
 11101 ;;  select_code     1   12[COMMON] unsigned char 
 11102 ;;  ret_status      1   13[COMMON] unsigned char 
 11103 ;; Return value:  Size  Location     Type
 11104 ;;                  1    wreg      unsigned char 
 11105 ;; Registers used:
 11106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11107 ;; Tracked objects:
 11108 ;;		On entry : 1F/0
 11109 ;;		On exit  : 1F/0
 11110 ;;		Unchanged: 0/0
 11111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11112 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;Total ram usage:        3 bytes
 11117 ;; Hardware stack levels used:    1
 11118 ;; Hardware stack levels required when called:    6
 11119 ;; This function calls:
 11120 ;;		_ClearBitMask
 11121 ;;		_PcdSetTmo
 11122 ;;		_PcdSingleResponseCmd
 11123 ;;		_WriteRC
 11124 ;;		_memcpy
 11125 ;; This function is called by:
 11126 ;;		_Mf500PiccSelect
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           
 11131                           ;psect for function _Mf500PiccCascSelect
 11132  07A0                     _Mf500PiccCascSelect:	
 11133                           
 11134                           ;incstack = 0
 11135                           ; Regs used in _Mf500PiccCascSelect: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11136                           ;Mf500PiccCascSelect@select_code stored from wreg
 11137  07A0  00FC               	movwf	Mf500PiccCascSelect@select_code
 11138                           
 11139                           ;mfrc500.c: 758: PcdSetTmo(106);
 11140  07A1  306A               	movlw	106
 11141  07A2  00F5               	movwf	PcdSetTmo@tmoLength
 11142  07A3  01F6               	clrf	PcdSetTmo@tmoLength+1
 11143  07A4  3196  2623  3187   	fcall	_PcdSetTmo
 11144                           
 11145                           ;mfrc500.c: 759: WriteRC(0x22, 0x0F);
 11146  07A7  300F               	movlw	15
 11147  07A8  00F2               	movwf	WriteRC@data
 11148  07A9  3022               	movlw	34
 11149  07AA  3197  27BA  3187   	fcall	_WriteRC
 11150                           
 11151                           ;mfrc500.c: 760: ClearBitMask(0x09, 0x08);
 11152  07AD  3008               	movlw	8
 11153  07AE  00F5               	movwf	ClearBitMask@mask
 11154  07AF  3009               	movlw	9
 11155  07B0  27DD               	fcall	_ClearBitMask
 11156                           
 11157                           ;mfrc500.c: 761: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 11158  07B1  0020               	movlb	0	; select bank0
 11159  07B2  3197  27E2  3187   	fcall	PL2	;call to abstracted procedure
 11160                           
 11161                           ;mfrc500.c: 762: MSndBuffer[0] = select_code;
 11162  07B5  087C               	movf	Mf500PiccCascSelect@select_code,w
 11163  07B6  0021               	movlb	1	; select bank1
 11164  07B7  00B6               	movwf	_MSndBuffer^(0+128)
 11165                           
 11166                           ;mfrc500.c: 763: MSndBuffer[1] = 0x70;
 11167  07B8  3070               	movlw	112
 11168  07B9  00B7               	movwf	(_MSndBuffer^(0+128)+1)
 11169                           
 11170                           ;mfrc500.c: 764: memcpy(MSndBuffer + 2, snr, 4);
 11171  07BA  087B               	movf	Mf500PiccCascSelect@snr,w
 11172  07BB  00F0               	movwf	memcpy@s1
 11173  07BC  3004               	movlw	4
 11174  07BD  01F1               	clrf	memcpy@s1+1
 11175  07BE  00F2               	movwf	memcpy@n
 11176  07BF  30B8               	movlw	(_MSndBuffer+2)& (0+255)
 11177  07C0  01F3               	clrf	memcpy@n+1
 11178  07C1  318E  26AE  3187   	fcall	_memcpy
 11179                           
 11180                           ;mfrc500.c: 765: MSndBuffer[6] = MSndBuffer[2] ^ MSndBuffer[3] ^ MSndBuffer[4] ^ MSndBuf
      +                          fer[5];
 11181  07C4  0021               	movlb	1	; select bank1
 11182  07C5  0838               	movf	(_MSndBuffer^(0+128)+2),w
 11183  07C6  0639               	xorwf	(_MSndBuffer^(0+128)+3),w
 11184  07C7  063A               	xorwf	(_MSndBuffer^(0+128)+4),w
 11185  07C8  063B               	xorwf	(_MSndBuffer^(0+128)+5),w
 11186  07C9  00BC               	movwf	(_MSndBuffer^(0+128)+6)
 11187                           
 11188                           ;mfrc500.c: 766: MInfo.nBytesToSend = 0x07;
 11189  07CA  3007               	movlw	7
 11190  07CB  0020               	movlb	0	; select bank0
 11191  07CC  00E7               	movwf	_MInfo+3
 11192                           
 11193                           ;mfrc500.c: 767: ret_status = PcdSingleResponseCmd(0x1e);
 11194  07CD  301E               	movlw	30
 11195  07CE  3196  2664  3187   	fcall	_PcdSingleResponseCmd
 11196  07D1  00FD               	movwf	Mf500PiccCascSelect@ret_status
 11197                           
 11198                           ;mfrc500.c: 769: if (ret_status == 0)
 11199  07D2  08FD               	movf	Mf500PiccCascSelect@ret_status,f
 11200  07D3  1D03               	skipz
 11201  07D4  2FDB               	goto	l7380
 11202                           
 11203                           ;mfrc500.c: 770: {
 11204                           ;mfrc500.c: 771: if (MInfo.nBitsReceived != 8)
 11205  07D5  0869               	movf	_MInfo+5,w
 11206  07D6  3A08               	xorlw	8
 11207  07D7  1903               	skipnz
 11208  07D8  2FDB               	goto	l7380
 11209                           
 11210                           ;mfrc500.c: 772: {
 11211                           ;mfrc500.c: 773: ret_status = (-11);
 11212  07D9  30F5               	movlw	245
 11213  07DA  00FD               	movwf	Mf500PiccCascSelect@ret_status
 11214  07DB                     l7380:	
 11215                           ;mfrc500.c: 774: }
 11216                           
 11217                           
 11218                           ;mfrc500.c: 778: }
 11219                           ;mfrc500.c: 779: }
 11220                           ;mfrc500.c: 781: return ret_status;
 11221  07DB  087D               	movf	Mf500PiccCascSelect@ret_status,w
 11222  07DC  0008               	return
 11223  07DD                     __end_of_Mf500PiccCascSelect:	
 11224  07DD                     __ptext37:	
 11225 ;; *************** function _ClearBitMask *****************
 11226 ;; Defined at:
 11227 ;;		line 153 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 11228 ;; Parameters:    Size  Location     Type
 11229 ;;  reg             1    wreg     unsigned char 
 11230 ;;  mask            1    5[COMMON] unsigned char 
 11231 ;; Auto vars:     Size  Location     Type
 11232 ;;  reg             1    7[COMMON] unsigned char 
 11233 ;;  tmp             1    6[COMMON] unsigned char 
 11234 ;; Return value:  Size  Location     Type
 11235 ;;		None               void
 11236 ;; Registers used:
 11237 ;;		wreg, status,2, status,0, pclath, cstack
 11238 ;; Tracked objects:
 11239 ;;		On entry : 1C/1
 11240 ;;		On exit  : 1F/1
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11243 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11246 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;Total ram usage:        3 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    3
 11250 ;; This function calls:
 11251 ;;		_ReadRC
 11252 ;;		_WriteRC
 11253 ;; This function is called by:
 11254 ;;		_PcdRfReset
 11255 ;;		_RC500Config
 11256 ;;		_Mf500PiccCascAnticoll
 11257 ;;		_Mf500PiccCascSelect
 11258 ;; This function uses a non-reentrant model
 11259 ;;
 11260                           
 11261                           
 11262                           ;psect for function _ClearBitMask
 11263  07DD                     _ClearBitMask:	
 11264                           
 11265                           ;incstack = 0
 11266                           ; Regs used in _ClearBitMask: [wreg+status,2+status,0+pclath+cstack]
 11267                           ;ClearBitMask@reg stored from wreg
 11268  07DD  00F7               	movwf	ClearBitMask@reg
 11269                           
 11270                           ;mfrc500.c: 160: tmp = ReadRC(reg);
 11271  07DE  3197  27CB         	fcall	_ReadRC
 11272  07E0  00F6               	movwf	ClearBitMask@tmp
 11273                           
 11274                           ;mfrc500.c: 161: WriteRC(reg, tmp & ~mask);
 11275  07E1  0975               	comf	ClearBitMask@mask,w
 11276  07E2  00F2               	movwf	WriteRC@data
 11277  07E3  0876               	movf	ClearBitMask@tmp,w
 11278  07E4  05F2               	andwf	WriteRC@data,f
 11279  07E5  0877               	movf	ClearBitMask@reg,w
 11280  07E6  3197  2FBA         	ljmp	_WriteRC
 11281  07E8                     __end_of_ClearBitMask:	
 11282                           
 11283                           	psect	text16
 11284  1274                     __ptext16:	
 11285 ;; *************** function _PcdReset *****************
 11286 ;; Defined at:
 11287 ;;		line 294 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;		None
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;  i               2    8[COMMON] unsigned int 
 11292 ;;  count02         2    5[COMMON] unsigned int 
 11293 ;;  count01         2    3[COMMON] unsigned int 
 11294 ;;  ret_status      1    7[COMMON] unsigned char 
 11295 ;; Return value:  Size  Location     Type
 11296 ;;                  1    wreg      unsigned char 
 11297 ;; Registers used:
 11298 ;;		wreg, status,2, status,0, pclath, cstack
 11299 ;; Tracked objects:
 11300 ;;		On entry : 1F/2
 11301 ;;		On exit  : 1C/0
 11302 ;;		Unchanged: 0/0
 11303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11307 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11308 ;;Total ram usage:        8 bytes
 11309 ;; Hardware stack levels used:    1
 11310 ;; Hardware stack levels required when called:    2
 11311 ;; This function calls:
 11312 ;;		_GetRC500
 11313 ;;		_PutRC500
 11314 ;; This function is called by:
 11315 ;;		_RC500Config
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319                           
 11320                           ;psect for function _PcdReset
 11321  1274                     _PcdReset:	
 11322                           
 11323                           ;mfrc500.c: 299: unsigned int i, count01, count02;
 11324                           ;mfrc500.c: 300: char ret_status = 0;
 11325                           
 11326                           ;incstack = 0
 11327                           ; Regs used in _PcdReset: [wreg+status,2+status,0+pclath+cstack]
 11328  1274  01F7               	clrf	PcdReset@ret_status
 11329                           
 11330                           ;mfrc500.c: 302: (LATEbits.LATE3 = 0x00);
 11331  1275  1190               	bcf	16,3	;volatile
 11332                           
 11333                           ;mfrc500.c: 304: for (i = 0; i < 16500; i++)
 11334  1276  01F8               	clrf	PcdReset@i
 11335  1277  01F9               	clrf	PcdReset@i+1
 11336  1278                     l910:	
 11337  1278  0064               	clrwdt	;# 
 11338  1279  0AF8               	incf	PcdReset@i,f
 11339  127A  1903               	skipnz
 11340  127B  0AF9               	incf	PcdReset@i+1,f
 11341  127C  3040               	movlw	64
 11342  127D  0279               	subwf	PcdReset@i+1,w
 11343  127E  3074               	movlw	116
 11344  127F  1903               	skipnz
 11345  1280  0278               	subwf	PcdReset@i,w
 11346  1281  1C03               	skipc
 11347  1282  2A78               	goto	l910
 11348                           
 11349                           ;mfrc500.c: 307: }
 11350                           ;mfrc500.c: 308: (LATEbits.LATE3 = 0x01);
 11351  1283  0022               	movlb	2	; select bank2
 11352  1284  1590               	bsf	16,3	;volatile
 11353                           
 11354                           ;mfrc500.c: 310: for (i = 0; i < 1650; i++)
 11355  1285  01F8               	clrf	PcdReset@i
 11356  1286  01F9               	clrf	PcdReset@i+1
 11357  1287                     l912:	
 11358  1287  0064               	clrwdt	;# 
 11359  1288  0AF8               	incf	PcdReset@i,f
 11360  1289  1903               	skipnz
 11361  128A  0AF9               	incf	PcdReset@i+1,f
 11362  128B  3006               	movlw	6
 11363  128C  0279               	subwf	PcdReset@i+1,w
 11364  128D  3072               	movlw	114
 11365  128E  1903               	skipnz
 11366  128F  0278               	subwf	PcdReset@i,w
 11367  1290  1C03               	skipc
 11368  1291  2A87               	goto	l912
 11369                           
 11370                           ;mfrc500.c: 313: }
 11371                           ;mfrc500.c: 314: (LATEbits.LATE3 = 0x00);
 11372  1292  0022               	movlb	2	; select bank2
 11373  1293  1190               	bcf	16,3	;volatile
 11374                           
 11375                           ;mfrc500.c: 315: (LATEbits.LATE4 = 0x00);
 11376  1294  1210               	bcf	16,4	;volatile
 11377                           
 11378                           ;mfrc500.c: 316: (LATEbits.LATE5 = 0x01);
 11379  1295  1690               	bsf	16,5	;volatile
 11380                           
 11381                           ;mfrc500.c: 317: (LATEbits.LATE6 = 0x01);
 11382  1296  1710               	bsf	16,6	;volatile
 11383                           
 11384                           ;mfrc500.c: 318: (LATEbits.LATE7 = 0x00);
 11385  1297  1390               	bcf	16,7	;volatile
 11386                           
 11387                           ;mfrc500.c: 320: count01 = 10000;
 11388  1298  3010               	movlw	16
 11389  1299  00F3               	movwf	PcdReset@count01
 11390  129A  3027               	movlw	39
 11391  129B  00F4               	movwf	PcdReset@count01+1
 11392                           
 11393                           ;mfrc500.c: 321: count02 = 21;
 11394  129C  3015               	movlw	21
 11395  129D  00F5               	movwf	PcdReset@count02
 11396  129E  01F6               	clrf	PcdReset@count02+1
 11397  129F                     l6934:	
 11398                           ;mfrc500.c: 323: while (((GetRC500(0x01) & 0x3F) != 0x3F) && (!(count02 == 0)))
 11399                           
 11400  129F  3001               	movlw	1
 11401  12A0  23E9  3192         	fcall	_GetRC500
 11402  12A2  00F2               	movwf	??_PcdReset
 11403  12A3  393F               	andlw	63
 11404  12A4  3A3F               	xorlw	63
 11405  12A5  1903               	skipnz
 11406  12A6  2ABF               	goto	l6944
 11407  12A7  0876               	movf	PcdReset@count02+1,w
 11408  12A8  0475               	iorwf	PcdReset@count02,w
 11409                           
 11410                           ;mfrc500.c: 324: {
 11411                           ;mfrc500.c: 325: count01--;
 11412  12A9  3001               	movlw	1
 11413  12AA  1903               	btfsc	3,2
 11414  12AB  2AC0               	goto	L2
 11415  12AC  02F3               	subwf	PcdReset@count01,f
 11416                           
 11417                           ;mfrc500.c: 326: if (count01 == 0)
 11418  12AD  2413  3192         	fcall	PL26	;call to abstracted procedure
 11419  12AF  1D03               	skipz
 11420  12B0  2A9F               	goto	l6934
 11421                           
 11422                           ;mfrc500.c: 327: {
 11423                           ;mfrc500.c: 328: count01 = 10000;
 11424  12B1  3010               	movlw	16
 11425                           
 11426                           ;mfrc500.c: 329: count02--;
 11427  12B2  23FF  3192         	fcall	PL12	;call to abstracted procedure
 11428  12B4  2A9F               	goto	l6934
 11429  12B5                     l921:	
 11430  12B5  0064               	clrwdt	;# 
 11431                           
 11432                           ;mfrc500.c: 336: count01--;
 11433  12B6  3001               	movlw	1
 11434  12B7  02F3               	subwf	PcdReset@count01,f
 11435                           
 11436                           ;mfrc500.c: 337: if (count01 == 0)
 11437  12B8  2413  3192         	fcall	PL26	;call to abstracted procedure
 11438  12BA  1D03               	skipz
 11439  12BB  2ABF               	goto	l6944
 11440                           
 11441                           ;mfrc500.c: 338: {
 11442                           ;mfrc500.c: 339: count01 = 10000;
 11443  12BC  3010               	movlw	16
 11444                           
 11445                           ;mfrc500.c: 340: count02--;
 11446  12BD  23FF  3192         	fcall	PL12	;call to abstracted procedure
 11447  12BF                     l6944:	
 11448  12BF  3001               	movlw	1
 11449  12C0                     L2:	
 11450  12C0  23E9  3192         	fcall	_GetRC500
 11451  12C2  393F               	andlw	63
 11452  12C3  1903               	btfsc	3,2
 11453  12C4  2AC9               	goto	l6948
 11454  12C5  0876               	movf	PcdReset@count02+1,w
 11455  12C6  0475               	iorwf	PcdReset@count02,w
 11456  12C7  1D03               	skipz
 11457  12C8  2AB5               	goto	l921
 11458  12C9                     l6948:	
 11459                           
 11460                           ;mfrc500.c: 341: }
 11461                           ;mfrc500.c: 342: };
 11462                           ;mfrc500.c: 343: if (count02 == 0)
 11463  12C9  0876               	movf	PcdReset@count02+1,w
 11464  12CA  0475               	iorwf	PcdReset@count02,w
 11465  12CB  1D03               	skipz
 11466  12CC  2ACF               	goto	l6952
 11467                           
 11468                           ;mfrc500.c: 344: {
 11469                           ;mfrc500.c: 345: ret_status = (-25);
 11470  12CD  30E7               	movlw	231
 11471  12CE  00F7               	movwf	PcdReset@ret_status
 11472  12CF                     l6952:	
 11473                           
 11474                           ;mfrc500.c: 346: }
 11475                           ;mfrc500.c: 348: if (ret_status == 0)
 11476  12CF  08F7               	movf	PcdReset@ret_status,f
 11477  12D0  1D03               	skipz
 11478  12D1  2AE6               	goto	l6966
 11479                           
 11480                           ;mfrc500.c: 349: {
 11481                           ;mfrc500.c: 350: PutRC500(0x00, 0x80);
 11482  12D2  3080               	movlw	128
 11483  12D3  00F0               	movwf	PutRC500@data
 11484  12D4  3000               	movlw	0
 11485  12D5  23D0  3192         	fcall	_PutRC500
 11486                           
 11487                           ;mfrc500.c: 351: (LATEbits.LATE7 = 0x00);
 11488  12D7  0022               	movlb	2	; select bank2
 11489  12D8  1390               	bcf	16,7	;volatile
 11490                           
 11491                           ;mfrc500.c: 352: ret_status = GetRC500(0x01);
 11492  12D9  3001               	movlw	1
 11493  12DA  23E9  3192         	fcall	_GetRC500
 11494  12DC  00F7               	movwf	PcdReset@ret_status
 11495                           
 11496                           ;mfrc500.c: 353: if (ret_status != 0)
 11497  12DD  0877               	movf	PcdReset@ret_status,w
 11498  12DE  1903               	btfsc	3,2
 11499  12DF  2AE3               	goto	l6964
 11500                           
 11501                           ;mfrc500.c: 354: {
 11502                           ;mfrc500.c: 355: ret_status = (-26);
 11503  12E0  30E6               	movlw	230
 11504  12E1  00F7               	movwf	PcdReset@ret_status
 11505                           
 11506                           ;mfrc500.c: 356: }
 11507  12E2  2AE6               	goto	l6966
 11508  12E3                     l6964:	
 11509  12E3  3000               	movlw	0
 11510                           
 11511                           ;mfrc500.c: 357: else
 11512                           ;mfrc500.c: 358: {
 11513                           ;mfrc500.c: 359: PutRC500(0x00, 0x00);
 11514  12E4  01F0               	clrf	PutRC500@data
 11515  12E5  23D0               	fcall	_PutRC500
 11516  12E6                     l6966:	
 11517                           
 11518                           ;mfrc500.c: 360: }
 11519                           ;mfrc500.c: 361: }
 11520                           ;mfrc500.c: 363: return ret_status;
 11521  12E6  0877               	movf	PcdReset@ret_status,w
 11522  12E7  0008               	return
 11523  12E8                     __end_of_PcdReset:	
 11524  12E8                     __ptext44:	
 11525 ;; *************** function _ISR_RC500 *****************
 11526 ;; Defined at:
 11527 ;;		line 221 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 11528 ;; Parameters:    Size  Location     Type
 11529 ;;		None
 11530 ;; Auto vars:     Size  Location     Type
 11531 ;;  irqBits         1   10[COMMON] unsigned char 
 11532 ;;  nbytes          1    9[COMMON] unsigned char 
 11533 ;;  cnt             1    8[COMMON] unsigned char 
 11534 ;;  oldPageSelec    1    7[COMMON] unsigned char 
 11535 ;;  irqMask         1    6[COMMON] unsigned char 
 11536 ;; Return value:  Size  Location     Type
 11537 ;;		None               void
 11538 ;; Registers used:
 11539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11540 ;; Tracked objects:
 11541 ;;		On entry : 1F/0
 11542 ;;		On exit  : 1E/0
 11543 ;;		Unchanged: 0/0
 11544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;Total ram usage:        9 bytes
 11550 ;; Hardware stack levels used:    1
 11551 ;; Hardware stack levels required when called:    2
 11552 ;; This function calls:
 11553 ;;		_GetRC500
 11554 ;;		_PutRC500
 11555 ;; This function is called by:
 11556 ;;		_PcdSingleResponseCmd
 11557 ;; This function uses a non-reentrant model
 11558 ;;
 11559                           
 11560                           
 11561                           ;psect for function _ISR_RC500
 11562  12E8                     _ISR_RC500:	
 11563                           
 11564                           ;mfrc500.c: 225: unsigned char irqBits;
 11565                           ;mfrc500.c: 226: unsigned char irqMask;
 11566                           ;mfrc500.c: 227: unsigned char oldPageSelect;
 11567                           ;mfrc500.c: 228: unsigned char nbytes;
 11568                           ;mfrc500.c: 229: unsigned char cnt;
 11569                           ;mfrc500.c: 231: if (MpIsrInfo && MpIsrOut && MpIsrIn)
 11570                           
 11571                           ;incstack = 0
 11572                           ; Regs used in _ISR_RC500: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11573  12E8  0854               	movf	_MpIsrInfo,w
 11574  12E9  1903               	btfsc	3,2
 11575  12EA  0008               	return
 11576  12EB  0855               	movf	_MpIsrOut,w
 11577  12EC  1903               	btfsc	3,2
 11578  12ED  0008               	return
 11579  12EE  0853               	movf	_MpIsrIn,w
 11580  12EF  1903               	btfsc	3,2
 11581  12F0  0008               	return
 11582                           
 11583                           ;mfrc500.c: 232: {
 11584                           ;mfrc500.c: 233: oldPageSelect = GetRC500(0x00);
 11585  12F1  3000               	movlw	0
 11586  12F2  23E9  3192         	fcall	_GetRC500
 11587  12F4  00F7               	movwf	ISR_RC500@oldPageSelect
 11588                           
 11589                           ;mfrc500.c: 234: PutRC500(0x00, 0x80);
 11590  12F5  3080               	movlw	128
 11591  12F6  00F0               	movwf	PutRC500@data
 11592  12F7  3000               	movlw	0
 11593  12F8  23D0  3192         	fcall	_PutRC500
 11594  12FA                     l6900:	
 11595                           ;mfrc500.c: 235: while ((GetRC500(0x03) & 0x08))
 11596                           
 11597  12FA  3003               	movlw	3
 11598  12FB  23E9  3192         	fcall	_GetRC500
 11599  12FD  3908               	andlw	8
 11600  12FE  1903               	btfsc	3,2
 11601  12FF  2BCB               	goto	l6902
 11602                           
 11603                           ;mfrc500.c: 236: {
 11604                           ;mfrc500.c: 237: irqMask = GetRC500(0x06);
 11605  1300  3006               	movlw	6
 11606  1301  23E9  3192         	fcall	_GetRC500
 11607  1303  00F6               	movwf	ISR_RC500@irqMask
 11608                           
 11609                           ;mfrc500.c: 238: irqBits = GetRC500(0x07) & irqMask;
 11610  1304  3007               	movlw	7
 11611  1305  23E9  3192         	fcall	_GetRC500
 11612  1307  00FA               	movwf	ISR_RC500@irqBits
 11613  1308  0876               	movf	ISR_RC500@irqMask,w
 11614  1309  05FA               	andwf	ISR_RC500@irqBits,f
 11615                           
 11616                           ;mfrc500.c: 239: MpIsrInfo->irqSource |= irqBits;
 11617  130A  0020               	movlb	0	; select bank0
 11618  130B  0854               	movf	_MpIsrInfo,w
 11619  130C  3E06               	addlw	6
 11620  130D  0086               	movwf	6
 11621  130E  0187               	clrf	7
 11622  130F  087A               	movf	ISR_RC500@irqBits,w
 11623  1310  0481               	iorwf	1,f
 11624                           
 11625                           ;mfrc500.c: 240: if (irqBits & 0x01)
 11626  1311  1C7A               	btfss	ISR_RC500@irqBits,0
 11627  1312  2B5F               	goto	l6860
 11628                           
 11629                           ;mfrc500.c: 241: {
 11630                           ;mfrc500.c: 242: nbytes = 0x40 - GetRC500(0x04);
 11631  1313  3004               	movlw	4
 11632  1314  23E9  3192         	fcall	_GetRC500
 11633  1316  3C40               	sublw	64
 11634  1317  00F9               	movwf	ISR_RC500@nbytes
 11635                           
 11636                           ;mfrc500.c: 243: if ((MpIsrInfo->nBytesToSend - MpIsrInfo->nBytesSent) <= nbytes)
 11637  1318  2407  3192         	fcall	PL22	;call to abstracted procedure
 11638  131A  0854               	movf	_MpIsrInfo,w
 11639  131B  3E03               	addlw	3
 11640  131C  0084               	movwf	4
 11641  131D  0185               	clrf	5
 11642  131E  0800               	movf	0,w
 11643  131F  00F2               	movwf	??_ISR_RC500
 11644  1320  01F3               	clrf	??_ISR_RC500+1
 11645  1321  0873               	movf	??_ISR_RC500+1,w
 11646  1322  00F5               	movwf	??_ISR_RC500+3
 11647  1323  0801               	movf	1,w
 11648  1324  0272               	subwf	??_ISR_RC500,w
 11649  1325  00F4               	movwf	??_ISR_RC500+2
 11650  1326  1C03               	skipc
 11651  1327  03F5               	decf	??_ISR_RC500+3,f
 11652  1328  0875               	movf	??_ISR_RC500+3,w
 11653  1329  3A80               	xorlw	128
 11654  132A  3C80               	sublw	128
 11655  132B  1D03               	skipz
 11656  132C  2B2F               	goto	u7705
 11657  132D  0874               	movf	??_ISR_RC500+2,w
 11658  132E  0279               	subwf	ISR_RC500@nbytes,w
 11659  132F                     u7705:	
 11660  132F  1C03               	skipc
 11661  1330  2B42               	goto	l6848
 11662                           
 11663                           ;mfrc500.c: 244: {
 11664                           ;mfrc500.c: 245: nbytes = MpIsrInfo->nBytesToSend - MpIsrInfo->nBytesSent;
 11665  1331  0020               	movlb	0	; select bank0
 11666  1332  0854               	movf	_MpIsrInfo,w
 11667  1333  3E03               	addlw	3
 11668  1334  0086               	movwf	6
 11669  1335  0187               	clrf	7
 11670  1336  0854               	movf	_MpIsrInfo,w
 11671  1337  3E02               	addlw	2
 11672  1338  0084               	movwf	4
 11673  1339  0185               	clrf	5
 11674  133A  0800               	movf	0,w
 11675  133B  0201               	subwf	1,w
 11676  133C  00F9               	movwf	ISR_RC500@nbytes
 11677  133D  3006               	movlw	6
 11678                           
 11679                           ;mfrc500.c: 246: PutRC500(0x06, 0x01);
 11680  133E  01F0               	clrf	PutRC500@data
 11681  133F  0AF0               	incf	PutRC500@data,f
 11682  1340  23D0  3192         	fcall	_PutRC500
 11683  1342                     l6848:	
 11684                           
 11685                           ;mfrc500.c: 247: }
 11686                           ;mfrc500.c: 248: for (cnt = 0; cnt < nbytes; cnt++)
 11687  1342  01F8               	clrf	ISR_RC500@cnt
 11688  1343                     l6856:	
 11689  1343  0879               	movf	ISR_RC500@nbytes,w
 11690  1344  0278               	subwf	ISR_RC500@cnt,w
 11691  1345  1803               	btfsc	3,0
 11692  1346  2B5A               	goto	l6858
 11693                           
 11694                           ;mfrc500.c: 249: {
 11695                           ;mfrc500.c: 250: PutRC500(0x02, MpIsrOut[MpIsrInfo->nBytesSent]);
 11696  1347  0020               	movlb	0	; select bank0
 11697  1348  0854               	movf	_MpIsrInfo,w
 11698  1349  3E02               	addlw	2
 11699  134A  0086               	movwf	6
 11700  134B  0187               	clrf	7
 11701  134C  0801               	movf	1,w
 11702  134D  0755               	addwf	_MpIsrOut,w
 11703  134E  00F2               	movwf	??_ISR_RC500
 11704  134F  0086               	movwf	6
 11705  1350  0801               	movf	1,w
 11706  1351  00F0               	movwf	PutRC500@data
 11707  1352  3002               	movlw	2
 11708  1353  23D0  3192         	fcall	_PutRC500
 11709                           
 11710                           ;mfrc500.c: 251: MpIsrInfo->nBytesSent++;
 11711  1355  2407  3192         	fcall	PL22	;call to abstracted procedure
 11712  1357  0A81               	incf	1,f
 11713  1358  0AF8               	incf	ISR_RC500@cnt,f
 11714  1359  2B43               	goto	l6856
 11715  135A                     l6858:	
 11716  135A  3007               	movlw	7
 11717                           
 11718                           ;mfrc500.c: 252: }
 11719                           ;mfrc500.c: 253: PutRC500(0x07, 0x01);
 11720  135B  01F0               	clrf	PutRC500@data
 11721  135C  0AF0               	incf	PutRC500@data,f
 11722  135D  23D0  3192         	fcall	_PutRC500
 11723  135F                     l6860:	
 11724                           
 11725                           ;mfrc500.c: 254: }
 11726                           ;mfrc500.c: 255: if (irqBits & 0x10)
 11727  135F  1E7A               	btfss	ISR_RC500@irqBits,4
 11728  1360  2B7C               	goto	l6868
 11729                           
 11730                           ;mfrc500.c: 256: {
 11731                           ;mfrc500.c: 257: PutRC500(0x07, 0x10);
 11732  1361  3010               	movlw	16
 11733  1362  00F0               	movwf	PutRC500@data
 11734  1363  3007               	movlw	7
 11735  1364  23D0  3192         	fcall	_PutRC500
 11736                           
 11737                           ;mfrc500.c: 258: PutRC500(0x06, 0x82);
 11738  1366  3082               	movlw	130
 11739  1367  00F0               	movwf	PutRC500@data
 11740  1368  3006               	movlw	6
 11741  1369  23D0  3192         	fcall	_PutRC500
 11742                           
 11743                           ;mfrc500.c: 259: if (MpIsrInfo->cmd == 0x93)
 11744  136B  0020               	movlb	0	; select bank0
 11745  136C  0854               	movf	_MpIsrInfo,w
 11746  136D  0086               	movwf	6
 11747  136E  0187               	clrf	7
 11748  136F  0801               	movf	1,w
 11749  1370  3A93               	xorlw	147
 11750  1371  1D03               	skipz
 11751  1372  2B7C               	goto	l6868
 11752                           
 11753                           ;mfrc500.c: 260: {
 11754                           ;mfrc500.c: 261: PutRC500(0x22, 0x02);
 11755  1373  3002               	movlw	2
 11756  1374  00F0               	movwf	PutRC500@data
 11757  1375  3022               	movlw	34
 11758  1376  23D0  3192         	fcall	_PutRC500
 11759  1378  3000               	movlw	0
 11760                           
 11761                           ;mfrc500.c: 262: PutRC500(0x00, 0x00);
 11762  1379  01F0               	clrf	PutRC500@data
 11763  137A  23D0  3192         	fcall	_PutRC500
 11764  137C                     l6868:	
 11765                           
 11766                           ;mfrc500.c: 263: }
 11767                           ;mfrc500.c: 264: }
 11768                           ;mfrc500.c: 265: if (irqBits & 0x0E)
 11769  137C  087A               	movf	ISR_RC500@irqBits,w
 11770  137D  390E               	andlw	14
 11771  137E  1903               	btfsc	3,2
 11772  137F  2BA5               	goto	l6884
 11773                           
 11774                           ;mfrc500.c: 266: {
 11775                           ;mfrc500.c: 267: nbytes = GetRC500(0x04);
 11776  1380  3004               	movlw	4
 11777  1381  23E9  3192         	fcall	_GetRC500
 11778  1383  00F9               	movwf	ISR_RC500@nbytes
 11779                           
 11780                           ;mfrc500.c: 268: for (cnt = 0; cnt < nbytes; cnt++)
 11781  1384  01F8               	clrf	ISR_RC500@cnt
 11782  1385                     l6880:	
 11783  1385  0879               	movf	ISR_RC500@nbytes,w
 11784  1386  0278               	subwf	ISR_RC500@cnt,w
 11785  1387  1803               	btfsc	3,0
 11786  1388  2B9E               	goto	l6882
 11787                           
 11788                           ;mfrc500.c: 269: {
 11789                           ;mfrc500.c: 270: MpIsrIn[MpIsrInfo->nBytesReceived] = GetRC500(0x02);
 11790  1389  0020               	movlb	0	; select bank0
 11791  138A  0854               	movf	_MpIsrInfo,w
 11792  138B  3E04               	addlw	4
 11793  138C  0086               	movwf	6
 11794  138D  0187               	clrf	7
 11795  138E  0801               	movf	1,w
 11796  138F  0753               	addwf	_MpIsrIn,w
 11797  1390  00F2               	movwf	??_ISR_RC500
 11798  1391  0086               	movwf	6
 11799  1392  3002               	movlw	2
 11800  1393  23E9  3192         	fcall	_GetRC500
 11801  1395  0081               	movwf	1
 11802                           
 11803                           ;mfrc500.c: 271: MpIsrInfo->nBytesReceived++;
 11804  1396  0020               	movlb	0	; select bank0
 11805  1397  0854               	movf	_MpIsrInfo,w
 11806  1398  3E04               	addlw	4
 11807  1399  0086               	movwf	6
 11808  139A  0187               	clrf	7
 11809  139B  0A81               	incf	1,f
 11810  139C  0AF8               	incf	ISR_RC500@cnt,f
 11811  139D  2B85               	goto	l6880
 11812  139E                     l6882:	
 11813                           
 11814                           ;mfrc500.c: 272: }
 11815                           ;mfrc500.c: 273: PutRC500(0x07, 0x0A & irqBits);
 11816  139E  087A               	movf	ISR_RC500@irqBits,w
 11817  139F  00F0               	movwf	PutRC500@data
 11818  13A0  300A               	movlw	10
 11819  13A1  05F0               	andwf	PutRC500@data,f
 11820  13A2  3007               	movlw	7
 11821  13A3  23D0  3192         	fcall	_PutRC500
 11822  13A5                     l6884:	
 11823                           
 11824                           ;mfrc500.c: 274: }
 11825                           ;mfrc500.c: 275: if (irqBits & 0x04)
 11826  13A5  1D7A               	btfss	ISR_RC500@irqBits,2
 11827  13A6  2BBD               	goto	l6894
 11828                           
 11829                           ;mfrc500.c: 276: {
 11830                           ;mfrc500.c: 277: PutRC500(0x06, 0x20);
 11831  13A7  3020               	movlw	32
 11832  13A8  00F0               	movwf	PutRC500@data
 11833  13A9  3006               	movlw	6
 11834  13AA  23D0  3192         	fcall	_PutRC500
 11835                           
 11836                           ;mfrc500.c: 278: PutRC500(0x07, 0x20);
 11837  13AC  3020               	movlw	32
 11838  13AD  00F0               	movwf	PutRC500@data
 11839  13AE  3007               	movlw	7
 11840  13AF  23D0  3192         	fcall	_PutRC500
 11841                           
 11842                           ;mfrc500.c: 279: irqBits &= ~0x20;
 11843  13B1  12FA               	bcf	ISR_RC500@irqBits,5
 11844                           
 11845                           ;mfrc500.c: 280: MpIsrInfo->irqSource &= ~0x20;
 11846  13B2  0020               	movlb	0	; select bank0
 11847  13B3  0854               	movf	_MpIsrInfo,w
 11848  13B4  3E06               	addlw	6
 11849  13B5  0086               	movwf	6
 11850  13B6  3004               	movlw	4
 11851  13B7  0187               	clrf	7
 11852  13B8  1281               	bcf	1,5
 11853                           
 11854                           ;mfrc500.c: 281: PutRC500(0x07,0x04);
 11855  13B9  00F0               	movwf	PutRC500@data
 11856  13BA  3007               	movlw	7
 11857  13BB  23D0  3192         	fcall	_PutRC500
 11858  13BD                     l6894:	
 11859                           
 11860                           ;mfrc500.c: 282: }
 11861                           ;mfrc500.c: 283: if (irqBits & 0x20)
 11862  13BD  1EFA               	btfss	ISR_RC500@irqBits,5
 11863  13BE  2AFA               	goto	l6900
 11864                           
 11865                           ;mfrc500.c: 284: {
 11866                           ;mfrc500.c: 285: PutRC500(0x07, 0x20);
 11867  13BF  3020               	movlw	32
 11868  13C0  00F0               	movwf	PutRC500@data
 11869  13C1  3007               	movlw	7
 11870  13C2  23D0  3192         	fcall	_PutRC500
 11871                           
 11872                           ;mfrc500.c: 286: MpIsrInfo->status = (-1);
 11873  13C4  0020               	movlb	0	; select bank0
 11874  13C5  0A54               	incf	_MpIsrInfo,w
 11875  13C6  0086               	movwf	6
 11876  13C7  30FF               	movlw	255
 11877  13C8  0187               	clrf	7
 11878  13C9  0081               	movwf	1
 11879  13CA  2AFA               	goto	l6900
 11880  13CB                     l6902:	
 11881                           
 11882                           ;mfrc500.c: 287: }
 11883                           ;mfrc500.c: 288: }
 11884                           ;mfrc500.c: 289: PutRC500(0x00, oldPageSelect | 0x80);
 11885  13CB  0877               	movf	ISR_RC500@oldPageSelect,w
 11886  13CC  3880               	iorlw	128
 11887  13CD  00F0               	movwf	PutRC500@data
 11888  13CE  3000               	movlw	0
 11889  13CF  2BD0               	ljmp	_PutRC500
 11890  13D0                     __end_of_ISR_RC500:	
 11891  13D0                     __ptext51:	
 11892 ;; *************** function _PutRC500 *****************
 11893 ;; Defined at:
 11894 ;;		line 74 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 11895 ;; Parameters:    Size  Location     Type
 11896 ;;  address         1    wreg     unsigned char 
 11897 ;;  data            1    0[COMMON] unsigned char 
 11898 ;; Auto vars:     Size  Location     Type
 11899 ;;  address         1    1[COMMON] unsigned char 
 11900 ;; Return value:  Size  Location     Type
 11901 ;;		None               void
 11902 ;; Registers used:
 11903 ;;		wreg, status,2
 11904 ;; Tracked objects:
 11905 ;;		On entry : 0/2
 11906 ;;		On exit  : 1F/1
 11907 ;;		Unchanged: 0/0
 11908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11909 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11912 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11913 ;;Total ram usage:        2 bytes
 11914 ;; Hardware stack levels used:    1
 11915 ;; Hardware stack levels required when called:    1
 11916 ;; This function calls:
 11917 ;;		Nothing
 11918 ;; This function is called by:
 11919 ;;		_WriteRC
 11920 ;;		_ReadRC
 11921 ;;		_ISR_RC500
 11922 ;;		_PcdReset
 11923 ;; This function uses a non-reentrant model
 11924 ;;
 11925                           
 11926                           
 11927                           ;psect for function _PutRC500
 11928  13D0                     _PutRC500:	
 11929                           
 11930                           ;incstack = 0
 11931                           ; Regs used in _PutRC500: [wreg+status,2]
 11932                           ;PutRC500@address stored from wreg
 11933  13D0  00F1               	movwf	PutRC500@address
 11934                           
 11935                           ;mfrc500.c: 79: (LATEbits.LATE4 = 0x01);
 11936  13D1  0022               	movlb	2	; select bank2
 11937  13D2  1610               	bsf	16,4	;volatile
 11938                           
 11939                           ;mfrc500.c: 80: TRISD = 0x00;
 11940  13D3  0021               	movlb	1	; select bank1
 11941  13D4  018F               	clrf	15	;volatile
 11942                           
 11943                           ;mfrc500.c: 81: PORTD = address;
 11944  13D5  0871               	movf	PutRC500@address,w
 11945                           
 11946                           ;mfrc500.c: 82: (LATEbits.LATE7 = 0x01);
 11947                           
 11948                           ;mfrc500.c: 83: (LATEbits.LATE7 = 0x00);
 11949  13D6  240D               	fcall	PL24	;call to abstracted procedure
 11950                           
 11951                           ;mfrc500.c: 84: (LATEbits.LATE5 = 0x00);
 11952  13D7  1290               	bcf	16,5	;volatile
 11953                           
 11954                           ;mfrc500.c: 85: (LATEbits.LATE4 = 0x00);
 11955  13D8  1210               	bcf	16,4	;volatile
 11956                           
 11957                           ;mfrc500.c: 86: PORTD = data;
 11958  13D9  0870               	movf	PutRC500@data,w
 11959  13DA  0020               	movlb	0	; select bank0
 11960  13DB  008F               	movwf	15	;volatile
 11961                           
 11962                           ;mfrc500.c: 87: (LATEbits.LATE6 = 0x00);
 11963  13DC  0022               	movlb	2	; select bank2
 11964  13DD  1310               	bcf	16,6	;volatile
 11965                           
 11966                           ;mfrc500.c: 88: __nop();
 11967  13DE  0000               	nop
 11968                           
 11969                           ;mfrc500.c: 89: __nop();
 11970  13DF  0000               	nop
 11971                           
 11972                           ;mfrc500.c: 90: __nop();
 11973  13E0  0000               	nop
 11974                           
 11975                           ;mfrc500.c: 91: (LATEbits.LATE6 = 0x01);
 11976  13E1  0022               	movlb	2	; select bank2
 11977  13E2  1710               	bsf	16,6	;volatile
 11978                           
 11979                           ;mfrc500.c: 92: (LATEbits.LATE4 = 0x01);
 11980  13E3  1610               	bsf	16,4	;volatile
 11981                           
 11982                           ;mfrc500.c: 93: (LATEbits.LATE5 = 0x01);
 11983  13E4  1690               	bsf	16,5	;volatile
 11984                           
 11985                           ;mfrc500.c: 94: TRISD = 0xFF;
 11986  13E5  30FF               	movlw	255
 11987  13E6  0021               	movlb	1	; select bank1
 11988  13E7  008F               	movwf	15	;volatile
 11989  13E8  0008               	return
 11990  13E9                     __end_of_PutRC500:	
 11991  13E9                     __ptext48:	
 11992 ;; *************** function _GetRC500 *****************
 11993 ;; Defined at:
 11994 ;;		line 99 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 11995 ;; Parameters:    Size  Location     Type
 11996 ;;  address         1    wreg     unsigned char 
 11997 ;; Auto vars:     Size  Location     Type
 11998 ;;  address         1    0[COMMON] unsigned char 
 11999 ;;  tmp             1    1[COMMON] unsigned char 
 12000 ;; Return value:  Size  Location     Type
 12001 ;;                  1    wreg      unsigned char 
 12002 ;; Registers used:
 12003 ;;		wreg, status,2
 12004 ;; Tracked objects:
 12005 ;;		On entry : 0/2
 12006 ;;		On exit  : 1F/2
 12007 ;;		Unchanged: 0/0
 12008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;Total ram usage:        2 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:    1
 12016 ;; This function calls:
 12017 ;;		Nothing
 12018 ;; This function is called by:
 12019 ;;		_ReadRC
 12020 ;;		_ISR_RC500
 12021 ;;		_PcdReset
 12022 ;; This function uses a non-reentrant model
 12023 ;;
 12024                           
 12025                           
 12026                           ;psect for function _GetRC500
 12027  13E9                     _GetRC500:	
 12028                           
 12029                           ;incstack = 0
 12030                           ; Regs used in _GetRC500: [wreg+status,2]
 12031                           ;GetRC500@address stored from wreg
 12032  13E9  00F0               	movwf	GetRC500@address
 12033                           
 12034                           ;mfrc500.c: 103: BYTE tmp;
 12035                           ;mfrc500.c: 105: (LATEbits.LATE4 = 0x01);
 12036  13EA  0022               	movlb	2	; select bank2
 12037  13EB  1610               	bsf	16,4	;volatile
 12038                           
 12039                           ;mfrc500.c: 106: TRISD = 0x00;
 12040  13EC  0021               	movlb	1	; select bank1
 12041  13ED  018F               	clrf	15	;volatile
 12042                           
 12043                           ;mfrc500.c: 107: PORTD = address;
 12044  13EE  0870               	movf	GetRC500@address,w
 12045                           
 12046                           ;mfrc500.c: 108: (LATEbits.LATE7 = 0x01);
 12047                           
 12048                           ;mfrc500.c: 109: (LATEbits.LATE7 = 0x00);
 12049  13EF  240D               	fcall	PL24	;call to abstracted procedure
 12050                           
 12051                           ;mfrc500.c: 110: TRISD = 0xFF;
 12052  13F0  30FF               	movlw	255
 12053  13F1  0021               	movlb	1	; select bank1
 12054  13F2  008F               	movwf	15	;volatile
 12055                           
 12056                           ;mfrc500.c: 111: (LATEbits.LATE5 = 0x01);
 12057  13F3  0022               	movlb	2	; select bank2
 12058  13F4  1690               	bsf	16,5	;volatile
 12059                           
 12060                           ;mfrc500.c: 112: (LATEbits.LATE4 = 0x00);
 12061  13F5  1210               	bcf	16,4	;volatile
 12062                           
 12063                           ;mfrc500.c: 113: (LATEbits.LATE6 = 0x00);
 12064  13F6  1310               	bcf	16,6	;volatile
 12065                           
 12066                           ;mfrc500.c: 114: tmp = PORTD;
 12067  13F7  0020               	movlb	0	; select bank0
 12068  13F8  080F               	movf	15,w	;volatile
 12069  13F9  00F1               	movwf	GetRC500@tmp
 12070                           
 12071                           ;mfrc500.c: 115: (LATEbits.LATE6 = 0x01);
 12072  13FA  0022               	movlb	2	; select bank2
 12073  13FB  1710               	bsf	16,6	;volatile
 12074                           
 12075                           ;mfrc500.c: 116: (LATEbits.LATE4 = 0x01);
 12076  13FC  1610               	bsf	16,4	;volatile
 12077                           
 12078                           ;mfrc500.c: 118: return tmp;
 12079  13FD  0871               	movf	GetRC500@tmp,w
 12080  13FE  0008               	return
 12081  13FF                     __end_of_GetRC500:	
 12082  13FF                     PL12:	
 12083  13FF  00F3               	movwf	PcdReset@count01
 12084  1400  3027               	movlw	39
 12085  1401  00F4               	movwf	PcdReset@count01+1
 12086  1402  3001               	movlw	1
 12087  1403  02F5               	subwf	PcdReset@count02,f
 12088  1404  3000               	movlw	0
 12089  1405  3BF6               	subwfb	PcdReset@count02+1,f
 12090  1406  0008               	return
 12091  1407                     __end_ofPL12:	
 12092  1407                     PL22:	
 12093  1407  0020               	movlb	0	; select bank0
 12094  1408  0854               	movf	_MpIsrInfo,w
 12095  1409  3E02               	addlw	2
 12096  140A  0086               	movwf	6
 12097  140B  0187               	clrf	7
 12098  140C  0008               	return
 12099  140D                     __end_ofPL22:	
 12100  140D                     PL24:	
 12101  140D  0020               	movlb	0	; select bank0
 12102  140E  008F               	movwf	15	;volatile
 12103  140F  0022               	movlb	2	; select bank2
 12104  1410  1790               	bsf	16,7	;volatile
 12105  1411  1390               	bcf	16,7	;volatile
 12106  1412  0008               	return
 12107  1413                     __end_ofPL24:	
 12108  1413                     PL26:	
 12109  1413  3000               	movlw	0
 12110  1414  3BF4               	subwfb	PcdReset@count01+1,f
 12111  1415  0874               	movf	PcdReset@count01+1,w
 12112  1416  0473               	iorwf	PcdReset@count01,w
 12113  1417  0008               	return
 12114  1418                     __end_ofPL26:	
 12115                           
 12116                           	psect	text19
 12117  07E8                     __ptext19:	
 12118 ;; *************** function _same_id *****************
 12119 ;; Defined at:
 12120 ;;		line 519 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_ic_card.c"
 12121 ;; Parameters:    Size  Location     Type
 12122 ;;		None
 12123 ;; Auto vars:     Size  Location     Type
 12124 ;;		None
 12125 ;; Return value:  Size  Location     Type
 12126 ;;                  1    wreg      unsigned char 
 12127 ;; Registers used:
 12128 ;;		wreg
 12129 ;; Tracked objects:
 12130 ;;		On entry : 1F/0
 12131 ;;		On exit  : 1F/1
 12132 ;;		Unchanged: 0/0
 12133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12138 ;;Total ram usage:        0 bytes
 12139 ;; Hardware stack levels used:    1
 12140 ;; Hardware stack levels required when called:    1
 12141 ;; This function calls:
 12142 ;;		Nothing
 12143 ;; This function is called by:
 12144 ;;		_handle_ic_card
 12145 ;; This function uses a non-reentrant model
 12146 ;;
 12147                           
 12148                           
 12149                           ;psect for function _same_id
 12150  07E8                     _same_id:	
 12151                           
 12152                           ;handle_ic_card.c: 523: if ((card_id[0] == snr_rc500[0]) &&
 12153                           ;handle_ic_card.c: 524: (card_id[1] == snr_rc500[1]) &&
 12154                           ;handle_ic_card.c: 525: (card_id[2] == snr_rc500[2]) &&
 12155                           ;handle_ic_card.c: 526: (card_id[3] == snr_rc500[3]))
 12156                           
 12157                           ;incstack = 0
 12158                           ; Regs used in _same_id: [wreg]
 12159  07E8  084F               	movf	_card_id,w
 12160  07E9  0021               	movlb	1	; select bank1
 12161  07EA  065A               	xorwf	_snr_rc500^(0+128),w
 12162  07EB  1D03               	skipz
 12163  07EC  3400               	retlw	0
 12164  07ED  0020               	movlb	0	; select bank0
 12165  07EE  0850               	movf	_card_id+1,w
 12166  07EF  0021               	movlb	1	; select bank1
 12167  07F0  065B               	xorwf	(_snr_rc500^(0+128)+1),w
 12168  07F1  1D03               	skipz
 12169  07F2  3400               	retlw	0
 12170  07F3  0020               	movlb	0	; select bank0
 12171  07F4  0851               	movf	_card_id+2,w
 12172  07F5  0021               	movlb	1	; select bank1
 12173  07F6  065C               	xorwf	(_snr_rc500^(0+128)+2),w
 12174  07F7  1D03               	skipz
 12175  07F8  3400               	retlw	0
 12176  07F9  0020               	movlb	0	; select bank0
 12177  07FA  0852               	movf	_card_id+3,w
 12178  07FB  0021               	movlb	1	; select bank1
 12179  07FC  065D               	xorwf	(_snr_rc500^(0+128)+3),w
 12180  07FD  1903               	btfsc	3,2
 12181                           
 12182                           ;handle_ic_card.c: 527: {
 12183                           ;handle_ic_card.c: 528: return 0x01;
 12184  07FE  3401               	retlw	1
 12185                           
 12186                           ;handle_ic_card.c: 530: else
 12187                           ;handle_ic_card.c: 531: {
 12188                           ;handle_ic_card.c: 532: return 0x00;
 12189  07FF  3400               	retlw	0
 12190  0800                     __end_of_same_id:	
 12191                           
 12192                           	psect	text21
 12193  1106                     __ptext21:	
 12194 ;; *************** function _deal_floor *****************
 12195 ;; Defined at:
 12196 ;;		line 36 in file "D:\WORKproject\AJ-BLE-IC\source\application\handle_floor.c"
 12197 ;; Parameters:    Size  Location     Type
 12198 ;;  data            1    wreg     PTR unsigned char 
 12199 ;;		 -> user_card(14), 
 12200 ;; Auto vars:     Size  Location     Type
 12201 ;;  data            1    0[BANK0 ] PTR unsigned char 
 12202 ;;		 -> user_card(14), 
 12203 ;;  floor           8    2[BANK0 ] unsigned char [8]
 12204 ;;  i               1    1[BANK0 ] unsigned char 
 12205 ;; Return value:  Size  Location     Type
 12206 ;;		None               void
 12207 ;; Registers used:
 12208 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12209 ;; Tracked objects:
 12210 ;;		On entry : 1F/1
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;Total ram usage:       11 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; Hardware stack levels required when called:    2
 12221 ;; This function calls:
 12222 ;;		_delay_ms
 12223 ;;		_uart1_send_byte
 12224 ;; This function is called by:
 12225 ;;		_read_card_content
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           
 12230                           ;psect for function _deal_floor
 12231  1106                     _deal_floor:	
 12232                           
 12233                           ;incstack = 0
 12234                           ; Regs used in _deal_floor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12235                           ;deal_floor@data stored from wreg
 12236  1106  0020               	movlb	0	; select bank0
 12237  1107  00A0               	movwf	deal_floor@data
 12238                           
 12239                           ;handle_floor.c: 40: BYTE i, floor[8];
 12240                           ;handle_floor.c: 42: for (i = 0; i < 0x08; i++)
 12241  1108  01A1               	clrf	deal_floor@i
 12242  1109                     l5090:	
 12243                           
 12244                           ;handle_floor.c: 43: {
 12245                           ;handle_floor.c: 44: floor[i] = data[i + 6];
 12246  1109  0821               	movf	deal_floor@i,w
 12247  110A  3E22               	addlw	deal_floor@floor& (0+255)
 12248  110B  0086               	movwf	6
 12249  110C  0187               	clrf	7
 12250  110D  0821               	movf	deal_floor@i,w
 12251  110E  0720               	addwf	deal_floor@data,w
 12252  110F  00F6               	movwf	??_deal_floor
 12253  1110  3E06               	addlw	6
 12254  1111  0084               	movwf	4
 12255  1112  0185               	clrf	5
 12256  1113  0800               	movf	0,w
 12257  1114  0081               	movwf	1
 12258  1115  3008               	movlw	8
 12259  1116  0AA1               	incf	deal_floor@i,f
 12260  1117  0221               	subwf	deal_floor@i,w
 12261  1118  1C03               	skipc
 12262  1119  2909               	goto	l5090
 12263                           
 12264                           ;handle_floor.c: 45: }
 12265                           ;handle_floor.c: 48: if ((floor[0] == 0x01 || floor[0] == 0x02 || floor[0] == 0x04 || fl
      +                          oor[0] == 0x08 ||
 12266                           ;handle_floor.c: 49: floor[0] == 0x10 || floor[0] == 0x20 || floor[0] == 0x40 || floor[0
      +                          ] == 0x80) &&
 12267                           ;handle_floor.c: 50: floor[1] == 0x00 && floor[2] == 0x00 && floor[3] == 0x00 && floor[4
      +                          ] == 0x00 &&
 12268                           ;handle_floor.c: 51: floor[5] == 0x00 && floor[6] == 0x00 && floor[7] == 0x00)
 12269  111A  0322               	decf	deal_floor@floor,w
 12270  111B  1903               	skipnz
 12271  111C  2939               	goto	l5112
 12272  111D  0822               	movf	deal_floor@floor,w
 12273  111E  3A02               	xorlw	2
 12274  111F  1903               	skipnz
 12275  1120  2939               	goto	l5112
 12276  1121  0822               	movf	deal_floor@floor,w
 12277  1122  3A04               	xorlw	4
 12278  1123  1903               	skipnz
 12279  1124  2939               	goto	l5112
 12280  1125  0822               	movf	deal_floor@floor,w
 12281  1126  3A08               	xorlw	8
 12282  1127  1903               	skipnz
 12283  1128  2939               	goto	l5112
 12284  1129  0822               	movf	deal_floor@floor,w
 12285  112A  3A10               	xorlw	16
 12286  112B  1903               	skipnz
 12287  112C  2939               	goto	l5112
 12288  112D  0822               	movf	deal_floor@floor,w
 12289  112E  3A20               	xorlw	32
 12290  112F  1903               	skipnz
 12291  1130  2939               	goto	l5112
 12292  1131  0822               	movf	deal_floor@floor,w
 12293  1132  3A40               	xorlw	64
 12294  1133  1903               	skipnz
 12295  1134  2939               	goto	l5112
 12296  1135  0822               	movf	deal_floor@floor,w
 12297  1136  3A80               	xorlw	128
 12298  1137  1D03               	skipz
 12299  1138  297B               	goto	l5148
 12300  1139                     l5112:	
 12301  1139  08A3               	movf	deal_floor@floor+1,f
 12302  113A  1D03               	skipz
 12303  113B  297B               	goto	l5148
 12304  113C  08A4               	movf	deal_floor@floor+2,f
 12305  113D  1D03               	skipz
 12306  113E  297B               	goto	l5148
 12307  113F  08A5               	movf	deal_floor@floor+3,f
 12308  1140  1D03               	skipz
 12309  1141  297B               	goto	l5148
 12310  1142  08A6               	movf	deal_floor@floor+4,f
 12311  1143  1D03               	skipz
 12312  1144  297B               	goto	l5148
 12313  1145  08A7               	movf	deal_floor@floor+5,f
 12314  1146  1D03               	skipz
 12315  1147  297B               	goto	l5148
 12316  1148  08A8               	movf	deal_floor@floor+6,f
 12317  1149  1D03               	skipz
 12318  114A  297B               	goto	l5148
 12319  114B  08A9               	movf	deal_floor@floor+7,f
 12320  114C  1903               	btfsc	3,2
 12321  114D  2960               	goto	l5146
 12322  114E  297B               	goto	l5148
 12323  114F                     l5128:	
 12324  114F  3001               	movlw	1
 12325  1150                     L27:	
 12326  1150  318A  2AA2         	ljmp	_uart1_send_byte
 12327  1152                     l5130:	
 12328  1152  3002               	movlw	2
 12329  1153  2950               	ljmp	L27
 12330  1154                     l5132:	
 12331  1154  3004               	movlw	4
 12332  1155  2950               	ljmp	L27
 12333  1156                     l5134:	
 12334  1156  3008               	movlw	8
 12335  1157  2950               	ljmp	L27
 12336  1158                     l5136:	
 12337  1158  3011               	movlw	17
 12338  1159  2950               	ljmp	L27
 12339  115A                     l5138:	
 12340  115A  3012               	movlw	18
 12341  115B  2950               	ljmp	L27
 12342  115C                     l5140:	
 12343  115C  3014               	movlw	20
 12344  115D  2950               	ljmp	L27
 12345  115E                     l5142:	
 12346  115E  3018               	movlw	24
 12347  115F  2950               	ljmp	L27
 12348  1160                     l5146:	
 12349  1160  0822               	movf	deal_floor@floor,w
 12350                           
 12351                           ; Switch size 1, requested type "space"
 12352                           ; Number of cases is 8, Range of values is 1 to 128
 12353                           ; switch strategies available:
 12354                           ; Name         Instructions Cycles
 12355                           ; simple_byte           25    13 (average)
 12356                           ; direct_byte          265     9 (fixed)
 12357                           ; jumptable            263     9 (fixed)
 12358                           ;	Chosen strategy is simple_byte
 12359  1161  3A01               	xorlw	1	; case 1
 12360  1162  1903               	skipnz
 12361  1163  294F               	goto	l5128
 12362  1164  3A03               	xorlw	3	; case 2
 12363  1165  1903               	skipnz
 12364  1166  2952               	goto	l5130
 12365  1167  3A06               	xorlw	6	; case 4
 12366  1168  1903               	skipnz
 12367  1169  2954               	goto	l5132
 12368  116A  3A0C               	xorlw	12	; case 8
 12369  116B  1903               	skipnz
 12370  116C  2956               	goto	l5134
 12371  116D  3A18               	xorlw	24	; case 16
 12372  116E  1903               	skipnz
 12373  116F  2958               	goto	l5136
 12374  1170  3A30               	xorlw	48	; case 32
 12375  1171  1903               	skipnz
 12376  1172  295A               	goto	l5138
 12377  1173  3A60               	xorlw	96	; case 64
 12378  1174  1903               	skipnz
 12379  1175  295C               	goto	l5140
 12380  1176  3AC0               	xorlw	192	; case 128
 12381  1177  1903               	skipnz
 12382  1178  295E               	goto	l5142
 12383  1179                     L28:	
 12384  1179  3187  2F83         	goto	l289
 12385  117B                     l5148:	
 12386                           
 12387                           ;handle_floor.c: 66: else if (floor[0] == 0x00 &&
 12388                           ;handle_floor.c: 67: (floor[1] == 0x01 || floor[1] == 0x02 || floor[1] == 0x04 || floor[
      +                          1] == 0x08 ||
 12389                           ;handle_floor.c: 68: floor[1] == 0x10 || floor[1] == 0x20 || floor[1] == 0x40 || floor[1
      +                          ] == 0x80) &&
 12390                           ;handle_floor.c: 69: floor[2] == 0x00 && floor[3] == 0x00 && floor[4] == 0x00 && floor[5
      +                          ] == 0x00 && floor[6] == 0x00 && floor[7] == 0x00)
 12391  117B  08A2               	movf	deal_floor@floor,f
 12392  117C  1D03               	skipz
 12393  117D  29DA               	goto	l5200
 12394  117E  0323               	decf	deal_floor@floor+1,w
 12395  117F  1903               	skipnz
 12396  1180  299D               	goto	l5166
 12397  1181  0823               	movf	deal_floor@floor+1,w
 12398  1182  3A02               	xorlw	2
 12399  1183  1903               	skipnz
 12400  1184  299D               	goto	l5166
 12401  1185  0823               	movf	deal_floor@floor+1,w
 12402  1186  3A04               	xorlw	4
 12403  1187  1903               	skipnz
 12404  1188  299D               	goto	l5166
 12405  1189  0823               	movf	deal_floor@floor+1,w
 12406  118A  3A08               	xorlw	8
 12407  118B  1903               	skipnz
 12408  118C  299D               	goto	l5166
 12409  118D  0823               	movf	deal_floor@floor+1,w
 12410  118E  3A10               	xorlw	16
 12411  118F  1903               	skipnz
 12412  1190  299D               	goto	l5166
 12413  1191  0823               	movf	deal_floor@floor+1,w
 12414  1192  3A20               	xorlw	32
 12415  1193  1903               	skipnz
 12416  1194  299D               	goto	l5166
 12417  1195  0823               	movf	deal_floor@floor+1,w
 12418  1196  3A40               	xorlw	64
 12419  1197  1903               	skipnz
 12420  1198  299D               	goto	l5166
 12421  1199  0823               	movf	deal_floor@floor+1,w
 12422  119A  3A80               	xorlw	128
 12423  119B  1D03               	skipz
 12424  119C  29DA               	goto	l5200
 12425  119D                     l5166:	
 12426  119D  08A4               	movf	deal_floor@floor+2,f
 12427  119E  1D03               	skipz
 12428  119F  29DA               	goto	l5200
 12429  11A0  08A5               	movf	deal_floor@floor+3,f
 12430  11A1  1D03               	skipz
 12431  11A2  29DA               	goto	l5200
 12432  11A3  08A6               	movf	deal_floor@floor+4,f
 12433  11A4  1D03               	skipz
 12434  11A5  29DA               	goto	l5200
 12435  11A6  08A7               	movf	deal_floor@floor+5,f
 12436  11A7  1D03               	skipz
 12437  11A8  29DA               	goto	l5200
 12438  11A9  08A8               	movf	deal_floor@floor+6,f
 12439  11AA  1D03               	skipz
 12440  11AB  29DA               	goto	l5200
 12441  11AC  08A9               	movf	deal_floor@floor+7,f
 12442  11AD  1903               	btfsc	3,2
 12443  11AE  29C0               	goto	l5198
 12444  11AF  29DA               	goto	l5200
 12445  11B0                     l5180:	
 12446  11B0  3021               	movlw	33
 12447  11B1  2950               	ljmp	L27
 12448  11B2                     l5182:	
 12449  11B2  3022               	movlw	34
 12450  11B3  2950               	ljmp	L27
 12451  11B4                     l5184:	
 12452  11B4  3024               	movlw	36
 12453  11B5  2950               	ljmp	L27
 12454  11B6                     l5186:	
 12455  11B6  3028               	movlw	40
 12456  11B7  2950               	ljmp	L27
 12457  11B8                     l5188:	
 12458  11B8  3031               	movlw	49
 12459  11B9  2950               	ljmp	L27
 12460  11BA                     l5190:	
 12461  11BA  3032               	movlw	50
 12462  11BB  2950               	ljmp	L27
 12463  11BC                     l5192:	
 12464  11BC  3034               	movlw	52
 12465  11BD  2950               	ljmp	L27
 12466  11BE                     l5194:	
 12467  11BE  3038               	movlw	56
 12468  11BF  2950               	ljmp	L27
 12469  11C0                     l5198:	
 12470  11C0  0823               	movf	deal_floor@floor+1,w
 12471                           
 12472                           ; Switch size 1, requested type "space"
 12473                           ; Number of cases is 8, Range of values is 1 to 128
 12474                           ; switch strategies available:
 12475                           ; Name         Instructions Cycles
 12476                           ; simple_byte           25    13 (average)
 12477                           ; direct_byte          265     9 (fixed)
 12478                           ; jumptable            263     9 (fixed)
 12479                           ;	Chosen strategy is simple_byte
 12480  11C1  3A01               	xorlw	1	; case 1
 12481  11C2  1903               	skipnz
 12482  11C3  29B0               	goto	l5180
 12483  11C4  3A03               	xorlw	3	; case 2
 12484  11C5  1903               	skipnz
 12485  11C6  29B2               	goto	l5182
 12486  11C7  3A06               	xorlw	6	; case 4
 12487  11C8  1903               	skipnz
 12488  11C9  29B4               	goto	l5184
 12489  11CA  3A0C               	xorlw	12	; case 8
 12490  11CB  1903               	skipnz
 12491  11CC  29B6               	goto	l5186
 12492  11CD  3A18               	xorlw	24	; case 16
 12493  11CE  1903               	skipnz
 12494  11CF  29B8               	goto	l5188
 12495  11D0  3A30               	xorlw	48	; case 32
 12496  11D1  1903               	skipnz
 12497  11D2  29BA               	goto	l5190
 12498  11D3  3A60               	xorlw	96	; case 64
 12499  11D4  1903               	skipnz
 12500  11D5  29BC               	goto	l5192
 12501  11D6  3AC0               	xorlw	192	; case 128
 12502  11D7  1903               	skipnz
 12503  11D8  29BE               	goto	l5194
 12504  11D9  2979               	goto	L28
 12505  11DA                     l5200:	
 12506                           
 12507                           ;handle_floor.c: 84: else if (floor[0] == 0x00 && floor[1] == 0x00 &&
 12508                           ;handle_floor.c: 85: (floor[2] == 0x01 || floor[2] == 0x02 || floor[2] == 0x04 || floor[
      +                          2] == 0x08 ||
 12509                           ;handle_floor.c: 86: floor[2] == 0x10 || floor[2] == 0x20 || floor[2] == 0x40 || floor[2
      +                          ] == 0x80) &&
 12510                           ;handle_floor.c: 87: floor[3] == 0x00 && floor[4] == 0x00 && floor[5] == 0x00 && floor[6
      +                          ] == 0x00 && floor[7] == 0x00)
 12511  11DA  08A2               	movf	deal_floor@floor,f
 12512  11DB  1D03               	skipz
 12513  11DC  2A39               	goto	l5252
 12514  11DD  08A3               	movf	deal_floor@floor+1,f
 12515  11DE  1D03               	skipz
 12516  11DF  2A39               	goto	l5252
 12517  11E0  0324               	decf	deal_floor@floor+2,w
 12518  11E1  1903               	skipnz
 12519  11E2  29FF               	goto	l5220
 12520  11E3  0824               	movf	deal_floor@floor+2,w
 12521  11E4  3A02               	xorlw	2
 12522  11E5  1903               	skipnz
 12523  11E6  29FF               	goto	l5220
 12524  11E7  0824               	movf	deal_floor@floor+2,w
 12525  11E8  3A04               	xorlw	4
 12526  11E9  1903               	skipnz
 12527  11EA  29FF               	goto	l5220
 12528  11EB  0824               	movf	deal_floor@floor+2,w
 12529  11EC  3A08               	xorlw	8
 12530  11ED  1903               	skipnz
 12531  11EE  29FF               	goto	l5220
 12532  11EF  0824               	movf	deal_floor@floor+2,w
 12533  11F0  3A10               	xorlw	16
 12534  11F1  1903               	skipnz
 12535  11F2  29FF               	goto	l5220
 12536  11F3  0824               	movf	deal_floor@floor+2,w
 12537  11F4  3A20               	xorlw	32
 12538  11F5  1903               	skipnz
 12539  11F6  29FF               	goto	l5220
 12540  11F7  0824               	movf	deal_floor@floor+2,w
 12541  11F8  3A40               	xorlw	64
 12542  11F9  1903               	skipnz
 12543  11FA  29FF               	goto	l5220
 12544  11FB  0824               	movf	deal_floor@floor+2,w
 12545  11FC  3A80               	xorlw	128
 12546  11FD  1D03               	skipz
 12547  11FE  2A39               	goto	l5252
 12548  11FF                     l5220:	
 12549  11FF  08A5               	movf	deal_floor@floor+3,f
 12550  1200  1D03               	skipz
 12551  1201  2A39               	goto	l5252
 12552  1202  08A6               	movf	deal_floor@floor+4,f
 12553  1203  1D03               	skipz
 12554  1204  2A39               	goto	l5252
 12555  1205  08A7               	movf	deal_floor@floor+5,f
 12556  1206  1D03               	skipz
 12557  1207  2A39               	goto	l5252
 12558  1208  08A8               	movf	deal_floor@floor+6,f
 12559  1209  1D03               	skipz
 12560  120A  2A39               	goto	l5252
 12561  120B  08A9               	movf	deal_floor@floor+7,f
 12562  120C  1903               	btfsc	3,2
 12563  120D  2A1F               	goto	l5250
 12564  120E  2A39               	goto	l5252
 12565  120F                     l5232:	
 12566  120F  3041               	movlw	65
 12567  1210  2950               	ljmp	L27
 12568  1211                     l5234:	
 12569  1211  3042               	movlw	66
 12570  1212  2950               	ljmp	L27
 12571  1213                     l5236:	
 12572  1213  3044               	movlw	68
 12573  1214  2950               	ljmp	L27
 12574  1215                     l5238:	
 12575  1215  3048               	movlw	72
 12576  1216  2950               	ljmp	L27
 12577  1217                     l5240:	
 12578  1217  3051               	movlw	81
 12579  1218  2950               	ljmp	L27
 12580  1219                     l5242:	
 12581  1219  3052               	movlw	82
 12582  121A  2950               	ljmp	L27
 12583  121B                     l5244:	
 12584  121B  3054               	movlw	84
 12585  121C  2950               	ljmp	L27
 12586  121D                     l5246:	
 12587  121D  3058               	movlw	88
 12588  121E  2950               	ljmp	L27
 12589  121F                     l5250:	
 12590  121F  0824               	movf	deal_floor@floor+2,w
 12591                           
 12592                           ; Switch size 1, requested type "space"
 12593                           ; Number of cases is 8, Range of values is 1 to 128
 12594                           ; switch strategies available:
 12595                           ; Name         Instructions Cycles
 12596                           ; simple_byte           25    13 (average)
 12597                           ; direct_byte          265     9 (fixed)
 12598                           ; jumptable            263     9 (fixed)
 12599                           ;	Chosen strategy is simple_byte
 12600  1220  3A01               	xorlw	1	; case 1
 12601  1221  1903               	skipnz
 12602  1222  2A0F               	goto	l5232
 12603  1223  3A03               	xorlw	3	; case 2
 12604  1224  1903               	skipnz
 12605  1225  2A11               	goto	l5234
 12606  1226  3A06               	xorlw	6	; case 4
 12607  1227  1903               	skipnz
 12608  1228  2A13               	goto	l5236
 12609  1229  3A0C               	xorlw	12	; case 8
 12610  122A  1903               	skipnz
 12611  122B  2A15               	goto	l5238
 12612  122C  3A18               	xorlw	24	; case 16
 12613  122D  1903               	skipnz
 12614  122E  2A17               	goto	l5240
 12615  122F  3A30               	xorlw	48	; case 32
 12616  1230  1903               	skipnz
 12617  1231  2A19               	goto	l5242
 12618  1232  3A60               	xorlw	96	; case 64
 12619  1233  1903               	skipnz
 12620  1234  2A1B               	goto	l5244
 12621  1235  3AC0               	xorlw	192	; case 128
 12622  1236  1903               	skipnz
 12623  1237  2A1D               	goto	l5246
 12624  1238  2979               	goto	L28
 12625  1239                     l5252:	
 12626                           
 12627                           ;handle_floor.c: 102: else if (floor[0] == 0x00 && floor[1] == 0x00 && floor[2] == 0x00 
      +                          &&
 12628                           ;handle_floor.c: 103: (floor[3] == 0x01 || floor[3] == 0x02 || floor[3] == 0x04 || floor
      +                          [3] == 0x08 ||
 12629                           ;handle_floor.c: 104: floor[3] == 0x10 || floor[3] == 0x20 || floor[3] == 0x40 || floor[
      +                          3] == 0x80)
 12630                           ;handle_floor.c: 105: && floor[4] == 0x00 && floor[5] == 0x00 && floor[6] == 0x00 && flo
      +                          or[7] == 0x00)
 12631  1239  08A2               	movf	deal_floor@floor,f
 12632  123A  1D03               	skipz
 12633  123B  2A6E               	goto	L29
 12634  123C  08A3               	movf	deal_floor@floor+1,f
 12635  123D  1D03               	skipz
 12636  123E  2A6E               	goto	L29
 12637  123F  08A4               	movf	deal_floor@floor+2,f
 12638  1240  1D03               	skipz
 12639  1241  2A6E               	goto	L29
 12640  1242  0325               	decf	deal_floor@floor+3,w
 12641  1243  1903               	skipnz
 12642  1244  2A61               	goto	l5274
 12643  1245  0825               	movf	deal_floor@floor+3,w
 12644  1246  3A02               	xorlw	2
 12645  1247  1903               	skipnz
 12646  1248  2A61               	goto	l5274
 12647  1249  0825               	movf	deal_floor@floor+3,w
 12648  124A  3A04               	xorlw	4
 12649  124B  1903               	skipnz
 12650  124C  2A61               	goto	l5274
 12651  124D  0825               	movf	deal_floor@floor+3,w
 12652  124E  3A08               	xorlw	8
 12653  124F  1903               	skipnz
 12654  1250  2A61               	goto	l5274
 12655  1251  0825               	movf	deal_floor@floor+3,w
 12656  1252  3A10               	xorlw	16
 12657  1253  1903               	skipnz
 12658  1254  2A61               	goto	l5274
 12659  1255  0825               	movf	deal_floor@floor+3,w
 12660  1256  3A20               	xorlw	32
 12661  1257  1903               	skipnz
 12662  1258  2A61               	goto	l5274
 12663  1259  0825               	movf	deal_floor@floor+3,w
 12664  125A  3A40               	xorlw	64
 12665  125B  1903               	skipnz
 12666  125C  2A61               	goto	l5274
 12667  125D  0825               	movf	deal_floor@floor+3,w
 12668  125E  3A80               	xorlw	128
 12669  125F  1D03               	skipz
 12670  1260  2A6E               	goto	L29
 12671  1261                     l5274:	
 12672  1261  08A6               	movf	deal_floor@floor+4,f
 12673  1262  1D03               	skipz
 12674  1263  2A6E               	goto	L29
 12675  1264  08A7               	movf	deal_floor@floor+5,f
 12676  1265  1D03               	skipz
 12677  1266  2A6E               	goto	L29
 12678  1267  08A8               	movf	deal_floor@floor+6,f
 12679  1268  1D03               	skipz
 12680  1269  2A6E               	goto	L29
 12681  126A  08A9               	movf	deal_floor@floor+7,f
 12682  126B  3180  1903         	btfsc	3,2
 12683  126D  28AD               	goto	l5302
 12684  126E                     L29:	
 12685  126E  3180  28C9         	goto	l5304
 12686  1270                     l5284:	
 12687  1270  3061               	movlw	97
 12688  1271  2950               	ljmp	L27
 12689  1272                     l5286:	
 12690  1272  3062               	movlw	98
 12691  1273  2950               	ljmp	L27
 12692                           
 12693                           	psect	text26
 12694  1016                     __ptext26:	
 12695 ;; *************** function _handle_beep *****************
 12696 ;; Defined at:
 12697 ;;		line 73 in file "D:\WORKproject\AJ-BLE-IC\source\driver\beep.c"
 12698 ;; Parameters:    Size  Location     Type
 12699 ;;		None
 12700 ;; Auto vars:     Size  Location     Type
 12701 ;;		None
 12702 ;; Return value:  Size  Location     Type
 12703 ;;		None               void
 12704 ;; Registers used:
 12705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12706 ;; Tracked objects:
 12707 ;;		On entry : 1E/0
 12708 ;;		On exit  : 1F/0
 12709 ;;		Unchanged: 0/0
 12710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;Total ram usage:        0 bytes
 12716 ;; Hardware stack levels used:    1
 12717 ;; Hardware stack levels required when called:    2
 12718 ;; This function calls:
 12719 ;;		_delay_ms
 12720 ;; This function is called by:
 12721 ;;		_handle_ic_card
 12722 ;; This function uses a non-reentrant model
 12723 ;;
 12724                           
 12725                           
 12726                           ;psect for function _handle_beep
 12727  1016                     _handle_beep:	
 12728                           
 12729                           ;beep.c: 77: switch (card_type)
 12730                           
 12731                           ;incstack = 0
 12732                           ; Regs used in _handle_beep: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12733  1016  2820               	goto	l6484
 12734  1017                     l666:	
 12735                           ;beep.c: 78: {
 12736                           ;beep.c: 79: case 0x01 :
 12737                           
 12738                           
 12739                           ;beep.c: 80: (RC5 = 0x00);
 12740  1017  128E               	bcf	14,5	;volatile
 12741                           
 12742                           ;beep.c: 81: delay_ms(100);
 12743  1018  3064               	movlw	100
 12744  1019  00F0               	movwf	delay_ms@count
 12745  101A  01F1               	clrf	delay_ms@count+1
 12746  101B  318A  22C7         	fcall	_delay_ms
 12747                           
 12748                           ;beep.c: 82: (RC5 = 0x01);
 12749  101D  0020               	movlb	0	; select bank0
 12750  101E  168E               	bsf	14,5	;volatile
 12751                           
 12752                           ;beep.c: 83: break;
 12753  101F  0008               	return
 12754  1020                     l6484:	
 12755  1020  0020               	movlb	0	; select bank0
 12756  1021  0856               	movf	_card_type,w
 12757                           
 12758                           ; Switch size 1, requested type "space"
 12759                           ; Number of cases is 8, Range of values is 1 to 8
 12760                           ; switch strategies available:
 12761                           ; Name         Instructions Cycles
 12762                           ; direct_byte           25     9 (fixed)
 12763                           ; simple_byte           25    13 (average)
 12764                           ; jumptable            263     9 (fixed)
 12765                           ;	Chosen strategy is direct_byte
 12766  1022  3EFF               	addlw	-1
 12767  1023  1C03               	skipc
 12768  1024  0008               	return
 12769  1025  0084               	movwf	4
 12770  1026  3008               	movlw	8
 12771  1027  0204               	subwf	4,w
 12772  1028  1803               	skipnc
 12773  1029  0008               	return
 12774  102A  3190               	movlp	high S7654
 12775  102B  3504               	lslf	4,w
 12776  102C  3E00               	addlw	low S7654
 12777  102D  0082               	movwf	2
 12778  102E                     l676:	
 12779  102E  0008               	return
 12780  102F                     __end_of_handle_beep:	
 12781                           
 12782                           	psect	swtext1
 12783  1000                     __pswtext1:	
 12784  1000                     S7654:	
 12785  1000  3190  2817         	ljmp	l666
 12786  1002  3190  2817         	ljmp	l666
 12787  1004  3190  2817         	ljmp	l666
 12788  1006  3190  2817         	ljmp	l666
 12789  1008  3190  282E         	ljmp	l676
 12790  100A  3190  282E         	ljmp	l676
 12791  100C  3190  282E         	ljmp	l676
 12792  100E  3190  282E         	ljmp	l676
 12793                           
 12794                           	psect	text33
 12795  102F                     __ptext33:	
 12796 ;; *************** function ___awdiv *****************
 12797 ;; Defined at:
 12798 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\awdiv.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;  divisor         2    0[COMMON] int 
 12801 ;;  dividend        2    2[COMMON] int 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;  quotient        2    6[COMMON] int 
 12804 ;;  sign            1    5[COMMON] unsigned char 
 12805 ;;  counter         1    4[COMMON] unsigned char 
 12806 ;; Return value:  Size  Location     Type
 12807 ;;                  2    0[COMMON] int 
 12808 ;; Registers used:
 12809 ;;		wreg, status,2, status,0
 12810 ;; Tracked objects:
 12811 ;;		On entry : 1F/0
 12812 ;;		On exit  : 1F/0
 12813 ;;		Unchanged: 1F/0
 12814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12815 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;Total ram usage:        8 bytes
 12820 ;; Hardware stack levels used:    1
 12821 ;; Hardware stack levels required when called:    1
 12822 ;; This function calls:
 12823 ;;		Nothing
 12824 ;; This function is called by:
 12825 ;;		_Mf500PiccCascAnticoll
 12826 ;; This function uses a non-reentrant model
 12827 ;;
 12828                           
 12829                           
 12830                           ;psect for function ___awdiv
 12831  102F                     ___awdiv:	
 12832                           
 12833                           ;incstack = 0
 12834                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12835  102F  01F5               	clrf	___awdiv@sign
 12836  1030  1FF1               	btfss	___awdiv@divisor+1,7
 12837  1031  2839               	goto	l7578
 12838  1032  09F0               	comf	___awdiv@divisor,f
 12839  1033  09F1               	comf	___awdiv@divisor+1,f
 12840  1034  0AF0               	incf	___awdiv@divisor,f
 12841  1035  1903               	skipnz
 12842  1036  0AF1               	incf	___awdiv@divisor+1,f
 12843  1037  01F5               	clrf	___awdiv@sign
 12844  1038  0AF5               	incf	___awdiv@sign,f
 12845  1039                     l7578:	
 12846  1039  1FF3               	btfss	___awdiv@dividend+1,7
 12847  103A  2842               	goto	l7584
 12848  103B  09F2               	comf	___awdiv@dividend,f
 12849  103C  09F3               	comf	___awdiv@dividend+1,f
 12850  103D  0AF2               	incf	___awdiv@dividend,f
 12851  103E  1903               	skipnz
 12852  103F  0AF3               	incf	___awdiv@dividend+1,f
 12853  1040  3001               	movlw	1
 12854  1041  06F5               	xorwf	___awdiv@sign,f
 12855  1042                     l7584:	
 12856  1042  01F6               	clrf	___awdiv@quotient
 12857  1043  01F7               	clrf	___awdiv@quotient+1
 12858  1044  0871               	movf	___awdiv@divisor+1,w
 12859  1045  0470               	iorwf	___awdiv@divisor,w
 12860  1046  1903               	skipnz
 12861  1047  2862               	goto	l7606
 12862  1048  01F4               	clrf	___awdiv@counter
 12863  1049                     L11:	
 12864  1049  0AF4               	incf	___awdiv@counter,f
 12865  104A  1BF1               	btfsc	___awdiv@divisor+1,7
 12866  104B  284F               	goto	l7594
 12867  104C  35F0               	lslf	___awdiv@divisor,f
 12868  104D  0DF1               	rlf	___awdiv@divisor+1,f
 12869  104E  2849               	goto	L11
 12870  104F                     l7594:	
 12871  104F  35F6               	lslf	___awdiv@quotient,f
 12872  1050  0DF7               	rlf	___awdiv@quotient+1,f
 12873  1051  0871               	movf	___awdiv@divisor+1,w
 12874  1052  0273               	subwf	___awdiv@dividend+1,w
 12875  1053  1D03               	skipz
 12876  1054  2857               	goto	u8485
 12877  1055  0870               	movf	___awdiv@divisor,w
 12878  1056  0272               	subwf	___awdiv@dividend,w
 12879  1057                     u8485:	
 12880  1057  1C03               	skipc
 12881  1058  285E               	goto	l7602
 12882  1059  0870               	movf	___awdiv@divisor,w
 12883  105A  02F2               	subwf	___awdiv@dividend,f
 12884  105B  0871               	movf	___awdiv@divisor+1,w
 12885  105C  3BF3               	subwfb	___awdiv@dividend+1,f
 12886  105D  1476               	bsf	___awdiv@quotient,0
 12887  105E                     l7602:	
 12888  105E  36F1               	lsrf	___awdiv@divisor+1,f
 12889  105F  0CF0               	rrf	___awdiv@divisor,f
 12890  1060  0BF4               	decfsz	___awdiv@counter,f
 12891  1061  284F               	goto	l7594
 12892  1062                     l7606:	
 12893  1062  0875               	movf	___awdiv@sign,w
 12894  1063  1903               	btfsc	3,2
 12895  1064  286A               	goto	l7610
 12896  1065  09F6               	comf	___awdiv@quotient,f
 12897  1066  09F7               	comf	___awdiv@quotient+1,f
 12898  1067  0AF6               	incf	___awdiv@quotient,f
 12899  1068  1903               	skipnz
 12900  1069  0AF7               	incf	___awdiv@quotient+1,f
 12901  106A                     l7610:	
 12902  106A  0877               	movf	___awdiv@quotient+1,w
 12903  106B  00F1               	movwf	?___awdiv+1
 12904  106C  0876               	movf	___awdiv@quotient,w
 12905  106D  00F0               	movwf	?___awdiv
 12906  106E  0008               	return
 12907  106F                     __end_of___awdiv:	
 12908                           
 12909                           	psect	text41
 12910  1418                     __ptext41:	
 12911 ;; *************** function _Mf500PiccAuthState *****************
 12912 ;; Defined at:
 12913 ;;		line 818 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 12914 ;; Parameters:    Size  Location     Type
 12915 ;;  auth_mode       1    wreg     unsigned char 
 12916 ;;  snr             1   11[COMMON] PTR unsigned char 
 12917 ;;		 -> snr_rc500(4), 
 12918 ;;  block           1   12[COMMON] unsigned char 
 12919 ;; Auto vars:     Size  Location     Type
 12920 ;;  auth_mode       1   10[BANK0 ] unsigned char 
 12921 ;;  ret_status      1   11[BANK0 ] unsigned char 
 12922 ;; Return value:  Size  Location     Type
 12923 ;;                  1    wreg      unsigned char 
 12924 ;; Registers used:
 12925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12926 ;; Tracked objects:
 12927 ;;		On entry : 1F/0
 12928 ;;		On exit  : 1F/0
 12929 ;;		Unchanged: 0/0
 12930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12931 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;Total ram usage:        4 bytes
 12936 ;; Hardware stack levels used:    1
 12937 ;; Hardware stack levels required when called:    6
 12938 ;; This function calls:
 12939 ;;		_PcdSetTmo
 12940 ;;		_PcdSingleResponseCmd
 12941 ;;		_ReadRC
 12942 ;;		_memcpy
 12943 ;; This function is called by:
 12944 ;;		_checkpsw_super
 12945 ;;		_checkpsw
 12946 ;; This function uses a non-reentrant model
 12947 ;;
 12948                           
 12949                           
 12950                           ;psect for function _Mf500PiccAuthState
 12951  1418                     _Mf500PiccAuthState:	
 12952                           
 12953                           ;incstack = 0
 12954                           ; Regs used in _Mf500PiccAuthState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12955                           ;Mf500PiccAuthState@auth_mode stored from wreg
 12956  1418  00AA               	movwf	Mf500PiccAuthState@auth_mode
 12957                           
 12958                           ;mfrc500.c: 826: ret_status = ReadRC(0x0A);
 12959  1419  300A               	movlw	10
 12960  141A  27CB  3194         	fcall	_ReadRC
 12961  141C  0020               	movlb	0	; select bank0
 12962  141D  00AB               	movwf	Mf500PiccAuthState@ret_status
 12963                           
 12964                           ;mfrc500.c: 827: if (ret_status != 0)
 12965  141E  082B               	movf	Mf500PiccAuthState@ret_status,w
 12966  141F  1903               	btfsc	3,2
 12967  1420  2C27               	goto	l6356
 12968                           
 12969                           ;mfrc500.c: 828: {
 12970                           ;mfrc500.c: 829: if (ret_status & 0x40)
 12971  1421  1F2B               	btfss	Mf500PiccAuthState@ret_status,6
 12972  1422  2C25               	goto	l6354
 12973                           
 12974                           ;mfrc500.c: 830: {
 12975                           ;mfrc500.c: 831: ret_status = (-9);
 12976  1423  30F7               	movlw	247
 12977  1424  2C4F               	goto	L13
 12978  1425                     l6354:	
 12979                           ;mfrc500.c: 832: }
 12980                           
 12981                           
 12982                           ;mfrc500.c: 833: else
 12983                           ;mfrc500.c: 834: {
 12984                           ;mfrc500.c: 835: ret_status = (-4);
 12985  1425  30FC               	movlw	252
 12986  1426  2C4E               	goto	L14
 12987  1427                     l6356:	
 12988                           
 12989                           ;mfrc500.c: 838: else
 12990                           ;mfrc500.c: 839: {
 12991                           ;mfrc500.c: 840: PcdSetTmo(4);
 12992  1427  3004               	movlw	4
 12993  1428  00F5               	movwf	PcdSetTmo@tmoLength
 12994  1429  01F6               	clrf	PcdSetTmo@tmoLength+1
 12995  142A  2623               	fcall	_PcdSetTmo
 12996                           
 12997                           ;mfrc500.c: 841: MSndBuffer[0] = auth_mode;
 12998  142B  0020               	movlb	0	; select bank0
 12999  142C  082A               	movf	Mf500PiccAuthState@auth_mode,w
 13000  142D  0021               	movlb	1	; select bank1
 13001  142E  00B6               	movwf	_MSndBuffer^(0+128)
 13002                           
 13003                           ;mfrc500.c: 842: MSndBuffer[1] = block;
 13004  142F  087C               	movf	Mf500PiccAuthState@block,w
 13005  1430  00B7               	movwf	(_MSndBuffer^(0+128)+1)
 13006                           
 13007                           ;mfrc500.c: 843: memcpy(MSndBuffer + 2, snr, 4);
 13008  1431  087B               	movf	Mf500PiccAuthState@snr,w
 13009  1432  00F0               	movwf	memcpy@s1
 13010  1433  3004               	movlw	4
 13011  1434  01F1               	clrf	memcpy@s1+1
 13012  1435  00F2               	movwf	memcpy@n
 13013  1436  30B8               	movlw	(_MSndBuffer+2)& (0+255)
 13014  1437  01F3               	clrf	memcpy@n+1
 13015  1438  318E  26AE  3194   	fcall	_memcpy
 13016                           
 13017                           ;mfrc500.c: 844: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 13018  143B  0020               	movlb	0	; select bank0
 13019  143C  3006               	movlw	6
 13020  143D  27E2  3194         	fcall	PL2	;call to abstracted procedure
 13021                           
 13022                           ;mfrc500.c: 845: MInfo.nBytesToSend = 0x06;
 13023  143F  00E7               	movwf	_MInfo+3
 13024                           
 13025                           ;mfrc500.c: 846: ret_status = PcdSingleResponseCmd(0x0C);
 13026  1440  300C               	movlw	12
 13027  1441  2664  3194         	fcall	_PcdSingleResponseCmd
 13028  1443  00AB               	movwf	Mf500PiccAuthState@ret_status
 13029                           
 13030                           ;mfrc500.c: 847: if (ret_status == 0)
 13031  1444  08AB               	movf	Mf500PiccAuthState@ret_status,f
 13032  1445  1D03               	skipz
 13033  1446  2C64               	goto	l1048
 13034                           
 13035                           ;mfrc500.c: 848: {
 13036                           ;mfrc500.c: 849: if (ReadRC(0x05) & 0x07)
 13037  1447  3005               	movlw	5
 13038  1448  27CB  3194         	fcall	_ReadRC
 13039  144A  3907               	andlw	7
 13040  144B  1903               	btfsc	3,2
 13041  144C  2C51               	goto	l6390
 13042                           
 13043                           ;mfrc500.c: 850: {
 13044                           ;mfrc500.c: 851: ret_status = (-11);
 13045  144D  30F5               	movlw	245
 13046  144E                     L14:	
 13047  144E  0020               	movlb	0	; select bank0
 13048  144F                     L13:	
 13049  144F  00AB               	movwf	Mf500PiccAuthState@ret_status
 13050                           
 13051                           ;mfrc500.c: 852: }
 13052  1450  2C64               	goto	l1048
 13053  1451                     l6390:	
 13054                           
 13055                           ;mfrc500.c: 853: else
 13056                           ;mfrc500.c: 854: {
 13057                           ;mfrc500.c: 855: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 13058  1451  0020               	movlb	0	; select bank0
 13059  1452  3014               	movlw	20
 13060  1453  27E2  3194         	fcall	PL2	;call to abstracted procedure
 13061                           
 13062                           ;mfrc500.c: 856: MInfo.nBytesToSend = 0x00;
 13063  1455  01E7               	clrf	_MInfo+3
 13064                           
 13065                           ;mfrc500.c: 857: ret_status = PcdSingleResponseCmd(0x14);
 13066  1456  2664  3194         	fcall	_PcdSingleResponseCmd
 13067  1458  00AB               	movwf	Mf500PiccAuthState@ret_status
 13068                           
 13069                           ;mfrc500.c: 858: if (ret_status == 0)
 13070  1459  08AB               	movf	Mf500PiccAuthState@ret_status,f
 13071  145A  1D03               	skipz
 13072  145B  2C64               	goto	l1048
 13073                           
 13074                           ;mfrc500.c: 859: {
 13075                           ;mfrc500.c: 860: if (ReadRC(0x09) & 0x08)
 13076  145C  3009               	movlw	9
 13077  145D  27CB  3194         	fcall	_ReadRC
 13078  145F  3908               	andlw	8
 13079  1460  1903               	btfsc	3,2
 13080  1461  2C25               	goto	l6354
 13081                           
 13082                           ;mfrc500.c: 861: {
 13083                           ;mfrc500.c: 862: ret_status = 0;
 13084  1462  0020               	movlb	0	; select bank0
 13085  1463  01AB               	clrf	Mf500PiccAuthState@ret_status
 13086  1464                     l1048:	
 13087                           ;mfrc500.c: 863: }
 13088                           
 13089                           
 13090                           ;mfrc500.c: 867: }
 13091                           ;mfrc500.c: 868: }
 13092                           ;mfrc500.c: 869: }
 13093                           ;mfrc500.c: 870: }
 13094                           ;mfrc500.c: 871: }
 13095                           ;mfrc500.c: 873: return ret_status;
 13096  1464  082B               	movf	Mf500PiccAuthState@ret_status,w
 13097  1465  0008               	return
 13098  1466                     __end_of_Mf500PiccAuthState:	
 13099  1466                     __ptext24:	
 13100 ;; *************** function _Mf500PiccWrite *****************
 13101 ;; Defined at:
 13102 ;;		line 956 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 13103 ;; Parameters:    Size  Location     Type
 13104 ;;  addr            1    wreg     unsigned char 
 13105 ;;  data1           1   11[COMMON] PTR unsigned char 
 13106 ;;		 -> read_card_content@data(16), 
 13107 ;; Auto vars:     Size  Location     Type
 13108 ;;  addr            1   12[COMMON] unsigned char 
 13109 ;;  ret_status      1   13[COMMON] char 
 13110 ;; Return value:  Size  Location     Type
 13111 ;;                  1    wreg      unsigned char 
 13112 ;; Registers used:
 13113 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13114 ;; Tracked objects:
 13115 ;;		On entry : 1F/0
 13116 ;;		On exit  : 1E/0
 13117 ;;		Unchanged: 0/0
 13118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13119 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13120 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13122 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13123 ;;Total ram usage:        3 bytes
 13124 ;; Hardware stack levels used:    1
 13125 ;; Hardware stack levels required when called:    6
 13126 ;; This function calls:
 13127 ;;		_FlushFIFO
 13128 ;;		_PcdSetTmo
 13129 ;;		_PcdSingleResponseCmd
 13130 ;;		_WriteRC
 13131 ;;		_memcpy
 13132 ;; This function is called by:
 13133 ;;		_read_card_content
 13134 ;; This function uses a non-reentrant model
 13135 ;;
 13136                           
 13137                           
 13138                           ;psect for function _Mf500PiccWrite
 13139  1466                     _Mf500PiccWrite:	
 13140                           
 13141                           ;incstack = 0
 13142                           ; Regs used in _Mf500PiccWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13143                           ;Mf500PiccWrite@addr stored from wreg
 13144  1466  00FC               	movwf	Mf500PiccWrite@addr
 13145                           
 13146                           ;mfrc500.c: 963: FlushFIFO();
 13147  1467  318E  2666  3194   	fcall	_FlushFIFO
 13148                           
 13149                           ;mfrc500.c: 964: PcdSetTmo(4);
 13150  146A  3004               	movlw	4
 13151  146B  00F5               	movwf	PcdSetTmo@tmoLength
 13152  146C  01F6               	clrf	PcdSetTmo@tmoLength+1
 13153  146D  2623  3194         	fcall	_PcdSetTmo
 13154                           
 13155                           ;mfrc500.c: 966: WriteRC(0x22, 0x07);
 13156  146F  3007               	movlw	7
 13157  1470  00F2               	movwf	WriteRC@data
 13158  1471  3022               	movlw	34
 13159  1472  27BA  3194         	fcall	_WriteRC
 13160                           
 13161                           ;mfrc500.c: 967: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 13162  1474  0020               	movlb	0	; select bank0
 13163  1475  30A0               	movlw	160
 13164  1476  27E2  3194         	fcall	PL2	;call to abstracted procedure
 13165                           
 13166                           ;mfrc500.c: 968: MSndBuffer[0] = 0xA0;
 13167  1478  0021               	movlb	1	; select bank1
 13168  1479  00B6               	movwf	_MSndBuffer^(0+128)
 13169                           
 13170                           ;mfrc500.c: 969: MSndBuffer[1] = addr;
 13171  147A  087C               	movf	Mf500PiccWrite@addr,w
 13172  147B  00B7               	movwf	(_MSndBuffer^(0+128)+1)
 13173                           
 13174                           ;mfrc500.c: 970: MInfo.nBytesToSend = 0x02;
 13175  147C  3002               	movlw	2
 13176  147D  0020               	movlb	0	; select bank0
 13177  147E  00E7               	movwf	_MInfo+3
 13178                           
 13179                           ;mfrc500.c: 971: ret_status = PcdSingleResponseCmd(0x1e);
 13180  147F  301E               	movlw	30
 13181  1480  2664  3194         	fcall	_PcdSingleResponseCmd
 13182  1482  00FD               	movwf	Mf500PiccWrite@ret_status
 13183                           
 13184                           ;mfrc500.c: 972: if (ret_status != (-1))
 13185  1483  0A7D               	incf	Mf500PiccWrite@ret_status,w
 13186  1484  1903               	skipnz
 13187  1485  2C9F               	goto	l6172
 13188                           
 13189                           ;mfrc500.c: 973: {
 13190                           ;mfrc500.c: 974: if (MInfo.nBitsReceived != 4)
 13191  1486  0869               	movf	_MInfo+5,w
 13192  1487  3A04               	xorlw	4
 13193  1488  1903               	skipnz
 13194  1489  2C8C               	goto	l6160
 13195                           
 13196                           ;mfrc500.c: 975: {
 13197                           ;mfrc500.c: 976: ret_status = (-11);
 13198  148A  30F5               	movlw	-11
 13199  148B  2C95               	goto	L7
 13200  148C                     l6160:	
 13201                           ;mfrc500.c: 977: }
 13202                           
 13203                           
 13204                           ;mfrc500.c: 978: else
 13205                           ;mfrc500.c: 979: {
 13206                           ;mfrc500.c: 980: MRcvBuffer[0] &= 0x0f;
 13207  148C  300F               	movlw	15
 13208  148D  0021               	movlb	1	; select bank1
 13209  148E  05A6               	andwf	_MRcvBuffer^(0+128),f
 13210                           
 13211                           ;mfrc500.c: 981: switch(MRcvBuffer[0])
 13212  148F  2C97               	goto	l6170
 13213  1490                     l6162:	
 13214                           
 13215                           ;mfrc500.c: 984: ret_status = (-10);
 13216  1490  30F6               	movlw	-10
 13217  1491  2C95               	goto	L7
 13218  1492                     l6164:	
 13219                           ;mfrc500.c: 985: break;
 13220                           
 13221                           
 13222                           ;mfrc500.c: 987: ret_status = 0;
 13223  1492  01FD               	clrf	Mf500PiccWrite@ret_status
 13224                           
 13225                           ;mfrc500.c: 988: break;
 13226  1493  2C9F               	goto	l6172
 13227  1494                     l6166:	
 13228                           
 13229                           ;mfrc500.c: 990: ret_status = (-6);
 13230  1494  30FA               	movlw	-6
 13231  1495                     L7:	
 13232  1495  00FD               	movwf	Mf500PiccWrite@ret_status
 13233                           
 13234                           ;mfrc500.c: 991: break;
 13235  1496  2C9F               	goto	l6172
 13236  1497                     l6170:	
 13237  1497  0826               	movf	_MRcvBuffer^(0+128),w
 13238                           
 13239                           ; Switch size 1, requested type "space"
 13240                           ; Number of cases is 2, Range of values is 0 to 10
 13241                           ; switch strategies available:
 13242                           ; Name         Instructions Cycles
 13243                           ; simple_byte            7     4 (average)
 13244                           ; direct_byte           28     6 (fixed)
 13245                           ; jumptable            260     6 (fixed)
 13246                           ;	Chosen strategy is simple_byte
 13247  1498  3A00               	xorlw	0	; case 0
 13248  1499  1903               	skipnz
 13249  149A  2C90               	goto	l6162
 13250  149B  3A0A               	xorlw	10	; case 10
 13251  149C  1903               	skipnz
 13252  149D  2C92               	goto	l6164
 13253  149E  2C94               	goto	l6166
 13254  149F                     l6172:	
 13255                           
 13256                           ;mfrc500.c: 993: }
 13257                           ;mfrc500.c: 994: }
 13258                           ;mfrc500.c: 995: if (ret_status == 0)
 13259  149F  08FD               	movf	Mf500PiccWrite@ret_status,f
 13260  14A0  1D03               	skipz
 13261  14A1  0008               	return
 13262                           
 13263                           ;mfrc500.c: 996: {
 13264                           ;mfrc500.c: 997: FlushFIFO();
 13265  14A2  318E  2666  3194   	fcall	_FlushFIFO
 13266                           
 13267                           ;mfrc500.c: 998: PcdSetTmo(3);
 13268  14A5  3003               	movlw	3
 13269  14A6  00F5               	movwf	PcdSetTmo@tmoLength
 13270  14A7  01F6               	clrf	PcdSetTmo@tmoLength+1
 13271  14A8  2623  3194         	fcall	_PcdSetTmo
 13272                           
 13273                           ;mfrc500.c: 999: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 13274  14AA  0020               	movlb	0	; select bank0
 13275  14AB  27E2               	fcall	PL2	;call to abstracted procedure
 13276                           
 13277                           ;mfrc500.c: 1000: memcpy(MSndBuffer, data1, 16);
 13278  14AC  087B               	movf	Mf500PiccWrite@data1,w
 13279  14AD  00F0               	movwf	memcpy@s1
 13280  14AE  3010               	movlw	16
 13281  14AF  01F1               	clrf	memcpy@s1+1
 13282  14B0  00F2               	movwf	memcpy@n
 13283  14B1  30B6               	movlw	_MSndBuffer& (0+255)
 13284  14B2  01F3               	clrf	memcpy@n+1
 13285  14B3  318E  26AE  3194   	fcall	_memcpy
 13286                           
 13287                           ;mfrc500.c: 1001: MInfo.nBytesToSend = 16;
 13288  14B6  3010               	movlw	16
 13289  14B7  0020               	movlb	0	; select bank0
 13290  14B8  00E7               	movwf	_MInfo+3
 13291                           
 13292                           ;mfrc500.c: 1002: ret_status = PcdSingleResponseCmd(0x1e);
 13293  14B9  301E               	movlw	30
 13294  14BA  2664  3194         	fcall	_PcdSingleResponseCmd
 13295  14BC  00FD               	movwf	Mf500PiccWrite@ret_status
 13296                           
 13297                           ;mfrc500.c: 1003: if (ret_status != (-1))
 13298  14BD  0A7D               	incf	Mf500PiccWrite@ret_status,w
 13299  14BE  1903               	skipnz
 13300  14BF  2CD1               	goto	l6218
 13301                           
 13302                           ;mfrc500.c: 1004: {
 13303                           ;mfrc500.c: 1005: if (MInfo.nBitsReceived != 4)
 13304  14C0  0869               	movf	_MInfo+5,w
 13305  14C1  3A04               	xorlw	4
 13306  14C2  1D03               	btfss	3,2
 13307  14C3  2CD1               	goto	l6218
 13308                           
 13309                           ;mfrc500.c: 1009: else
 13310                           ;mfrc500.c: 1010: {
 13311                           ;mfrc500.c: 1011: MRcvBuffer[0] &= 0x0f;
 13312                           
 13313                           ;mfrc500.c: 1008: }
 13314  14C4  300F               	movlw	15
 13315  14C5  0021               	movlb	1	; select bank1
 13316  14C6  05A6               	andwf	_MRcvBuffer^(0+128),f
 13317                           
 13318                           ;mfrc500.c: 1012: switch(MRcvBuffer[0])
 13319  14C7  2CC9               	goto	l6216
 13320  14C8                     l6208:	
 13321  14C8                     l6210:	
 13322                           ;mfrc500.c: 1016: break;
 13323                           
 13324  14C8                     l6212:	
 13325                           ;mfrc500.c: 1019: break;
 13326                           
 13327                           
 13328                           ;mfrc500.c: 1022: break;
 13329  14C8  2CD1               	goto	l6218
 13330  14C9                     l6216:	
 13331  14C9  0826               	movf	_MRcvBuffer^(0+128),w
 13332                           
 13333                           ; Switch size 1, requested type "space"
 13334                           ; Number of cases is 2, Range of values is 0 to 10
 13335                           ; switch strategies available:
 13336                           ; Name         Instructions Cycles
 13337                           ; simple_byte            7     4 (average)
 13338                           ; direct_byte           28     6 (fixed)
 13339                           ; jumptable            260     6 (fixed)
 13340                           ;	Chosen strategy is simple_byte
 13341  14CA  3A00               	xorlw	0	; case 0
 13342  14CB  1903               	skipnz
 13343  14CC  2CC8               	goto	l6208
 13344  14CD  3A0A               	xorlw	10	; case 10
 13345  14CE  1903               	skipnz
 13346  14CF  2CC8               	goto	l6210
 13347  14D0  2CC8               	goto	l6212
 13348  14D1                     l6218:	
 13349                           
 13350                           ;mfrc500.c: 1024: }
 13351                           ;mfrc500.c: 1025: }
 13352                           ;mfrc500.c: 1026: PcdSetTmo(1);
 13353  14D1  01F5               	clrf	PcdSetTmo@tmoLength
 13354  14D2  0AF5               	incf	PcdSetTmo@tmoLength,f
 13355  14D3  01F6               	clrf	PcdSetTmo@tmoLength+1
 13356  14D4  2E23               	ljmp	l6780
 13357  14D5                     __end_of_Mf500PiccWrite:	
 13358  14D5                     __ptext32:	
 13359 ;; *************** function _Mf500PiccCascAnticoll *****************
 13360 ;; Defined at:
 13361 ;;		line 623 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 13362 ;; Parameters:    Size  Location     Type
 13363 ;;  select_code     1    wreg     unsigned char 
 13364 ;;  bcnt            1   11[COMMON] unsigned char 
 13365 ;;  snr             1   12[COMMON] PTR unsigned char 
 13366 ;;		 -> snr_rc500(4), 
 13367 ;; Auto vars:     Size  Location     Type
 13368 ;;  select_code     1   14[BANK0 ] unsigned char 
 13369 ;;  snr_in          4   21[BANK0 ] unsigned char [4]
 13370 ;;  i               1   28[BANK0 ] unsigned char 
 13371 ;;  nbits           1   27[BANK0 ] unsigned char 
 13372 ;;  ret_status      1   26[BANK0 ] char 
 13373 ;;  nbytes          1   25[BANK0 ] unsigned char 
 13374 ;;  byteOffset      1   20[BANK0 ] unsigned char 
 13375 ;;  complete        1   19[BANK0 ] unsigned char 
 13376 ;;  dummyShift1     1   18[BANK0 ] unsigned char 
 13377 ;;  dummyShift2     1   17[BANK0 ] unsigned char 
 13378 ;;  snr_check       1   16[BANK0 ] unsigned char 
 13379 ;;  snr_crc         1   15[BANK0 ] unsigned char 
 13380 ;; Return value:  Size  Location     Type
 13381 ;;                  1    wreg      unsigned char 
 13382 ;; Registers used:
 13383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13384 ;; Tracked objects:
 13385 ;;		On entry : 1F/0
 13386 ;;		On exit  : 1F/0
 13387 ;;		Unchanged: 0/0
 13388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13389 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;      Totals:         2      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;Total ram usage:       21 bytes
 13394 ;; Hardware stack levels used:    1
 13395 ;; Hardware stack levels required when called:    6
 13396 ;; This function calls:
 13397 ;;		_ClearBitMask
 13398 ;;		_PcdSetTmo
 13399 ;;		_PcdSingleResponseCmd
 13400 ;;		_WriteRC
 13401 ;;		___awdiv
 13402 ;;		_memcpy
 13403 ;; This function is called by:
 13404 ;;		_Mf500PiccAnticoll
 13405 ;; This function uses a non-reentrant model
 13406 ;;
 13407                           
 13408                           
 13409                           ;psect for function _Mf500PiccCascAnticoll
 13410  14D5                     _Mf500PiccCascAnticoll:	
 13411                           
 13412                           ;incstack = 0
 13413                           ; Regs used in _Mf500PiccCascAnticoll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13414                           ;Mf500PiccCascAnticoll@select_code stored from wreg
 13415  14D5  00AE               	movwf	Mf500PiccCascAnticoll@select_code
 13416  14D6  306A               	movlw	106
 13417                           
 13418                           ;mfrc500.c: 629: signed char ret_status = 0;
 13419  14D7  01BA               	clrf	Mf500PiccCascAnticoll@ret_status
 13420                           
 13421                           ;mfrc500.c: 632: unsigned char nbits = 0;
 13422  14D8  01BB               	clrf	Mf500PiccCascAnticoll@nbits
 13423                           
 13424                           ;mfrc500.c: 633: unsigned char complete = 0;
 13425  14D9  01B3               	clrf	Mf500PiccCascAnticoll@complete
 13426                           
 13427                           ;mfrc500.c: 634: unsigned char i = 0;
 13428  14DA  01BC               	clrf	Mf500PiccCascAnticoll@i
 13429                           
 13430                           ;mfrc500.c: 635: unsigned char byteOffset = 0;
 13431  14DB  01B4               	clrf	Mf500PiccCascAnticoll@byteOffset
 13432                           
 13433                           ;mfrc500.c: 636: unsigned char snr_crc;
 13434                           ;mfrc500.c: 637: unsigned char snr_check;
 13435                           ;mfrc500.c: 638: unsigned char dummyShift1;
 13436                           ;mfrc500.c: 639: unsigned char dummyShift2;
 13437                           ;mfrc500.c: 641: PcdSetTmo(106);
 13438  14DC  00F5               	movwf	PcdSetTmo@tmoLength
 13439  14DD  01F6               	clrf	PcdSetTmo@tmoLength+1
 13440  14DE  2623               	fcall	_PcdSetTmo
 13441                           
 13442                           ;mfrc500.c: 642: memcpy(snr_in, snr, 4);
 13443  14DF  087C               	movf	Mf500PiccCascAnticoll@snr,w
 13444  14E0  00F0               	movwf	memcpy@s1
 13445  14E1  3004               	movlw	4
 13446  14E2  01F1               	clrf	memcpy@s1+1
 13447  14E3  00F2               	movwf	memcpy@n
 13448  14E4  3035               	movlw	Mf500PiccCascAnticoll@snr_in& (0+255)
 13449  14E5  01F3               	clrf	memcpy@n+1
 13450  14E6  318E  26AE  3194   	fcall	_memcpy
 13451                           
 13452                           ;mfrc500.c: 643: WriteRC(0x1A, 0x28);
 13453  14E9  3028               	movlw	40
 13454  14EA  00F2               	movwf	WriteRC@data
 13455  14EB  301A               	movlw	26
 13456  14EC  27BA               	fcall	_WriteRC
 13457                           
 13458                           ;mfrc500.c: 644: ClearBitMask(0x09, 0x08);
 13459  14ED  3008               	movlw	8
 13460  14EE  00F5               	movwf	ClearBitMask@mask
 13461  14EF  3009               	movlw	9
 13462  14F0  3187  27DD  3194   	fcall	_ClearBitMask
 13463                           
 13464                           ;mfrc500.c: 645: complete = 0;
 13465  14F3  0020               	movlb	0	; select bank0
 13466  14F4  01B3               	clrf	Mf500PiccCascAnticoll@complete
 13467                           
 13468                           ;mfrc500.c: 646: while (!complete && (ret_status == 0) )
 13469  14F5  2DF8               	goto	l7310
 13470  14F6                     l7214:	
 13471  14F6  3003               	movlw	3
 13472                           
 13473                           ;mfrc500.c: 647: {
 13474                           ;mfrc500.c: 648: MInfo.cmd = 0; MInfo.status = 0; MInfo.irqSource = 0; MInfo.nBytesSent 
      +                          = 0; MInfo.nBytesToSend = 0; MInfo.nBytesReceived = 0; MInfo.nBitsReceived = 0; MInfo.co
      +                          llPos = 0;;
 13475  14F7  27E2  3194         	fcall	PL2	;call to abstracted procedure
 13476                           
 13477                           ;mfrc500.c: 649: WriteRC(0x22,0x03);
 13478  14F9  00F2               	movwf	WriteRC@data
 13479  14FA  3022               	movlw	34
 13480  14FB  27BA  3194         	fcall	_WriteRC
 13481                           
 13482                           ;mfrc500.c: 650: nbits = bcnt % 8;
 13483  14FD  087B               	movf	Mf500PiccCascAnticoll@bcnt,w
 13484  14FE  0020               	movlb	0	; select bank0
 13485  14FF  00BB               	movwf	Mf500PiccCascAnticoll@nbits
 13486  1500  3007               	movlw	7
 13487  1501  05BB               	andwf	Mf500PiccCascAnticoll@nbits,f
 13488                           
 13489                           ;mfrc500.c: 651: if (nbits)
 13490  1502  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 13491  1503  1903               	btfsc	3,2
 13492  1504  2D1C               	goto	l7234
 13493                           
 13494                           ;mfrc500.c: 652: {
 13495                           ;mfrc500.c: 653: WriteRC(0x0F,nbits << 4 | nbits);
 13496  1505  0E3B               	swapf	Mf500PiccCascAnticoll@nbits,w
 13497  1506  39F0               	andlw	240
 13498  1507  043B               	iorwf	Mf500PiccCascAnticoll@nbits,w
 13499  1508  00F2               	movwf	WriteRC@data
 13500  1509  300F               	movlw	15
 13501  150A  27BA  3194         	fcall	_WriteRC
 13502                           
 13503                           ;mfrc500.c: 654: nbytes = bcnt / 8 + 1;
 13504  150C  27EB  3194         	fcall	PL10	;call to abstracted procedure
 13505  150E  3E01               	addlw	1
 13506  150F  00B9               	movwf	Mf500PiccCascAnticoll@nbytes
 13507                           
 13508                           ;mfrc500.c: 655: if (nbits == 7)
 13509  1510  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 13510  1511  3A07               	xorlw	7
 13511  1512  1D03               	skipz
 13512  1513  2D23               	goto	l7236
 13513                           
 13514                           ;mfrc500.c: 656: {
 13515                           ;mfrc500.c: 657: MInfo.cmd = 0x93;
 13516  1514  3093               	movlw	147
 13517  1515  00E4               	movwf	_MInfo
 13518                           
 13519                           ;mfrc500.c: 658: WriteRC(0x0F,nbits);
 13520  1516  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 13521  1517  00F2               	movwf	WriteRC@data
 13522  1518  300F               	movlw	15
 13523  1519  27BA  3194         	fcall	_WriteRC
 13524  151B  2D23               	goto	l7236
 13525  151C                     l7234:	
 13526                           
 13527                           ;mfrc500.c: 661: else
 13528                           ;mfrc500.c: 662: {
 13529                           ;mfrc500.c: 663: nbytes = bcnt / 8;
 13530  151C  087B               	movf	Mf500PiccCascAnticoll@bcnt,w
 13531  151D  00AA               	movwf	??_Mf500PiccCascAnticoll
 13532  151E  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 13533  151F  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 13534  1520  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 13535  1521  082A               	movf	??_Mf500PiccCascAnticoll,w
 13536  1522  00B9               	movwf	Mf500PiccCascAnticoll@nbytes
 13537  1523                     l7236:	
 13538                           
 13539                           ;mfrc500.c: 664: }
 13540                           ;mfrc500.c: 665: MSndBuffer[0] = select_code;
 13541  1523  0020               	movlb	0	; select bank0
 13542  1524  082E               	movf	Mf500PiccCascAnticoll@select_code,w
 13543  1525  0021               	movlb	1	; select bank1
 13544  1526  00B6               	movwf	_MSndBuffer^(0+128)
 13545                           
 13546                           ;mfrc500.c: 666: MSndBuffer[1] = 0x20 + ((bcnt/8) << 4) + nbits;
 13547  1527  27EB  3194         	fcall	PL10	;call to abstracted procedure
 13548  1529  0E89               	swapf	9,f
 13549  152A  39F0               	andlw	240
 13550  152B  073B               	addwf	Mf500PiccCascAnticoll@nbits,w
 13551  152C  3E20               	addlw	32
 13552  152D  0021               	movlb	1	; select bank1
 13553  152E  00B7               	movwf	(_MSndBuffer^(0+128)+1)
 13554                           
 13555                           ;mfrc500.c: 667: for (i = 0; i < nbytes; i++)
 13556  152F  0020               	movlb	0	; select bank0
 13557  1530  01BC               	clrf	Mf500PiccCascAnticoll@i
 13558  1531                     l7246:	
 13559  1531  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 13560  1532  023C               	subwf	Mf500PiccCascAnticoll@i,w
 13561  1533  1803               	btfsc	3,0
 13562  1534  2D3E               	goto	l7248
 13563                           
 13564                           ;mfrc500.c: 668: {
 13565                           ;mfrc500.c: 669: MSndBuffer[i + 2] = snr_in[i];
 13566  1535  083C               	movf	Mf500PiccCascAnticoll@i,w
 13567  1536  3EB8               	addlw	(_MSndBuffer+2)& (0+255)
 13568  1537  0086               	movwf	6
 13569  1538  0187               	clrf	7
 13570  1539  083C               	movf	Mf500PiccCascAnticoll@i,w
 13571  153A  3E35               	addlw	Mf500PiccCascAnticoll@snr_in& (0+255)
 13572  153B  27FA  3194         	fcall	PL18	;call to abstracted procedure
 13573  153D  2D31               	goto	l7246
 13574  153E                     l7248:	
 13575                           
 13576                           ;mfrc500.c: 670: }
 13577                           ;mfrc500.c: 671: MInfo.nBytesToSend = 2 + nbytes;
 13578  153E  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 13579  153F  3E02               	addlw	2
 13580  1540  00E7               	movwf	_MInfo+3
 13581                           
 13582                           ;mfrc500.c: 672: ret_status = PcdSingleResponseCmd(0x1e);
 13583  1541  301E               	movlw	30
 13584  1542  2664  3194         	fcall	_PcdSingleResponseCmd
 13585  1544  00BA               	movwf	Mf500PiccCascAnticoll@ret_status
 13586                           
 13587                           ;mfrc500.c: 673: if (nbits == 7)
 13588  1545  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 13589  1546  3A07               	xorlw	7
 13590  1547  1D03               	skipz
 13591  1548  2D8A               	goto	l7272
 13592                           
 13593                           ;mfrc500.c: 674: {
 13594                           ;mfrc500.c: 675: dummyShift1 = 0x00;
 13595  1549  01B2               	clrf	Mf500PiccCascAnticoll@dummyShift1
 13596                           
 13597                           ;mfrc500.c: 676: for (i = 0; i < MInfo.nBytesReceived; i++)
 13598  154A  01BC               	clrf	Mf500PiccCascAnticoll@i
 13599  154B                     l7264:	
 13600  154B  0868               	movf	_MInfo+4,w
 13601  154C  023C               	subwf	Mf500PiccCascAnticoll@i,w
 13602  154D  1803               	btfsc	3,0
 13603  154E  2D75               	goto	l7266
 13604                           
 13605                           ;mfrc500.c: 677: {
 13606                           ;mfrc500.c: 678: dummyShift2 = MRcvBuffer[i];
 13607  154F  083C               	movf	Mf500PiccCascAnticoll@i,w
 13608  1550  3EA6               	addlw	_MRcvBuffer& (0+255)
 13609  1551  0086               	movwf	6
 13610  1552  0187               	clrf	7
 13611  1553  0801               	movf	1,w
 13612  1554  00B1               	movwf	Mf500PiccCascAnticoll@dummyShift2
 13613                           
 13614                           ;mfrc500.c: 679: MRcvBuffer[i] = (dummyShift1 >> (i+1)) | (MRcvBuffer[i] << (7-i));
 13615  1555  083C               	movf	Mf500PiccCascAnticoll@i,w
 13616  1556  3EA6               	addlw	_MRcvBuffer& (0+255)
 13617  1557  0086               	movwf	6
 13618  1558  083C               	movf	Mf500PiccCascAnticoll@i,w
 13619  1559  3EA6               	addlw	_MRcvBuffer& (0+255)
 13620  155A  0084               	movwf	4
 13621  155B  0185               	clrf	5
 13622  155C  0800               	movf	0,w
 13623  155D  00AA               	movwf	??_Mf500PiccCascAnticoll
 13624  155E  083C               	movf	Mf500PiccCascAnticoll@i,w
 13625  155F  3C07               	sublw	7
 13626  1560  0A89               	incf	9,f
 13627  1561  2D63               	goto	u8144
 13628  1562                     u8145:	
 13629  1562  35AA               	lslf	??_Mf500PiccCascAnticoll,f
 13630  1563                     u8144:	
 13631  1563  0B89               	decfsz	9,f
 13632  1564  2D62               	goto	u8145
 13633  1565  0832               	movf	Mf500PiccCascAnticoll@dummyShift1,w
 13634  1566  00AB               	movwf	??_Mf500PiccCascAnticoll+1
 13635  1567  083C               	movf	Mf500PiccCascAnticoll@i,w
 13636  1568  3E01               	addlw	1
 13637  1569  0A89               	incf	9,f
 13638  156A  2D6C               	goto	u8154
 13639  156B                     u8155:	
 13640  156B  36AB               	lsrf	??_Mf500PiccCascAnticoll+1,f
 13641  156C                     u8154:	
 13642  156C  0B89               	decfsz	9,f
 13643  156D  2D6B               	goto	u8155
 13644  156E  082B               	movf	??_Mf500PiccCascAnticoll+1,w
 13645  156F  042A               	iorwf	??_Mf500PiccCascAnticoll,w
 13646  1570  0081               	movwf	1
 13647                           
 13648                           ;mfrc500.c: 680: dummyShift1 = dummyShift2;
 13649  1571  0831               	movf	Mf500PiccCascAnticoll@dummyShift2,w
 13650  1572  00B2               	movwf	Mf500PiccCascAnticoll@dummyShift1
 13651  1573  0ABC               	incf	Mf500PiccCascAnticoll@i,f
 13652  1574  2D4B               	goto	l7264
 13653  1575                     l7266:	
 13654                           
 13655                           ;mfrc500.c: 681: }
 13656                           ;mfrc500.c: 682: MInfo.nBitsReceived -= MInfo.nBytesReceived;
 13657  1575  0868               	movf	_MInfo+4,w
 13658  1576  02E9               	subwf	_MInfo+5,f
 13659                           
 13660                           ;mfrc500.c: 683: if ( MInfo.collPos )
 13661  1577  086B               	movf	_MInfo+7,w
 13662  1578  1903               	btfsc	3,2
 13663  1579  2D8A               	goto	l7272
 13664                           
 13665                           ;mfrc500.c: 684: MInfo.collPos += 7 - (MInfo.collPos + 6) / 9;
 13666  157A  086B               	movf	_MInfo+7,w
 13667  157B  00F2               	movwf	___awdiv@dividend
 13668  157C  3006               	movlw	6
 13669  157D  01F3               	clrf	___awdiv@dividend+1
 13670  157E  07F2               	addwf	___awdiv@dividend,f
 13671  157F  1803               	skipnc
 13672  1580  0AF3               	incf	___awdiv@dividend+1,f
 13673  1581  3009               	movlw	9
 13674  1582  00F0               	movwf	___awdiv@divisor
 13675  1583  01F1               	clrf	___awdiv@divisor+1
 13676  1584  3190  202F  3194   	fcall	___awdiv
 13677  1587  0870               	movf	?___awdiv,w
 13678  1588  3C07               	sublw	7
 13679  1589  07EB               	addwf	_MInfo+7,f
 13680  158A                     l7272:	
 13681                           
 13682                           ;mfrc500.c: 685: }
 13683                           ;mfrc500.c: 686: if ( (ret_status == 0) || (ret_status == (-24)))
 13684  158A  083A               	movf	Mf500PiccCascAnticoll@ret_status,w
 13685  158B  1903               	btfsc	3,2
 13686  158C  2D91               	goto	l7276
 13687  158D  083A               	movf	Mf500PiccCascAnticoll@ret_status,w
 13688  158E  3AE8               	xorlw	232
 13689  158F  1D03               	skipz
 13690  1590  2DF8               	goto	l7310
 13691  1591                     l7276:	
 13692                           
 13693                           ;mfrc500.c: 687: {
 13694                           ;mfrc500.c: 688: if ( MInfo.nBitsReceived != (40 - bcnt) )
 13695  1591  01AB               	clrf	??_Mf500PiccCascAnticoll+1
 13696  1592  087B               	movf	Mf500PiccCascAnticoll@bcnt,w
 13697  1593  3C28               	sublw	40
 13698  1594  00AA               	movwf	??_Mf500PiccCascAnticoll
 13699  1595  1C03               	skipc
 13700  1596  03AB               	decf	??_Mf500PiccCascAnticoll+1,f
 13701  1597  0869               	movf	_MInfo+5,w
 13702  1598  00AC               	movwf	??_Mf500PiccCascAnticoll+2
 13703  1599  01AD               	clrf	??_Mf500PiccCascAnticoll+3
 13704  159A  082B               	movf	??_Mf500PiccCascAnticoll+1,w
 13705  159B  062D               	xorwf	??_Mf500PiccCascAnticoll+3,w
 13706  159C  1D03               	skipz
 13707  159D  2DA0               	goto	u8205
 13708  159E  082A               	movf	??_Mf500PiccCascAnticoll,w
 13709  159F  062C               	xorwf	??_Mf500PiccCascAnticoll+2,w
 13710  15A0                     u8205:	
 13711  15A0  1903               	skipnz
 13712  15A1  2DA4               	goto	l7280
 13713                           
 13714                           ;mfrc500.c: 689: {
 13715                           ;mfrc500.c: 690: ret_status = (-11);
 13716  15A2  30F5               	movlw	-11
 13717  15A3  2DEF               	goto	L9
 13718  15A4                     l7280:	
 13719                           ;mfrc500.c: 691: }
 13720                           
 13721                           
 13722                           ;mfrc500.c: 692: else
 13723                           ;mfrc500.c: 693: {
 13724                           ;mfrc500.c: 694: byteOffset = 0;
 13725  15A4  01B4               	clrf	Mf500PiccCascAnticoll@byteOffset
 13726                           
 13727                           ;mfrc500.c: 695: if (nbits != 0)
 13728  15A5  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 13729  15A6  1903               	btfsc	3,2
 13730  15A7  2DB9               	goto	l7288
 13731                           
 13732                           ;mfrc500.c: 696: {
 13733                           ;mfrc500.c: 697: snr_in[nbytes - 1] = snr_in[nbytes - 1] | MRcvBuffer[0];
 13734  15A8  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 13735  15A9  3EFF               	addlw	255
 13736  15AA  3E35               	addlw	Mf500PiccCascAnticoll@snr_in& (0+255)
 13737  15AB  0086               	movwf	6
 13738  15AC  0187               	clrf	7
 13739  15AD  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 13740  15AE  3EFF               	addlw	255
 13741  15AF  3E35               	addlw	Mf500PiccCascAnticoll@snr_in& (0+255)
 13742  15B0  0084               	movwf	4
 13743  15B1  0185               	clrf	5
 13744  15B2  0800               	movf	0,w
 13745  15B3  0021               	movlb	1	; select bank1
 13746  15B4  0426               	iorwf	_MRcvBuffer^(0+128),w
 13747  15B5  0081               	movwf	1
 13748                           
 13749                           ;mfrc500.c: 698: byteOffset = 1;
 13750  15B6  0020               	movlb	0	; select bank0
 13751  15B7  01B4               	clrf	Mf500PiccCascAnticoll@byteOffset
 13752  15B8  0AB4               	incf	Mf500PiccCascAnticoll@byteOffset,f
 13753  15B9                     l7288:	
 13754                           
 13755                           ;mfrc500.c: 699: }
 13756                           ;mfrc500.c: 700: for (i = 0; i < (4 - nbytes); i++)
 13757  15B9  01BC               	clrf	Mf500PiccCascAnticoll@i
 13758  15BA                     l7294:	
 13759  15BA  01AB               	clrf	??_Mf500PiccCascAnticoll+1
 13760  15BB  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 13761  15BC  3C04               	sublw	4
 13762  15BD  00AA               	movwf	??_Mf500PiccCascAnticoll
 13763  15BE  1C03               	skipc
 13764  15BF  03AB               	decf	??_Mf500PiccCascAnticoll+1,f
 13765  15C0  082B               	movf	??_Mf500PiccCascAnticoll+1,w
 13766  15C1  3A80               	xorlw	128
 13767  15C2  3C80               	sublw	128
 13768  15C3  1D03               	skipz
 13769  15C4  2DC7               	goto	u8225
 13770  15C5  082A               	movf	??_Mf500PiccCascAnticoll,w
 13771  15C6  023C               	subwf	Mf500PiccCascAnticoll@i,w
 13772  15C7                     u8225:	
 13773  15C7  1803               	btfsc	3,0
 13774  15C8  2DDB               	goto	l7296
 13775                           
 13776                           ;mfrc500.c: 701: {
 13777                           ;mfrc500.c: 702: snr_in[nbytes + i] = MRcvBuffer[i + byteOffset];
 13778  15C9  3035               	movlw	Mf500PiccCascAnticoll@snr_in& (0+255)
 13779  15CA  0020               	movlb	0	; select bank0
 13780  15CB  073C               	addwf	Mf500PiccCascAnticoll@i,w
 13781  15CC  00AA               	movwf	??_Mf500PiccCascAnticoll
 13782  15CD  0839               	movf	Mf500PiccCascAnticoll@nbytes,w
 13783  15CE  072A               	addwf	??_Mf500PiccCascAnticoll,w
 13784  15CF  00AB               	movwf	??_Mf500PiccCascAnticoll+1
 13785  15D0  0086               	movwf	6
 13786  15D1  30A6               	movlw	_MRcvBuffer& (0+255)
 13787  15D2  0187               	clrf	7
 13788  15D3  0734               	addwf	Mf500PiccCascAnticoll@byteOffset,w
 13789  15D4  00AC               	movwf	??_Mf500PiccCascAnticoll+2
 13790  15D5  083C               	movf	Mf500PiccCascAnticoll@i,w
 13791  15D6  072C               	addwf	??_Mf500PiccCascAnticoll+2,w
 13792  15D7  00AD               	movwf	??_Mf500PiccCascAnticoll+3
 13793  15D8  27FA  3194         	fcall	PL18	;call to abstracted procedure
 13794  15DA  2DBA               	goto	l7294
 13795  15DB                     l7296:	
 13796                           
 13797                           ;mfrc500.c: 703: }
 13798                           ;mfrc500.c: 704: if (ret_status != (-24) )
 13799  15DB  0020               	movlb	0	; select bank0
 13800  15DC  083A               	movf	Mf500PiccCascAnticoll@ret_status,w
 13801  15DD  3AE8               	xorlw	232
 13802  15DE  1903               	skipnz
 13803  15DF  2DF4               	goto	l7306
 13804                           
 13805                           ;mfrc500.c: 705: {
 13806                           ;mfrc500.c: 706: snr_crc = snr_in[0] ^ snr_in[1] ^ snr_in[2] ^ snr_in[3];
 13807  15E0  0836               	movf	Mf500PiccCascAnticoll@snr_in+1,w
 13808  15E1  0637               	xorwf	Mf500PiccCascAnticoll@snr_in+2,w
 13809  15E2  0638               	xorwf	Mf500PiccCascAnticoll@snr_in+3,w
 13810  15E3  0635               	xorwf	Mf500PiccCascAnticoll@snr_in,w
 13811  15E4  00AF               	movwf	Mf500PiccCascAnticoll@snr_crc
 13812                           
 13813                           ;mfrc500.c: 707: snr_check = MRcvBuffer[MInfo.nBytesReceived - 1];
 13814  15E5  0868               	movf	_MInfo+4,w
 13815  15E6  3EA5               	addlw	(_MRcvBuffer+255)& (0+255)
 13816  15E7  0086               	movwf	6
 13817  15E8  0187               	clrf	7
 13818  15E9  0801               	movf	1,w
 13819  15EA  00B0               	movwf	Mf500PiccCascAnticoll@snr_check
 13820                           
 13821                           ;mfrc500.c: 708: if (snr_crc != snr_check)
 13822  15EB  062F               	xorwf	Mf500PiccCascAnticoll@snr_crc,w
 13823  15EC  1903               	skipnz
 13824  15ED  2DF1               	goto	l1015
 13825                           
 13826                           ;mfrc500.c: 709: {
 13827                           ;mfrc500.c: 710: ret_status = (-8);
 13828  15EE  30F8               	movlw	-8
 13829  15EF                     L9:	
 13830  15EF  00BA               	movwf	Mf500PiccCascAnticoll@ret_status
 13831                           
 13832                           ;mfrc500.c: 711: }
 13833  15F0  2DF8               	goto	l7310
 13834  15F1                     l1015:	
 13835                           
 13836                           ;mfrc500.c: 712: else
 13837                           ;mfrc500.c: 713: {
 13838                           ;mfrc500.c: 714: complete = 1;
 13839  15F1  01B3               	clrf	Mf500PiccCascAnticoll@complete
 13840  15F2  0AB3               	incf	Mf500PiccCascAnticoll@complete,f
 13841  15F3  2DF8               	goto	l7310
 13842  15F4                     l7306:	
 13843                           
 13844                           ;mfrc500.c: 717: else
 13845                           ;mfrc500.c: 718: {
 13846                           ;mfrc500.c: 719: bcnt = bcnt + MInfo.collPos - nbits;
 13847  15F4  083B               	movf	Mf500PiccCascAnticoll@nbits,w
 13848  15F5  026B               	subwf	_MInfo+7,w
 13849  15F6  07FB               	addwf	Mf500PiccCascAnticoll@bcnt,f
 13850                           
 13851                           ;mfrc500.c: 720: ret_status = 0;
 13852  15F7  01BA               	clrf	Mf500PiccCascAnticoll@ret_status
 13853  15F8                     l7310:	
 13854  15F8  08B3               	movf	Mf500PiccCascAnticoll@complete,f
 13855  15F9  1903               	btfsc	3,2
 13856  15FA  083A               	movf	Mf500PiccCascAnticoll@ret_status,w
 13857  15FB  1903               	btfsc	3,2
 13858  15FC  2CF6               	goto	l7214
 13859                           
 13860                           ;mfrc500.c: 721: }
 13861                           ;mfrc500.c: 722: }
 13862                           ;mfrc500.c: 723: }
 13863                           ;mfrc500.c: 724: }
 13864                           ;mfrc500.c: 725: if (ret_status == 0)
 13865  15FD  08BA               	movf	Mf500PiccCascAnticoll@ret_status,f
 13866  15FE  1D03               	skipz
 13867  15FF  2E04               	goto	l7318
 13868                           
 13869                           ;mfrc500.c: 726: {
 13870                           ;mfrc500.c: 727: memcpy(snr, snr_in, 4);
 13871  1600  3035               	movlw	low Mf500PiccCascAnticoll@snr_in
 13872  1601  00F0               	movwf	memcpy@s1
 13873  1602  3000               	movlw	high Mf500PiccCascAnticoll@snr_in
 13874  1603  2E13               	goto	L10
 13875  1604                     l7318:	
 13876                           ;mfrc500.c: 728: }
 13877                           
 13878                           
 13879                           ;mfrc500.c: 729: else
 13880                           ;mfrc500.c: 730: {
 13881                           ;mfrc500.c: 731: for (i = 0; i < 4; i++)
 13882  1604  01BC               	clrf	Mf500PiccCascAnticoll@i
 13883  1605                     l7324:	
 13884                           
 13885                           ;mfrc500.c: 732: snr[i] = 0;
 13886  1605  083C               	movf	Mf500PiccCascAnticoll@i,w
 13887  1606  077C               	addwf	Mf500PiccCascAnticoll@snr,w
 13888  1607  00AA               	movwf	??_Mf500PiccCascAnticoll
 13889  1608  0086               	movwf	6
 13890  1609  3004               	movlw	4
 13891  160A  0187               	clrf	7
 13892  160B  0181               	clrf	1
 13893  160C  0ABC               	incf	Mf500PiccCascAnticoll@i,f
 13894  160D  023C               	subwf	Mf500PiccCascAnticoll@i,w
 13895  160E  1C03               	skipc
 13896  160F  2E05               	goto	l7324
 13897                           
 13898                           ;mfrc500.c: 733: memcpy(snr, "0000", 4);
 13899  1610  3001               	movlw	low (STR_1| (0+32768))
 13900  1611  00F0               	movwf	memcpy@s1
 13901  1612  3099               	movlw	high (STR_1| (0+32768))
 13902  1613                     L10:	
 13903  1613  00F1               	movwf	memcpy@s1+1
 13904  1614  3004               	movlw	4
 13905  1615  00F2               	movwf	memcpy@n
 13906  1616  01F3               	clrf	memcpy@n+1
 13907  1617  087C               	movf	Mf500PiccCascAnticoll@snr,w
 13908  1618  318E  26AE  3194   	fcall	_memcpy
 13909                           
 13910                           ;mfrc500.c: 734: }
 13911                           ;mfrc500.c: 735: ClearBitMask(0x1A, 0x20);
 13912  161B  3020               	movlw	32
 13913  161C  00F5               	movwf	ClearBitMask@mask
 13914  161D  301A               	movlw	26
 13915  161E  3187  27DD         	fcall	_ClearBitMask
 13916                           
 13917                           ;mfrc500.c: 737: return ret_status;
 13918  1620  0020               	movlb	0	; select bank0
 13919  1621  083A               	movf	Mf500PiccCascAnticoll@ret_status,w
 13920  1622  0008               	return
 13921  1623                     __end_of_Mf500PiccCascAnticoll:	
 13922  1623                     __ptext49:	
 13923 ;; *************** function _PcdSetTmo *****************
 13924 ;; Defined at:
 13925 ;;		line 165 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 13926 ;; Parameters:    Size  Location     Type
 13927 ;;  tmoLength       2    5[COMMON] unsigned int 
 13928 ;; Auto vars:     Size  Location     Type
 13929 ;;		None
 13930 ;; Return value:  Size  Location     Type
 13931 ;;		None               void
 13932 ;; Registers used:
 13933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13934 ;; Tracked objects:
 13935 ;;		On entry : 1E/1
 13936 ;;		On exit  : 1F/1
 13937 ;;		Unchanged: 0/0
 13938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13939 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;Total ram usage:        2 bytes
 13944 ;; Hardware stack levels used:    1
 13945 ;; Hardware stack levels required when called:    3
 13946 ;; This function calls:
 13947 ;;		_WriteRC
 13948 ;; This function is called by:
 13949 ;;		_RC500Config
 13950 ;;		_Mf500PiccCommonRequest
 13951 ;;		_Mf500PiccCascAnticoll
 13952 ;;		_Mf500PiccCascSelect
 13953 ;;		_Mf500PiccAuthState
 13954 ;;		_Mf500PiccLoadKey
 13955 ;;		_Mf500PiccRead
 13956 ;;		_Mf500PiccWrite
 13957 ;; This function uses a non-reentrant model
 13958 ;;
 13959                           
 13960                           
 13961                           ;psect for function _PcdSetTmo
 13962  1623                     _PcdSetTmo:	
 13963  1623                     l6780:	
 13964                           ;incstack = 0
 13965                           ; Regs used in _PcdSetTmo: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13966                           
 13967                           
 13968                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13969                           ; Switch size 1, requested type "space"
 13970                           ; Number of cases is 1, Range of values is 0 to 0
 13971                           ; switch strategies available:
 13972                           ; Name         Instructions Cycles
 13973                           ; simple_byte            4     3 (average)
 13974                           ; direct_byte            8     6 (fixed)
 13975                           ; jumptable            260     6 (fixed)
 13976                           ;	Chosen strategy is simple_byte
 13977                           
 13978                           ;mfrc500.c: 190: break;
 13979                           
 13980                           ;mfrc500.c: 169: switch (tmoLength)
 13981  1623  0876               	movf	PcdSetTmo@tmoLength+1,w
 13982  1624  3A00               	xorlw	0	; case 0
 13983  1625  1903               	skipnz
 13984  1626  2E55               	goto	l7656
 13985  1627  2E4C               	goto	l6790
 13986  1628                     l6782:	
 13987                           
 13988                           ;mfrc500.c: 172: WriteRC(0x2A, 0x07);
 13989  1628  3007               	movlw	7
 13990  1629  00F2               	movwf	WriteRC@data
 13991  162A  302A               	movlw	42
 13992  162B  27BA  3194         	fcall	_WriteRC
 13993                           
 13994                           ;mfrc500.c: 173: WriteRC(0x2C, 0x6a);
 13995  162D  306A               	movlw	106
 13996  162E  00F2               	movwf	WriteRC@data
 13997  162F  302C               	movlw	44
 13998  1630  2FBA               	ljmp	_WriteRC
 13999  1631                     l6784:	
 14000                           ;mfrc500.c: 174: break;
 14001                           
 14002                           
 14003                           ;mfrc500.c: 176: WriteRC(0x2A, 0x07);
 14004  1631  3007               	movlw	7
 14005  1632  00F2               	movwf	WriteRC@data
 14006  1633  302A               	movlw	42
 14007  1634  27BA  3194         	fcall	_WriteRC
 14008                           
 14009                           ;mfrc500.c: 177: WriteRC(0x2C, 0xa0);
 14010  1636  30A0               	movlw	160
 14011  1637  00F2               	movwf	WriteRC@data
 14012  1638  302C               	movlw	44
 14013  1639  2FBA               	ljmp	_WriteRC
 14014  163A                     l6786:	
 14015                           ;mfrc500.c: 178: break;
 14016                           
 14017                           
 14018                           ;mfrc500.c: 180: WriteRC(0x2A, 0x09);
 14019  163A  3009               	movlw	9
 14020  163B  00F2               	movwf	WriteRC@data
 14021  163C  302A               	movlw	42
 14022  163D  27BA  3194         	fcall	_WriteRC
 14023                           
 14024                           ;mfrc500.c: 181: WriteRC(0x2C, 0xa0);
 14025  163F  30A0               	movlw	160
 14026  1640  00F2               	movwf	WriteRC@data
 14027  1641  302C               	movlw	44
 14028  1642  2FBA               	ljmp	_WriteRC
 14029  1643                     l6788:	
 14030                           ;mfrc500.c: 182: break;
 14031                           
 14032                           
 14033                           ;mfrc500.c: 184: WriteRC(0x2A, 0x09);
 14034  1643  3009               	movlw	9
 14035  1644  00F2               	movwf	WriteRC@data
 14036  1645  302A               	movlw	42
 14037  1646  27BA  3194         	fcall	_WriteRC
 14038                           
 14039                           ;mfrc500.c: 185: WriteRC(0x2C, 0xff);
 14040  1648  30FF               	movlw	255
 14041  1649  00F2               	movwf	WriteRC@data
 14042  164A  302C               	movlw	44
 14043  164B  2FBA               	ljmp	_WriteRC
 14044  164C                     l6790:	
 14045                           ;mfrc500.c: 186: break;
 14046                           
 14047                           
 14048                           ;mfrc500.c: 188: WriteRC(0x2A, 0x07);
 14049  164C  3007               	movlw	7
 14050  164D  00F2               	movwf	WriteRC@data
 14051  164E  302A               	movlw	42
 14052  164F  27BA  3194         	fcall	_WriteRC
 14053                           
 14054                           ;mfrc500.c: 189: WriteRC(0x2C, tmoLength);
 14055  1651  0875               	movf	PcdSetTmo@tmoLength,w
 14056  1652  00F2               	movwf	WriteRC@data
 14057  1653  302C               	movlw	44
 14058  1654  2FBA               	ljmp	_WriteRC
 14059  1655                     l7656:	
 14060                           
 14061                           ; Switch size 1, requested type "space"
 14062                           ; Number of cases is 4, Range of values is 1 to 4
 14063                           ; switch strategies available:
 14064                           ; Name         Instructions Cycles
 14065                           ; simple_byte           13     7 (average)
 14066                           ; direct_byte           17     9 (fixed)
 14067                           ; jumptable            263     9 (fixed)
 14068                           ;	Chosen strategy is simple_byte
 14069  1655  0875               	movf	PcdSetTmo@tmoLength,w
 14070  1656  3A01               	xorlw	1	; case 1
 14071  1657  1903               	skipnz
 14072  1658  2E28               	goto	l6782
 14073  1659  3A03               	xorlw	3	; case 2
 14074  165A  1903               	skipnz
 14075  165B  2E31               	goto	l6784
 14076  165C  3A01               	xorlw	1	; case 3
 14077  165D  1903               	skipnz
 14078  165E  2E3A               	goto	l6786
 14079  165F  3A07               	xorlw	7	; case 4
 14080  1660  1903               	skipnz
 14081  1661  2E43               	goto	l6788
 14082  1662  2E4C               	goto	l6790
 14083  1663  0008               	return
 14084  1664                     __end_of_PcdSetTmo:	
 14085  1664                     __ptext43:	
 14086 ;; *************** function _PcdSingleResponseCmd *****************
 14087 ;; Defined at:
 14088 ;;		line 412 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 14089 ;; Parameters:    Size  Location     Type
 14090 ;;  cmd             1    wreg     unsigned char 
 14091 ;; Auto vars:     Size  Location     Type
 14092 ;;  cmd             1    5[BANK0 ] unsigned char 
 14093 ;;  count02         2    2[BANK0 ] unsigned int 
 14094 ;;  count01         2    0[BANK0 ] unsigned int 
 14095 ;;  tmpStatus       1    9[BANK0 ] unsigned char 
 14096 ;;  ret_status      1    8[BANK0 ] unsigned char 
 14097 ;;  waitFor         1    7[BANK0 ] unsigned char 
 14098 ;;  irqEn           1    6[BANK0 ] unsigned char 
 14099 ;;  lastBits        1    4[BANK0 ] unsigned char 
 14100 ;; Return value:  Size  Location     Type
 14101 ;;                  1    wreg      unsigned char 
 14102 ;; Registers used:
 14103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14104 ;; Tracked objects:
 14105 ;;		On entry : 1F/0
 14106 ;;		On exit  : 1F/0
 14107 ;;		Unchanged: 0/0
 14108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14110 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14112 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;Total ram usage:       10 bytes
 14114 ;; Hardware stack levels used:    1
 14115 ;; Hardware stack levels required when called:    5
 14116 ;; This function calls:
 14117 ;;		_FlushFIFO
 14118 ;;		_ISR_RC500
 14119 ;;		_ReadRC
 14120 ;;		_SetBitMask
 14121 ;;		_WriteRC
 14122 ;; This function is called by:
 14123 ;;		_Mf500PiccCommonRequest
 14124 ;;		_Mf500PiccCascAnticoll
 14125 ;;		_Mf500PiccCascSelect
 14126 ;;		_Mf500PiccAuthState
 14127 ;;		_Mf500PiccLoadKey
 14128 ;;		_Mf500PiccRead
 14129 ;;		_Mf500PiccWrite
 14130 ;; This function uses a non-reentrant model
 14131 ;;
 14132                           
 14133                           
 14134                           ;psect for function _PcdSingleResponseCmd
 14135  1664                     _PcdSingleResponseCmd:	
 14136                           
 14137                           ;incstack = 0
 14138                           ; Regs used in _PcdSingleResponseCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14139                           ;PcdSingleResponseCmd@cmd stored from wreg
 14140  1664  00A5               	movwf	PcdSingleResponseCmd@cmd
 14141  1665  303F               	movlw	63
 14142                           
 14143                           ;mfrc500.c: 416: char ret_status = 0;
 14144  1666  01A8               	clrf	PcdSingleResponseCmd@ret_status
 14145                           
 14146                           ;mfrc500.c: 417: unsigned char tmpStatus ;
 14147                           ;mfrc500.c: 418: unsigned char lastBits;
 14148                           ;mfrc500.c: 419: unsigned char irqEn = 0x0;
 14149  1667  01A6               	clrf	PcdSingleResponseCmd@irqEn
 14150                           
 14151                           ;mfrc500.c: 420: unsigned char waitFor = 0x0;
 14152  1668  01A7               	clrf	PcdSingleResponseCmd@waitFor
 14153                           
 14154                           ;mfrc500.c: 421: unsigned int count01, count02;
 14155                           ;mfrc500.c: 423: WriteRC(0x06, 0x3F);
 14156  1669  00F2               	movwf	WriteRC@data
 14157  166A  3006               	movlw	6
 14158  166B  27BA  3194         	fcall	_WriteRC
 14159                           
 14160                           ;mfrc500.c: 424: WriteRC(0x07, 0x7F);
 14161  166D  307F               	movlw	127
 14162  166E  00F2               	movwf	WriteRC@data
 14163  166F  3007               	movlw	7
 14164  1670  27BA  3194         	fcall	_WriteRC
 14165  1672  3001               	movlw	1
 14166                           
 14167                           ;mfrc500.c: 425: WriteRC(0x01, 0x00);
 14168  1673  01F2               	clrf	WriteRC@data
 14169  1674  27BA               	fcall	_WriteRC
 14170                           
 14171                           ;mfrc500.c: 426: FlushFIFO();
 14172  1675  318E  2666  3194   	fcall	_FlushFIFO
 14173                           
 14174                           ;mfrc500.c: 427: MpIsrInfo = &MInfo;
 14175  1678  3064               	movlw	_MInfo& (0+255)
 14176  1679  0020               	movlb	0	; select bank0
 14177  167A  00D4               	movwf	_MpIsrInfo
 14178                           
 14179                           ;mfrc500.c: 428: MpIsrOut = MSndBuffer;
 14180  167B  30B6               	movlw	_MSndBuffer& (0+255)
 14181  167C  00D5               	movwf	_MpIsrOut
 14182                           
 14183                           ;mfrc500.c: 429: MpIsrIn = MRcvBuffer;
 14184  167D  30A6               	movlw	_MRcvBuffer& (0+255)
 14185  167E  00D3               	movwf	_MpIsrIn
 14186                           
 14187                           ;mfrc500.c: 430: MInfo.irqSource = 0x00;
 14188  167F  01EA               	clrf	_MInfo+6
 14189                           
 14190                           ;mfrc500.c: 431: switch (cmd)
 14191  1680  2EA3               	goto	l7062
 14192  1681                     l7032:	
 14193                           
 14194                           ;mfrc500.c: 434: irqEn = 0x00;
 14195  1681  01A6               	clrf	PcdSingleResponseCmd@irqEn
 14196                           
 14197                           ;mfrc500.c: 435: waitFor = 0x00;
 14198  1682  01A7               	clrf	PcdSingleResponseCmd@waitFor
 14199                           
 14200                           ;mfrc500.c: 436: break;
 14201  1683  2EC9               	goto	l7064
 14202  1684                     l7034:	
 14203                           
 14204                           ;mfrc500.c: 438: irqEn = 0x11;
 14205  1684  3011               	movlw	17
 14206  1685  00A6               	movwf	PcdSingleResponseCmd@irqEn
 14207                           
 14208                           ;mfrc500.c: 439: waitFor = 0x10;
 14209  1686  3010               	movlw	16
 14210  1687  2E97               	goto	L18
 14211  1688                     l7036:	
 14212                           ;mfrc500.c: 440: break;
 14213                           
 14214                           
 14215                           ;mfrc500.c: 442: irqEn = 0x07;
 14216  1688  3007               	movlw	7
 14217  1689  2E95               	goto	L19
 14218  168A                     l7038:	
 14219                           ;mfrc500.c: 444: break;
 14220                           
 14221                           ;mfrc500.c: 443: waitFor = 0x04;
 14222                           
 14223                           
 14224                           ;mfrc500.c: 446: case 0x0B:
 14225                           ;mfrc500.c: 447: case 0x0C:
 14226                           ;mfrc500.c: 448: irqEn = 0x05;
 14227  168A  3005               	movlw	5
 14228  168B  2E95               	goto	L19
 14229  168C                     l7042:	
 14230                           ;mfrc500.c: 450: break;
 14231                           
 14232                           ;mfrc500.c: 449: waitFor = 0x04;
 14233                           
 14234                           
 14235                           ;mfrc500.c: 456: irqEn = 0x04;
 14236  168C  3004               	movlw	4
 14237  168D  00A6               	movwf	PcdSingleResponseCmd@irqEn
 14238  168E  2E97               	goto	L18
 14239  168F                     l7044:	
 14240                           ;mfrc500.c: 458: break;
 14241                           
 14242                           ;mfrc500.c: 457: waitFor = 0x04;
 14243                           
 14244                           
 14245                           ;mfrc500.c: 460: MInfo.nBitsReceived = -(ReadRC(0x0F) >> 4);
 14246  168F  300F               	movlw	15
 14247  1690  27CB  3194         	fcall	_ReadRC
 14248  1692  27F3  3194         	fcall	PL16	;call to abstracted procedure
 14249                           
 14250                           ;mfrc500.c: 461: irqEn = 0x06;
 14251  1694  3006               	movlw	6
 14252  1695                     L19:	
 14253  1695  00A6               	movwf	PcdSingleResponseCmd@irqEn
 14254                           
 14255                           ;mfrc500.c: 462: waitFor = 0x04;
 14256  1696  3004               	movlw	4
 14257  1697                     L18:	
 14258  1697  00A7               	movwf	PcdSingleResponseCmd@waitFor
 14259                           
 14260                           ;mfrc500.c: 463: break;
 14261  1698  2EC9               	goto	l7064
 14262  1699                     l7054:	
 14263                           
 14264                           ;mfrc500.c: 473: MInfo.nBitsReceived = -(ReadRC(0x0F) >> 4);
 14265  1699  300F               	movlw	15
 14266  169A  27CB  3194         	fcall	_ReadRC
 14267  169C  27F3  3194         	fcall	PL16	;call to abstracted procedure
 14268                           
 14269                           ;mfrc500.c: 474: irqEn = 0x3D;
 14270  169E  303D               	movlw	61
 14271  169F  2E95               	goto	L19
 14272  16A0                     l7060:	
 14273                           
 14274                           ;mfrc500.c: 478: ret_status = (-23);
 14275  16A0  30E9               	movlw	233
 14276  16A1  00A8               	movwf	PcdSingleResponseCmd@ret_status
 14277                           
 14278                           ;mfrc500.c: 479: }
 14279  16A2  2EC9               	goto	l7064
 14280  16A3                     l7062:	
 14281  16A3  0825               	movf	PcdSingleResponseCmd@cmd,w
 14282                           
 14283                           ; Switch size 1, requested type "space"
 14284                           ; Number of cases is 12, Range of values is 0 to 30
 14285                           ; switch strategies available:
 14286                           ; Name         Instructions Cycles
 14287                           ; simple_byte           37    19 (average)
 14288                           ; direct_byte           68     6 (fixed)
 14289                           ; jumptable            260     6 (fixed)
 14290                           ;	Chosen strategy is simple_byte
 14291  16A4  3A00               	xorlw	0	; case 0
 14292  16A5  1903               	skipnz
 14293  16A6  2E81               	goto	l7032
 14294  16A7  3A01               	xorlw	1	; case 1
 14295  16A8  1903               	skipnz
 14296  16A9  2E84               	goto	l7034
 14297  16AA  3A02               	xorlw	2	; case 3
 14298  16AB  1903               	skipnz
 14299  16AC  2E88               	goto	l7036
 14300  16AD  3A04               	xorlw	4	; case 7
 14301  16AE  1903               	skipnz
 14302  16AF  2E8A               	goto	l7038
 14303  16B0  3A0C               	xorlw	12	; case 11
 14304  16B1  1903               	skipnz
 14305  16B2  2E8A               	goto	l7038
 14306  16B3  3A07               	xorlw	7	; case 12
 14307  16B4  1903               	skipnz
 14308  16B5  2E8A               	goto	l7038
 14309  16B6  3A1E               	xorlw	30	; case 18
 14310  16B7  1903               	skipnz
 14311  16B8  2E84               	goto	l7034
 14312  16B9  3A06               	xorlw	6	; case 20
 14313  16BA  1903               	skipnz
 14314  16BB  2E8C               	goto	l7042
 14315  16BC  3A02               	xorlw	2	; case 22
 14316  16BD  1903               	skipnz
 14317  16BE  2E8F               	goto	l7044
 14318  16BF  3A0F               	xorlw	15	; case 25
 14319  16C0  1903               	skipnz
 14320  16C1  2E8A               	goto	l7038
 14321  16C2  3A03               	xorlw	3	; case 26
 14322  16C3  1903               	skipnz
 14323  16C4  2E8A               	goto	l7038
 14324  16C5  3A04               	xorlw	4	; case 30
 14325  16C6  1903               	skipnz
 14326  16C7  2E99               	goto	l7054
 14327  16C8  2EA0               	goto	l7060
 14328  16C9                     l7064:	
 14329                           
 14330                           ;mfrc500.c: 481: if (ret_status == 0)
 14331  16C9  08A8               	movf	PcdSingleResponseCmd@ret_status,f
 14332  16CA  1D03               	skipz
 14333  16CB  2F68               	goto	l959
 14334  16CC  3010               	movlw	16
 14335                           
 14336                           ;mfrc500.c: 482: {
 14337                           ;mfrc500.c: 483: irqEn |= 0x20;
 14338  16CD  16A6               	bsf	PcdSingleResponseCmd@irqEn,5
 14339                           
 14340                           ;mfrc500.c: 484: waitFor |= 0x20;
 14341  16CE  16A7               	bsf	PcdSingleResponseCmd@waitFor,5
 14342                           
 14343                           ;mfrc500.c: 485: count01 = 10000;
 14344  16CF  00A0               	movwf	PcdSingleResponseCmd@count01
 14345  16D0  3027               	movlw	39
 14346  16D1  00A1               	movwf	PcdSingleResponseCmd@count01+1
 14347                           
 14348                           ;mfrc500.c: 486: count02 = 20;
 14349  16D2  3014               	movlw	20
 14350  16D3  00A2               	movwf	PcdSingleResponseCmd@count02
 14351  16D4  01A3               	clrf	PcdSingleResponseCmd@count02+1
 14352                           
 14353                           ;mfrc500.c: 487: WriteRC(0x06, irqEn | 0x80);
 14354  16D5  0826               	movf	PcdSingleResponseCmd@irqEn,w
 14355  16D6  3880               	iorlw	128
 14356  16D7  00F2               	movwf	WriteRC@data
 14357  16D8  3006               	movlw	6
 14358  16D9  27BA  3194         	fcall	_WriteRC
 14359                           
 14360                           ;mfrc500.c: 488: WriteRC(0x01, cmd);
 14361  16DB  0020               	movlb	0	; select bank0
 14362  16DC  0825               	movf	PcdSingleResponseCmd@cmd,w
 14363  16DD  00F2               	movwf	WriteRC@data
 14364  16DE  3001               	movlw	1
 14365  16DF  27BA  3194         	fcall	_WriteRC
 14366  16E1                     l7086:	
 14367                           ;mfrc500.c: 489: while (!(MpIsrInfo->irqSource & waitFor))
 14368                           
 14369  16E1  0020               	movlb	0	; select bank0
 14370  16E2  0854               	movf	_MpIsrInfo,w
 14371  16E3  3E06               	addlw	6
 14372  16E4  0086               	movwf	6
 14373  16E5  0187               	clrf	7
 14374  16E6  0801               	movf	1,w
 14375  16E7  0527               	andwf	PcdSingleResponseCmd@waitFor,w
 14376  16E8  1D03               	btfss	3,2
 14377  16E9  2F03               	goto	l7088
 14378                           
 14379                           ;mfrc500.c: 490: {
 14380                           ;mfrc500.c: 491: ISR_RC500();
 14381  16EA  3192  22E8  3194   	fcall	_ISR_RC500
 14382                           
 14383                           ;mfrc500.c: 492: if (count02 == 0)
 14384  16ED  0020               	movlb	0	; select bank0
 14385  16EE  0823               	movf	PcdSingleResponseCmd@count02+1,w
 14386  16EF  0422               	iorwf	PcdSingleResponseCmd@count02,w
 14387  16F0  1903               	btfsc	3,2
 14388  16F1  2F03               	goto	l7088
 14389                           
 14390                           ;mfrc500.c: 494: count01--;
 14391  16F2  3001               	movlw	1
 14392  16F3  02A0               	subwf	PcdSingleResponseCmd@count01,f
 14393  16F4  3000               	movlw	0
 14394  16F5  3BA1               	subwfb	PcdSingleResponseCmd@count01+1,f
 14395                           
 14396                           ;mfrc500.c: 495: if (count01 == 0)
 14397  16F6  0821               	movf	PcdSingleResponseCmd@count01+1,w
 14398  16F7  0420               	iorwf	PcdSingleResponseCmd@count01,w
 14399  16F8  1D03               	skipz
 14400  16F9  2EE1               	goto	l7086
 14401                           
 14402                           ;mfrc500.c: 496: {
 14403                           ;mfrc500.c: 497: count01 = 10000;
 14404  16FA  3010               	movlw	16
 14405  16FB  00A0               	movwf	PcdSingleResponseCmd@count01
 14406  16FC  3027               	movlw	39
 14407  16FD  00A1               	movwf	PcdSingleResponseCmd@count01+1
 14408                           
 14409                           ;mfrc500.c: 498: count02--;
 14410  16FE  3001               	movlw	1
 14411  16FF  02A2               	subwf	PcdSingleResponseCmd@count02,f
 14412  1700  3000               	movlw	0
 14413  1701  3BA3               	subwfb	PcdSingleResponseCmd@count02+1,f
 14414  1702  2EE1               	goto	l7086
 14415  1703                     l7088:	
 14416                           
 14417                           ;mfrc500.c: 499: }
 14418                           ;mfrc500.c: 500: };
 14419                           ;mfrc500.c: 502: WriteRC(0x06, 0x3F);
 14420  1703  303F               	movlw	63
 14421  1704  00F2               	movwf	WriteRC@data
 14422  1705  3006               	movlw	6
 14423  1706  27BA  3194         	fcall	_WriteRC
 14424                           
 14425                           ;mfrc500.c: 503: WriteRC(0x07, 0x7F);
 14426  1708  307F               	movlw	127
 14427  1709  00F2               	movwf	WriteRC@data
 14428  170A  3007               	movlw	7
 14429  170B  27BA  3194         	fcall	_WriteRC
 14430                           
 14431                           ;mfrc500.c: 504: SetBitMask(0x09, 0x04);
 14432  170D  3004               	movlw	4
 14433  170E  00F5               	movwf	SetBitMask@mask
 14434  170F  3009               	movlw	9
 14435  1710  27DA  3194         	fcall	_SetBitMask
 14436  1712  3001               	movlw	1
 14437                           
 14438                           ;mfrc500.c: 506: WriteRC(0x01, 0x00);
 14439  1713  01F2               	clrf	WriteRC@data
 14440  1714  27BA  3194         	fcall	_WriteRC
 14441                           
 14442                           ;mfrc500.c: 507: if (count02 == 0)
 14443  1716  0020               	movlb	0	; select bank0
 14444  1717  0823               	movf	PcdSingleResponseCmd@count02+1,w
 14445  1718  0422               	iorwf	PcdSingleResponseCmd@count02,w
 14446  1719  1D03               	skipz
 14447  171A  2F1D               	goto	l7094
 14448                           
 14449                           ;mfrc500.c: 508: {
 14450                           ;mfrc500.c: 509: ret_status = (-27);
 14451  171B  30E5               	movlw	229
 14452  171C  2F21               	goto	L20
 14453  171D                     l7094:	
 14454                           ;mfrc500.c: 510: }
 14455                           
 14456                           
 14457                           ;mfrc500.c: 511: else
 14458                           ;mfrc500.c: 512: {
 14459                           ;mfrc500.c: 513: ret_status = MpIsrInfo->status;
 14460  171D  0854               	movf	_MpIsrInfo,w
 14461  171E  0086               	movwf	6
 14462  171F  0187               	clrf	7
 14463  1720  3F41               	moviw [1]fsr1
 14464  1721                     L20:	
 14465  1721  00A8               	movwf	PcdSingleResponseCmd@ret_status
 14466                           
 14467                           ;mfrc500.c: 514: }
 14468                           ;mfrc500.c: 515: if (ret_status == 0)
 14469  1722  08A8               	movf	PcdSingleResponseCmd@ret_status,f
 14470  1723  1D03               	skipz
 14471  1724  2F67               	goto	l7138
 14472                           
 14473                           ;mfrc500.c: 516: {
 14474                           ;mfrc500.c: 517: if ((tmpStatus = (ReadRC(0x0A) & 0x17)))
 14475  1725  300A               	movlw	10
 14476  1726  27CB  3194         	fcall	_ReadRC
 14477  1728  0020               	movlb	0	; select bank0
 14478  1729  00A9               	movwf	PcdSingleResponseCmd@tmpStatus
 14479  172A  3017               	movlw	23
 14480  172B  05A9               	andwf	PcdSingleResponseCmd@tmpStatus,f
 14481  172C  1903               	btfsc	3,2
 14482  172D  2F4C               	goto	l968
 14483                           
 14484                           ;mfrc500.c: 518: {
 14485                           ;mfrc500.c: 519: if (tmpStatus & 0x01)
 14486  172E  1C29               	btfss	PcdSingleResponseCmd@tmpStatus,0
 14487  172F  2F37               	goto	l7108
 14488                           
 14489                           ;mfrc500.c: 520: {
 14490                           ;mfrc500.c: 521: MInfo.collPos = ReadRC(0x0B);
 14491  1730  300B               	movlw	11
 14492  1731  27CB  3194         	fcall	_ReadRC
 14493  1733  0020               	movlb	0	; select bank0
 14494  1734  00EB               	movwf	_MInfo+7
 14495                           
 14496                           ;mfrc500.c: 522: ret_status = (-24);
 14497  1735  30E8               	movlw	232
 14498  1736  2F3B               	goto	L21
 14499  1737                     l7108:	
 14500                           ;mfrc500.c: 523: }
 14501                           
 14502                           
 14503                           ;mfrc500.c: 524: else
 14504                           ;mfrc500.c: 525: {
 14505                           ;mfrc500.c: 526: MInfo.collPos = 0;
 14506  1737  01EB               	clrf	_MInfo+7
 14507                           
 14508                           ;mfrc500.c: 527: if (tmpStatus & 0x02)
 14509  1738  1CA9               	btfss	PcdSingleResponseCmd@tmpStatus,1
 14510  1739  2F3C               	goto	l7114
 14511                           
 14512                           ;mfrc500.c: 528: {
 14513                           ;mfrc500.c: 529: ret_status = (-5);
 14514  173A  30FB               	movlw	251
 14515  173B                     L21:	
 14516  173B  00A8               	movwf	PcdSingleResponseCmd@ret_status
 14517  173C                     l7114:	
 14518                           
 14519                           ;mfrc500.c: 530: }
 14520                           ;mfrc500.c: 531: }
 14521                           ;mfrc500.c: 532: if (tmpStatus & 0x04)
 14522  173C  1D29               	btfss	PcdSingleResponseCmd@tmpStatus,2
 14523  173D  2F40               	goto	l7118
 14524                           
 14525                           ;mfrc500.c: 533: {
 14526                           ;mfrc500.c: 534: ret_status = (-21);
 14527  173E  30EB               	movlw	235
 14528  173F  00A8               	movwf	PcdSingleResponseCmd@ret_status
 14529  1740                     l7118:	
 14530                           
 14531                           ;mfrc500.c: 535: }
 14532                           ;mfrc500.c: 536: if (tmpStatus & 0x10)
 14533  1740  1E29               	btfss	PcdSingleResponseCmd@tmpStatus,4
 14534  1741  2F48               	goto	l7124
 14535                           
 14536                           ;mfrc500.c: 537: {
 14537                           ;mfrc500.c: 538: FlushFIFO();
 14538  1742  318E  2666  3194   	fcall	_FlushFIFO
 14539                           
 14540                           ;mfrc500.c: 539: ret_status = (-19);
 14541  1745  30ED               	movlw	237
 14542  1746  0020               	movlb	0	; select bank0
 14543  1747  00A8               	movwf	PcdSingleResponseCmd@ret_status
 14544  1748                     l7124:	
 14545                           
 14546                           ;mfrc500.c: 540: }
 14547                           ;mfrc500.c: 541: if (tmpStatus & 0x08)
 14548  1748  1DA9               	btfss	PcdSingleResponseCmd@tmpStatus,3
 14549  1749  2F4C               	goto	l968
 14550                           
 14551                           ;mfrc500.c: 542: {
 14552                           ;mfrc500.c: 543: ret_status = (-2);
 14553  174A  30FE               	movlw	254
 14554  174B  00A8               	movwf	PcdSingleResponseCmd@ret_status
 14555  174C                     l968:	
 14556                           
 14557                           ;mfrc500.c: 544: }
 14558                           ;mfrc500.c: 547: }
 14559                           ;mfrc500.c: 548: if (cmd == 0x1E)
 14560  174C  0825               	movf	PcdSingleResponseCmd@cmd,w
 14561  174D  3A1E               	xorlw	30
 14562  174E  1D03               	skipz
 14563  174F  2F68               	goto	l959
 14564                           
 14565                           ;mfrc500.c: 549: {
 14566                           ;mfrc500.c: 550: lastBits = ReadRC(0x05) & 0x07;
 14567  1750  3005               	movlw	5
 14568  1751  27CB  3194         	fcall	_ReadRC
 14569  1753  0020               	movlb	0	; select bank0
 14570  1754  00A4               	movwf	PcdSingleResponseCmd@lastBits
 14571  1755  3007               	movlw	7
 14572  1756  05A4               	andwf	PcdSingleResponseCmd@lastBits,f
 14573                           
 14574                           ;mfrc500.c: 551: if (lastBits)
 14575  1757  0824               	movf	PcdSingleResponseCmd@lastBits,w
 14576  1758  1903               	btfsc	3,2
 14577  1759  2F61               	goto	l7136
 14578                           
 14579                           ;mfrc500.c: 552: {
 14580                           ;mfrc500.c: 553: MInfo.nBitsReceived += (MInfo.nBytesReceived - 1) * 8 + lastBits;
 14581  175A  0868               	movf	_MInfo+4,w
 14582  175B  0709               	addwf	9,w
 14583  175C  0709               	addwf	9,w
 14584  175D  0709               	addwf	9,w
 14585  175E  0724               	addwf	PcdSingleResponseCmd@lastBits,w
 14586  175F  3EF8               	addlw	248
 14587  1760  2F65               	goto	L22
 14588  1761                     l7136:	
 14589                           ;mfrc500.c: 554: }
 14590                           
 14591                           
 14592                           ;mfrc500.c: 555: else
 14593                           ;mfrc500.c: 556: {
 14594                           ;mfrc500.c: 557: MInfo.nBitsReceived += MInfo.nBytesReceived * 8;
 14595  1761  0868               	movf	_MInfo+4,w
 14596  1762  0709               	addwf	9,w
 14597  1763  0709               	addwf	9,w
 14598  1764  0709               	addwf	9,w
 14599  1765                     L22:	
 14600  1765  07E9               	addwf	_MInfo+5,f
 14601  1766  2F68               	goto	l959
 14602  1767                     l7138:	
 14603                           
 14604                           ;mfrc500.c: 561: else
 14605                           ;mfrc500.c: 562: {
 14606                           ;mfrc500.c: 563: MInfo.collPos = 0x00;
 14607  1767  01EB               	clrf	_MInfo+7
 14608  1768                     l959:	
 14609                           
 14610                           ;mfrc500.c: 564: }
 14611                           ;mfrc500.c: 565: }
 14612                           ;mfrc500.c: 566: MpIsrInfo = 0;
 14613  1768  01D4               	clrf	_MpIsrInfo
 14614                           
 14615                           ;mfrc500.c: 567: MpIsrOut = 0;
 14616  1769  01D5               	clrf	_MpIsrOut
 14617                           
 14618                           ;mfrc500.c: 568: MpIsrIn = 0;
 14619  176A  01D3               	clrf	_MpIsrIn
 14620                           
 14621                           ;mfrc500.c: 570: return ret_status;
 14622  176B  0828               	movf	PcdSingleResponseCmd@ret_status,w
 14623  176C  0008               	return
 14624  176D                     __end_of_PcdSingleResponseCmd:	
 14625  176D                     __ptext14:	
 14626 ;; *************** function _RC500Config *****************
 14627 ;; Defined at:
 14628 ;;		line 368 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 14629 ;; Parameters:    Size  Location     Type
 14630 ;;		None
 14631 ;; Auto vars:     Size  Location     Type
 14632 ;;  i               1   13[COMMON] unsigned char 
 14633 ;;  ret_status      1   12[COMMON] unsigned char 
 14634 ;; Return value:  Size  Location     Type
 14635 ;;                  1    wreg      unsigned char 
 14636 ;; Registers used:
 14637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14638 ;; Tracked objects:
 14639 ;;		On entry : 1F/2
 14640 ;;		On exit  : 1C/0
 14641 ;;		Unchanged: 0/0
 14642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14646 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14647 ;;Total ram usage:        2 bytes
 14648 ;; Hardware stack levels used:    1
 14649 ;; Hardware stack levels required when called:    5
 14650 ;; This function calls:
 14651 ;;		_ClearBitMask
 14652 ;;		_PcdReset
 14653 ;;		_PcdRfReset
 14654 ;;		_PcdSetTmo
 14655 ;;		_WriteRC
 14656 ;; This function is called by:
 14657 ;;		_init_hardware
 14658 ;; This function uses a non-reentrant model
 14659 ;;
 14660                           
 14661                           
 14662                           ;psect for function _RC500Config
 14663  176D                     _RC500Config:	
 14664                           
 14665                           ;mfrc500.c: 375: ret_status = PcdReset();
 14666                           
 14667                           ;incstack = 0
 14668                           ; Regs used in _RC500Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14669  176D  3192  2274  3194   	fcall	_PcdReset
 14670  1770  00FC               	movwf	RC500Config@ret_status
 14671                           
 14672                           ;mfrc500.c: 376: if (ret_status == 0)
 14673  1771  08FC               	movf	RC500Config@ret_status,f
 14674  1772  1D03               	skipz
 14675  1773  0008               	return
 14676                           
 14677                           ;mfrc500.c: 377: {
 14678                           ;mfrc500.c: 378: WriteRC(0x1F, 0x80);
 14679  1774  3080               	movlw	128
 14680  1775  00F2               	movwf	WriteRC@data
 14681  1776  301F               	movlw	31
 14682  1777  27BA  3194         	fcall	_WriteRC
 14683                           
 14684                           ;mfrc500.c: 379: for (i = 0; i < 205; i++);
 14685  1779  01FD               	clrf	RC500Config@i
 14686  177A                     l6984:	
 14687  177A  30CD               	movlw	205
 14688  177B  0AFD               	incf	RC500Config@i,f
 14689  177C  027D               	subwf	RC500Config@i,w
 14690  177D  1C03               	skipc
 14691  177E  2F7A               	goto	l6984
 14692                           
 14693                           ;mfrc500.c: 380: {
 14694                           ;mfrc500.c: 381: WriteRC(0x1F, 0xc0);
 14695  177F  30C0               	movlw	192
 14696  1780  00F2               	movwf	WriteRC@data
 14697  1781  301F               	movlw	31
 14698  1782  27BA  3194         	fcall	_WriteRC
 14699                           
 14700                           ;mfrc500.c: 382: }
 14701                           ;mfrc500.c: 383: for (i = 0; i < 105; i++);
 14702  1784  01FD               	clrf	RC500Config@i
 14703  1785                     l6996:	
 14704  1785  3069               	movlw	105
 14705  1786  0AFD               	incf	RC500Config@i,f
 14706  1787  027D               	subwf	RC500Config@i,w
 14707  1788  1C03               	skipc
 14708  1789  2F85               	goto	l6996
 14709                           
 14710                           ;mfrc500.c: 384: {
 14711                           ;mfrc500.c: 385: ClearBitMask(0x1F, 0x40);
 14712  178A  3040               	movlw	64
 14713  178B  00F5               	movwf	ClearBitMask@mask
 14714  178C  301F               	movlw	31
 14715  178D  3187  27DD  3194   	fcall	_ClearBitMask
 14716                           
 14717                           ;mfrc500.c: 386: }
 14718                           ;mfrc500.c: 387: WriteRC(0x1B, 0xAD);
 14719  1790  30AD               	movlw	173
 14720  1791  00F2               	movwf	WriteRC@data
 14721  1792  301B               	movlw	27
 14722  1793  27BA  3194         	fcall	_WriteRC
 14723                           
 14724                           ;mfrc500.c: 388: WriteRC(0x1C, 0xff);
 14725  1795  30FF               	movlw	255
 14726  1796  00F2               	movwf	WriteRC@data
 14727  1797  301C               	movlw	28
 14728  1798  27BA  3194         	fcall	_WriteRC
 14729                           
 14730                           ;mfrc500.c: 389: WriteRC(0x19, 0x73);
 14731  179A  3073               	movlw	115
 14732  179B  00F2               	movwf	WriteRC@data
 14733  179C  3019               	movlw	25
 14734  179D  27BA  3194         	fcall	_WriteRC
 14735                           
 14736                           ;mfrc500.c: 390: WriteRC(0x1E, 0x81);
 14737  179F  3081               	movlw	129
 14738  17A0  00F2               	movwf	WriteRC@data
 14739  17A1  301E               	movlw	30
 14740  17A2  27BA  3194         	fcall	_WriteRC
 14741                           
 14742                           ;mfrc500.c: 391: WriteRC(0x29, 0x4);
 14743  17A4  3004               	movlw	4
 14744  17A5  00F2               	movwf	WriteRC@data
 14745  17A6  3029               	movlw	41
 14746  17A7  27BA  3194         	fcall	_WriteRC
 14747                           
 14748                           ;mfrc500.c: 392: WriteRC(0x2B, 0x02);
 14749  17A9  3002               	movlw	2
 14750  17AA  00F2               	movwf	WriteRC@data
 14751  17AB  302B               	movlw	43
 14752  17AC  27BA  3194         	fcall	_WriteRC
 14753                           
 14754                           ;mfrc500.c: 393: PcdSetTmo(1);
 14755  17AE  01F5               	clrf	PcdSetTmo@tmoLength
 14756  17AF  0AF5               	incf	PcdSetTmo@tmoLength,f
 14757  17B0  01F6               	clrf	PcdSetTmo@tmoLength+1
 14758  17B1  2623  3194         	fcall	_PcdSetTmo
 14759                           
 14760                           ;mfrc500.c: 394: WriteRC(0x2D, 0x3);
 14761  17B3  3003               	movlw	3
 14762  17B4  00F2               	movwf	WriteRC@data
 14763  17B5  302D               	movlw	45
 14764  17B6  27BA               	fcall	_WriteRC
 14765                           
 14766                           ;mfrc500.c: 395: PcdRfReset(1);
 14767  17B7  3001               	movlw	1
 14768  17B8  3187  2F86         	ljmp	_PcdRfReset
 14769  17BA                     __end_of_RC500Config:	
 14770  17BA                     __ptext50:	
 14771 ;; *************** function _WriteRC *****************
 14772 ;; Defined at:
 14773 ;;		line 122 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 14774 ;; Parameters:    Size  Location     Type
 14775 ;;  address         1    wreg     unsigned char 
 14776 ;;  data            1    2[COMMON] unsigned char 
 14777 ;; Auto vars:     Size  Location     Type
 14778 ;;  address         1    4[COMMON] unsigned char 
 14779 ;; Return value:  Size  Location     Type
 14780 ;;		None               void
 14781 ;; Registers used:
 14782 ;;		wreg, status,2, status,0, pclath, cstack
 14783 ;; Tracked objects:
 14784 ;;		On entry : 1C/2
 14785 ;;		On exit  : 1F/1
 14786 ;;		Unchanged: 0/0
 14787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14788 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14789 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14790 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14791 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14792 ;;Total ram usage:        3 bytes
 14793 ;; Hardware stack levels used:    1
 14794 ;; Hardware stack levels required when called:    2
 14795 ;; This function calls:
 14796 ;;		_PutRC500
 14797 ;; This function is called by:
 14798 ;;		_SetBitMask
 14799 ;;		_ClearBitMask
 14800 ;;		_PcdSetTmo
 14801 ;;		_RC500Config
 14802 ;;		_RC500OutSelect
 14803 ;;		_PcdSingleResponseCmd
 14804 ;;		_Mf500PiccCommonRequest
 14805 ;;		_Mf500PiccCascAnticoll
 14806 ;;		_Mf500PiccCascSelect
 14807 ;;		_Mf500PiccRead
 14808 ;;		_Mf500PiccWrite
 14809 ;; This function uses a non-reentrant model
 14810 ;;
 14811                           
 14812                           
 14813                           ;psect for function _WriteRC
 14814  17BA                     _WriteRC:	
 14815                           
 14816                           ;incstack = 0
 14817                           ; Regs used in _WriteRC: [wreg+status,2+status,0+pclath+cstack]
 14818                           ;WriteRC@address stored from wreg
 14819  17BA  00F4               	movwf	WriteRC@address
 14820                           
 14821                           ;mfrc500.c: 127: PutRC500(0x00, (0x80 | (address >> 0x03)));
 14822  17BB  00F3               	movwf	??_WriteRC
 14823  17BC  36F3               	lsrf	??_WriteRC,f
 14824  17BD  36F3               	lsrf	??_WriteRC,f
 14825  17BE  36F3               	lsrf	??_WriteRC,f
 14826  17BF  0873               	movf	??_WriteRC,w
 14827  17C0  3880               	iorlw	128
 14828  17C1  00F0               	movwf	PutRC500@data
 14829  17C2  3000               	movlw	0
 14830  17C3  3193  23D0  3194   	fcall	_PutRC500
 14831                           
 14832                           ;mfrc500.c: 128: PutRC500(address, data);
 14833  17C6  0872               	movf	WriteRC@data,w
 14834  17C7  00F0               	movwf	PutRC500@data
 14835  17C8  0874               	movf	WriteRC@address,w
 14836  17C9  3193  2BD0         	ljmp	_PutRC500
 14837  17CB                     __end_of_WriteRC:	
 14838  17CB                     __ptext47:	
 14839 ;; *************** function _ReadRC *****************
 14840 ;; Defined at:
 14841 ;;		line 132 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 14842 ;; Parameters:    Size  Location     Type
 14843 ;;  address         1    wreg     unsigned char 
 14844 ;; Auto vars:     Size  Location     Type
 14845 ;;  address         1    3[COMMON] unsigned char 
 14846 ;; Return value:  Size  Location     Type
 14847 ;;                  1    wreg      unsigned char 
 14848 ;; Registers used:
 14849 ;;		wreg, status,2, status,0, pclath, cstack
 14850 ;; Tracked objects:
 14851 ;;		On entry : 1C/1
 14852 ;;		On exit  : 1F/2
 14853 ;;		Unchanged: 0/0
 14854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14857 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14858 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14859 ;;Total ram usage:        2 bytes
 14860 ;; Hardware stack levels used:    1
 14861 ;; Hardware stack levels required when called:    2
 14862 ;; This function calls:
 14863 ;;		_GetRC500
 14864 ;;		_PutRC500
 14865 ;; This function is called by:
 14866 ;;		_SetBitMask
 14867 ;;		_ClearBitMask
 14868 ;;		_PcdSingleResponseCmd
 14869 ;;		_Mf500PiccAuthState
 14870 ;; This function uses a non-reentrant model
 14871 ;;
 14872                           
 14873                           
 14874                           ;psect for function _ReadRC
 14875  17CB                     _ReadRC:	
 14876                           
 14877                           ;incstack = 0
 14878                           ; Regs used in _ReadRC: [wreg+status,2+status,0+pclath+cstack]
 14879                           ;ReadRC@address stored from wreg
 14880  17CB  00F3               	movwf	ReadRC@address
 14881                           
 14882                           ;mfrc500.c: 136: PutRC500(0x00, (0x80 | (address >> 0x03)));
 14883  17CC  00F2               	movwf	??_ReadRC
 14884  17CD  36F2               	lsrf	??_ReadRC,f
 14885  17CE  36F2               	lsrf	??_ReadRC,f
 14886  17CF  36F2               	lsrf	??_ReadRC,f
 14887  17D0  0872               	movf	??_ReadRC,w
 14888  17D1  3880               	iorlw	128
 14889  17D2  00F0               	movwf	PutRC500@data
 14890  17D3  3000               	movlw	0
 14891  17D4  3193  23D0  3194   	fcall	_PutRC500
 14892                           
 14893                           ;mfrc500.c: 137: return GetRC500(address);
 14894  17D7  0873               	movf	ReadRC@address,w
 14895  17D8  3193  2BE9         	ljmp	_GetRC500
 14896  17DA                     __end_of_ReadRC:	
 14897  17DA                     __ptext46:	
 14898 ;; *************** function _SetBitMask *****************
 14899 ;; Defined at:
 14900 ;;		line 141 in file "D:\WORKproject\AJ-BLE-IC\source\driver\mfrc500.c"
 14901 ;; Parameters:    Size  Location     Type
 14902 ;;  reg             1    wreg     unsigned char 
 14903 ;;  mask            1    5[COMMON] unsigned char 
 14904 ;; Auto vars:     Size  Location     Type
 14905 ;;  reg             1    7[COMMON] unsigned char 
 14906 ;;  tmp             1    6[COMMON] unsigned char 
 14907 ;; Return value:  Size  Location     Type
 14908 ;;		None               void
 14909 ;; Registers used:
 14910 ;;		wreg, status,2, status,0, pclath, cstack
 14911 ;; Tracked objects:
 14912 ;;		On entry : 1E/1
 14913 ;;		On exit  : 1F/1
 14914 ;;		Unchanged: 0/0
 14915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14916 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;Total ram usage:        3 bytes
 14921 ;; Hardware stack levels used:    1
 14922 ;; Hardware stack levels required when called:    3
 14923 ;; This function calls:
 14924 ;;		_ReadRC
 14925 ;;		_WriteRC
 14926 ;; This function is called by:
 14927 ;;		_FlushFIFO
 14928 ;;		_PcdRfReset
 14929 ;;		_PcdSingleResponseCmd
 14930 ;; This function uses a non-reentrant model
 14931 ;;
 14932                           
 14933                           
 14934                           ;psect for function _SetBitMask
 14935  17DA                     _SetBitMask:	
 14936                           
 14937                           ;incstack = 0
 14938                           ; Regs used in _SetBitMask: [wreg+status,2+status,0+pclath+cstack]
 14939                           ;SetBitMask@reg stored from wreg
 14940  17DA  00F7               	movwf	SetBitMask@reg
 14941                           
 14942                           ;mfrc500.c: 148: tmp = ReadRC(reg);
 14943  17DB  27CB  3194         	fcall	_ReadRC
 14944  17DD  00F6               	movwf	SetBitMask@tmp
 14945                           
 14946                           ;mfrc500.c: 149: WriteRC(reg, tmp | mask);
 14947  17DE  0475               	iorwf	SetBitMask@mask,w
 14948  17DF  00F2               	movwf	WriteRC@data
 14949  17E0  0877               	movf	SetBitMask@reg,w
 14950  17E1  2FBA               	ljmp	_WriteRC
 14951  17E2                     __end_of_SetBitMask:	
 14952  17E2                     PL2:	
 14953  17E2  01E4               	clrf	_MInfo
 14954  17E3  01E5               	clrf	_MInfo+1
 14955  17E4  01EA               	clrf	_MInfo+6
 14956  17E5  01E6               	clrf	_MInfo+2
 14957  17E6  01E7               	clrf	_MInfo+3
 14958  17E7  01E8               	clrf	_MInfo+4
 14959  17E8  01E9               	clrf	_MInfo+5
 14960  17E9  01EB               	clrf	_MInfo+7
 14961  17EA  0008               	return
 14962  17EB                     __end_ofPL2:	
 14963  17EB                     PL10:	
 14964  17EB  087B               	movf	Mf500PiccCascAnticoll@bcnt,w
 14965  17EC  0020               	movlb	0	; select bank0
 14966  17ED  00AA               	movwf	??_Mf500PiccCascAnticoll
 14967  17EE  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 14968  17EF  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 14969  17F0  36AA               	lsrf	??_Mf500PiccCascAnticoll,f
 14970  17F1  082A               	movf	??_Mf500PiccCascAnticoll,w
 14971  17F2  0008               	return
 14972  17F3                     __end_ofPL10:	
 14973  17F3                     PL16:	
 14974  17F3  0E89               	swapf	9,f
 14975  17F4  390F               	andlw	15
 14976  17F5  3AFF               	xorlw	255
 14977  17F6  3E01               	addlw	1
 14978  17F7  0020               	movlb	0	; select bank0
 14979  17F8  00E9               	movwf	_MInfo+5
 14980  17F9  0008               	return
 14981  17FA                     __end_ofPL16:	
 14982  17FA                     PL18:	
 14983  17FA  0084               	movwf	4
 14984  17FB  0185               	clrf	5
 14985  17FC  0800               	movf	0,w
 14986  17FD  0081               	movwf	1
 14987  17FE  0ABC               	incf	Mf500PiccCascAnticoll@i,f
 14988  17FF  0008               	return
 14989  1800                     __end_ofPL18:	
 14990                           
 14991                           	psect	intentry
 14992  0004                     __pintentry:	
 14993 ;; *************** function _isr *****************
 14994 ;; Defined at:
 14995 ;;		line 79 in file "D:\WORKproject\AJ-BLE-IC\source\driver\interrupt.c"
 14996 ;; Parameters:    Size  Location     Type
 14997 ;;		None
 14998 ;; Auto vars:     Size  Location     Type
 14999 ;;  data_length     1    0        unsigned char 
 15000 ;; Return value:  Size  Location     Type
 15001 ;;		None               void
 15002 ;; Registers used:
 15003 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15004 ;; Tracked objects:
 15005 ;;		On entry : 0/0
 15006 ;;		On exit  : 1E/0
 15007 ;;		Unchanged: 0/0
 15008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;Total ram usage:        0 bytes
 15014 ;; Hardware stack levels used:    1
 15015 ;; This function calls:
 15016 ;;		Nothing
 15017 ;; This function is called by:
 15018 ;;		Interrupt level 1
 15019 ;; This function uses a non-reentrant model
 15020 ;;
 15021                           
 15022  0004                     _isr:	
 15023                           
 15024                           ;incstack = 0
 15025                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0]
 15026  0004  3180               	pagesel	$
 15027                           
 15028                           ;interrupt.c: 85: if (TMR1IE && TMR1IF)
 15029  0005  0021               	movlb	1	; select bank1
 15030  0006  1C11               	btfss	17,0	;volatile
 15031  0007  283D               	goto	i1l6644
 15032  0008  0020               	movlb	0	; select bank0
 15033  0009  1C11               	btfss	17,0	;volatile
 15034  000A  283D               	goto	i1l6644
 15035                           
 15036                           ;interrupt.c: 86: {
 15037                           ;interrupt.c: 87: TMR1IF = 0x00;
 15038  000B  1011               	bcf	17,0	;volatile
 15039                           
 15040                           ;interrupt.c: 88: TMR1H = 0xE0;
 15041  000C  30E0               	movlw	224
 15042  000D  0097               	movwf	23	;volatile
 15043                           
 15044                           ;interrupt.c: 89: TMR1L = 0xC0;
 15045  000E  30C0               	movlw	192
 15046  000F  0096               	movwf	22	;volatile
 15047                           
 15048                           ;interrupt.c: 90: timer_count++;
 15049  0010  0021               	movlb	1	; select bank1
 15050  0011  0AA4               	incf	_timer_count^(0+128),f
 15051  0012  1903               	skipnz
 15052  0013  0AA5               	incf	(_timer_count+1)^(0+128),f
 15053                           
 15054                           ;interrupt.c: 91: if (timer_count >= 1000)
 15055  0014  3003               	movlw	3
 15056  0015  0225               	subwf	(_timer_count+1)^(0+128),w
 15057  0016  30E8               	movlw	232
 15058  0017  1903               	skipnz
 15059  0018  0224               	subwf	_timer_count^(0+128),w
 15060  0019  1C03               	skipc
 15061  001A  2820               	goto	i1l6624
 15062                           
 15063                           ;interrupt.c: 92: {
 15064                           ;interrupt.c: 93: timer_count = 0x00;
 15065  001B  01A4               	clrf	_timer_count^(0+128)
 15066  001C  01A5               	clrf	(_timer_count+1)^(0+128)
 15067                           
 15068                           ;interrupt.c: 94: flag_timer = 0x01;
 15069  001D  0020               	movlb	0	; select bank0
 15070  001E  01DA               	clrf	_flag_timer
 15071  001F  0ADA               	incf	_flag_timer,f
 15072  0020                     i1l6624:	
 15073                           
 15074                           ;interrupt.c: 95: }
 15075                           ;interrupt.c: 97: if (count_uart1_receive > 0x00)
 15076  0020  0020               	movlb	0	; select bank0
 15077  0021  0858               	movf	_count_uart1_receive,w
 15078  0022  1903               	btfsc	3,2
 15079  0023  2826               	goto	i1l6628
 15080                           
 15081                           ;interrupt.c: 98: {
 15082                           ;interrupt.c: 99: count_uart1_receive--;
 15083  0024  03D8               	decf	_count_uart1_receive,f
 15084                           
 15085                           ;interrupt.c: 100: }
 15086  0025  282A               	goto	i1l6632
 15087  0026                     i1l6628:	
 15088                           
 15089                           ;interrupt.c: 101: else if (count_uart1_receive == 0x00)
 15090  0026  08D8               	movf	_count_uart1_receive,f
 15091  0027  1D03               	skipz
 15092  0028  282A               	goto	i1l6632
 15093                           
 15094                           ;interrupt.c: 102: {
 15095                           ;interrupt.c: 103: uart1_cnt = 0x00;
 15096  0029  01E1               	clrf	_uart1_cnt
 15097  002A                     i1l6632:	
 15098                           ;interrupt.c: 104: }
 15099                           
 15100                           
 15101                           ;interrupt.c: 108: }
 15102                           ;interrupt.c: 110: if (count_uart2_receive > 0x00)
 15103  002A  0859               	movf	_count_uart2_receive,w
 15104  002B  1903               	btfsc	3,2
 15105  002C  283D               	goto	i1l6644
 15106                           
 15107                           ;interrupt.c: 111: {
 15108                           ;interrupt.c: 112: count_uart2_receive--;
 15109  002D  0BD9               	decfsz	_count_uart2_receive,f
 15110                           
 15111                           ;interrupt.c: 114: if (count_uart2_receive == 0x00)
 15112  002E  283D               	goto	i1l6644
 15113                           
 15114                           ;interrupt.c: 115: {
 15115                           ;interrupt.c: 116: if((uart2_cnt==5)&&(uart2_receive_buffer[4]==0xAA))
 15116  002F  0862               	movf	_uart2_cnt,w
 15117  0030  3A05               	xorlw	5
 15118  0031  1D03               	skipz
 15119  0032  283B               	goto	i1l6642
 15120  0033  0022               	movlb	2	; select bank2
 15121  0034  0824               	movf	(_uart2_receive_buffer^(0+256)+4),w
 15122  0035  3AAA               	xorlw	170
 15123  0036  1D03               	skipz
 15124  0037  283B               	goto	i1l6642
 15125                           
 15126                           ;interrupt.c: 117: {
 15127                           ;interrupt.c: 118: flag_uart2_cmd = 0x01;
 15128  0038  0020               	movlb	0	; select bank0
 15129  0039  01DC               	clrf	_flag_uart2_cmd
 15130  003A  0ADC               	incf	_flag_uart2_cmd,f
 15131  003B                     i1l6642:	
 15132                           
 15133                           ;interrupt.c: 119: }
 15134                           ;interrupt.c: 120: uart2_cnt = 0x00;
 15135  003B  0020               	movlb	0	; select bank0
 15136  003C  01E2               	clrf	_uart2_cnt
 15137  003D                     i1l6644:	
 15138                           
 15139                           ;interrupt.c: 121: }
 15140                           ;interrupt.c: 122: }
 15141                           ;interrupt.c: 164: }
 15142                           ;interrupt.c: 166: if (RC1IE && RC1IF)
 15143  003D  0021               	movlb	1	; select bank1
 15144  003E  1E91               	btfss	17,5	;volatile
 15145  003F  285A               	goto	i1l6666
 15146  0040  0020               	movlb	0	; select bank0
 15147  0041  1E91               	btfss	17,5	;volatile
 15148  0042  285A               	goto	i1l6666
 15149                           
 15150                           ;interrupt.c: 167: {
 15151                           ;interrupt.c: 168: RC1IF = 0x00;
 15152  0043  1291               	bcf	17,5	;volatile
 15153                           
 15154                           ;interrupt.c: 169: uart1_receive_buffer[uart1_cnt++] = RC1REG;
 15155  0044  0861               	movf	_uart1_cnt,w
 15156  0045  3E47               	addlw	_uart1_receive_buffer& (0+255)
 15157  0046  0086               	movwf	6
 15158  0047  0187               	clrf	7
 15159  0048  0023               	movlb	3	; select bank3
 15160  0049  0819               	movf	25,w	;volatile
 15161  004A  0081               	movwf	1
 15162  004B  0020               	movlb	0	; select bank0
 15163  004C  3003               	movlw	3
 15164  004D  0AE1               	incf	_uart1_cnt,f
 15165                           
 15166                           ;interrupt.c: 170: count_uart1_receive = 0x03;
 15167  004E  00D8               	movwf	_count_uart1_receive
 15168                           
 15169                           ;interrupt.c: 171: if (uart1_cnt == 0x08)
 15170  004F  0861               	movf	_uart1_cnt,w
 15171  0050  3A08               	xorlw	8
 15172  0051  1D03               	skipz
 15173  0052  2856               	goto	i1l6662
 15174                           
 15175                           ;interrupt.c: 172: {
 15176                           ;interrupt.c: 173: uart1_cnt = 0x00;
 15177  0053  01E1               	clrf	_uart1_cnt
 15178                           
 15179                           ;interrupt.c: 174: flag_uart1_cmd = 0x01;
 15180  0054  01DB               	clrf	_flag_uart1_cmd
 15181  0055  0ADB               	incf	_flag_uart1_cmd,f
 15182  0056                     i1l6662:	
 15183                           
 15184                           ;interrupt.c: 175: }
 15185                           ;interrupt.c: 176: if (uart1_cnt > 0x08)
 15186  0056  3009               	movlw	9
 15187  0057  0261               	subwf	_uart1_cnt,w
 15188  0058  1803               	btfsc	3,0
 15189                           
 15190                           ;interrupt.c: 177: {
 15191                           ;interrupt.c: 178: uart1_cnt = 0x00;
 15192  0059  01E1               	clrf	_uart1_cnt
 15193  005A                     i1l6666:	
 15194                           
 15195                           ;interrupt.c: 179: }
 15196                           ;interrupt.c: 180: }
 15197                           ;interrupt.c: 182: if (RC2IE && RC2IF)
 15198  005A  0021               	movlb	1	; select bank1
 15199  005B  1E94               	btfss	20,5	;volatile
 15200  005C  0009               	retfie
 15201  005D  0020               	movlb	0	; select bank0
 15202  005E  1E94               	btfss	20,5	;volatile
 15203  005F  0009               	retfie
 15204                           
 15205                           ;interrupt.c: 183: {
 15206                           ;interrupt.c: 184: RC2IF = 0x00;
 15207  0060  1294               	bcf	20,5	;volatile
 15208                           
 15209                           ;interrupt.c: 185: if (flag_uart2_cmd == 0x00)
 15210  0061  08DC               	movf	_flag_uart2_cmd,f
 15211  0062  1D03               	skipz
 15212  0063  0009               	retfie
 15213                           
 15214                           ;interrupt.c: 186: {
 15215                           ;interrupt.c: 187: uart2_receive_buffer[uart2_cnt] = RC2REG;
 15216  0064  0862               	movf	_uart2_cnt,w
 15217  0065  3E20               	addlw	_uart2_receive_buffer& (0+255)
 15218  0066  0086               	movwf	6
 15219  0067  3001               	movlw	1	; select bank2/3
 15220  0068  0087               	movwf	7
 15221  0069  0029               	movlb	9	; select bank9
 15222  006A  0811               	movf	17,w	;volatile
 15223  006B  0081               	movwf	1
 15224                           
 15225                           ;interrupt.c: 189: if (uart2_receive_buffer[0] == 0x55)
 15226  006C  0022               	movlb	2	; select bank2
 15227  006D  0820               	movf	_uart2_receive_buffer^(0+256),w
 15228  006E  3A55               	xorlw	85
 15229  006F  1D03               	skipz
 15230  0070  2873               	goto	i1l6680
 15231                           
 15232                           ;interrupt.c: 190: {
 15233                           ;interrupt.c: 191: uart2_cnt++;
 15234  0071  0020               	movlb	0	; select bank0
 15235  0072  0AE2               	incf	_uart2_cnt,f
 15236  0073                     i1l6680:	
 15237                           
 15238                           ;interrupt.c: 192: }
 15239                           ;interrupt.c: 195: count_uart2_receive = 0x05;
 15240  0073  3005               	movlw	5
 15241  0074  0020               	movlb	0	; select bank0
 15242  0075  00D9               	movwf	_count_uart2_receive
 15243                           
 15244                           ;interrupt.c: 197: }
 15245  0076  0009               	retfie
 15246  0077                     __end_of_isr:	
 15247  007E                     btemp	set	126	;btemp
 15248  007E                     wtemp	set	126
 15249  007E                     wtemp0	set	126
 15250  0080                     wtemp1	set	128
 15251  0082                     wtemp2	set	130
 15252  0084                     wtemp3	set	132
 15253  0086                     wtemp4	set	134
 15254  0088                     wtemp5	set	136
 15255  007F                     wtemp6	set	127
 15256  007E                     ttemp	set	126
 15257  007E                     ttemp0	set	126
 15258  0081                     ttemp1	set	129
 15259  0084                     ttemp2	set	132
 15260  0087                     ttemp3	set	135
 15261  007F                     ttemp4	set	127
 15262  007E                     ltemp	set	126
 15263  007E                     ltemp0	set	126
 15264  0082                     ltemp1	set	130
 15265  0086                     ltemp2	set	134
 15266  0080                     ltemp3	set	128
 15267                           
 15268                           	psect	text21_split_1
 15269  00A0                     l5288:	
 15270  00A0  3064               	movlw	100
 15271  00A1                     L30:	
 15272  00A1  318A  2AA2         	ljmp	_uart1_send_byte
 15273  00A3                     l5290:	
 15274  00A3  3068               	movlw	104
 15275  00A4  28A1               	ljmp	L30
 15276  00A5                     l5292:	
 15277  00A5  3071               	movlw	113
 15278  00A6  28A1               	ljmp	L30
 15279  00A7                     l5294:	
 15280  00A7  3072               	movlw	114
 15281  00A8  28A1               	ljmp	L30
 15282  00A9                     l5296:	
 15283  00A9  3074               	movlw	116
 15284  00AA  28A1               	ljmp	L30
 15285  00AB                     l5298:	
 15286  00AB  3078               	movlw	120
 15287  00AC  28A1               	ljmp	L30
 15288  00AD                     l5302:	
 15289  00AD  0825               	movf	deal_floor@floor+3,w
 15290                           
 15291                           ; Switch size 1, requested type "space"
 15292                           ; Number of cases is 8, Range of values is 1 to 128
 15293                           ; switch strategies available:
 15294                           ; Name         Instructions Cycles
 15295                           ; simple_byte           25    13 (average)
 15296                           ; direct_byte          265     9 (fixed)
 15297                           ; jumptable            263     9 (fixed)
 15298                           ;	Chosen strategy is simple_byte
 15299  00AE  3A01               	xorlw	1	; case 1
 15300  00AF  3192  1903         	skipnz
 15301  00B1  2A70  3180         	goto	l5284
 15302  00B3  3A03               	xorlw	3	; case 2
 15303  00B4  1903               	skipnz
 15304  00B5  2F84               	goto	L31
 15305  00B6  3A06               	xorlw	6	; case 4
 15306  00B7  1903               	skipnz
 15307  00B8  28A0               	goto	l5288
 15308  00B9  3A0C               	xorlw	12	; case 8
 15309  00BA  1903               	skipnz
 15310  00BB  28A3               	goto	l5290
 15311  00BC  3A18               	xorlw	24	; case 16
 15312  00BD  1903               	skipnz
 15313  00BE  28A5               	goto	l5292
 15314  00BF  3A30               	xorlw	48	; case 32
 15315  00C0  1903               	skipnz
 15316  00C1  28A7               	goto	l5294
 15317  00C2  3A60               	xorlw	96	; case 64
 15318  00C3  1903               	skipnz
 15319  00C4  28A9               	goto	l5296
 15320  00C5  3AC0               	xorlw	192	; case 128
 15321  00C6  1903               	skipnz
 15322  00C7  28AB               	goto	l5298
 15323  00C8  2F83               	goto	l289
 15324  00C9                     l5304:	
 15325                           
 15326                           ;handle_floor.c: 120: else if (floor[0] == 0x00 && floor[1] == 0x00 && floor[2] == 0x00 
      +                          && floor[3] == 0x00 &&
 15327                           ;handle_floor.c: 121: (floor[4] == 0x01 || floor[4] == 0x02 || floor[4] == 0x04 || floor
      +                          [4] == 0x08 ||
 15328                           ;handle_floor.c: 122: floor[4] == 0x10 || floor[4] == 0x20 || floor[4] == 0x40 || floor[
      +                          4] == 0x80)
 15329                           ;handle_floor.c: 123: && floor[5] == 0x00 && floor[6] == 0x00 && floor[7] == 0x00)
 15330  00C9  08A2               	movf	deal_floor@floor,f
 15331  00CA  1D03               	skipz
 15332  00CB  2928               	goto	l5356
 15333  00CC  08A3               	movf	deal_floor@floor+1,f
 15334  00CD  1D03               	skipz
 15335  00CE  2928               	goto	l5356
 15336  00CF  08A4               	movf	deal_floor@floor+2,f
 15337  00D0  1D03               	skipz
 15338  00D1  2928               	goto	l5356
 15339  00D2  08A5               	movf	deal_floor@floor+3,f
 15340  00D3  1D03               	skipz
 15341  00D4  2928               	goto	l5356
 15342  00D5  0326               	decf	deal_floor@floor+4,w
 15343  00D6  1903               	skipnz
 15344  00D7  28F4               	goto	l5328
 15345  00D8  0826               	movf	deal_floor@floor+4,w
 15346  00D9  3A02               	xorlw	2
 15347  00DA  1903               	skipnz
 15348  00DB  28F4               	goto	l5328
 15349  00DC  0826               	movf	deal_floor@floor+4,w
 15350  00DD  3A04               	xorlw	4
 15351  00DE  1903               	skipnz
 15352  00DF  28F4               	goto	l5328
 15353  00E0  0826               	movf	deal_floor@floor+4,w
 15354  00E1  3A08               	xorlw	8
 15355  00E2  1903               	skipnz
 15356  00E3  28F4               	goto	l5328
 15357  00E4  0826               	movf	deal_floor@floor+4,w
 15358  00E5  3A10               	xorlw	16
 15359  00E6  1903               	skipnz
 15360  00E7  28F4               	goto	l5328
 15361  00E8  0826               	movf	deal_floor@floor+4,w
 15362  00E9  3A20               	xorlw	32
 15363  00EA  1903               	skipnz
 15364  00EB  28F4               	goto	l5328
 15365  00EC  0826               	movf	deal_floor@floor+4,w
 15366  00ED  3A40               	xorlw	64
 15367  00EE  1903               	skipnz
 15368  00EF  28F4               	goto	l5328
 15369  00F0  0826               	movf	deal_floor@floor+4,w
 15370  00F1  3A80               	xorlw	128
 15371  00F2  1D03               	skipz
 15372  00F3  2928               	goto	l5356
 15373  00F4                     l5328:	
 15374  00F4  08A7               	movf	deal_floor@floor+5,f
 15375  00F5  1D03               	skipz
 15376  00F6  2928               	goto	l5356
 15377  00F7  08A8               	movf	deal_floor@floor+6,f
 15378  00F8  1D03               	skipz
 15379  00F9  2928               	goto	l5356
 15380  00FA  08A9               	movf	deal_floor@floor+7,f
 15381  00FB  1903               	btfsc	3,2
 15382  00FC  290E               	goto	l5354
 15383  00FD  2928               	goto	l5356
 15384  00FE                     l5336:	
 15385  00FE  3081               	movlw	129
 15386  00FF  28A1               	ljmp	L30
 15387  0100                     l5338:	
 15388  0100  3082               	movlw	130
 15389  0101  28A1               	ljmp	L30
 15390  0102                     l5340:	
 15391  0102  3084               	movlw	132
 15392  0103  28A1               	ljmp	L30
 15393  0104                     l5342:	
 15394  0104  3088               	movlw	136
 15395  0105  28A1               	ljmp	L30
 15396  0106                     l5344:	
 15397  0106  3091               	movlw	145
 15398  0107  28A1               	ljmp	L30
 15399  0108                     l5346:	
 15400  0108  3092               	movlw	146
 15401  0109  28A1               	ljmp	L30
 15402  010A                     l5348:	
 15403  010A  3094               	movlw	148
 15404  010B  28A1               	ljmp	L30
 15405  010C                     l5350:	
 15406  010C  3098               	movlw	152
 15407  010D  28A1               	ljmp	L30
 15408  010E                     l5354:	
 15409  010E  0826               	movf	deal_floor@floor+4,w
 15410                           
 15411                           ; Switch size 1, requested type "space"
 15412                           ; Number of cases is 8, Range of values is 1 to 128
 15413                           ; switch strategies available:
 15414                           ; Name         Instructions Cycles
 15415                           ; simple_byte           25    13 (average)
 15416                           ; direct_byte          265     9 (fixed)
 15417                           ; jumptable            263     9 (fixed)
 15418                           ;	Chosen strategy is simple_byte
 15419  010F  3A01               	xorlw	1	; case 1
 15420  0110  1903               	skipnz
 15421  0111  28FE               	goto	l5336
 15422  0112  3A03               	xorlw	3	; case 2
 15423  0113  1903               	skipnz
 15424  0114  2900               	goto	l5338
 15425  0115  3A06               	xorlw	6	; case 4
 15426  0116  1903               	skipnz
 15427  0117  2902               	goto	l5340
 15428  0118  3A0C               	xorlw	12	; case 8
 15429  0119  1903               	skipnz
 15430  011A  2904               	goto	l5342
 15431  011B  3A18               	xorlw	24	; case 16
 15432  011C  1903               	skipnz
 15433  011D  2906               	goto	l5344
 15434  011E  3A30               	xorlw	48	; case 32
 15435  011F  1903               	skipnz
 15436  0120  2908               	goto	l5346
 15437  0121  3A60               	xorlw	96	; case 64
 15438  0122  1903               	skipnz
 15439  0123  290A               	goto	l5348
 15440  0124  3AC0               	xorlw	192	; case 128
 15441  0125  1903               	skipnz
 15442  0126  290C               	goto	l5350
 15443  0127  2F83               	goto	l289
 15444  0128                     l5356:	
 15445                           
 15446                           ;handle_floor.c: 138: else if (floor[0] == 0x00 && floor[1] == 0x00 && floor[2] == 0x00 
      +                          && floor[3] == 0x00 && floor[4] == 0x00 &&
 15447                           ;handle_floor.c: 139: (floor[5] == 0x01 || floor[5] == 0x02 || floor[5] == 0x04 || floor
      +                          [5] == 0x08 ||
 15448                           ;handle_floor.c: 140: floor[5] == 0x10 || floor[5] == 0x20 || floor[5] == 0x40 || floor[
      +                          5] == 0x80) &&
 15449                           ;handle_floor.c: 141: floor[6] == 0x00 && floor[7] == 0x00)
 15450  0128  08A2               	movf	deal_floor@floor,f
 15451  0129  1D03               	skipz
 15452  012A  2987               	goto	l5408
 15453  012B  08A3               	movf	deal_floor@floor+1,f
 15454  012C  1D03               	skipz
 15455  012D  2987               	goto	l5408
 15456  012E  08A4               	movf	deal_floor@floor+2,f
 15457  012F  1D03               	skipz
 15458  0130  2987               	goto	l5408
 15459  0131  08A5               	movf	deal_floor@floor+3,f
 15460  0132  1D03               	skipz
 15461  0133  2987               	goto	l5408
 15462  0134  08A6               	movf	deal_floor@floor+4,f
 15463  0135  1D03               	skipz
 15464  0136  2987               	goto	l5408
 15465  0137  0327               	decf	deal_floor@floor+5,w
 15466  0138  1903               	skipnz
 15467  0139  2956               	goto	l5382
 15468  013A  0827               	movf	deal_floor@floor+5,w
 15469  013B  3A02               	xorlw	2
 15470  013C  1903               	skipnz
 15471  013D  2956               	goto	l5382
 15472  013E  0827               	movf	deal_floor@floor+5,w
 15473  013F  3A04               	xorlw	4
 15474  0140  1903               	skipnz
 15475  0141  2956               	goto	l5382
 15476  0142  0827               	movf	deal_floor@floor+5,w
 15477  0143  3A08               	xorlw	8
 15478  0144  1903               	skipnz
 15479  0145  2956               	goto	l5382
 15480  0146  0827               	movf	deal_floor@floor+5,w
 15481  0147  3A10               	xorlw	16
 15482  0148  1903               	skipnz
 15483  0149  2956               	goto	l5382
 15484  014A  0827               	movf	deal_floor@floor+5,w
 15485  014B  3A20               	xorlw	32
 15486  014C  1903               	skipnz
 15487  014D  2956               	goto	l5382
 15488  014E  0827               	movf	deal_floor@floor+5,w
 15489  014F  3A40               	xorlw	64
 15490  0150  1903               	skipnz
 15491  0151  2956               	goto	l5382
 15492  0152  0827               	movf	deal_floor@floor+5,w
 15493  0153  3A80               	xorlw	128
 15494  0154  1D03               	skipz
 15495  0155  2987               	goto	l5408
 15496  0156                     l5382:	
 15497  0156  08A8               	movf	deal_floor@floor+6,f
 15498  0157  1D03               	skipz
 15499  0158  2987               	goto	l5408
 15500  0159  08A9               	movf	deal_floor@floor+7,f
 15501  015A  1903               	btfsc	3,2
 15502  015B  296D               	goto	l5406
 15503  015C  2987               	goto	l5408
 15504  015D                     l5388:	
 15505  015D  30A1               	movlw	161
 15506  015E  28A1               	ljmp	L30
 15507  015F                     l5390:	
 15508  015F  30A2               	movlw	162
 15509  0160  28A1               	ljmp	L30
 15510  0161                     l5392:	
 15511  0161  30A4               	movlw	164
 15512  0162  28A1               	ljmp	L30
 15513  0163                     l5394:	
 15514  0163  30A8               	movlw	168
 15515  0164  28A1               	ljmp	L30
 15516  0165                     l5396:	
 15517  0165  30B1               	movlw	177
 15518  0166  28A1               	ljmp	L30
 15519  0167                     l5398:	
 15520  0167  30B2               	movlw	178
 15521  0168  28A1               	ljmp	L30
 15522  0169                     l5400:	
 15523  0169  30B4               	movlw	180
 15524  016A  28A1               	ljmp	L30
 15525  016B                     l5402:	
 15526  016B  30B8               	movlw	184
 15527  016C  28A1               	ljmp	L30
 15528  016D                     l5406:	
 15529  016D  0827               	movf	deal_floor@floor+5,w
 15530                           
 15531                           ; Switch size 1, requested type "space"
 15532                           ; Number of cases is 8, Range of values is 1 to 128
 15533                           ; switch strategies available:
 15534                           ; Name         Instructions Cycles
 15535                           ; simple_byte           25    13 (average)
 15536                           ; direct_byte          265     9 (fixed)
 15537                           ; jumptable            263     9 (fixed)
 15538                           ;	Chosen strategy is simple_byte
 15539  016E  3A01               	xorlw	1	; case 1
 15540  016F  1903               	skipnz
 15541  0170  295D               	goto	l5388
 15542  0171  3A03               	xorlw	3	; case 2
 15543  0172  1903               	skipnz
 15544  0173  295F               	goto	l5390
 15545  0174  3A06               	xorlw	6	; case 4
 15546  0175  1903               	skipnz
 15547  0176  2961               	goto	l5392
 15548  0177  3A0C               	xorlw	12	; case 8
 15549  0178  1903               	skipnz
 15550  0179  2963               	goto	l5394
 15551  017A  3A18               	xorlw	24	; case 16
 15552  017B  1903               	skipnz
 15553  017C  2965               	goto	l5396
 15554  017D  3A30               	xorlw	48	; case 32
 15555  017E  1903               	skipnz
 15556  017F  2967               	goto	l5398
 15557  0180  3A60               	xorlw	96	; case 64
 15558  0181  1903               	skipnz
 15559  0182  2969               	goto	l5400
 15560  0183  3AC0               	xorlw	192	; case 128
 15561  0184  1903               	skipnz
 15562  0185  296B               	goto	l5402
 15563  0186  2F83               	goto	l289
 15564  0187                     l5408:	
 15565                           
 15566                           ;handle_floor.c: 156: else if (floor[0] == 0x00 && floor[1] == 0x00 && floor[2] == 0x00 
      +                          && floor[3] == 0x00 && floor[4] == 0x00 && floor[5] == 0x00 &&
 15567                           ;handle_floor.c: 157: (floor[6] == 0x01 || floor[6] == 0x02 || floor[6] == 0x04 || floor
      +                          [6] == 0x08 ||
 15568                           ;handle_floor.c: 158: floor[6] == 0x10 || floor[6] == 0x20 || floor[6] == 0x40 || floor[
      +                          6] == 0x80) &&
 15569                           ;handle_floor.c: 159: floor[7] == 0x00)
 15570  0187  08A2               	movf	deal_floor@floor,f
 15571  0188  1D03               	skipz
 15572  0189  29E6               	goto	l5460
 15573  018A  08A3               	movf	deal_floor@floor+1,f
 15574  018B  1D03               	skipz
 15575  018C  29E6               	goto	l5460
 15576  018D  08A4               	movf	deal_floor@floor+2,f
 15577  018E  1D03               	skipz
 15578  018F  29E6               	goto	l5460
 15579  0190  08A5               	movf	deal_floor@floor+3,f
 15580  0191  1D03               	skipz
 15581  0192  29E6               	goto	l5460
 15582  0193  08A6               	movf	deal_floor@floor+4,f
 15583  0194  1D03               	skipz
 15584  0195  29E6               	goto	l5460
 15585  0196  08A7               	movf	deal_floor@floor+5,f
 15586  0197  1D03               	skipz
 15587  0198  29E6               	goto	l5460
 15588  0199  0328               	decf	deal_floor@floor+6,w
 15589  019A  1903               	skipnz
 15590  019B  29B8               	goto	l5436
 15591  019C  0828               	movf	deal_floor@floor+6,w
 15592  019D  3A02               	xorlw	2
 15593  019E  1903               	skipnz
 15594  019F  29B8               	goto	l5436
 15595  01A0  0828               	movf	deal_floor@floor+6,w
 15596  01A1  3A04               	xorlw	4
 15597  01A2  1903               	skipnz
 15598  01A3  29B8               	goto	l5436
 15599  01A4  0828               	movf	deal_floor@floor+6,w
 15600  01A5  3A08               	xorlw	8
 15601  01A6  1903               	skipnz
 15602  01A7  29B8               	goto	l5436
 15603  01A8  0828               	movf	deal_floor@floor+6,w
 15604  01A9  3A10               	xorlw	16
 15605  01AA  1903               	skipnz
 15606  01AB  29B8               	goto	l5436
 15607  01AC  0828               	movf	deal_floor@floor+6,w
 15608  01AD  3A20               	xorlw	32
 15609  01AE  1903               	skipnz
 15610  01AF  29B8               	goto	l5436
 15611  01B0  0828               	movf	deal_floor@floor+6,w
 15612  01B1  3A40               	xorlw	64
 15613  01B2  1903               	skipnz
 15614  01B3  29B8               	goto	l5436
 15615  01B4  0828               	movf	deal_floor@floor+6,w
 15616  01B5  3A80               	xorlw	128
 15617  01B6  1D03               	skipz
 15618  01B7  29E6               	goto	l5460
 15619  01B8                     l5436:	
 15620  01B8  08A9               	movf	deal_floor@floor+7,f
 15621  01B9  1903               	btfsc	3,2
 15622  01BA  29CC               	goto	l5458
 15623  01BB  29E6               	goto	l5460
 15624  01BC                     l5440:	
 15625  01BC  30C1               	movlw	193
 15626  01BD  28A1               	ljmp	L30
 15627  01BE                     l5442:	
 15628  01BE  30C2               	movlw	194
 15629  01BF  28A1               	ljmp	L30
 15630  01C0                     l5444:	
 15631  01C0  30C4               	movlw	196
 15632  01C1  28A1               	ljmp	L30
 15633  01C2                     l5446:	
 15634  01C2  30C8               	movlw	200
 15635  01C3  28A1               	ljmp	L30
 15636  01C4                     l5448:	
 15637  01C4  30D1               	movlw	209
 15638  01C5  28A1               	ljmp	L30
 15639  01C6                     l5450:	
 15640  01C6  30D2               	movlw	210
 15641  01C7  28A1               	ljmp	L30
 15642  01C8                     l5452:	
 15643  01C8  30D4               	movlw	212
 15644  01C9  28A1               	ljmp	L30
 15645  01CA                     l5454:	
 15646  01CA  30D8               	movlw	216
 15647  01CB  28A1               	ljmp	L30
 15648  01CC                     l5458:	
 15649  01CC  0828               	movf	deal_floor@floor+6,w
 15650                           
 15651                           ; Switch size 1, requested type "space"
 15652                           ; Number of cases is 8, Range of values is 1 to 128
 15653                           ; switch strategies available:
 15654                           ; Name         Instructions Cycles
 15655                           ; simple_byte           25    13 (average)
 15656                           ; direct_byte          265     9 (fixed)
 15657                           ; jumptable            263     9 (fixed)
 15658                           ;	Chosen strategy is simple_byte
 15659  01CD  3A01               	xorlw	1	; case 1
 15660  01CE  1903               	skipnz
 15661  01CF  29BC               	goto	l5440
 15662  01D0  3A03               	xorlw	3	; case 2
 15663  01D1  1903               	skipnz
 15664  01D2  29BE               	goto	l5442
 15665  01D3  3A06               	xorlw	6	; case 4
 15666  01D4  1903               	skipnz
 15667  01D5  29C0               	goto	l5444
 15668  01D6  3A0C               	xorlw	12	; case 8
 15669  01D7  1903               	skipnz
 15670  01D8  29C2               	goto	l5446
 15671  01D9  3A18               	xorlw	24	; case 16
 15672  01DA  1903               	skipnz
 15673  01DB  29C4               	goto	l5448
 15674  01DC  3A30               	xorlw	48	; case 32
 15675  01DD  1903               	skipnz
 15676  01DE  29C6               	goto	l5450
 15677  01DF  3A60               	xorlw	96	; case 64
 15678  01E0  1903               	skipnz
 15679  01E1  29C8               	goto	l5452
 15680  01E2  3AC0               	xorlw	192	; case 128
 15681  01E3  1903               	skipnz
 15682  01E4  29CA               	goto	l5454
 15683  01E5  2F83               	goto	l289
 15684  01E6                     l5460:	
 15685                           
 15686                           ;handle_floor.c: 174: else if (floor[0] == 0x00 && floor[1] == 0x00 && floor[2] == 0x00 
      +                          && floor[3] == 0x00 && floor[4] == 0x00 && floor[5] == 0x00 && floor[6] == 0x00 &&
 15687                           ;handle_floor.c: 175: (floor[7] == 0x01 || floor[7] == 0x02 || floor[7] == 0x04 || floor
      +                          [7] == 0x08 ||
 15688                           ;handle_floor.c: 176: floor[7] == 0x10 || floor[7] == 0x20 || floor[7] == 0x40 || floor[
      +                          7] == 0x80))
 15689  01E6  08A2               	movf	deal_floor@floor,f
 15690  01E7  1D03               	skipz
 15691  01E8  2A45               	goto	l210
 15692  01E9  08A3               	movf	deal_floor@floor+1,f
 15693  01EA  1D03               	skipz
 15694  01EB  2A45               	goto	l210
 15695  01EC  08A4               	movf	deal_floor@floor+2,f
 15696  01ED  1D03               	skipz
 15697  01EE  2A45               	goto	l210
 15698  01EF  08A5               	movf	deal_floor@floor+3,f
 15699  01F0  1D03               	skipz
 15700  01F1  2A45               	goto	l210
 15701  01F2  08A6               	movf	deal_floor@floor+4,f
 15702  01F3  1D03               	skipz
 15703  01F4  2A45               	goto	l210
 15704  01F5  08A7               	movf	deal_floor@floor+5,f
 15705  01F6  1D03               	skipz
 15706  01F7  2A45               	goto	l210
 15707  01F8  08A8               	movf	deal_floor@floor+6,f
 15708  01F9  1D03               	skipz
 15709  01FA  2A45               	goto	l210
 15710  01FB  0329               	decf	deal_floor@floor+7,w
 15711  01FC  1903               	skipnz
 15712  01FD  2A2B               	goto	l5508
 15713  01FE  0829               	movf	deal_floor@floor+7,w
 15714  01FF  3A02               	xorlw	2
 15715  0200  1903               	skipnz
 15716  0201  2A2B               	goto	l5508
 15717  0202  0829               	movf	deal_floor@floor+7,w
 15718  0203  3A04               	xorlw	4
 15719  0204  1903               	skipnz
 15720  0205  2A2B               	goto	l5508
 15721  0206  0829               	movf	deal_floor@floor+7,w
 15722  0207  3A08               	xorlw	8
 15723  0208  1903               	skipnz
 15724  0209  2A2B               	goto	l5508
 15725  020A  0829               	movf	deal_floor@floor+7,w
 15726  020B  3A10               	xorlw	16
 15727  020C  1903               	skipnz
 15728  020D  2A2B               	goto	l5508
 15729  020E  0829               	movf	deal_floor@floor+7,w
 15730  020F  3A20               	xorlw	32
 15731  0210  1903               	skipnz
 15732  0211  2A2B               	goto	l5508
 15733  0212  0829               	movf	deal_floor@floor+7,w
 15734  0213  3A40               	xorlw	64
 15735  0214  1903               	skipnz
 15736  0215  2A2B               	goto	l5508
 15737  0216  0829               	movf	deal_floor@floor+7,w
 15738  0217  3A80               	xorlw	128
 15739  0218  1903               	btfsc	3,2
 15740  0219  2A2B               	goto	l5508
 15741  021A  2A45               	goto	l210
 15742  021B                     l5490:	
 15743  021B  30E1               	movlw	225
 15744  021C  28A1               	ljmp	L30
 15745  021D                     l5492:	
 15746  021D  30E2               	movlw	226
 15747  021E  28A1               	ljmp	L30
 15748  021F                     l5494:	
 15749  021F  30E4               	movlw	228
 15750  0220  28A1               	ljmp	L30
 15751  0221                     l5496:	
 15752  0221  30E8               	movlw	232
 15753  0222  28A1               	ljmp	L30
 15754  0223                     l5498:	
 15755  0223  30F1               	movlw	241
 15756  0224  28A1               	ljmp	L30
 15757  0225                     l5500:	
 15758  0225  30F2               	movlw	242
 15759  0226  28A1               	ljmp	L30
 15760  0227                     l5502:	
 15761  0227  30F4               	movlw	244
 15762  0228  28A1               	ljmp	L30
 15763  0229                     l5504:	
 15764  0229  30F8               	movlw	248
 15765  022A  28A1               	ljmp	L30
 15766  022B                     l5508:	
 15767  022B  0829               	movf	deal_floor@floor+7,w
 15768                           
 15769                           ; Switch size 1, requested type "space"
 15770                           ; Number of cases is 8, Range of values is 1 to 128
 15771                           ; switch strategies available:
 15772                           ; Name         Instructions Cycles
 15773                           ; simple_byte           25    13 (average)
 15774                           ; direct_byte          265     9 (fixed)
 15775                           ; jumptable            263     9 (fixed)
 15776                           ;	Chosen strategy is simple_byte
 15777  022C  3A01               	xorlw	1	; case 1
 15778  022D  1903               	skipnz
 15779  022E  2A1B               	goto	l5490
 15780  022F  3A03               	xorlw	3	; case 2
 15781  0230  1903               	skipnz
 15782  0231  2A1D               	goto	l5492
 15783  0232  3A06               	xorlw	6	; case 4
 15784  0233  1903               	skipnz
 15785  0234  2A1F               	goto	l5494
 15786  0235  3A0C               	xorlw	12	; case 8
 15787  0236  1903               	skipnz
 15788  0237  2A21               	goto	l5496
 15789  0238  3A18               	xorlw	24	; case 16
 15790  0239  1903               	skipnz
 15791  023A  2A23               	goto	l5498
 15792  023B  3A30               	xorlw	48	; case 32
 15793  023C  1903               	skipnz
 15794  023D  2A25               	goto	l5500
 15795  023E  3A60               	xorlw	96	; case 64
 15796  023F  1903               	skipnz
 15797  0240  2A27               	goto	l5502
 15798  0241  3AC0               	xorlw	192	; case 128
 15799  0242  1903               	skipnz
 15800  0243  2A29               	goto	l5504
 15801  0244  2F83               	goto	l289
 15802  0245                     l210:	
 15803                           
 15804                           ;handle_floor.c: 191: else
 15805                           ;handle_floor.c: 192: {
 15806                           ;handle_floor.c: 193: if (floor[0] & 0x01)
 15807  0245  1C22               	btfss	deal_floor@floor,0
 15808  0246  2A59               	goto	l5512
 15809                           
 15810                           ;handle_floor.c: 194: {
 15811                           ;handle_floor.c: 195: uart1_send_byte(0xF0);
 15812  0247  30F0               	movlw	240
 15813  0248  318A  22A2  3180   	fcall	_uart1_send_byte
 15814                           
 15815                           ;handle_floor.c: 196: uart1_send_byte(0xF1);
 15816  024B  30F1               	movlw	241
 15817  024C  318A  22A2  3180   	fcall	_uart1_send_byte
 15818                           
 15819                           ;handle_floor.c: 197: uart1_send_byte(0x01);
 15820  024F  3001               	movlw	1
 15821  0250  318A  22A2  3180   	fcall	_uart1_send_byte
 15822                           
 15823                           ;handle_floor.c: 198: delay_ms(150);
 15824  0253  3096               	movlw	150
 15825  0254  00F0               	movwf	delay_ms@count
 15826  0255  01F1               	clrf	delay_ms@count+1
 15827  0256  318A  22C7  3180   	fcall	_delay_ms
 15828  0259                     l5512:	
 15829                           
 15830                           ;handle_floor.c: 199: }
 15831                           ;handle_floor.c: 200: if (floor[0] & 0x02)
 15832  0259  0020               	movlb	0	; select bank0
 15833  025A  1CA2               	btfss	deal_floor@floor,1
 15834  025B  2A6E               	goto	l5516
 15835                           
 15836                           ;handle_floor.c: 201: {
 15837                           ;handle_floor.c: 202: uart1_send_byte(0xF0);
 15838  025C  30F0               	movlw	240
 15839  025D  318A  22A2  3180   	fcall	_uart1_send_byte
 15840                           
 15841                           ;handle_floor.c: 203: uart1_send_byte(0xF1);
 15842  0260  30F1               	movlw	241
 15843  0261  318A  22A2  3180   	fcall	_uart1_send_byte
 15844                           
 15845                           ;handle_floor.c: 204: uart1_send_byte(0x02);
 15846  0264  3002               	movlw	2
 15847  0265  318A  22A2  3180   	fcall	_uart1_send_byte
 15848                           
 15849                           ;handle_floor.c: 205: delay_ms(150);
 15850  0268  3096               	movlw	150
 15851  0269  00F0               	movwf	delay_ms@count
 15852  026A  01F1               	clrf	delay_ms@count+1
 15853  026B  318A  22C7  3180   	fcall	_delay_ms
 15854  026E                     l5516:	
 15855                           
 15856                           ;handle_floor.c: 206: }
 15857                           ;handle_floor.c: 207: if (floor[0] & 0x04)
 15858  026E  0020               	movlb	0	; select bank0
 15859  026F  1D22               	btfss	deal_floor@floor,2
 15860  0270  2A83               	goto	l5520
 15861                           
 15862                           ;handle_floor.c: 208: {
 15863                           ;handle_floor.c: 209: uart1_send_byte(0xF0);
 15864  0271  30F0               	movlw	240
 15865  0272  318A  22A2  3180   	fcall	_uart1_send_byte
 15866                           
 15867                           ;handle_floor.c: 210: uart1_send_byte(0xF1);
 15868  0275  30F1               	movlw	241
 15869  0276  318A  22A2  3180   	fcall	_uart1_send_byte
 15870                           
 15871                           ;handle_floor.c: 211: uart1_send_byte(0x04);
 15872  0279  3004               	movlw	4
 15873  027A  318A  22A2  3180   	fcall	_uart1_send_byte
 15874                           
 15875                           ;handle_floor.c: 212: delay_ms(150);
 15876  027D  3096               	movlw	150
 15877  027E  00F0               	movwf	delay_ms@count
 15878  027F  01F1               	clrf	delay_ms@count+1
 15879  0280  318A  22C7  3180   	fcall	_delay_ms
 15880  0283                     l5520:	
 15881                           
 15882                           ;handle_floor.c: 213: }
 15883                           ;handle_floor.c: 214: if (floor[0] & 0x08)
 15884  0283  0020               	movlb	0	; select bank0
 15885  0284  1DA2               	btfss	deal_floor@floor,3
 15886  0285  2A98               	goto	l5524
 15887                           
 15888                           ;handle_floor.c: 215: {
 15889                           ;handle_floor.c: 216: uart1_send_byte(0xF0);
 15890  0286  30F0               	movlw	240
 15891  0287  318A  22A2  3180   	fcall	_uart1_send_byte
 15892                           
 15893                           ;handle_floor.c: 217: uart1_send_byte(0xF1);
 15894  028A  30F1               	movlw	241
 15895  028B  318A  22A2  3180   	fcall	_uart1_send_byte
 15896                           
 15897                           ;handle_floor.c: 218: uart1_send_byte(0x08);
 15898  028E  3008               	movlw	8
 15899  028F  318A  22A2  3180   	fcall	_uart1_send_byte
 15900                           
 15901                           ;handle_floor.c: 219: delay_ms(150);
 15902  0292  3096               	movlw	150
 15903  0293  00F0               	movwf	delay_ms@count
 15904  0294  01F1               	clrf	delay_ms@count+1
 15905  0295  318A  22C7  3180   	fcall	_delay_ms
 15906  0298                     l5524:	
 15907                           
 15908                           ;handle_floor.c: 220: }
 15909                           ;handle_floor.c: 221: if (floor[0] & 0x10)
 15910  0298  0020               	movlb	0	; select bank0
 15911  0299  1E22               	btfss	deal_floor@floor,4
 15912  029A  2AAD               	goto	l5528
 15913                           
 15914                           ;handle_floor.c: 222: {
 15915                           ;handle_floor.c: 223: uart1_send_byte(0xF0);
 15916  029B  30F0               	movlw	240
 15917  029C  318A  22A2  3180   	fcall	_uart1_send_byte
 15918                           
 15919                           ;handle_floor.c: 224: uart1_send_byte(0xF1);
 15920  029F  30F1               	movlw	241
 15921  02A0  318A  22A2  3180   	fcall	_uart1_send_byte
 15922                           
 15923                           ;handle_floor.c: 225: uart1_send_byte(0x11);
 15924  02A3  3011               	movlw	17
 15925  02A4  318A  22A2  3180   	fcall	_uart1_send_byte
 15926                           
 15927                           ;handle_floor.c: 226: delay_ms(150);
 15928  02A7  3096               	movlw	150
 15929  02A8  00F0               	movwf	delay_ms@count
 15930  02A9  01F1               	clrf	delay_ms@count+1
 15931  02AA  318A  22C7  3180   	fcall	_delay_ms
 15932  02AD                     l5528:	
 15933                           
 15934                           ;handle_floor.c: 227: }
 15935                           ;handle_floor.c: 228: if (floor[0] & 0x20)
 15936  02AD  0020               	movlb	0	; select bank0
 15937  02AE  1EA2               	btfss	deal_floor@floor,5
 15938  02AF  2AC2               	goto	l5532
 15939                           
 15940                           ;handle_floor.c: 229: {
 15941                           ;handle_floor.c: 230: uart1_send_byte(0xF0);
 15942  02B0  30F0               	movlw	240
 15943  02B1  318A  22A2  3180   	fcall	_uart1_send_byte
 15944                           
 15945                           ;handle_floor.c: 231: uart1_send_byte(0xF1);
 15946  02B4  30F1               	movlw	241
 15947  02B5  318A  22A2  3180   	fcall	_uart1_send_byte
 15948                           
 15949                           ;handle_floor.c: 232: uart1_send_byte(0x12);
 15950  02B8  3012               	movlw	18
 15951  02B9  318A  22A2  3180   	fcall	_uart1_send_byte
 15952                           
 15953                           ;handle_floor.c: 233: delay_ms(150);
 15954  02BC  3096               	movlw	150
 15955  02BD  00F0               	movwf	delay_ms@count
 15956  02BE  01F1               	clrf	delay_ms@count+1
 15957  02BF  318A  22C7  3180   	fcall	_delay_ms
 15958  02C2                     l5532:	
 15959                           
 15960                           ;handle_floor.c: 234: }
 15961                           ;handle_floor.c: 235: if (floor[0] & 0x40)
 15962  02C2  0020               	movlb	0	; select bank0
 15963  02C3  1F22               	btfss	deal_floor@floor,6
 15964  02C4  2AD7               	goto	l5536
 15965                           
 15966                           ;handle_floor.c: 236: {
 15967                           ;handle_floor.c: 237: uart1_send_byte(0xF0);
 15968  02C5  30F0               	movlw	240
 15969  02C6  318A  22A2  3180   	fcall	_uart1_send_byte
 15970                           
 15971                           ;handle_floor.c: 238: uart1_send_byte(0xF1);
 15972  02C9  30F1               	movlw	241
 15973  02CA  318A  22A2  3180   	fcall	_uart1_send_byte
 15974                           
 15975                           ;handle_floor.c: 239: uart1_send_byte(0x14);
 15976  02CD  3014               	movlw	20
 15977  02CE  318A  22A2  3180   	fcall	_uart1_send_byte
 15978                           
 15979                           ;handle_floor.c: 240: delay_ms(150);
 15980  02D1  3096               	movlw	150
 15981  02D2  00F0               	movwf	delay_ms@count
 15982  02D3  01F1               	clrf	delay_ms@count+1
 15983  02D4  318A  22C7  3180   	fcall	_delay_ms
 15984  02D7                     l5536:	
 15985                           
 15986                           ;handle_floor.c: 241: }
 15987                           ;handle_floor.c: 242: if (floor[0] & 0x80)
 15988  02D7  0020               	movlb	0	; select bank0
 15989  02D8  1FA2               	btfss	deal_floor@floor,7
 15990  02D9  2AEC               	goto	l5540
 15991                           
 15992                           ;handle_floor.c: 243: {
 15993                           ;handle_floor.c: 244: uart1_send_byte(0xF0);
 15994  02DA  30F0               	movlw	240
 15995  02DB  318A  22A2  3180   	fcall	_uart1_send_byte
 15996                           
 15997                           ;handle_floor.c: 245: uart1_send_byte(0xF1);
 15998  02DE  30F1               	movlw	241
 15999  02DF  318A  22A2  3180   	fcall	_uart1_send_byte
 16000                           
 16001                           ;handle_floor.c: 246: uart1_send_byte(0x18);
 16002  02E2  3018               	movlw	24
 16003  02E3  318A  22A2  3180   	fcall	_uart1_send_byte
 16004                           
 16005                           ;handle_floor.c: 247: delay_ms(150);
 16006  02E6  3096               	movlw	150
 16007  02E7  00F0               	movwf	delay_ms@count
 16008  02E8  01F1               	clrf	delay_ms@count+1
 16009  02E9  318A  22C7  3180   	fcall	_delay_ms
 16010  02EC                     l5540:	
 16011                           
 16012                           ;handle_floor.c: 248: }
 16013                           ;handle_floor.c: 250: if (floor[1] & 0x01)
 16014  02EC  0020               	movlb	0	; select bank0
 16015  02ED  1C23               	btfss	deal_floor@floor+1,0
 16016  02EE  2B01               	goto	l5544
 16017                           
 16018                           ;handle_floor.c: 251: {
 16019                           ;handle_floor.c: 252: uart1_send_byte(0xF0);
 16020  02EF  30F0               	movlw	240
 16021  02F0  318A  22A2  3180   	fcall	_uart1_send_byte
 16022                           
 16023                           ;handle_floor.c: 253: uart1_send_byte(0xF1);
 16024  02F3  30F1               	movlw	241
 16025  02F4  318A  22A2  3180   	fcall	_uart1_send_byte
 16026                           
 16027                           ;handle_floor.c: 254: uart1_send_byte(0x21);
 16028  02F7  3021               	movlw	33
 16029  02F8  318A  22A2  3180   	fcall	_uart1_send_byte
 16030                           
 16031                           ;handle_floor.c: 255: delay_ms(150);
 16032  02FB  3096               	movlw	150
 16033  02FC  00F0               	movwf	delay_ms@count
 16034  02FD  01F1               	clrf	delay_ms@count+1
 16035  02FE  318A  22C7  3180   	fcall	_delay_ms
 16036  0301                     l5544:	
 16037                           
 16038                           ;handle_floor.c: 256: }
 16039                           ;handle_floor.c: 257: if (floor[1] & 0x02)
 16040  0301  0020               	movlb	0	; select bank0
 16041  0302  1CA3               	btfss	deal_floor@floor+1,1
 16042  0303  2B16               	goto	l5548
 16043                           
 16044                           ;handle_floor.c: 258: {
 16045                           ;handle_floor.c: 259: uart1_send_byte(0xF0);
 16046  0304  30F0               	movlw	240
 16047  0305  318A  22A2  3180   	fcall	_uart1_send_byte
 16048                           
 16049                           ;handle_floor.c: 260: uart1_send_byte(0xF1);
 16050  0308  30F1               	movlw	241
 16051  0309  318A  22A2  3180   	fcall	_uart1_send_byte
 16052                           
 16053                           ;handle_floor.c: 261: uart1_send_byte(0x22);
 16054  030C  3022               	movlw	34
 16055  030D  318A  22A2  3180   	fcall	_uart1_send_byte
 16056                           
 16057                           ;handle_floor.c: 262: delay_ms(150);
 16058  0310  3096               	movlw	150
 16059  0311  00F0               	movwf	delay_ms@count
 16060  0312  01F1               	clrf	delay_ms@count+1
 16061  0313  318A  22C7  3180   	fcall	_delay_ms
 16062  0316                     l5548:	
 16063                           
 16064                           ;handle_floor.c: 263: }
 16065                           ;handle_floor.c: 264: if (floor[1] & 0x04)
 16066  0316  0020               	movlb	0	; select bank0
 16067  0317  1D23               	btfss	deal_floor@floor+1,2
 16068  0318  2B2B               	goto	l5552
 16069                           
 16070                           ;handle_floor.c: 265: {
 16071                           ;handle_floor.c: 266: uart1_send_byte(0xF0);
 16072  0319  30F0               	movlw	240
 16073  031A  318A  22A2  3180   	fcall	_uart1_send_byte
 16074                           
 16075                           ;handle_floor.c: 267: uart1_send_byte(0xF1);
 16076  031D  30F1               	movlw	241
 16077  031E  318A  22A2  3180   	fcall	_uart1_send_byte
 16078                           
 16079                           ;handle_floor.c: 268: uart1_send_byte(0x24);
 16080  0321  3024               	movlw	36
 16081  0322  318A  22A2  3180   	fcall	_uart1_send_byte
 16082                           
 16083                           ;handle_floor.c: 269: delay_ms(150);
 16084  0325  3096               	movlw	150
 16085  0326  00F0               	movwf	delay_ms@count
 16086  0327  01F1               	clrf	delay_ms@count+1
 16087  0328  318A  22C7  3180   	fcall	_delay_ms
 16088  032B                     l5552:	
 16089                           
 16090                           ;handle_floor.c: 270: }
 16091                           ;handle_floor.c: 271: if (floor[1] & 0x08)
 16092  032B  0020               	movlb	0	; select bank0
 16093  032C  1DA3               	btfss	deal_floor@floor+1,3
 16094  032D  2B40               	goto	l5556
 16095                           
 16096                           ;handle_floor.c: 272: {
 16097                           ;handle_floor.c: 273: uart1_send_byte(0xF0);
 16098  032E  30F0               	movlw	240
 16099  032F  318A  22A2  3180   	fcall	_uart1_send_byte
 16100                           
 16101                           ;handle_floor.c: 274: uart1_send_byte(0xF1);
 16102  0332  30F1               	movlw	241
 16103  0333  318A  22A2  3180   	fcall	_uart1_send_byte
 16104                           
 16105                           ;handle_floor.c: 275: uart1_send_byte(0x28);
 16106  0336  3028               	movlw	40
 16107  0337  318A  22A2  3180   	fcall	_uart1_send_byte
 16108                           
 16109                           ;handle_floor.c: 276: delay_ms(150);
 16110  033A  3096               	movlw	150
 16111  033B  00F0               	movwf	delay_ms@count
 16112  033C  01F1               	clrf	delay_ms@count+1
 16113  033D  318A  22C7  3180   	fcall	_delay_ms
 16114  0340                     l5556:	
 16115                           
 16116                           ;handle_floor.c: 277: }
 16117                           ;handle_floor.c: 278: if (floor[1] & 0x10)
 16118  0340  0020               	movlb	0	; select bank0
 16119  0341  1E23               	btfss	deal_floor@floor+1,4
 16120  0342  2B55               	goto	l5560
 16121                           
 16122                           ;handle_floor.c: 279: {
 16123                           ;handle_floor.c: 280: uart1_send_byte(0xF0);
 16124  0343  30F0               	movlw	240
 16125  0344  318A  22A2  3180   	fcall	_uart1_send_byte
 16126                           
 16127                           ;handle_floor.c: 281: uart1_send_byte(0xF1);
 16128  0347  30F1               	movlw	241
 16129  0348  318A  22A2  3180   	fcall	_uart1_send_byte
 16130                           
 16131                           ;handle_floor.c: 282: uart1_send_byte(0x31);
 16132  034B  3031               	movlw	49
 16133  034C  318A  22A2  3180   	fcall	_uart1_send_byte
 16134                           
 16135                           ;handle_floor.c: 283: delay_ms(150);
 16136  034F  3096               	movlw	150
 16137  0350  00F0               	movwf	delay_ms@count
 16138  0351  01F1               	clrf	delay_ms@count+1
 16139  0352  318A  22C7  3180   	fcall	_delay_ms
 16140  0355                     l5560:	
 16141                           
 16142                           ;handle_floor.c: 284: }
 16143                           ;handle_floor.c: 285: if (floor[1] & 0x20)
 16144  0355  0020               	movlb	0	; select bank0
 16145  0356  1EA3               	btfss	deal_floor@floor+1,5
 16146  0357  2B6A               	goto	l5564
 16147                           
 16148                           ;handle_floor.c: 286: {
 16149                           ;handle_floor.c: 287: uart1_send_byte(0xF0);
 16150  0358  30F0               	movlw	240
 16151  0359  318A  22A2  3180   	fcall	_uart1_send_byte
 16152                           
 16153                           ;handle_floor.c: 288: uart1_send_byte(0xF1);
 16154  035C  30F1               	movlw	241
 16155  035D  318A  22A2  3180   	fcall	_uart1_send_byte
 16156                           
 16157                           ;handle_floor.c: 289: uart1_send_byte(0x32);
 16158  0360  3032               	movlw	50
 16159  0361  318A  22A2  3180   	fcall	_uart1_send_byte
 16160                           
 16161                           ;handle_floor.c: 290: delay_ms(150);
 16162  0364  3096               	movlw	150
 16163  0365  00F0               	movwf	delay_ms@count
 16164  0366  01F1               	clrf	delay_ms@count+1
 16165  0367  318A  22C7  3180   	fcall	_delay_ms
 16166  036A                     l5564:	
 16167                           
 16168                           ;handle_floor.c: 291: }
 16169                           ;handle_floor.c: 292: if (floor[1] & 0x40)
 16170  036A  0020               	movlb	0	; select bank0
 16171  036B  1F23               	btfss	deal_floor@floor+1,6
 16172  036C  2B7F               	goto	l5568
 16173                           
 16174                           ;handle_floor.c: 293: {
 16175                           ;handle_floor.c: 294: uart1_send_byte(0xF0);
 16176  036D  30F0               	movlw	240
 16177  036E  318A  22A2  3180   	fcall	_uart1_send_byte
 16178                           
 16179                           ;handle_floor.c: 295: uart1_send_byte(0xF1);
 16180  0371  30F1               	movlw	241
 16181  0372  318A  22A2  3180   	fcall	_uart1_send_byte
 16182                           
 16183                           ;handle_floor.c: 296: uart1_send_byte(0x34);
 16184  0375  3034               	movlw	52
 16185  0376  318A  22A2  3180   	fcall	_uart1_send_byte
 16186                           
 16187                           ;handle_floor.c: 297: delay_ms(150);
 16188  0379  3096               	movlw	150
 16189  037A  00F0               	movwf	delay_ms@count
 16190  037B  01F1               	clrf	delay_ms@count+1
 16191  037C  318A  22C7  3180   	fcall	_delay_ms
 16192  037F                     l5568:	
 16193                           
 16194                           ;handle_floor.c: 298: }
 16195                           ;handle_floor.c: 299: if (floor[1] & 0x80)
 16196  037F  0020               	movlb	0	; select bank0
 16197  0380  1FA3               	btfss	deal_floor@floor+1,7
 16198  0381  2B94               	goto	l5572
 16199                           
 16200                           ;handle_floor.c: 300: {
 16201                           ;handle_floor.c: 301: uart1_send_byte(0xF0);
 16202  0382  30F0               	movlw	240
 16203  0383  318A  22A2  3180   	fcall	_uart1_send_byte
 16204                           
 16205                           ;handle_floor.c: 302: uart1_send_byte(0xF1);
 16206  0386  30F1               	movlw	241
 16207  0387  318A  22A2  3180   	fcall	_uart1_send_byte
 16208                           
 16209                           ;handle_floor.c: 303: uart1_send_byte(0x38);
 16210  038A  3038               	movlw	56
 16211  038B  318A  22A2  3180   	fcall	_uart1_send_byte
 16212                           
 16213                           ;handle_floor.c: 304: delay_ms(150);
 16214  038E  3096               	movlw	150
 16215  038F  00F0               	movwf	delay_ms@count
 16216  0390  01F1               	clrf	delay_ms@count+1
 16217  0391  318A  22C7  3180   	fcall	_delay_ms
 16218  0394                     l5572:	
 16219                           
 16220                           ;handle_floor.c: 305: }
 16221                           ;handle_floor.c: 307: if (floor[2] & 0x01)
 16222  0394  0020               	movlb	0	; select bank0
 16223  0395  1C24               	btfss	deal_floor@floor+2,0
 16224  0396  2BA9               	goto	l5576
 16225                           
 16226                           ;handle_floor.c: 308: {
 16227                           ;handle_floor.c: 309: uart1_send_byte(0xF0);
 16228  0397  30F0               	movlw	240
 16229  0398  318A  22A2  3180   	fcall	_uart1_send_byte
 16230                           
 16231                           ;handle_floor.c: 310: uart1_send_byte(0xF1);
 16232  039B  30F1               	movlw	241
 16233  039C  318A  22A2  3180   	fcall	_uart1_send_byte
 16234                           
 16235                           ;handle_floor.c: 311: uart1_send_byte(0x41);
 16236  039F  3041               	movlw	65
 16237  03A0  318A  22A2  3180   	fcall	_uart1_send_byte
 16238                           
 16239                           ;handle_floor.c: 312: delay_ms(150);
 16240  03A3  3096               	movlw	150
 16241  03A4  00F0               	movwf	delay_ms@count
 16242  03A5  01F1               	clrf	delay_ms@count+1
 16243  03A6  318A  22C7  3180   	fcall	_delay_ms
 16244  03A9                     l5576:	
 16245                           
 16246                           ;handle_floor.c: 313: }
 16247                           ;handle_floor.c: 314: if (floor[2] & 0x02)
 16248  03A9  0020               	movlb	0	; select bank0
 16249  03AA  1CA4               	btfss	deal_floor@floor+2,1
 16250  03AB  2BBE               	goto	l5580
 16251                           
 16252                           ;handle_floor.c: 315: {
 16253                           ;handle_floor.c: 316: uart1_send_byte(0xF0);
 16254  03AC  30F0               	movlw	240
 16255  03AD  318A  22A2  3180   	fcall	_uart1_send_byte
 16256                           
 16257                           ;handle_floor.c: 317: uart1_send_byte(0xF1);
 16258  03B0  30F1               	movlw	241
 16259  03B1  318A  22A2  3180   	fcall	_uart1_send_byte
 16260                           
 16261                           ;handle_floor.c: 318: uart1_send_byte(0x42);
 16262  03B4  3042               	movlw	66
 16263  03B5  318A  22A2  3180   	fcall	_uart1_send_byte
 16264                           
 16265                           ;handle_floor.c: 319: delay_ms(150);
 16266  03B8  3096               	movlw	150
 16267  03B9  00F0               	movwf	delay_ms@count
 16268  03BA  01F1               	clrf	delay_ms@count+1
 16269  03BB  318A  22C7  3180   	fcall	_delay_ms
 16270  03BE                     l5580:	
 16271                           
 16272                           ;handle_floor.c: 320: }
 16273                           ;handle_floor.c: 321: if (floor[2] & 0x04)
 16274  03BE  0020               	movlb	0	; select bank0
 16275  03BF  1D24               	btfss	deal_floor@floor+2,2
 16276  03C0  2BD3               	goto	l5584
 16277                           
 16278                           ;handle_floor.c: 322: {
 16279                           ;handle_floor.c: 323: uart1_send_byte(0xF0);
 16280  03C1  30F0               	movlw	240
 16281  03C2  318A  22A2  3180   	fcall	_uart1_send_byte
 16282                           
 16283                           ;handle_floor.c: 324: uart1_send_byte(0xF1);
 16284  03C5  30F1               	movlw	241
 16285  03C6  318A  22A2  3180   	fcall	_uart1_send_byte
 16286                           
 16287                           ;handle_floor.c: 325: uart1_send_byte(0x44);
 16288  03C9  3044               	movlw	68
 16289  03CA  318A  22A2  3180   	fcall	_uart1_send_byte
 16290                           
 16291                           ;handle_floor.c: 326: delay_ms(150);
 16292  03CD  3096               	movlw	150
 16293  03CE  00F0               	movwf	delay_ms@count
 16294  03CF  01F1               	clrf	delay_ms@count+1
 16295  03D0  318A  22C7  3180   	fcall	_delay_ms
 16296  03D3                     l5584:	
 16297                           
 16298                           ;handle_floor.c: 327: }
 16299                           ;handle_floor.c: 328: if (floor[2] & 0x08)
 16300  03D3  0020               	movlb	0	; select bank0
 16301  03D4  1DA4               	btfss	deal_floor@floor+2,3
 16302  03D5  2BE8               	goto	l5588
 16303                           
 16304                           ;handle_floor.c: 329: {
 16305                           ;handle_floor.c: 330: uart1_send_byte(0xF0);
 16306  03D6  30F0               	movlw	240
 16307  03D7  318A  22A2  3180   	fcall	_uart1_send_byte
 16308                           
 16309                           ;handle_floor.c: 331: uart1_send_byte(0xF1);
 16310  03DA  30F1               	movlw	241
 16311  03DB  318A  22A2  3180   	fcall	_uart1_send_byte
 16312                           
 16313                           ;handle_floor.c: 332: uart1_send_byte(0x48);
 16314  03DE  3048               	movlw	72
 16315  03DF  318A  22A2  3180   	fcall	_uart1_send_byte
 16316                           
 16317                           ;handle_floor.c: 333: delay_ms(150);
 16318  03E2  3096               	movlw	150
 16319  03E3  00F0               	movwf	delay_ms@count
 16320  03E4  01F1               	clrf	delay_ms@count+1
 16321  03E5  318A  22C7  3180   	fcall	_delay_ms
 16322  03E8                     l5588:	
 16323                           
 16324                           ;handle_floor.c: 334: }
 16325                           ;handle_floor.c: 335: if (floor[2] & 0x10)
 16326  03E8  0020               	movlb	0	; select bank0
 16327  03E9  1E24               	btfss	deal_floor@floor+2,4
 16328  03EA  2BFD               	goto	l5592
 16329                           
 16330                           ;handle_floor.c: 336: {
 16331                           ;handle_floor.c: 337: uart1_send_byte(0xF0);
 16332  03EB  30F0               	movlw	240
 16333  03EC  318A  22A2  3180   	fcall	_uart1_send_byte
 16334                           
 16335                           ;handle_floor.c: 338: uart1_send_byte(0xF1);
 16336  03EF  30F1               	movlw	241
 16337  03F0  318A  22A2  3180   	fcall	_uart1_send_byte
 16338                           
 16339                           ;handle_floor.c: 339: uart1_send_byte(0x51);
 16340  03F3  3051               	movlw	81
 16341  03F4  318A  22A2  3180   	fcall	_uart1_send_byte
 16342                           
 16343                           ;handle_floor.c: 340: delay_ms(150);
 16344  03F7  3096               	movlw	150
 16345  03F8  00F0               	movwf	delay_ms@count
 16346  03F9  01F1               	clrf	delay_ms@count+1
 16347  03FA  318A  22C7  3180   	fcall	_delay_ms
 16348  03FD                     l5592:	
 16349                           
 16350                           ;handle_floor.c: 341: }
 16351                           ;handle_floor.c: 342: if (floor[2] & 0x20)
 16352  03FD  0020               	movlb	0	; select bank0
 16353  03FE  1EA4               	btfss	deal_floor@floor+2,5
 16354  03FF  2C12               	goto	l5596
 16355                           
 16356                           ;handle_floor.c: 343: {
 16357                           ;handle_floor.c: 344: uart1_send_byte(0xF0);
 16358  0400  30F0               	movlw	240
 16359  0401  318A  22A2  3180   	fcall	_uart1_send_byte
 16360                           
 16361                           ;handle_floor.c: 345: uart1_send_byte(0xF1);
 16362  0404  30F1               	movlw	241
 16363  0405  318A  22A2  3180   	fcall	_uart1_send_byte
 16364                           
 16365                           ;handle_floor.c: 346: uart1_send_byte(0x52);
 16366  0408  3052               	movlw	82
 16367  0409  318A  22A2  3180   	fcall	_uart1_send_byte
 16368                           
 16369                           ;handle_floor.c: 347: delay_ms(150);
 16370  040C  3096               	movlw	150
 16371  040D  00F0               	movwf	delay_ms@count
 16372  040E  01F1               	clrf	delay_ms@count+1
 16373  040F  318A  22C7  3180   	fcall	_delay_ms
 16374  0412                     l5596:	
 16375                           
 16376                           ;handle_floor.c: 348: }
 16377                           ;handle_floor.c: 349: if (floor[2] & 0x40)
 16378  0412  0020               	movlb	0	; select bank0
 16379  0413  1F24               	btfss	deal_floor@floor+2,6
 16380  0414  2C27               	goto	l5600
 16381                           
 16382                           ;handle_floor.c: 350: {
 16383                           ;handle_floor.c: 351: uart1_send_byte(0xF0);
 16384  0415  30F0               	movlw	240
 16385  0416  318A  22A2  3180   	fcall	_uart1_send_byte
 16386                           
 16387                           ;handle_floor.c: 352: uart1_send_byte(0xF1);
 16388  0419  30F1               	movlw	241
 16389  041A  318A  22A2  3180   	fcall	_uart1_send_byte
 16390                           
 16391                           ;handle_floor.c: 353: uart1_send_byte(0x54);
 16392  041D  3054               	movlw	84
 16393  041E  318A  22A2  3180   	fcall	_uart1_send_byte
 16394                           
 16395                           ;handle_floor.c: 354: delay_ms(150);
 16396  0421  3096               	movlw	150
 16397  0422  00F0               	movwf	delay_ms@count
 16398  0423  01F1               	clrf	delay_ms@count+1
 16399  0424  318A  22C7  3180   	fcall	_delay_ms
 16400  0427                     l5600:	
 16401                           
 16402                           ;handle_floor.c: 355: }
 16403                           ;handle_floor.c: 356: if (floor[2] & 0x80)
 16404  0427  0020               	movlb	0	; select bank0
 16405  0428  1FA4               	btfss	deal_floor@floor+2,7
 16406  0429  2C3C               	goto	l5604
 16407                           
 16408                           ;handle_floor.c: 357: {
 16409                           ;handle_floor.c: 358: uart1_send_byte(0xF0);
 16410  042A  30F0               	movlw	240
 16411  042B  318A  22A2  3180   	fcall	_uart1_send_byte
 16412                           
 16413                           ;handle_floor.c: 359: uart1_send_byte(0xF1);
 16414  042E  30F1               	movlw	241
 16415  042F  318A  22A2  3180   	fcall	_uart1_send_byte
 16416                           
 16417                           ;handle_floor.c: 360: uart1_send_byte(0x58);
 16418  0432  3058               	movlw	88
 16419  0433  318A  22A2  3180   	fcall	_uart1_send_byte
 16420                           
 16421                           ;handle_floor.c: 361: delay_ms(150);
 16422  0436  3096               	movlw	150
 16423  0437  00F0               	movwf	delay_ms@count
 16424  0438  01F1               	clrf	delay_ms@count+1
 16425  0439  318A  22C7  3180   	fcall	_delay_ms
 16426  043C                     l5604:	
 16427                           
 16428                           ;handle_floor.c: 362: }
 16429                           ;handle_floor.c: 364: if (floor[3] & 0x01)
 16430  043C  0020               	movlb	0	; select bank0
 16431  043D  1C25               	btfss	deal_floor@floor+3,0
 16432  043E  2C51               	goto	l5608
 16433                           
 16434                           ;handle_floor.c: 365: {
 16435                           ;handle_floor.c: 366: uart1_send_byte(0xF0);
 16436  043F  30F0               	movlw	240
 16437  0440  318A  22A2  3180   	fcall	_uart1_send_byte
 16438                           
 16439                           ;handle_floor.c: 367: uart1_send_byte(0xF1);
 16440  0443  30F1               	movlw	241
 16441  0444  318A  22A2  3180   	fcall	_uart1_send_byte
 16442                           
 16443                           ;handle_floor.c: 368: uart1_send_byte(0x61);
 16444  0447  3061               	movlw	97
 16445  0448  318A  22A2  3180   	fcall	_uart1_send_byte
 16446                           
 16447                           ;handle_floor.c: 369: delay_ms(150);
 16448  044B  3096               	movlw	150
 16449  044C  00F0               	movwf	delay_ms@count
 16450  044D  01F1               	clrf	delay_ms@count+1
 16451  044E  318A  22C7  3180   	fcall	_delay_ms
 16452  0451                     l5608:	
 16453                           
 16454                           ;handle_floor.c: 370: }
 16455                           ;handle_floor.c: 371: if (floor[3] & 0x02)
 16456  0451  0020               	movlb	0	; select bank0
 16457  0452  1CA5               	btfss	deal_floor@floor+3,1
 16458  0453  2C66               	goto	l5612
 16459                           
 16460                           ;handle_floor.c: 372: {
 16461                           ;handle_floor.c: 373: uart1_send_byte(0xF0);
 16462  0454  30F0               	movlw	240
 16463  0455  318A  22A2  3180   	fcall	_uart1_send_byte
 16464                           
 16465                           ;handle_floor.c: 374: uart1_send_byte(0xF1);
 16466  0458  30F1               	movlw	241
 16467  0459  318A  22A2  3180   	fcall	_uart1_send_byte
 16468                           
 16469                           ;handle_floor.c: 375: uart1_send_byte(0x62);
 16470  045C  3062               	movlw	98
 16471  045D  318A  22A2  3180   	fcall	_uart1_send_byte
 16472                           
 16473                           ;handle_floor.c: 376: delay_ms(150);
 16474  0460  3096               	movlw	150
 16475  0461  00F0               	movwf	delay_ms@count
 16476  0462  01F1               	clrf	delay_ms@count+1
 16477  0463  318A  22C7  3180   	fcall	_delay_ms
 16478  0466                     l5612:	
 16479                           
 16480                           ;handle_floor.c: 377: }
 16481                           ;handle_floor.c: 378: if (floor[3] & 0x04)
 16482  0466  0020               	movlb	0	; select bank0
 16483  0467  1D25               	btfss	deal_floor@floor+3,2
 16484  0468  2C7B               	goto	l5616
 16485                           
 16486                           ;handle_floor.c: 379: {
 16487                           ;handle_floor.c: 380: uart1_send_byte(0xF0);
 16488  0469  30F0               	movlw	240
 16489  046A  318A  22A2  3180   	fcall	_uart1_send_byte
 16490                           
 16491                           ;handle_floor.c: 381: uart1_send_byte(0xF1);
 16492  046D  30F1               	movlw	241
 16493  046E  318A  22A2  3180   	fcall	_uart1_send_byte
 16494                           
 16495                           ;handle_floor.c: 382: uart1_send_byte(0x64);
 16496  0471  3064               	movlw	100
 16497  0472  318A  22A2  3180   	fcall	_uart1_send_byte
 16498                           
 16499                           ;handle_floor.c: 383: delay_ms(150);
 16500  0475  3096               	movlw	150
 16501  0476  00F0               	movwf	delay_ms@count
 16502  0477  01F1               	clrf	delay_ms@count+1
 16503  0478  318A  22C7  3180   	fcall	_delay_ms
 16504  047B                     l5616:	
 16505                           
 16506                           ;handle_floor.c: 384: }
 16507                           ;handle_floor.c: 385: if (floor[3] & 0x08)
 16508  047B  0020               	movlb	0	; select bank0
 16509  047C  1DA5               	btfss	deal_floor@floor+3,3
 16510  047D  2C90               	goto	l5620
 16511                           
 16512                           ;handle_floor.c: 386: {
 16513                           ;handle_floor.c: 387: uart1_send_byte(0xF0);
 16514  047E  30F0               	movlw	240
 16515  047F  318A  22A2  3180   	fcall	_uart1_send_byte
 16516                           
 16517                           ;handle_floor.c: 388: uart1_send_byte(0xF1);
 16518  0482  30F1               	movlw	241
 16519  0483  318A  22A2  3180   	fcall	_uart1_send_byte
 16520                           
 16521                           ;handle_floor.c: 389: uart1_send_byte(0x68);
 16522  0486  3068               	movlw	104
 16523  0487  318A  22A2  3180   	fcall	_uart1_send_byte
 16524                           
 16525                           ;handle_floor.c: 390: delay_ms(150);
 16526  048A  3096               	movlw	150
 16527  048B  00F0               	movwf	delay_ms@count
 16528  048C  01F1               	clrf	delay_ms@count+1
 16529  048D  318A  22C7  3180   	fcall	_delay_ms
 16530  0490                     l5620:	
 16531                           
 16532                           ;handle_floor.c: 391: }
 16533                           ;handle_floor.c: 392: if (floor[3] & 0x10)
 16534  0490  0020               	movlb	0	; select bank0
 16535  0491  1E25               	btfss	deal_floor@floor+3,4
 16536  0492  2CA5               	goto	l5624
 16537                           
 16538                           ;handle_floor.c: 393: {
 16539                           ;handle_floor.c: 394: uart1_send_byte(0xF0);
 16540  0493  30F0               	movlw	240
 16541  0494  318A  22A2  3180   	fcall	_uart1_send_byte
 16542                           
 16543                           ;handle_floor.c: 395: uart1_send_byte(0xF1);
 16544  0497  30F1               	movlw	241
 16545  0498  318A  22A2  3180   	fcall	_uart1_send_byte
 16546                           
 16547                           ;handle_floor.c: 396: uart1_send_byte(0x71);
 16548  049B  3071               	movlw	113
 16549  049C  318A  22A2  3180   	fcall	_uart1_send_byte
 16550                           
 16551                           ;handle_floor.c: 397: delay_ms(150);
 16552  049F  3096               	movlw	150
 16553  04A0  00F0               	movwf	delay_ms@count
 16554  04A1  01F1               	clrf	delay_ms@count+1
 16555  04A2  318A  22C7  3180   	fcall	_delay_ms
 16556  04A5                     l5624:	
 16557                           
 16558                           ;handle_floor.c: 398: }
 16559                           ;handle_floor.c: 399: if (floor[3] & 0x20)
 16560  04A5  0020               	movlb	0	; select bank0
 16561  04A6  1EA5               	btfss	deal_floor@floor+3,5
 16562  04A7  2CBA               	goto	l5628
 16563                           
 16564                           ;handle_floor.c: 400: {
 16565                           ;handle_floor.c: 401: uart1_send_byte(0xF0);
 16566  04A8  30F0               	movlw	240
 16567  04A9  318A  22A2  3180   	fcall	_uart1_send_byte
 16568                           
 16569                           ;handle_floor.c: 402: uart1_send_byte(0xF1);
 16570  04AC  30F1               	movlw	241
 16571  04AD  318A  22A2  3180   	fcall	_uart1_send_byte
 16572                           
 16573                           ;handle_floor.c: 403: uart1_send_byte(0x72);
 16574  04B0  3072               	movlw	114
 16575  04B1  318A  22A2  3180   	fcall	_uart1_send_byte
 16576                           
 16577                           ;handle_floor.c: 404: delay_ms(150);
 16578  04B4  3096               	movlw	150
 16579  04B5  00F0               	movwf	delay_ms@count
 16580  04B6  01F1               	clrf	delay_ms@count+1
 16581  04B7  318A  22C7  3180   	fcall	_delay_ms
 16582  04BA                     l5628:	
 16583                           
 16584                           ;handle_floor.c: 405: }
 16585                           ;handle_floor.c: 406: if (floor[3] & 0x40)
 16586  04BA  0020               	movlb	0	; select bank0
 16587  04BB  1F25               	btfss	deal_floor@floor+3,6
 16588  04BC  2CCF               	goto	l5632
 16589                           
 16590                           ;handle_floor.c: 407: {
 16591                           ;handle_floor.c: 408: uart1_send_byte(0xF0);
 16592  04BD  30F0               	movlw	240
 16593  04BE  318A  22A2  3180   	fcall	_uart1_send_byte
 16594                           
 16595                           ;handle_floor.c: 409: uart1_send_byte(0xF1);
 16596  04C1  30F1               	movlw	241
 16597  04C2  318A  22A2  3180   	fcall	_uart1_send_byte
 16598                           
 16599                           ;handle_floor.c: 410: uart1_send_byte(0x74);
 16600  04C5  3074               	movlw	116
 16601  04C6  318A  22A2  3180   	fcall	_uart1_send_byte
 16602                           
 16603                           ;handle_floor.c: 411: delay_ms(150);
 16604  04C9  3096               	movlw	150
 16605  04CA  00F0               	movwf	delay_ms@count
 16606  04CB  01F1               	clrf	delay_ms@count+1
 16607  04CC  318A  22C7  3180   	fcall	_delay_ms
 16608  04CF                     l5632:	
 16609                           
 16610                           ;handle_floor.c: 412: }
 16611                           ;handle_floor.c: 413: if (floor[3] & 0x80)
 16612  04CF  0020               	movlb	0	; select bank0
 16613  04D0  1FA5               	btfss	deal_floor@floor+3,7
 16614  04D1  2CE4               	goto	l5636
 16615                           
 16616                           ;handle_floor.c: 414: {
 16617                           ;handle_floor.c: 415: uart1_send_byte(0xF0);
 16618  04D2  30F0               	movlw	240
 16619  04D3  318A  22A2  3180   	fcall	_uart1_send_byte
 16620                           
 16621                           ;handle_floor.c: 416: uart1_send_byte(0xF1);
 16622  04D6  30F1               	movlw	241
 16623  04D7  318A  22A2  3180   	fcall	_uart1_send_byte
 16624                           
 16625                           ;handle_floor.c: 417: uart1_send_byte(0x78);
 16626  04DA  3078               	movlw	120
 16627  04DB  318A  22A2  3180   	fcall	_uart1_send_byte
 16628                           
 16629                           ;handle_floor.c: 418: delay_ms(150);
 16630  04DE  3096               	movlw	150
 16631  04DF  00F0               	movwf	delay_ms@count
 16632  04E0  01F1               	clrf	delay_ms@count+1
 16633  04E1  318A  22C7  3180   	fcall	_delay_ms
 16634  04E4                     l5636:	
 16635                           
 16636                           ;handle_floor.c: 419: }
 16637                           ;handle_floor.c: 421: if (floor[4] & 0x01)
 16638  04E4  0020               	movlb	0	; select bank0
 16639  04E5  1C26               	btfss	deal_floor@floor+4,0
 16640  04E6  2CF9               	goto	l5640
 16641                           
 16642                           ;handle_floor.c: 422: {
 16643                           ;handle_floor.c: 423: uart1_send_byte(0xF0);
 16644  04E7  30F0               	movlw	240
 16645  04E8  318A  22A2  3180   	fcall	_uart1_send_byte
 16646                           
 16647                           ;handle_floor.c: 424: uart1_send_byte(0xF1);
 16648  04EB  30F1               	movlw	241
 16649  04EC  318A  22A2  3180   	fcall	_uart1_send_byte
 16650                           
 16651                           ;handle_floor.c: 425: uart1_send_byte(0x81);
 16652  04EF  3081               	movlw	129
 16653  04F0  318A  22A2  3180   	fcall	_uart1_send_byte
 16654                           
 16655                           ;handle_floor.c: 426: delay_ms(150);
 16656  04F3  3096               	movlw	150
 16657  04F4  00F0               	movwf	delay_ms@count
 16658  04F5  01F1               	clrf	delay_ms@count+1
 16659  04F6  318A  22C7  3180   	fcall	_delay_ms
 16660  04F9                     l5640:	
 16661                           
 16662                           ;handle_floor.c: 427: }
 16663                           ;handle_floor.c: 428: if (floor[4] & 0x02)
 16664  04F9  0020               	movlb	0	; select bank0
 16665  04FA  1CA6               	btfss	deal_floor@floor+4,1
 16666  04FB  2D0E               	goto	l5644
 16667                           
 16668                           ;handle_floor.c: 429: {
 16669                           ;handle_floor.c: 430: uart1_send_byte(0xF0);
 16670  04FC  30F0               	movlw	240
 16671  04FD  318A  22A2  3180   	fcall	_uart1_send_byte
 16672                           
 16673                           ;handle_floor.c: 431: uart1_send_byte(0xF1);
 16674  0500  30F1               	movlw	241
 16675  0501  318A  22A2  3180   	fcall	_uart1_send_byte
 16676                           
 16677                           ;handle_floor.c: 432: uart1_send_byte(0x82);
 16678  0504  3082               	movlw	130
 16679  0505  318A  22A2  3180   	fcall	_uart1_send_byte
 16680                           
 16681                           ;handle_floor.c: 433: delay_ms(150);
 16682  0508  3096               	movlw	150
 16683  0509  00F0               	movwf	delay_ms@count
 16684  050A  01F1               	clrf	delay_ms@count+1
 16685  050B  318A  22C7  3180   	fcall	_delay_ms
 16686  050E                     l5644:	
 16687                           
 16688                           ;handle_floor.c: 434: }
 16689                           ;handle_floor.c: 435: if (floor[4] & 0x04)
 16690  050E  0020               	movlb	0	; select bank0
 16691  050F  1D26               	btfss	deal_floor@floor+4,2
 16692  0510  2D23               	goto	l5648
 16693                           
 16694                           ;handle_floor.c: 436: {
 16695                           ;handle_floor.c: 437: uart1_send_byte(0xF0);
 16696  0511  30F0               	movlw	240
 16697  0512  318A  22A2  3180   	fcall	_uart1_send_byte
 16698                           
 16699                           ;handle_floor.c: 438: uart1_send_byte(0xF1);
 16700  0515  30F1               	movlw	241
 16701  0516  318A  22A2  3180   	fcall	_uart1_send_byte
 16702                           
 16703                           ;handle_floor.c: 439: uart1_send_byte(0x84);
 16704  0519  3084               	movlw	132
 16705  051A  318A  22A2  3180   	fcall	_uart1_send_byte
 16706                           
 16707                           ;handle_floor.c: 440: delay_ms(150);
 16708  051D  3096               	movlw	150
 16709  051E  00F0               	movwf	delay_ms@count
 16710  051F  01F1               	clrf	delay_ms@count+1
 16711  0520  318A  22C7  3180   	fcall	_delay_ms
 16712  0523                     l5648:	
 16713                           
 16714                           ;handle_floor.c: 441: }
 16715                           ;handle_floor.c: 442: if (floor[4] & 0x08)
 16716  0523  0020               	movlb	0	; select bank0
 16717  0524  1DA6               	btfss	deal_floor@floor+4,3
 16718  0525  2D38               	goto	l5652
 16719                           
 16720                           ;handle_floor.c: 443: {
 16721                           ;handle_floor.c: 444: uart1_send_byte(0xF0);
 16722  0526  30F0               	movlw	240
 16723  0527  318A  22A2  3180   	fcall	_uart1_send_byte
 16724                           
 16725                           ;handle_floor.c: 445: uart1_send_byte(0xF1);
 16726  052A  30F1               	movlw	241
 16727  052B  318A  22A2  3180   	fcall	_uart1_send_byte
 16728                           
 16729                           ;handle_floor.c: 446: uart1_send_byte(0x88);
 16730  052E  3088               	movlw	136
 16731  052F  318A  22A2  3180   	fcall	_uart1_send_byte
 16732                           
 16733                           ;handle_floor.c: 447: delay_ms(150);
 16734  0532  3096               	movlw	150
 16735  0533  00F0               	movwf	delay_ms@count
 16736  0534  01F1               	clrf	delay_ms@count+1
 16737  0535  318A  22C7  3180   	fcall	_delay_ms
 16738  0538                     l5652:	
 16739                           
 16740                           ;handle_floor.c: 448: }
 16741                           ;handle_floor.c: 449: if (floor[4] & 0x10)
 16742  0538  0020               	movlb	0	; select bank0
 16743  0539  1E26               	btfss	deal_floor@floor+4,4
 16744  053A  2D4D               	goto	l5656
 16745                           
 16746                           ;handle_floor.c: 450: {
 16747                           ;handle_floor.c: 451: uart1_send_byte(0xF0);
 16748  053B  30F0               	movlw	240
 16749  053C  318A  22A2  3180   	fcall	_uart1_send_byte
 16750                           
 16751                           ;handle_floor.c: 452: uart1_send_byte(0xF1);
 16752  053F  30F1               	movlw	241
 16753  0540  318A  22A2  3180   	fcall	_uart1_send_byte
 16754                           
 16755                           ;handle_floor.c: 453: uart1_send_byte(0x91);
 16756  0543  3091               	movlw	145
 16757  0544  318A  22A2  3180   	fcall	_uart1_send_byte
 16758                           
 16759                           ;handle_floor.c: 454: delay_ms(150);
 16760  0547  3096               	movlw	150
 16761  0548  00F0               	movwf	delay_ms@count
 16762  0549  01F1               	clrf	delay_ms@count+1
 16763  054A  318A  22C7  3180   	fcall	_delay_ms
 16764  054D                     l5656:	
 16765                           
 16766                           ;handle_floor.c: 455: }
 16767                           ;handle_floor.c: 456: if (floor[4] & 0x20)
 16768  054D  0020               	movlb	0	; select bank0
 16769  054E  1EA6               	btfss	deal_floor@floor+4,5
 16770  054F  2D62               	goto	l5660
 16771                           
 16772                           ;handle_floor.c: 457: {
 16773                           ;handle_floor.c: 458: uart1_send_byte(0xF0);
 16774  0550  30F0               	movlw	240
 16775  0551  318A  22A2  3180   	fcall	_uart1_send_byte
 16776                           
 16777                           ;handle_floor.c: 459: uart1_send_byte(0xF1);
 16778  0554  30F1               	movlw	241
 16779  0555  318A  22A2  3180   	fcall	_uart1_send_byte
 16780                           
 16781                           ;handle_floor.c: 460: uart1_send_byte(0x92);
 16782  0558  3092               	movlw	146
 16783  0559  318A  22A2  3180   	fcall	_uart1_send_byte
 16784                           
 16785                           ;handle_floor.c: 461: delay_ms(150);
 16786  055C  3096               	movlw	150
 16787  055D  00F0               	movwf	delay_ms@count
 16788  055E  01F1               	clrf	delay_ms@count+1
 16789  055F  318A  22C7  3180   	fcall	_delay_ms
 16790  0562                     l5660:	
 16791                           
 16792                           ;handle_floor.c: 462: }
 16793                           ;handle_floor.c: 463: if (floor[4] & 0x40)
 16794  0562  0020               	movlb	0	; select bank0
 16795  0563  1F26               	btfss	deal_floor@floor+4,6
 16796  0564  2D77               	goto	l5664
 16797                           
 16798                           ;handle_floor.c: 464: {
 16799                           ;handle_floor.c: 465: uart1_send_byte(0xF0);
 16800  0565  30F0               	movlw	240
 16801  0566  318A  22A2  3180   	fcall	_uart1_send_byte
 16802                           
 16803                           ;handle_floor.c: 466: uart1_send_byte(0xF1);
 16804  0569  30F1               	movlw	241
 16805  056A  318A  22A2  3180   	fcall	_uart1_send_byte
 16806                           
 16807                           ;handle_floor.c: 467: uart1_send_byte(0x94);
 16808  056D  3094               	movlw	148
 16809  056E  318A  22A2  3180   	fcall	_uart1_send_byte
 16810                           
 16811                           ;handle_floor.c: 468: delay_ms(150);
 16812  0571  3096               	movlw	150
 16813  0572  00F0               	movwf	delay_ms@count
 16814  0573  01F1               	clrf	delay_ms@count+1
 16815  0574  318A  22C7  3180   	fcall	_delay_ms
 16816  0577                     l5664:	
 16817                           
 16818                           ;handle_floor.c: 469: }
 16819                           ;handle_floor.c: 470: if (floor[4] & 0x80)
 16820  0577  0020               	movlb	0	; select bank0
 16821  0578  1FA6               	btfss	deal_floor@floor+4,7
 16822  0579  2D8C               	goto	l5668
 16823                           
 16824                           ;handle_floor.c: 471: {
 16825                           ;handle_floor.c: 472: uart1_send_byte(0xF0);
 16826  057A  30F0               	movlw	240
 16827  057B  318A  22A2  3180   	fcall	_uart1_send_byte
 16828                           
 16829                           ;handle_floor.c: 473: uart1_send_byte(0xF1);
 16830  057E  30F1               	movlw	241
 16831  057F  318A  22A2  3180   	fcall	_uart1_send_byte
 16832                           
 16833                           ;handle_floor.c: 474: uart1_send_byte(0x98);
 16834  0582  3098               	movlw	152
 16835  0583  318A  22A2  3180   	fcall	_uart1_send_byte
 16836                           
 16837                           ;handle_floor.c: 475: delay_ms(150);
 16838  0586  3096               	movlw	150
 16839  0587  00F0               	movwf	delay_ms@count
 16840  0588  01F1               	clrf	delay_ms@count+1
 16841  0589  318A  22C7  3180   	fcall	_delay_ms
 16842  058C                     l5668:	
 16843                           
 16844                           ;handle_floor.c: 476: }
 16845                           ;handle_floor.c: 478: if (floor[5] & 0x01)
 16846  058C  0020               	movlb	0	; select bank0
 16847  058D  1C27               	btfss	deal_floor@floor+5,0
 16848  058E  2DA1               	goto	l5672
 16849                           
 16850                           ;handle_floor.c: 479: {
 16851                           ;handle_floor.c: 480: uart1_send_byte(0xF0);
 16852  058F  30F0               	movlw	240
 16853  0590  318A  22A2  3180   	fcall	_uart1_send_byte
 16854                           
 16855                           ;handle_floor.c: 481: uart1_send_byte(0xF1);
 16856  0593  30F1               	movlw	241
 16857  0594  318A  22A2  3180   	fcall	_uart1_send_byte
 16858                           
 16859                           ;handle_floor.c: 482: uart1_send_byte(0xA1);
 16860  0597  30A1               	movlw	161
 16861  0598  318A  22A2  3180   	fcall	_uart1_send_byte
 16862                           
 16863                           ;handle_floor.c: 483: delay_ms(150);
 16864  059B  3096               	movlw	150
 16865  059C  00F0               	movwf	delay_ms@count
 16866  059D  01F1               	clrf	delay_ms@count+1
 16867  059E  318A  22C7  3180   	fcall	_delay_ms
 16868  05A1                     l5672:	
 16869                           
 16870                           ;handle_floor.c: 484: }
 16871                           ;handle_floor.c: 485: if (floor[5] & 0x02)
 16872  05A1  0020               	movlb	0	; select bank0
 16873  05A2  1CA7               	btfss	deal_floor@floor+5,1
 16874  05A3  2DB6               	goto	l5676
 16875                           
 16876                           ;handle_floor.c: 486: {
 16877                           ;handle_floor.c: 487: uart1_send_byte(0xF0);
 16878  05A4  30F0               	movlw	240
 16879  05A5  318A  22A2  3180   	fcall	_uart1_send_byte
 16880                           
 16881                           ;handle_floor.c: 488: uart1_send_byte(0xF1);
 16882  05A8  30F1               	movlw	241
 16883  05A9  318A  22A2  3180   	fcall	_uart1_send_byte
 16884                           
 16885                           ;handle_floor.c: 489: uart1_send_byte(0xA2);
 16886  05AC  30A2               	movlw	162
 16887  05AD  318A  22A2  3180   	fcall	_uart1_send_byte
 16888                           
 16889                           ;handle_floor.c: 490: delay_ms(150);
 16890  05B0  3096               	movlw	150
 16891  05B1  00F0               	movwf	delay_ms@count
 16892  05B2  01F1               	clrf	delay_ms@count+1
 16893  05B3  318A  22C7  3180   	fcall	_delay_ms
 16894  05B6                     l5676:	
 16895                           
 16896                           ;handle_floor.c: 491: }
 16897                           ;handle_floor.c: 492: if (floor[5] & 0x04)
 16898  05B6  0020               	movlb	0	; select bank0
 16899  05B7  1D27               	btfss	deal_floor@floor+5,2
 16900  05B8  2DCB               	goto	l5680
 16901                           
 16902                           ;handle_floor.c: 493: {
 16903                           ;handle_floor.c: 494: uart1_send_byte(0xF0);
 16904  05B9  30F0               	movlw	240
 16905  05BA  318A  22A2  3180   	fcall	_uart1_send_byte
 16906                           
 16907                           ;handle_floor.c: 495: uart1_send_byte(0xF1);
 16908  05BD  30F1               	movlw	241
 16909  05BE  318A  22A2  3180   	fcall	_uart1_send_byte
 16910                           
 16911                           ;handle_floor.c: 496: uart1_send_byte(0xA4);
 16912  05C1  30A4               	movlw	164
 16913  05C2  318A  22A2  3180   	fcall	_uart1_send_byte
 16914                           
 16915                           ;handle_floor.c: 497: delay_ms(150);
 16916  05C5  3096               	movlw	150
 16917  05C6  00F0               	movwf	delay_ms@count
 16918  05C7  01F1               	clrf	delay_ms@count+1
 16919  05C8  318A  22C7  3180   	fcall	_delay_ms
 16920  05CB                     l5680:	
 16921                           
 16922                           ;handle_floor.c: 498: }
 16923                           ;handle_floor.c: 499: if (floor[5] & 0x08)
 16924  05CB  0020               	movlb	0	; select bank0
 16925  05CC  1DA7               	btfss	deal_floor@floor+5,3
 16926  05CD  2DE0               	goto	l5684
 16927                           
 16928                           ;handle_floor.c: 500: {
 16929                           ;handle_floor.c: 501: uart1_send_byte(0xF0);
 16930  05CE  30F0               	movlw	240
 16931  05CF  318A  22A2  3180   	fcall	_uart1_send_byte
 16932                           
 16933                           ;handle_floor.c: 502: uart1_send_byte(0xF1);
 16934  05D2  30F1               	movlw	241
 16935  05D3  318A  22A2  3180   	fcall	_uart1_send_byte
 16936                           
 16937                           ;handle_floor.c: 503: uart1_send_byte(0xA8);
 16938  05D6  30A8               	movlw	168
 16939  05D7  318A  22A2  3180   	fcall	_uart1_send_byte
 16940                           
 16941                           ;handle_floor.c: 504: delay_ms(150);
 16942  05DA  3096               	movlw	150
 16943  05DB  00F0               	movwf	delay_ms@count
 16944  05DC  01F1               	clrf	delay_ms@count+1
 16945  05DD  318A  22C7  3180   	fcall	_delay_ms
 16946  05E0                     l5684:	
 16947                           
 16948                           ;handle_floor.c: 505: }
 16949                           ;handle_floor.c: 506: if (floor[5] & 0x10)
 16950  05E0  0020               	movlb	0	; select bank0
 16951  05E1  1E27               	btfss	deal_floor@floor+5,4
 16952  05E2  2DF5               	goto	l5688
 16953                           
 16954                           ;handle_floor.c: 507: {
 16955                           ;handle_floor.c: 508: uart1_send_byte(0xF0);
 16956  05E3  30F0               	movlw	240
 16957  05E4  318A  22A2  3180   	fcall	_uart1_send_byte
 16958                           
 16959                           ;handle_floor.c: 509: uart1_send_byte(0xF1);
 16960  05E7  30F1               	movlw	241
 16961  05E8  318A  22A2  3180   	fcall	_uart1_send_byte
 16962                           
 16963                           ;handle_floor.c: 510: uart1_send_byte(0xB1);
 16964  05EB  30B1               	movlw	177
 16965  05EC  318A  22A2  3180   	fcall	_uart1_send_byte
 16966                           
 16967                           ;handle_floor.c: 511: delay_ms(150);
 16968  05EF  3096               	movlw	150
 16969  05F0  00F0               	movwf	delay_ms@count
 16970  05F1  01F1               	clrf	delay_ms@count+1
 16971  05F2  318A  22C7  3180   	fcall	_delay_ms
 16972  05F5                     l5688:	
 16973                           
 16974                           ;handle_floor.c: 512: }
 16975                           ;handle_floor.c: 513: if (floor[5] & 0x20)
 16976  05F5  0020               	movlb	0	; select bank0
 16977  05F6  1EA7               	btfss	deal_floor@floor+5,5
 16978  05F7  2E0A               	goto	l5692
 16979                           
 16980                           ;handle_floor.c: 514: {
 16981                           ;handle_floor.c: 515: uart1_send_byte(0xF0);
 16982  05F8  30F0               	movlw	240
 16983  05F9  318A  22A2  3180   	fcall	_uart1_send_byte
 16984                           
 16985                           ;handle_floor.c: 516: uart1_send_byte(0xF1);
 16986  05FC  30F1               	movlw	241
 16987  05FD  318A  22A2  3180   	fcall	_uart1_send_byte
 16988                           
 16989                           ;handle_floor.c: 517: uart1_send_byte(0xB2);
 16990  0600  30B2               	movlw	178
 16991  0601  318A  22A2  3180   	fcall	_uart1_send_byte
 16992                           
 16993                           ;handle_floor.c: 518: delay_ms(150);
 16994  0604  3096               	movlw	150
 16995  0605  00F0               	movwf	delay_ms@count
 16996  0606  01F1               	clrf	delay_ms@count+1
 16997  0607  318A  22C7  3180   	fcall	_delay_ms
 16998  060A                     l5692:	
 16999                           
 17000                           ;handle_floor.c: 519: }
 17001                           ;handle_floor.c: 520: if (floor[5] & 0x40)
 17002  060A  0020               	movlb	0	; select bank0
 17003  060B  1F27               	btfss	deal_floor@floor+5,6
 17004  060C  2E1F               	goto	l5696
 17005                           
 17006                           ;handle_floor.c: 521: {
 17007                           ;handle_floor.c: 522: uart1_send_byte(0xF0);
 17008  060D  30F0               	movlw	240
 17009  060E  318A  22A2  3180   	fcall	_uart1_send_byte
 17010                           
 17011                           ;handle_floor.c: 523: uart1_send_byte(0xF1);
 17012  0611  30F1               	movlw	241
 17013  0612  318A  22A2  3180   	fcall	_uart1_send_byte
 17014                           
 17015                           ;handle_floor.c: 524: uart1_send_byte(0xB4);
 17016  0615  30B4               	movlw	180
 17017  0616  318A  22A2  3180   	fcall	_uart1_send_byte
 17018                           
 17019                           ;handle_floor.c: 525: delay_ms(150);
 17020  0619  3096               	movlw	150
 17021  061A  00F0               	movwf	delay_ms@count
 17022  061B  01F1               	clrf	delay_ms@count+1
 17023  061C  318A  22C7  3180   	fcall	_delay_ms
 17024  061F                     l5696:	
 17025                           
 17026                           ;handle_floor.c: 526: }
 17027                           ;handle_floor.c: 527: if (floor[5] & 0x80)
 17028  061F  0020               	movlb	0	; select bank0
 17029  0620  1FA7               	btfss	deal_floor@floor+5,7
 17030  0621  2E34               	goto	l5700
 17031                           
 17032                           ;handle_floor.c: 528: {
 17033                           ;handle_floor.c: 529: uart1_send_byte(0xF0);
 17034  0622  30F0               	movlw	240
 17035  0623  318A  22A2  3180   	fcall	_uart1_send_byte
 17036                           
 17037                           ;handle_floor.c: 530: uart1_send_byte(0xF1);
 17038  0626  30F1               	movlw	241
 17039  0627  318A  22A2  3180   	fcall	_uart1_send_byte
 17040                           
 17041                           ;handle_floor.c: 531: uart1_send_byte(0xB8);
 17042  062A  30B8               	movlw	184
 17043  062B  318A  22A2  3180   	fcall	_uart1_send_byte
 17044                           
 17045                           ;handle_floor.c: 532: delay_ms(150);
 17046  062E  3096               	movlw	150
 17047  062F  00F0               	movwf	delay_ms@count
 17048  0630  01F1               	clrf	delay_ms@count+1
 17049  0631  318A  22C7  3180   	fcall	_delay_ms
 17050  0634                     l5700:	
 17051                           
 17052                           ;handle_floor.c: 533: }
 17053                           ;handle_floor.c: 535: if (floor[6] & 0x01)
 17054  0634  0020               	movlb	0	; select bank0
 17055  0635  1C28               	btfss	deal_floor@floor+6,0
 17056  0636  2E49               	goto	l5704
 17057                           
 17058                           ;handle_floor.c: 536: {
 17059                           ;handle_floor.c: 537: uart1_send_byte(0xF0);
 17060  0637  30F0               	movlw	240
 17061  0638  318A  22A2  3180   	fcall	_uart1_send_byte
 17062                           
 17063                           ;handle_floor.c: 538: uart1_send_byte(0xF1);
 17064  063B  30F1               	movlw	241
 17065  063C  318A  22A2  3180   	fcall	_uart1_send_byte
 17066                           
 17067                           ;handle_floor.c: 539: uart1_send_byte(0xC1);
 17068  063F  30C1               	movlw	193
 17069  0640  318A  22A2  3180   	fcall	_uart1_send_byte
 17070                           
 17071                           ;handle_floor.c: 540: delay_ms(150);
 17072  0643  3096               	movlw	150
 17073  0644  00F0               	movwf	delay_ms@count
 17074  0645  01F1               	clrf	delay_ms@count+1
 17075  0646  318A  22C7  3180   	fcall	_delay_ms
 17076  0649                     l5704:	
 17077                           
 17078                           ;handle_floor.c: 541: }
 17079                           ;handle_floor.c: 542: if (floor[6] & 0x02)
 17080  0649  0020               	movlb	0	; select bank0
 17081  064A  1CA8               	btfss	deal_floor@floor+6,1
 17082  064B  2E5E               	goto	l5708
 17083                           
 17084                           ;handle_floor.c: 543: {
 17085                           ;handle_floor.c: 544: uart1_send_byte(0xF0);
 17086  064C  30F0               	movlw	240
 17087  064D  318A  22A2  3180   	fcall	_uart1_send_byte
 17088                           
 17089                           ;handle_floor.c: 545: uart1_send_byte(0xF1);
 17090  0650  30F1               	movlw	241
 17091  0651  318A  22A2  3180   	fcall	_uart1_send_byte
 17092                           
 17093                           ;handle_floor.c: 546: uart1_send_byte(0xC2);
 17094  0654  30C2               	movlw	194
 17095  0655  318A  22A2  3180   	fcall	_uart1_send_byte
 17096                           
 17097                           ;handle_floor.c: 547: delay_ms(150);
 17098  0658  3096               	movlw	150
 17099  0659  00F0               	movwf	delay_ms@count
 17100  065A  01F1               	clrf	delay_ms@count+1
 17101  065B  318A  22C7  3180   	fcall	_delay_ms
 17102  065E                     l5708:	
 17103                           
 17104                           ;handle_floor.c: 548: }
 17105                           ;handle_floor.c: 549: if (floor[6] & 0x04)
 17106  065E  0020               	movlb	0	; select bank0
 17107  065F  1D28               	btfss	deal_floor@floor+6,2
 17108  0660  2E73               	goto	l5712
 17109                           
 17110                           ;handle_floor.c: 550: {
 17111                           ;handle_floor.c: 551: uart1_send_byte(0xF0);
 17112  0661  30F0               	movlw	240
 17113  0662  318A  22A2  3180   	fcall	_uart1_send_byte
 17114                           
 17115                           ;handle_floor.c: 552: uart1_send_byte(0xF1);
 17116  0665  30F1               	movlw	241
 17117  0666  318A  22A2  3180   	fcall	_uart1_send_byte
 17118                           
 17119                           ;handle_floor.c: 553: uart1_send_byte(0xC4);
 17120  0669  30C4               	movlw	196
 17121  066A  318A  22A2  3180   	fcall	_uart1_send_byte
 17122                           
 17123                           ;handle_floor.c: 554: delay_ms(150);
 17124  066D  3096               	movlw	150
 17125  066E  00F0               	movwf	delay_ms@count
 17126  066F  01F1               	clrf	delay_ms@count+1
 17127  0670  318A  22C7  3180   	fcall	_delay_ms
 17128  0673                     l5712:	
 17129                           
 17130                           ;handle_floor.c: 555: }
 17131                           ;handle_floor.c: 556: if (floor[6] & 0x08)
 17132  0673  0020               	movlb	0	; select bank0
 17133  0674  1DA8               	btfss	deal_floor@floor+6,3
 17134  0675  2E88               	goto	l5716
 17135                           
 17136                           ;handle_floor.c: 557: {
 17137                           ;handle_floor.c: 558: uart1_send_byte(0xF0);
 17138  0676  30F0               	movlw	240
 17139  0677  318A  22A2  3180   	fcall	_uart1_send_byte
 17140                           
 17141                           ;handle_floor.c: 559: uart1_send_byte(0xF1);
 17142  067A  30F1               	movlw	241
 17143  067B  318A  22A2  3180   	fcall	_uart1_send_byte
 17144                           
 17145                           ;handle_floor.c: 560: uart1_send_byte(0xC8);
 17146  067E  30C8               	movlw	200
 17147  067F  318A  22A2  3180   	fcall	_uart1_send_byte
 17148                           
 17149                           ;handle_floor.c: 561: delay_ms(150);
 17150  0682  3096               	movlw	150
 17151  0683  00F0               	movwf	delay_ms@count
 17152  0684  01F1               	clrf	delay_ms@count+1
 17153  0685  318A  22C7  3180   	fcall	_delay_ms
 17154  0688                     l5716:	
 17155                           
 17156                           ;handle_floor.c: 562: }
 17157                           ;handle_floor.c: 563: if (floor[6] & 0x10)
 17158  0688  0020               	movlb	0	; select bank0
 17159  0689  1E28               	btfss	deal_floor@floor+6,4
 17160  068A  2E9D               	goto	l5720
 17161                           
 17162                           ;handle_floor.c: 564: {
 17163                           ;handle_floor.c: 565: uart1_send_byte(0xF0);
 17164  068B  30F0               	movlw	240
 17165  068C  318A  22A2  3180   	fcall	_uart1_send_byte
 17166                           
 17167                           ;handle_floor.c: 566: uart1_send_byte(0xF1);
 17168  068F  30F1               	movlw	241
 17169  0690  318A  22A2  3180   	fcall	_uart1_send_byte
 17170                           
 17171                           ;handle_floor.c: 567: uart1_send_byte(0xD1);
 17172  0693  30D1               	movlw	209
 17173  0694  318A  22A2  3180   	fcall	_uart1_send_byte
 17174                           
 17175                           ;handle_floor.c: 568: delay_ms(150);
 17176  0697  3096               	movlw	150
 17177  0698  00F0               	movwf	delay_ms@count
 17178  0699  01F1               	clrf	delay_ms@count+1
 17179  069A  318A  22C7  3180   	fcall	_delay_ms
 17180  069D                     l5720:	
 17181                           
 17182                           ;handle_floor.c: 569: }
 17183                           ;handle_floor.c: 570: if (floor[6] & 0x20)
 17184  069D  0020               	movlb	0	; select bank0
 17185  069E  1EA8               	btfss	deal_floor@floor+6,5
 17186  069F  2EB2               	goto	l5724
 17187                           
 17188                           ;handle_floor.c: 571: {
 17189                           ;handle_floor.c: 572: uart1_send_byte(0xF0);
 17190  06A0  30F0               	movlw	240
 17191  06A1  318A  22A2  3180   	fcall	_uart1_send_byte
 17192                           
 17193                           ;handle_floor.c: 573: uart1_send_byte(0xF1);
 17194  06A4  30F1               	movlw	241
 17195  06A5  318A  22A2  3180   	fcall	_uart1_send_byte
 17196                           
 17197                           ;handle_floor.c: 574: uart1_send_byte(0xD2);
 17198  06A8  30D2               	movlw	210
 17199  06A9  318A  22A2  3180   	fcall	_uart1_send_byte
 17200                           
 17201                           ;handle_floor.c: 575: delay_ms(150);
 17202  06AC  3096               	movlw	150
 17203  06AD  00F0               	movwf	delay_ms@count
 17204  06AE  01F1               	clrf	delay_ms@count+1
 17205  06AF  318A  22C7  3180   	fcall	_delay_ms
 17206  06B2                     l5724:	
 17207                           
 17208                           ;handle_floor.c: 576: }
 17209                           ;handle_floor.c: 577: if (floor[6] & 0x40)
 17210  06B2  0020               	movlb	0	; select bank0
 17211  06B3  1F28               	btfss	deal_floor@floor+6,6
 17212  06B4  2EC7               	goto	l5728
 17213                           
 17214                           ;handle_floor.c: 578: {
 17215                           ;handle_floor.c: 579: uart1_send_byte(0xF0);
 17216  06B5  30F0               	movlw	240
 17217  06B6  318A  22A2  3180   	fcall	_uart1_send_byte
 17218                           
 17219                           ;handle_floor.c: 580: uart1_send_byte(0xF1);
 17220  06B9  30F1               	movlw	241
 17221  06BA  318A  22A2  3180   	fcall	_uart1_send_byte
 17222                           
 17223                           ;handle_floor.c: 581: uart1_send_byte(0xD4);
 17224  06BD  30D4               	movlw	212
 17225  06BE  318A  22A2  3180   	fcall	_uart1_send_byte
 17226                           
 17227                           ;handle_floor.c: 582: delay_ms(150);
 17228  06C1  3096               	movlw	150
 17229  06C2  00F0               	movwf	delay_ms@count
 17230  06C3  01F1               	clrf	delay_ms@count+1
 17231  06C4  318A  22C7  3180   	fcall	_delay_ms
 17232  06C7                     l5728:	
 17233                           
 17234                           ;handle_floor.c: 583: }
 17235                           ;handle_floor.c: 584: if (floor[6] & 0x80)
 17236  06C7  0020               	movlb	0	; select bank0
 17237  06C8  1FA8               	btfss	deal_floor@floor+6,7
 17238  06C9  2EDC               	goto	l5732
 17239                           
 17240                           ;handle_floor.c: 585: {
 17241                           ;handle_floor.c: 586: uart1_send_byte(0xF0);
 17242  06CA  30F0               	movlw	240
 17243  06CB  318A  22A2  3180   	fcall	_uart1_send_byte
 17244                           
 17245                           ;handle_floor.c: 587: uart1_send_byte(0xF1);
 17246  06CE  30F1               	movlw	241
 17247  06CF  318A  22A2  3180   	fcall	_uart1_send_byte
 17248                           
 17249                           ;handle_floor.c: 588: uart1_send_byte(0xD8);
 17250  06D2  30D8               	movlw	216
 17251  06D3  318A  22A2  3180   	fcall	_uart1_send_byte
 17252                           
 17253                           ;handle_floor.c: 589: delay_ms(150);
 17254  06D6  3096               	movlw	150
 17255  06D7  00F0               	movwf	delay_ms@count
 17256  06D8  01F1               	clrf	delay_ms@count+1
 17257  06D9  318A  22C7  3180   	fcall	_delay_ms
 17258  06DC                     l5732:	
 17259                           
 17260                           ;handle_floor.c: 590: }
 17261                           ;handle_floor.c: 592: if (floor[7] & 0x01)
 17262  06DC  0020               	movlb	0	; select bank0
 17263  06DD  1C29               	btfss	deal_floor@floor+7,0
 17264  06DE  2EF1               	goto	l5736
 17265                           
 17266                           ;handle_floor.c: 593: {
 17267                           ;handle_floor.c: 594: uart1_send_byte(0xF0);
 17268  06DF  30F0               	movlw	240
 17269  06E0  318A  22A2  3180   	fcall	_uart1_send_byte
 17270                           
 17271                           ;handle_floor.c: 595: uart1_send_byte(0xF1);
 17272  06E3  30F1               	movlw	241
 17273  06E4  318A  22A2  3180   	fcall	_uart1_send_byte
 17274                           
 17275                           ;handle_floor.c: 596: uart1_send_byte(0xE1);
 17276  06E7  30E1               	movlw	225
 17277  06E8  318A  22A2  3180   	fcall	_uart1_send_byte
 17278                           
 17279                           ;handle_floor.c: 597: delay_ms(150);
 17280  06EB  3096               	movlw	150
 17281  06EC  00F0               	movwf	delay_ms@count
 17282  06ED  01F1               	clrf	delay_ms@count+1
 17283  06EE  318A  22C7  3180   	fcall	_delay_ms
 17284  06F1                     l5736:	
 17285                           
 17286                           ;handle_floor.c: 598: }
 17287                           ;handle_floor.c: 599: if (floor[7] & 0x02)
 17288  06F1  0020               	movlb	0	; select bank0
 17289  06F2  1CA9               	btfss	deal_floor@floor+7,1
 17290  06F3  2F06               	goto	l5740
 17291                           
 17292                           ;handle_floor.c: 600: {
 17293                           ;handle_floor.c: 601: uart1_send_byte(0xF0);
 17294  06F4  30F0               	movlw	240
 17295  06F5  318A  22A2  3180   	fcall	_uart1_send_byte
 17296                           
 17297                           ;handle_floor.c: 602: uart1_send_byte(0xF1);
 17298  06F8  30F1               	movlw	241
 17299  06F9  318A  22A2  3180   	fcall	_uart1_send_byte
 17300                           
 17301                           ;handle_floor.c: 603: uart1_send_byte(0xE2);
 17302  06FC  30E2               	movlw	226
 17303  06FD  318A  22A2  3180   	fcall	_uart1_send_byte
 17304                           
 17305                           ;handle_floor.c: 604: delay_ms(150);
 17306  0700  3096               	movlw	150
 17307  0701  00F0               	movwf	delay_ms@count
 17308  0702  01F1               	clrf	delay_ms@count+1
 17309  0703  318A  22C7  3180   	fcall	_delay_ms
 17310  0706                     l5740:	
 17311                           
 17312                           ;handle_floor.c: 605: }
 17313                           ;handle_floor.c: 606: if (floor[7] & 0x04)
 17314  0706  0020               	movlb	0	; select bank0
 17315  0707  1D29               	btfss	deal_floor@floor+7,2
 17316  0708  2F1B               	goto	l5744
 17317                           
 17318                           ;handle_floor.c: 607: {
 17319                           ;handle_floor.c: 608: uart1_send_byte(0xF0);
 17320  0709  30F0               	movlw	240
 17321  070A  318A  22A2  3180   	fcall	_uart1_send_byte
 17322                           
 17323                           ;handle_floor.c: 609: uart1_send_byte(0xF1);
 17324  070D  30F1               	movlw	241
 17325  070E  318A  22A2  3180   	fcall	_uart1_send_byte
 17326                           
 17327                           ;handle_floor.c: 610: uart1_send_byte(0xE4);
 17328  0711  30E4               	movlw	228
 17329  0712  318A  22A2  3180   	fcall	_uart1_send_byte
 17330                           
 17331                           ;handle_floor.c: 611: delay_ms(150);
 17332  0715  3096               	movlw	150
 17333  0716  00F0               	movwf	delay_ms@count
 17334  0717  01F1               	clrf	delay_ms@count+1
 17335  0718  318A  22C7  3180   	fcall	_delay_ms
 17336  071B                     l5744:	
 17337                           
 17338                           ;handle_floor.c: 612: }
 17339                           ;handle_floor.c: 613: if (floor[7] & 0x08)
 17340  071B  0020               	movlb	0	; select bank0
 17341  071C  1DA9               	btfss	deal_floor@floor+7,3
 17342  071D  2F30               	goto	l5748
 17343                           
 17344                           ;handle_floor.c: 614: {
 17345                           ;handle_floor.c: 615: uart1_send_byte(0xF0);
 17346  071E  30F0               	movlw	240
 17347  071F  318A  22A2  3180   	fcall	_uart1_send_byte
 17348                           
 17349                           ;handle_floor.c: 616: uart1_send_byte(0xF1);
 17350  0722  30F1               	movlw	241
 17351  0723  318A  22A2  3180   	fcall	_uart1_send_byte
 17352                           
 17353                           ;handle_floor.c: 617: uart1_send_byte(0xE8);
 17354  0726  30E8               	movlw	232
 17355  0727  318A  22A2  3180   	fcall	_uart1_send_byte
 17356                           
 17357                           ;handle_floor.c: 618: delay_ms(150);
 17358  072A  3096               	movlw	150
 17359  072B  00F0               	movwf	delay_ms@count
 17360  072C  01F1               	clrf	delay_ms@count+1
 17361  072D  318A  22C7  3180   	fcall	_delay_ms
 17362  0730                     l5748:	
 17363                           
 17364                           ;handle_floor.c: 619: }
 17365                           ;handle_floor.c: 620: if (floor[7] & 0x10)
 17366  0730  0020               	movlb	0	; select bank0
 17367  0731  1E29               	btfss	deal_floor@floor+7,4
 17368  0732  2F45               	goto	l5752
 17369                           
 17370                           ;handle_floor.c: 621: {
 17371                           ;handle_floor.c: 622: uart1_send_byte(0xF0);
 17372  0733  30F0               	movlw	240
 17373  0734  318A  22A2  3180   	fcall	_uart1_send_byte
 17374                           
 17375                           ;handle_floor.c: 623: uart1_send_byte(0xF1);
 17376  0737  30F1               	movlw	241
 17377  0738  318A  22A2  3180   	fcall	_uart1_send_byte
 17378                           
 17379                           ;handle_floor.c: 624: uart1_send_byte(0xF1);
 17380  073B  30F1               	movlw	241
 17381  073C  318A  22A2  3180   	fcall	_uart1_send_byte
 17382                           
 17383                           ;handle_floor.c: 625: delay_ms(150);
 17384  073F  3096               	movlw	150
 17385  0740  00F0               	movwf	delay_ms@count
 17386  0741  01F1               	clrf	delay_ms@count+1
 17387  0742  318A  22C7  3180   	fcall	_delay_ms
 17388  0745                     l5752:	
 17389                           
 17390                           ;handle_floor.c: 626: }
 17391                           ;handle_floor.c: 627: if (floor[7] & 0x20)
 17392  0745  0020               	movlb	0	; select bank0
 17393  0746  1EA9               	btfss	deal_floor@floor+7,5
 17394  0747  2F5A               	goto	l5756
 17395                           
 17396                           ;handle_floor.c: 628: {
 17397                           ;handle_floor.c: 629: uart1_send_byte(0xF0);
 17398  0748  30F0               	movlw	240
 17399  0749  318A  22A2  3180   	fcall	_uart1_send_byte
 17400                           
 17401                           ;handle_floor.c: 630: uart1_send_byte(0xF1);
 17402  074C  30F1               	movlw	241
 17403  074D  318A  22A2  3180   	fcall	_uart1_send_byte
 17404                           
 17405                           ;handle_floor.c: 631: uart1_send_byte(0xF2);
 17406  0750  30F2               	movlw	242
 17407  0751  318A  22A2  3180   	fcall	_uart1_send_byte
 17408                           
 17409                           ;handle_floor.c: 632: delay_ms(150);
 17410  0754  3096               	movlw	150
 17411  0755  00F0               	movwf	delay_ms@count
 17412  0756  01F1               	clrf	delay_ms@count+1
 17413  0757  318A  22C7  3180   	fcall	_delay_ms
 17414  075A                     l5756:	
 17415                           
 17416                           ;handle_floor.c: 633: }
 17417                           ;handle_floor.c: 634: if (floor[7] & 0x40)
 17418  075A  0020               	movlb	0	; select bank0
 17419  075B  1F29               	btfss	deal_floor@floor+7,6
 17420  075C  2F6F               	goto	l5760
 17421                           
 17422                           ;handle_floor.c: 635: {
 17423                           ;handle_floor.c: 636: uart1_send_byte(0xF0);
 17424  075D  30F0               	movlw	240
 17425  075E  318A  22A2  3180   	fcall	_uart1_send_byte
 17426                           
 17427                           ;handle_floor.c: 637: uart1_send_byte(0xF1);
 17428  0761  30F1               	movlw	241
 17429  0762  318A  22A2  3180   	fcall	_uart1_send_byte
 17430                           
 17431                           ;handle_floor.c: 638: uart1_send_byte(0xF4);
 17432  0765  30F4               	movlw	244
 17433  0766  318A  22A2  3180   	fcall	_uart1_send_byte
 17434                           
 17435                           ;handle_floor.c: 639: delay_ms(150);
 17436  0769  3096               	movlw	150
 17437  076A  00F0               	movwf	delay_ms@count
 17438  076B  01F1               	clrf	delay_ms@count+1
 17439  076C  318A  22C7  3180   	fcall	_delay_ms
 17440  076F                     l5760:	
 17441                           
 17442                           ;handle_floor.c: 640: }
 17443                           ;handle_floor.c: 641: if (floor[7] & 0x80)
 17444  076F  0020               	movlb	0	; select bank0
 17445  0770  1FA9               	btfss	deal_floor@floor+7,7
 17446  0771  0008               	return
 17447                           
 17448                           ;handle_floor.c: 642: {
 17449                           ;handle_floor.c: 643: uart1_send_byte(0xF0);
 17450  0772  30F0               	movlw	240
 17451  0773  318A  22A2  3180   	fcall	_uart1_send_byte
 17452                           
 17453                           ;handle_floor.c: 644: uart1_send_byte(0xF1);
 17454  0776  30F1               	movlw	241
 17455  0777  318A  22A2  3180   	fcall	_uart1_send_byte
 17456                           
 17457                           ;handle_floor.c: 645: uart1_send_byte(0xF8);
 17458  077A  30F8               	movlw	248
 17459  077B  318A  22A2  3180   	fcall	_uart1_send_byte
 17460                           
 17461                           ;handle_floor.c: 646: delay_ms(150);
 17462  077E  3096               	movlw	150
 17463  077F  00F0               	movwf	delay_ms@count
 17464  0780  01F1               	clrf	delay_ms@count+1
 17465  0781  318A  22C7         	fcall	_delay_ms
 17466  0783                     l289:	
 17467  0783  0008               	return
 17468  0784                     L31:	
 17469  0784                     __end_of_deal_floor:	
 17470  0784  3192  2A72         	ljmp	l5286


Data Sizes:
    Strings     5
    Constant    256
    Data        6
    BSS         117
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      80
    BANK1            80      0      73
    BANK2            80      0      16
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> Mf500PiccCascAnticoll@snr_in(BANK0[4]), MSndBuffer(BANK1[16]), snr_rc500(BANK1[4]), tt1(BANK1[2]), 
		 -> read_card_content@data(BANK0[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> Mf500PiccCascAnticoll@snr_in(BANK0[4]), MSndBuffer(BANK1[16]), snr_rc500(BANK1[4]), tt1(BANK1[2]), 
		 -> read_card_content@data(BANK0[16]), 

    memcpy@s1	PTR const void  size(2) Largest target is 16
		 -> STR_1(CODE[5]), Mf500PiccCascAnticoll@snr_in(BANK0[4]), MRcvBuffer(BANK1[16]), snr_rc500(BANK1[4]), 
		 -> read_card_content@data(BANK0[16]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[5]), Mf500PiccCascAnticoll@snr_in(BANK0[4]), MRcvBuffer(BANK1[16]), snr_rc500(BANK1[4]), 
		 -> read_card_content@data(BANK0[16]), 

    Mf500PiccWrite@data1	PTR unsigned char  size(1) Largest target is 16
		 -> read_card_content@data(BANK0[16]), 

    Mf500PiccRead@data1	PTR unsigned char  size(1) Largest target is 16
		 -> read_card_content@data(BANK0[16]), 

    Mf500PiccLoadKey@keys	PTR unsigned char  size(1) Largest target is 6
		 -> keys(BANK1[6]), keys_super(BANK1[6]), 

    Mf500PiccAuthState@snr	PTR unsigned char  size(1) Largest target is 4
		 -> snr_rc500(BANK1[4]), 

    Mf500HostCodeKey@coded	PTR unsigned char  size(1) Largest target is 16
		 -> MSndBuffer(BANK1[16]), 

    Mf500HostCodeKey@uncoded	PTR unsigned char  size(1) Largest target is 6
		 -> keys(BANK1[6]), keys_super(BANK1[6]), 

    Mf500PiccSelect@snr	PTR unsigned char  size(1) Largest target is 4
		 -> snr_rc500(BANK1[4]), 

    Mf500PiccCascSelect@snr	PTR unsigned char  size(1) Largest target is 4
		 -> snr_rc500(BANK1[4]), 

    Mf500PiccAnticoll@snr	PTR unsigned char  size(1) Largest target is 4
		 -> snr_rc500(BANK1[4]), 

    Mf500PiccCascAnticoll@snr	PTR unsigned char  size(1) Largest target is 4
		 -> snr_rc500(BANK1[4]), 

    Mf500PiccRequest@atq	PTR unsigned char  size(1) Largest target is 2
		 -> tt1(BANK1[2]), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> Mf500PiccCascAnticoll@snr_in(BANK0[4]), MSndBuffer(BANK1[16]), snr_rc500(BANK1[4]), tt1(BANK1[2]), 
		 -> read_card_content@data(BANK0[16]), 

    Mf500PiccCommonRequest@atq	PTR unsigned char  size(1) Largest target is 2
		 -> tt1(BANK1[2]), 

    MpIsrIn	PTR unsigned char  size(1) Largest target is 16
		 -> MRcvBuffer(BANK1[16]), NULL(NULL[0]), 

    MpIsrOut	PTR unsigned char  size(1) Largest target is 16
		 -> MSndBuffer(BANK1[16]), NULL(NULL[0]), 

    MpIsrInfo	PTR struct MfCmdInfo size(1) Largest target is 8
		 -> MInfo(BANK0[8]), NULL(NULL[0]), 

    checksum@data	PTR unsigned char  size(1) Largest target is 16
		 -> read_card_content@data(BANK0[16]), 

    deal_floor@data	PTR unsigned char  size(1) Largest target is 14
		 -> user_card(BANK1[14]), 


Critical Paths under _main in COMMON

    _init_hardware->_RC500Config
    _RC500OutSelect->_WriteRC
    _RC500Config->_PcdRfReset
    _PcdRfReset->_ClearBitMask
    _PcdRfReset->_SetBitMask
    _PcdReset->_GetRC500
    _PcdReset->_PutRC500
    _read_card_content->_Mf500PiccWrite
    _deal_floor->_delay_ms
    _check_user_card->_read_24c02
    _handle_beep->_delay_ms
    _rfcard->_Mf500PiccAnticoll
    _Mf500PiccRequest->_Mf500PiccCommonRequest
    _Mf500PiccAnticoll->_Mf500PiccCascAnticoll
    _Mf500PiccSelect->_Mf500PiccCascSelect
    _ClearBitMask->_WriteRC
    _checkpsw->_Mf500PiccAuthState
    _checkpsw->_Mf500PiccLoadKey
    _PcdSingleResponseCmd->_ISR_RC500
    _ISR_RC500->_GetRC500
    _ISR_RC500->_PutRC500
    _FlushFIFO->_SetBitMask
    _SetBitMask->_WriteRC
    _ReadRC->_GetRC500
    _ReadRC->_PutRC500
    _PcdSetTmo->_WriteRC
    _WriteRC->_PutRC500
    _handle_config->_write_24c02
    _write_24c02->_delay_ms
    _read_24c02->_rece_byte
    _read_24c02->_send_byte
    _ds1302_set_time->_ds1302_write
    _ds1302_write->_ds1302_write_byte
    _ds1302_get_time->_ds1302_read
    _ds1302_read->_ds1302_read_byte
    _ds1302_read->_ds1302_write_byte

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _handle_ic_card->_read_card_content
    _read_card_content->_Mf500PiccRead
    _Mf500PiccWrite->_PcdSingleResponseCmd
    _Mf500PiccRead->_PcdSingleResponseCmd
    _checkpsw_super->_rfcard
    _rfcard->_Mf500PiccAnticoll
    _Mf500PiccCommonRequest->_PcdSingleResponseCmd
    _Mf500PiccAnticoll->_Mf500PiccCascAnticoll
    _Mf500PiccCascAnticoll->_PcdSingleResponseCmd
    _read_id->_Mf500PiccSelect
    _Mf500PiccCascSelect->_PcdSingleResponseCmd
    _checkpsw->_Mf500PiccAuthState
    _Mf500PiccLoadKey->_PcdSingleResponseCmd
    _Mf500PiccAuthState->_PcdSingleResponseCmd

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  401206
                                             34 BANK0      5     5      0
                           _delay_ms
                      _handle_config
                     _handle_ic_card
                       _handle_timer
                      _init_hardware
                         _read_24c02
                    _uart1_send_byte
                        _write_24c02
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0   26787
                        _RC500Config
                     _RC500OutSelect
                          _init_beep
                        _init_ds1302
                           _init_i2c
                     _init_interrupt
                           _init_led
                       _init_mfrc500
                           _init_osc
                          _init_port
                        _init_timer1
                         _init_uart1
                         _init_uart2
 ---------------------------------------------------------------------------------
 (2) _init_uart2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_timer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_port                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_osc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_mfrc500                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_led                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds1302                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_beep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RC500OutSelect                                       1     1      0    3365
                                              5 COMMON     1     1      0
                            _WriteRC
 ---------------------------------------------------------------------------------
 (2) _RC500Config                                          2     2      0   23422
                                             12 COMMON     2     2      0
                       _ClearBitMask
                           _PcdReset
                         _PcdRfReset
                          _PcdSetTmo
                            _WriteRC
 ---------------------------------------------------------------------------------
 (3) _PcdRfReset                                           4     4      0    9689
                                              8 COMMON     4     4      0
                       _ClearBitMask
                         _SetBitMask
 ---------------------------------------------------------------------------------
 (3) _PcdReset                                             8     8      0    1398
                                              2 COMMON     8     8      0
                           _GetRC500
                           _PutRC500
 ---------------------------------------------------------------------------------
 (1) _handle_timer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_ic_card                                       0     0      0  350638
                           _checkpsw
                     _checkpsw_super
                        _handle_beep
                  _read_card_content
                            _read_id
                             _rfcard
                            _same_id
 ---------------------------------------------------------------------------------
 (2) _same_id                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _read_card_content                                   21    21      0   77398
                                             13 BANK0     21    21      0
                      _Mf500PiccRead
                     _Mf500PiccWrite
                    _check_user_card
                           _checksum
                         _deal_floor
                    _ds1302_get_time
                    _ds1302_set_time
                         _read_24c02
                    _uart1_send_byte
                        _write_24c02
 ---------------------------------------------------------------------------------
 (3) _deal_floor                                          11    11      0    9234
                                              6 COMMON     1     1      0
                                              0 BANK0     10    10      0
                           _delay_ms
                    _uart1_send_byte
 ---------------------------------------------------------------------------------
 (3) _checksum                                             5     4      1     275
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) _check_user_card                                      1     1      0     321
                                              4 COMMON     1     1      0
                         _read_24c02
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccWrite                                       3     2      1   29595
                                             11 COMMON     3     2      1
                          _FlushFIFO
                          _PcdSetTmo
               _PcdSingleResponseCmd
                            _WriteRC
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccRead                                        5     4      1   29763
                                             11 COMMON     2     1      1
                                             10 BANK0      3     3      0
                          _FlushFIFO
                          _PcdSetTmo
               _PcdSingleResponseCmd
                            _WriteRC
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _handle_beep                                          0     0      0    4650
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _checkpsw_super                                       0     0      0  134295
                 _Mf500PiccAuthState
                   _Mf500PiccLoadKey
                            _read_id
                             _rfcard
 ---------------------------------------------------------------------------------
 (2) _rfcard                                               1     1      0   56510
                                             30 BANK0      1     1      0
                  _Mf500PiccAnticoll
                   _Mf500PiccRequest
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccRequest                                     2     1      1   24925
                                             10 BANK0      2     1      1
             _Mf500PiccCommonRequest
 ---------------------------------------------------------------------------------
 (4) _Mf500PiccCommonRequest                               3     2      1   24828
                                             11 COMMON     3     2      1
                          _PcdSetTmo
               _PcdSingleResponseCmd
                            _WriteRC
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccAnticoll                                    2     1      1   31560
                                             13 COMMON     1     0      1
                                             29 BANK0      1     1      0
              _Mf500PiccCascAnticoll
 ---------------------------------------------------------------------------------
 (4) _Mf500PiccCascAnticoll                               21    19      2   31463
                                             11 COMMON     2     0      2
                                             10 BANK0     19    19      0
                       _ClearBitMask
                          _PcdSetTmo
               _PcdSingleResponseCmd
                            _WriteRC
                            ___awdiv
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     428
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _read_id                                              0     0      0   29714
                    _Mf500PiccSelect
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccSelect                                      1     1      0   29714
                                             10 BANK0      1     1      0
                _Mf500PiccCascSelect
 ---------------------------------------------------------------------------------
 (4) _Mf500PiccCascSelect                                  3     2      1   29665
                                             11 COMMON     3     2      1
                       _ClearBitMask
                          _PcdSetTmo
               _PcdSingleResponseCmd
                            _WriteRC
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _ClearBitMask                                         3     2      1    4860
                                              5 COMMON     3     2      1
                             _ReadRC
                            _WriteRC
 ---------------------------------------------------------------------------------
 (2) _checkpsw                                             0     0      0   48071
                 _Mf500PiccAuthState
                   _Mf500PiccLoadKey
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccLoadKey                                     2     2      0   25194
                                             11 COMMON     2     2      0
                          _FlushFIFO
                   _Mf500HostCodeKey
                          _PcdSetTmo
               _PcdSingleResponseCmd
 ---------------------------------------------------------------------------------
 (4) _Mf500HostCodeKey                                     7     6      1     420
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (3) _Mf500PiccAuthState                                   4     2      2   22877
                                             11 COMMON     2     0      2
                                             10 BANK0      2     2      0
                          _PcdSetTmo
               _PcdSingleResponseCmd
                             _ReadRC
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                               8     4      4    1398
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (5) _PcdSingleResponseCmd                                10    10      0   15910
                                              0 BANK0     10    10      0
                          _FlushFIFO
                          _ISR_RC500
                             _ReadRC
                         _SetBitMask
                            _WriteRC
 ---------------------------------------------------------------------------------
 (6) _ISR_RC500                                            9     9      0    1438
                                              2 COMMON     9     9      0
                           _GetRC500
                           _PutRC500
 ---------------------------------------------------------------------------------
 (6) _FlushFIFO                                            0     0      0    4754
                         _SetBitMask
 ---------------------------------------------------------------------------------
 (4) _SetBitMask                                           3     2      1    4754
                                              5 COMMON     3     2      1
                             _ReadRC
                            _WriteRC
 ---------------------------------------------------------------------------------
 (5) _ReadRC                                               2     2      0    1162
                                              2 COMMON     2     2      0
                           _GetRC500
                           _PutRC500
 ---------------------------------------------------------------------------------
 (6) _GetRC500                                             2     2      0      45
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _PcdSetTmo                                            2     0      2    4010
                                              5 COMMON     2     0      2
                            _WriteRC
 ---------------------------------------------------------------------------------
 (3) _WriteRC                                              3     2      1    3343
                                              2 COMMON     3     2      1
                           _PutRC500
 ---------------------------------------------------------------------------------
 (4) _PutRC500                                             2     1      1    1073
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _handle_config                                       11    11      0   12573
                                              8 COMMON     2     2      0
                                              0 BANK0      9     9      0
                           _delay_ms
                    _ds1302_get_time
                    _ds1302_set_time
                   _find_project_key
                         _read_24c02
                        _read_eeprom
                    _uart1_send_byte
                        _write_24c02
 ---------------------------------------------------------------------------------
 (1) _write_24c02                                          2     1      1    6077
                                              6 COMMON     2     1      1
                           _delay_ms
                          _send_byte
                          _start_i2c
                           _stop_i2c
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    4650
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _uart1_send_byte                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read_eeprom                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_24c02                                           2     2      0     187
                                              2 COMMON     2     2      0
                          _rece_byte
                          _send_byte
                          _start_i2c
                           _stop_i2c
 ---------------------------------------------------------------------------------
 (2) _stop_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _start_i2c                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _send_byte                                            2     2      0      69
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _rece_byte                                            2     2      0      72
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _find_project_key                                     3     3      0     112
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _ds1302_set_time                                      0     0      0     634
                       _ds1302_write
 ---------------------------------------------------------------------------------
 (4) _ds1302_write                                         2     1      1     634
                                              2 COMMON     2     1      1
                  _ds1302_write_byte
 ---------------------------------------------------------------------------------
 (3) _ds1302_get_time                                      0     0      0     185
                        _ds1302_read
 ---------------------------------------------------------------------------------
 (4) _ds1302_read                                          2     2      0     185
                                              2 COMMON     2     2      0
                   _ds1302_read_byte
                  _ds1302_write_byte
 ---------------------------------------------------------------------------------
 (5) _ds1302_write_byte                                    2     2      0      69
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ds1302_read_byte                                     2     2      0      71
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _isr                                                 1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _handle_config
     _delay_ms
     _ds1302_get_time
       _ds1302_read
         _ds1302_read_byte
         _ds1302_write_byte
     _ds1302_set_time
       _ds1302_write
         _ds1302_write_byte
     _find_project_key
     _read_24c02
       _rece_byte
       _send_byte
       _start_i2c
       _stop_i2c
     _read_eeprom
     _uart1_send_byte
     _write_24c02
       _delay_ms
       _send_byte
       _start_i2c
       _stop_i2c
   _handle_ic_card
     _checkpsw
       _Mf500PiccAuthState
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
         _ReadRC
           _GetRC500
           _PutRC500
         _memcpy
       _Mf500PiccLoadKey
         _FlushFIFO
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
         _Mf500HostCodeKey
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
     _checkpsw_super
       _Mf500PiccAuthState
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
         _ReadRC
           _GetRC500
           _PutRC500
         _memcpy
       _Mf500PiccLoadKey
         _FlushFIFO
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
         _Mf500HostCodeKey
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
       _read_id
         _Mf500PiccSelect
           _Mf500PiccCascSelect
             _ClearBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
             _PcdSetTmo
               _WriteRC
                 _PutRC500
             _PcdSingleResponseCmd
               _FlushFIFO
                 _SetBitMask
                   _ReadRC
                     _GetRC500
                     _PutRC500
                   _WriteRC
                     _PutRC500
               _ISR_RC500
                 _GetRC500
                 _PutRC500
               _ReadRC
                 _GetRC500
                 _PutRC500
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
             _memcpy
       _rfcard
         _Mf500PiccAnticoll
           _Mf500PiccCascAnticoll
             _ClearBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
             _PcdSetTmo
               _WriteRC
                 _PutRC500
             _PcdSingleResponseCmd
               _FlushFIFO
                 _SetBitMask
                   _ReadRC
                     _GetRC500
                     _PutRC500
                   _WriteRC
                     _PutRC500
               _ISR_RC500
                 _GetRC500
                 _PutRC500
               _ReadRC
                 _GetRC500
                 _PutRC500
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
             ___awdiv
             _memcpy
         _Mf500PiccRequest
           _Mf500PiccCommonRequest
             _PcdSetTmo
               _WriteRC
                 _PutRC500
             _PcdSingleResponseCmd
               _FlushFIFO
                 _SetBitMask
                   _ReadRC
                     _GetRC500
                     _PutRC500
                   _WriteRC
                     _PutRC500
               _ISR_RC500
                 _GetRC500
                 _PutRC500
               _ReadRC
                 _GetRC500
                 _PutRC500
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
             _memcpy
     _handle_beep
       _delay_ms
     _read_card_content
       _Mf500PiccRead
         _FlushFIFO
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
         _WriteRC
           _PutRC500
         _memcpy
       _Mf500PiccWrite
         _FlushFIFO
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
         _PcdSetTmo
           _WriteRC
             _PutRC500
         _PcdSingleResponseCmd
           _FlushFIFO
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
           _ISR_RC500
             _GetRC500
             _PutRC500
           _ReadRC
             _GetRC500
             _PutRC500
           _SetBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
         _WriteRC
           _PutRC500
         _memcpy
       _check_user_card
         _read_24c02
           _rece_byte
           _send_byte
           _start_i2c
           _stop_i2c
       _checksum
       _deal_floor
         _delay_ms
         _uart1_send_byte
       _ds1302_get_time
         _ds1302_read
           _ds1302_read_byte
           _ds1302_write_byte
       _ds1302_set_time
         _ds1302_write
           _ds1302_write_byte
       _read_24c02
         _rece_byte
         _send_byte
         _start_i2c
         _stop_i2c
       _uart1_send_byte
       _write_24c02
         _delay_ms
         _send_byte
         _start_i2c
         _stop_i2c
     _read_id
       _Mf500PiccSelect
         _Mf500PiccCascSelect
           _ClearBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _PcdSetTmo
             _WriteRC
               _PutRC500
           _PcdSingleResponseCmd
             _FlushFIFO
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
             _ISR_RC500
               _GetRC500
               _PutRC500
             _ReadRC
               _GetRC500
               _PutRC500
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
           _memcpy
     _rfcard
       _Mf500PiccAnticoll
         _Mf500PiccCascAnticoll
           _ClearBitMask
             _ReadRC
               _GetRC500
               _PutRC500
             _WriteRC
               _PutRC500
           _PcdSetTmo
             _WriteRC
               _PutRC500
           _PcdSingleResponseCmd
             _FlushFIFO
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
             _ISR_RC500
               _GetRC500
               _PutRC500
             _ReadRC
               _GetRC500
               _PutRC500
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
           ___awdiv
           _memcpy
       _Mf500PiccRequest
         _Mf500PiccCommonRequest
           _PcdSetTmo
             _WriteRC
               _PutRC500
           _PcdSingleResponseCmd
             _FlushFIFO
               _SetBitMask
                 _ReadRC
                   _GetRC500
                   _PutRC500
                 _WriteRC
                   _PutRC500
             _ISR_RC500
               _GetRC500
               _PutRC500
             _ReadRC
               _GetRC500
               _PutRC500
             _SetBitMask
               _ReadRC
                 _GetRC500
                 _PutRC500
               _WriteRC
                 _PutRC500
             _WriteRC
               _PutRC500
           _WriteRC
             _PutRC500
           _memcpy
     _same_id
   _handle_timer
   _init_hardware
     _RC500Config
       _ClearBitMask
         _ReadRC
           _GetRC500
           _PutRC500
         _WriteRC
           _PutRC500
       _PcdReset
         _GetRC500
         _PutRC500
       _PcdRfReset
         _ClearBitMask
           _ReadRC
             _GetRC500
             _PutRC500
           _WriteRC
             _PutRC500
         _SetBitMask
           _ReadRC
             _GetRC500
             _PutRC500
           _WriteRC
             _PutRC500
       _PcdSetTmo
         _WriteRC
           _PutRC500
       _WriteRC
         _PutRC500
     _RC500OutSelect
       _WriteRC
         _PutRC500
     _init_beep
     _init_ds1302
     _init_i2c
     _init_interrupt
     _init_led
     _init_mfrc500
     _init_osc
     _init_port
     _init_timer1
     _init_uart1
     _init_uart2
   _read_24c02
     _rece_byte
     _send_byte
     _start_i2c
     _stop_i2c
   _uart1_send_byte
   _write_24c02
     _delay_ms
     _send_byte
     _start_i2c
     _stop_i2c

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      49       7       91.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      10       9       20.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B7      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Mon Nov 07 15:37:04 2016

                                 pc 0002                   ?_ds1302_read_byte 0070  
                                PL2 17E2                                  PL4 0FA2  
                                PL6 0FAB                                  PL8 0FB5  
                  ??_init_interrupt 0070                                  l51 0A8D  
                                _RD 0CA8                        ___awdiv@sign 0075  
                ??_ds1302_read_byte 0070                                 PL10 17EB  
                               PL20 0FC5                                 PL12 13FF  
                               PL22 1407                                 PL14 0FBE  
                               PL24 140D                                 PL16 17F3  
                               PL26 1413                                 PL18 17FA  
                 ??_ds1302_set_time 0074                                 l210 0245  
                               l433 0D37                                 l632 0DF5  
                               l640 0DA5                                 l721 0B29  
                               l641 0DA7                                 l289 0783  
                               l722 0B2D                                 l483 0F0F  
                               l726 0BB5                                 l638 0DA0  
                               l910 1278                                 l719 0B22  
                               l912 1287                                 l921 12B5  
                               l666 1017                                 l676 102E  
                               l686 0AD3                                 l959 1768  
                               l968 174C                                 _GIE 005F  
                               _RA0 0060                                 _RA1 0061  
                               _RC0 0070                                 _RC1 0071  
                               _RC2 0072                                 _RB4 006C  
                               _RC3 0073                                 _RB5 006D  
                               _RC4 0074                                 _RC5 0075  
              find_project_key@data 0070                                 _day 006C  
                               _tt1 00DE                                 _isr 0004  
                               wreg 0009                          _MRcvBuffer 00A6  
                              S7654 1000                                l1015 15F1  
                              l1048 1464                          _MSndBuffer 00B6  
                              l1174 0AA3                                l1177 0AA8  
                              l1338 0847                                l1348 0881  
                              l5010 0A98                                l5004 0A96  
                              l5040 0AC9                                l5200 11DA  
                              l5112 1139                                l5026 0AC7  
                              l5130 1152                                l6002 0D43  
                              l5220 11FF                                l5140 115C  
                              l5132 1154                                l6102 0E55  
                              l5302 00AD                                l5142 115E  
                              l5134 1156                                l6104 0E5E  
                              l5400 0169                                l5304 00C9  
                              l5240 1217                                l5232 120F  
                              l5136 1158                                l5128 114F  
                              l6024 0D59                                l6210 14C8  
                              l5402 016B                                l5242 1219  
                              l5234 1211                                l5250 121F  
                              l5138 115A                                l5146 1160  
                              l5090 1109                                l6212 14C8  
                              l6116 0DE2                                l5500 0225  
                              l5340 0102                                l5244 121B  
                              l5236 1213                                l5252 1239  
                              l5180 11B0                                l5148 117B  
                              l6118 0DEF                                l5502 0227  
                              l5406 016D                                l5350 010C  
                              l5342 0104                                l5246 121D  
                              l5238 1215                                l5190 11BA  
                              l5182 11B2                                l5166 119D  
                              l7032 1681                                l7200 0EB5  
                              l6080 0E44                                l6072 0E40  
                              l6208 14C8                                l6216 14C9  
                              l6160 148C                                l5600 0427  
                              l5520 0283                                l5512 0259  
                              l5504 0229                                l5440 01BC  
                              l5408 0187                                l5344 0106  
                              l5336 00FE                                l5328 00F4  
                              l5192 11BC                                l5184 11B4  
                              l7114 173C                                l7042 168C  
                              l7034 1684                                l6074 0E43  
                              l6218 14D1                                l6162 1490  
                              l6170 1497                                l5450 01C6  
                              l5442 01BE                                l5346 0108  
                              l5338 0100                                l5354 010E  
                              l5290 00A3                                l5274 1261  
                              l5194 11BE                                l5186 11B6  
                              l4724 0B95                                l4804 0903  
                              l7124 1748                                l7108 1737  
                              l7060 16A0                                l7044 168F  
                              l7036 1688                                l6164 1492  
                              l6172 149F                                l5700 0634  
                              l5620 0490                                l5612 0466  
                              l5604 043C                                l5540 02EC  
                              l5532 02C2                                l5524 0298  
                              l5516 026E                                l5508 022B  
                              l5452 01C8                                l5444 01C0  
                              l5436 01B8                                l5460 01E6  
                              l5348 010A                                l5356 0128  
                              l5292 00A5                                l5284 1270  
                              l5188 11B8                                l4718 0B89  
                              l7118 1740                                l7054 1699  
                              l7038 168A                                l7062 16A3  
                              l7214 14F6                                l7310 15F8  
                              l6086 0E49                                l6166 1494  
                              l5454 01CA                                l5446 01C2  
                              l5390 015F                                l5382 0156  
                              l5294 00A7                                l5286 1272  
                              l5198 11C0                                l4744 08B8  
                              l7136 1761                                l7064 16C9  
                              l6096 0E50                                l5720 069D  
                              l5712 0673                                l5704 0649  
                              l5640 04F9                                l5632 04CF  
                              l5624 04A5                                l5616 047B  
                              l5608 0451                                l5560 0355  
                              l5552 032B                                l5544 0301  
                              l5536 02D7                                l5528 02AD  
                              l5448 01C4                                l5392 0161  
                              l5296 00A9                                l5288 00A0  
                              l4754 08C4                                l7138 1767  
                              l6354 1425                                l7306 15F4  
                              l7234 151C                                l5490 021B  
                              l5458 01CC                                l5394 0163  
                              l5298 00AB                                l4924 09A2  
                              l4908 098E                                l4844 0940  
                              l4852 094A                                l4836 0930  
                              l6356 1427                                l7324 1605  
                              l7236 1523                                l7180 0E9B  
                              l5740 0706                                l5732 06DC  
                              l5724 06B2                                l5716 0688  
                              l5708 065E                                l5660 0562  
                              l5652 0538                                l5644 050E  
                              l5636 04E4                                l5628 04BA  
                              l5580 03BE                                l5572 0394  
                              l5564 036A                                l5556 0340  
                              l5548 0316                                l5492 021D  
                              l5396 0165                                l5388 015D  
                              l6444 0F0C                                l4766 08D2  
                              l7094 171D                                l7086 16E1  
                              l6390 1451                                l7318 1604  
                              l7246 1531                                l5494 021F  
                              l5398 0167                                l5822 0D56  
                              l6462 0F21                                l7502 082F  
                              l4936 09DA                                l4880 096C  
                              l4776 08DC                                l7088 1703  
                              l7280 15A4                                l7264 154B  
                              l7272 158A                                l7248 153E  
                              l7184 0EA2                                l5760 076F  
                              l5752 0745                                l5744 071B  
                              l5736 06F1                                l5728 06C7  
                              l5680 05CB                                l5672 05A1  
                              l5664 0577                                l5656 054D  
                              l5648 0523                                l5592 03FD  
                              l5584 03D3                                l5576 03A9  
                              l5568 037F                                l5496 0221  
                              l5840 0C28                                l5824 0C0C  
                              l6456 0F16                                l7520 0859  
                              l7504 0831                                l4962 0A20  
                              l4786 08E8                                l7610 106A  
                              l7602 105E                                l7266 1575  
                              l5770 0D5C                                l5498 0223  
                              l5818 0C09                                l5826 0C0E  
                              l4948 09EB                                l4972 0A2A  
                              l4868 095E                                l6900 12FA  
                              l7380 07DB                                l7276 1591  
                              l7188 0EAC                                l6484 1020  
                              l5756 075A                                l5748 0730  
                              l5692 060A                                l5684 05E0  
                              l5676 05B6                                l5668 058C  
                              l5596 0412                                l5588 03E8  
                              l5924 0CB6                                l7508 083B  
                              ?_isr 0070                                l6902 13CB  
                              l7390 0F53                                l7606 1062  
                              l7294 15BA                                l5782 0D84  
                              l5942 0CED                                l6494 0FF3  
                              l6814 0791                                l7534 0872  
                              l4896 0980                                l7296 15DB  
                              l7288 15B9                                l5696 061F  
                              l5688 05F5                                l5936 0CDC  
                              l5872 0C5F                                l5856 0C3B  
                              l7528 0861                                l4986 0A3E  
                              l4994 0A76                                l7562 08A4  
                              l7538 087C                                l4988 0A74  
                              l6780 1623                                l6860 135F  
                              l5956 0D06                                l5892 0C7A  
                              l7556 089A                                l7548 0889  
                              l7492 0811                                l6790 164C  
                              l6782 1628                                l5958 0D0A  
                              l6934 129F                                l7656 1655  
                              l6784 1631                                l6880 1385  
                              l6856 1343                                l6848 1342  
                              l7584 1042                                l6952 12CF  
                              l6944 12BF                                l7568 08AA  
                              l6786 163A                                l6882 139E  
                              l6858 135A                                l7594 104F  
                              l7578 1039                                l6788 1643  
                              l6884 13A5                                l6868 137C  
                              l5996 0D38                                l5988 0D36  
                              l6964 12E3                                l6948 12C9  
                              l6894 13BD                                l6966 12E6  
                              l6984 177A                                l6996 1785  
                              STR_1 1901                        __CFG_WDTE$ON 0000  
                  ClearBitMask@mask 0075                                _PEIE 005E  
                              u4625 0A4A                                u6600 0BD3  
                              u4675 0ACF                                u8205 15A0  
                              u8144 1563                                u8225 15C7  
                              u8145 1562                                u8154 156C  
                              u8155 156B                                u7705 132F  
                              u8485 1057        __end_of_PcdSingleResponseCmd 176D  
    __size_of_Mf500PiccCascAnticoll 014E       __end_of_Mf500PiccCascAnticoll 1623  
                              _main 0803                                _keys 00D4  
                              _hour 006D                                _week 00E8  
                              _year 006F                                fsr0h 0005  
                              fsr1h 0007                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
  Mf500PiccCascAnticoll@select_code 002E                  read_card_content@i 0040  
                              ltemp 007E                                start 0077  
                              ttemp 007E                                wtemp 007E  
         __size_of_find_project_key 001A                      WriteRC@address 0074  
                       _write_24c02 0AAB                               ??_isr 0070  
                      ?_init_ds1302 0070             PcdSingleResponseCmd@cmd 0025  
                __size_of_ISR_RC500 00E8                               ?_main 0070  
                   __end_of___awdiv 106F                               _EEADR 0191  
                             _EEPGD 0CAF                      read_24c02@data 0073  
                   __end_of_WriteRC 17CB                     ___awdiv@divisor 0070  
                             _T1CON 0018                               _RC1IE 048D  
                             _RC1IF 008D                               _RC2IE 04A5  
                             _RC2IF 00A5                     ___awdiv@counter 0074  
          __size_of_uart1_send_byte 0009                               _TMR1H 0017  
                             _TMR1L 0016                               _PORTD 000F  
                rece_byte@read_data 0070                               _TRISD 008F  
                             _MInfo 0064                        ?_init_timer1 0070  
                      ?_read_eeprom 0070                      __CFG_FCMEN$OFF 0000  
                 _read_card_content 0BCA                          _PcdRfReset 0786  
                             _count 0057                     __end_of_read_id 0F85  
                             _group 005E                               _month 006E  
      PcdSingleResponseCmd@lastBits 0024                     __end_of_same_id 0800  
                             main@i 0043                               main@j 0046  
                ?_read_card_content 0070                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080            Mf500PiccWrite@ret_status 007D  
              __size_of_RC500Config 004D                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                  __end_of_GetRC500 13FF                               status 0003  
                   _check_user_card 0D5B             Mf500PiccRead@ret_status 002B  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                       ??_ds1302_read 0072  
               ??_read_card_content 002D                      _checkpsw_super 0FD0  
                   __initialization 0079                        __end_of_main 08AD  
                  __end_of_PcdReset 12E8                   _ds1302_write_byte 0B1F  
                ?_ds1302_write_byte 0070                              ??_main 007E  
                  __end_of_PutRC500 13E9                __end_of_handle_timer 1000  
                    __CFG_PLLEN$OFF 0000           __end_of_read_card_content 0D5B  
               ??_ds1302_write_byte 0070                          _SetBitMask 17DA  
             __size_of_ClearBitMask 000B                __size_of_handle_beep 0019  
         __size_of_Mf500PiccLoadKey 0017          __end_of_Mf500PiccAuthState 1466  
                            _EEDATA 0193            ??_Mf500PiccCommonRequest 007C  
                  ___awdiv@dividend 0072                  __size_of_PcdSetTmo 0041  
                            _ANSELA 018C                              _ANSELE 0190  
                            _ANSELF 040C                              _ANSELG 040D  
   Mf500PiccCascAnticoll@byteOffset 0034                              _RC1REG 0199  
                            _RC2REG 0491                              _RC1STA 019D  
         __size_of_Mf500PiccRequest 0005                  __size_of_FlushFIFO 0005  
                            _RC2STA 0495           __size_of_Mf500HostCodeKey 0030  
                            i1l6632 002A                              i1l6624 0020  
                            i1l6642 003B                              i1l6628 0026  
                            i1l6644 003D                              i1l6662 0056  
                            i1l6680 0073                              i1l6666 005A  
                     ?_init_mfrc500 0070                              _OSCCON 0099  
                 __end_of_ISR_RC500 13D0                              _TMR1IE 0488  
                            _TMR1IF 0088                              _TX1REG 019A  
                            _TX1STA 019E                              _TX2STA 0496  
                    _RC500OutSelect 10FF                _uart1_receive_buffer 0047  
                  __end_of_checkpsw 0F37                    __end_of_checksum 0DF1  
            __end_of_checkpsw_super 0FEE                       ?_ds1302_write 0072  
                  __end_of_delay_ms 0AE2                              _ReadRC 17CB  
       read_card_content@user_count 003E                     GetRC500@address 0070  
         __end_of_ds1302_write_byte 0B39                  ds1302_write_byte@i 0071  
            __size_of_init_hardware 001F                           ??___awdiv 0074  
                         ??_WriteRC 0073                   __end_of_PWD_TABLE 1901  
               __end_of_ds1302_read 0B1F                    __end_of_init_i2c 10AC  
                            _memcpy 0EAE                    __end_of_init_led 10B6  
                  __end_of_init_osc 10C9                              _rfcard 0F8A  
                  ___awdiv@quotient 0076                              _minute 00E6  
                      _ClearBitMask 07DD                              _second 00E7  
           handle_config@tmp_buffer 0020                Mf500PiccAnticoll@snr 007D  
              _PcdSingleResponseCmd 1664                read_card_content@ret 0041  
                    Mf500PiccRead@i 002C                    ??_Mf500PiccWrite 007C  
                         ??_read_id 007E                           ??_same_id 0070  
           __end_of_check_user_card 0D8A                         ?_PcdRfReset 0070  
                   _ds1302_get_time 0AE2                    __end_of_stop_i2c 0BB1  
                 ??_uart1_send_byte 0070                       ReadRC@address 0073  
                    ??_init_mfrc500 0070     Mf500PiccCascAnticoll@ret_status 003A  
            __end_of_RC500OutSelect 1106             __end_of__initialization 009D  
               _count_uart1_receive 0058                      ??_ds1302_write 0073  
               _count_uart2_receive 0059         PcdSingleResponseCmd@count01 0020  
       PcdSingleResponseCmd@count02 0022                     ?_checkpsw_super 0070  
                  _find_project_key 0B86                     _ds1302_set_time 0B39  
       PcdSingleResponseCmd@waitFor 0027        Mf500PiccAuthState@ret_status 002B  
                    __pcstackCOMMON 0070         __end_of_Mf500PiccCascSelect 07DD  
     PcdSingleResponseCmd@tmpStatus 0029                        __pidataBANK1 0000  
                PcdSetTmo@tmoLength 0075                   __end_of_PcdSetTmo 1664  
                 __end_of_FlushFIFO 0E6B                          __end_ofPL2 17EB  
                        __end_ofPL4 0FAB                          __end_ofPL6 0FB5  
                        __end_ofPL8 0FBE                  write_24c02@address 0077  
             ?_PcdSingleResponseCmd 0070                __size_of_init_ds1302 0014  
                  ds1302_write@data 0072                           ?_GetRC500 0070  
          __size_of_Mf500PiccSelect 0005          __size_of_read_card_content 0191  
                       ?_SetBitMask 0075                       _init_hardware 106F  
         __size_of_ds1302_read_byte 0019                __size_of_init_timer1 0009  
                        _deal_floor 1106                __size_of_read_eeprom 000A  
             __end_of_handle_config 0AA2                     PcdReset@count01 0073  
                   PcdReset@count02 0075     __size_of_Mf500PiccCommonRequest 0043  
                         ?_PcdReset 0070                          __pbssBANK0 0047  
                        __pbssBANK1 00A0                          __pbssBANK2 0120  
                   ?_RC500OutSelect 0070                 ds1302_write@address 0073  
            __size_of_Mf500PiccRead 005A                  __size_of_init_beep 0004  
                __size_of_init_port 0007                           ?_PutRC500 0070  
                       _ds1302_read 0B06               RC500Config@ret_status 007C  
                           ?_ReadRC 0070                  __size_of_rece_byte 001B  
        __size_of_ds1302_write_byte 001A                          __pmaintext 0803  
               Mf500PiccRequest@atq 002A                   ds1302_read_byte@i 0071  
                      ?_write_24c02 0076                          __pintentry 0004  
               __size_of_PcdRfReset 001A               __size_of_handle_timer 0012  
                __size_of_send_byte 002A                             ?_memcpy 0070  
                           ?_rfcard 0070                 Mf500HostCodeKey@cnt 0076  
                        _flag_timer 005A             __end_of_ds1302_get_time 0B06  
                        ??_GetRC500 0070             __size_of_handle_ic_card 0057  
                    ?_init_hardware 0070                           ?_checkpsw 0070  
              Mf500PiccLoadKey@keys 007C                           ?_checksum 0070  
                           _SP1BRGH 019C                             _SP1BRGL 019B  
                           _SP2BRGH 0494                             _SP2BRGL 0493  
                         ?_delay_ms 0070                    _Mf500PiccLoadKey 0F37  
                    deal_floor@data 0020           Mf500PiccCommonRequest@atq 007B  
                  ?_check_user_card 0070                  __size_of_start_i2c 0016  
                        __stringtab 1800                          ??_PcdReset 0072  
                 find_project_key@i 0071                    _Mf500PiccRequest 0FCB  
                  _Mf500HostCodeKey 0F4E             __end_of_ds1302_set_time 0B6E  
                         ?_init_i2c 0070                           ?_init_led 0070  
                         ?_init_osc 0070                             _MpIsrIn 0053  
     Mf500PiccCascAnticoll@complete 0033                          _read_24c02 0D8A  
             Mf500HostCodeKey@coded 0070                        _handle_timer 0FEE  
                        ??_PutRC500 0071               _Mf500PiccCascAnticoll 14D5  
                   __size_of_ReadRC 000F                 __size_of_SetBitMask 0008  
           Mf500PiccAuthState@block 007C                     PutRC500@address 0071  
                   ISR_RC500@nbytes 0079                             ___awdiv 102F  
            _Mf500PiccCommonRequest 0E6B                             _WriteRC 17BA  
                   write_24c02@data 0076              ??_PcdSingleResponseCmd 007B  
                           _card_id 004F                           ?_stop_i2c 0070  
              __end_of_init_mfrc500 10C5                          _init_uart1 10D9  
                        _init_uart2 10EA                     __size_of_memcpy 001E  
      Mf500PiccCascAnticoll@snr_crc 002F                             _ic_card 00A0  
                   __size_of_rfcard 0010                             __ptext1 106F  
                           __ptext2 10EA                             __ptext3 10D9  
                           __ptext4 10D0                             __ptext5 10C9  
                           __ptext6 10C5                             __ptext7 10B6  
                           __ptext8 10AF                             __ptext9 10AC  
                     _Mf500PiccRead 0E0C                __end_of_ds1302_write 0B86  
                 __end_of_init_beep 1092                             _read_id 0F7E  
                      __size_of_isr 0073                   __end_of_init_port 10D0  
    Mf500PiccCommonRequest@req_code 007C                             _same_id 07E8  
                        _keys_super 00E0                          ??_checkpsw 007D  
                        ??_checksum 0071               Mf500PiccAnticoll@bcnt 003D  
                 __end_of_rece_byte 0E0C                          ??_delay_ms 0072  
           __size_of_init_interrupt 0003                       ??_RC500Config 007C  
                       ?_deal_floor 0070                             clrloop0 1011  
                           main@pwd 0042                end_of_initialization 009D  
                 ??_Mf500PiccSelect 007E            Mf500PiccCascAnticoll@snr 007C  
             read_card_content@data 002E                   __end_of_send_byte 0DC8  
                           memcpy@d 0076                             memcpy@n 0072  
                           memcpy@s 0074                          ??_init_i2c 0070  
                        ??_init_led 0070                          ??_init_osc 0070  
                         _ISR_RC500 12E8                  _Mf500PiccAuthState 1418  
               Mf500PiccWrite@data1 007B                             psplit$0 240057  
                 __end_of_start_i2c 0DDE           Mf500PiccCascAnticoll@bcnt 007B  
                      __pstringtext 1800          Mf500PiccLoadKey@ret_status 007B  
                        ??_stop_i2c 0070                 ?_Mf500PiccAuthState 007B  
                    ?_Mf500PiccRead 007B                     _uart1_send_byte 0AA2  
                   ??_init_hardware 007E                           _PWD_TABLE 1801  
                     ??_handle_beep 0076                    ?_ds1302_get_time 0070  
                  __CFG_FOSC$INTOSC 0000            __end_of_find_project_key 0BA0  
                         _TRISAbits 008C                           _TRISCbits 008E  
                         _TRISEbits 0090                           _TRISGbits 030D  
                  _ds1302_read_byte 0BB1    Mf500PiccCommonRequest@ret_status 007D  
                      ??_PcdRfReset 0078                           PcdReset@i 0078  
                  ??_checkpsw_super 007E      PcdSingleResponseCmd@ret_status 0028  
              ??_Mf500PiccAuthState 007D                    ?_ds1302_set_time 0070  
                   ClearBitMask@reg 0077              ?_Mf500PiccCascAnticoll 007B  
                   ClearBitMask@tmp 0076                 __end_of_RC500Config 17BA  
                       ?_read_24c02 0070                          ?_ISR_RC500 0070  
                    __end_of_ReadRC 17DA                 __size_of_deal_floor F67E  
                __end_of_PcdRfReset 07A0                       delay_ms@count 0070  
                       ?_init_uart1 0070                         ?_init_uart2 0070  
              __size_of_write_24c02 0012                        ISR_RC500@cnt 0078  
                      PutRC500@data 0070                      __end_of_memcpy 0ECC  
                    __end_of_rfcard 0F9A                      _handle_ic_card 0ECC  
                         _PcdSetTmo 1623                           _MpIsrInfo 0054  
                         _FlushFIFO 0E66                        ??_SetBitMask 0076  
                       __end_ofPL10 17F3                         __end_ofPL20 0FCB  
                       __end_ofPL12 1407                         __end_ofPL22 140D  
                       __end_ofPL14 0FC5                         __end_ofPL24 1413  
                       __end_ofPL16 17FA                         __end_ofPL26 1418  
                       __end_ofPL18 1800                 start_initialization 0079  
                  ??_RC500OutSelect 0075                   __size_of_GetRC500 0016  
                       __end_of_isr 0077                  PcdReset@ret_status 0077  
               __end_of_handle_beep 102F                     ds1302_read@temp 0073  
             ds1302_write_byte@data 0070                   __size_of_PcdReset 0074  
           Mf500HostCodeKey@uncoded 0073                  Mf500PiccRead@data1 007B  
                      ?_ds1302_read 0070                  ds1302_read@address 0072  
                          ??_ReadRC 0072               __size_of_init_mfrc500 000F  
             Mf500PiccAuthState@snr 007B            __end_of_Mf500PiccLoadKey 0F4E  
           __end_of_uart1_send_byte 0AAB                   __size_of_PutRC500 0019  
                __end_of_SetBitMask 17E2              ISR_RC500@oldPageSelect 0077  
                    _flag_uart1_cmd 005B                      _flag_uart2_cmd 005C  
                     ??_init_ds1302 0070                     ??_Mf500PiccRead 007C  
                       __pdataBANK1 00E0               __size_of_ds1302_write 0018  
          __end_of_Mf500PiccRequest 0FD0                            ??_memcpy 0074  
          __end_of_Mf500HostCodeKey 0F7E                            ??_rfcard 007E  
            __end_of_handle_ic_card 0F23        __size_of_Mf500PiccCascSelect 003D  
                        ?_PcdSetTmo 0075                  RC500OutSelect@type 0075  
                        ?_FlushFIFO 0070                       ??_init_timer1 0070  
                        rece_byte@i 0071                 __size_of_read_24c02 0014  
                     ??_read_eeprom 0070                           ___latbits 0003  
                     __pcstackBANK0 0020                      _init_interrupt 10AC  
                       WriteRC@data 0072                 __end_of__stringdata 1906  
                  check_user_card@i 0074                   __size_of_checkpsw 0014  
                 __size_of_checksum 0013                         _RC500Config 176D  
                 __size_of_delay_ms 001B                      _flag_user_card 005D  
                Mf500PiccSelect@snr 002A             __size_of_Mf500PiccWrite 006F  
                      _init_mfrc500 10B6                 __size_of_init_uart1 0011  
               __size_of_init_uart2 0015                       _sector_number 0060  
                         _card_type 0056                           __pnvBANK0 006C  
                         __pnvBANK1 00E6                      handle_config@i 0027  
                      _ds1302_write 0B6E                   __size_of_init_i2c 0006  
                 __size_of_init_led 0007                         ??_ISR_RC500 0072  
                 __size_of_init_osc 0004             ?_Mf500PiccCommonRequest 007B  
                          ?___awdiv 0070                  Mf500HostCodeKey@an 0072  
                Mf500HostCodeKey@hn 0074                  Mf500HostCodeKey@ln 0075  
                          ?_WriteRC 0072              __size_of_handle_config 01F5  
                   ?_handle_ic_card 0070                           __pswtext1 1000  
              ds1302_read_byte@data 0070                     _Mf500PiccSelect 0F85  
                          _BAUD1CON 019F                            _BAUD2CON 0497  
                 __size_of_stop_i2c 0011                          send_byte@i 0071  
            __end_of_init_interrupt 10AF                        checksum@data 0073  
                          ?_read_id 0070                         _handle_beep 1016  
               __end_of_init_ds1302 10A6                            ?_same_id 0070  
                      RC500Config@i 007D                           _is_enable 005F  
                       GetRC500@tmp 0071                           _init_beep 108E  
                 read_24c02@address 0072                        ??_deal_floor 0076  
                        pnum$text21 0024                           _init_port 10C9  
                         _rece_byte 0DF1                           checksum@i 0074  
               __end_of_init_timer1 10D9                 __end_of_read_eeprom 0AC7  
                          _LATEbits 0110                           delay_ms@i 0072  
                         delay_ms@j 0074                            _LATGbits 038D  
    __end_of_Mf500PiccCommonRequest 0EAE                           clear_ram0 1010  
          __size_of_check_user_card 002F                           _uart1_cnt 0061  
                         _uart2_cnt 0062                           _send_byte 0D9E  
                 _Mf500PiccAnticoll 0F9A                     _user_card_count 0063  
              _uart2_receive_buffer 0120                  Mf500PiccWrite@addr 007C  
                ?_Mf500PiccAnticoll 007D                 send_byte@write_data 0070  
          __end_of_ds1302_read_byte 0BCA                    ?_uart1_send_byte 0070  
                   deal_floor@floor 0022                           _snr_rc500 00DA  
                     ?_ClearBitMask 0075                  __end_of_deal_floor 0784  
               ??_Mf500PiccAnticoll 007E                         __stringdata 1901  
     __size_of_PcdSingleResponseCmd 0109                           main@i_954 0044  
                         _start_i2c 0DC8            Mf500PiccRequest@req_code 002B  
                       ??_PcdSetTmo 0077                            _GetRC500 13E9  
                   ?_init_interrupt 0070                         ??_FlushFIFO 0078  
                    SetBitMask@mask 0075                           _user_card 00C6  
                 ?_find_project_key 0070                          ?_init_beep 0070  
                        ?_init_port 0070                  ??_find_project_key 0070  
                    checksum@length 0070                          ?_rece_byte 0070  
           ??_Mf500PiccCascAnticoll 002A                            _PcdReset 1274  
                          _MpIsrOut 0055                       _handle_config 08AD  
         __end_of_Mf500PiccAnticoll 0FA2                        ??_read_24c02 0072  
                        ?_send_byte 0070                            _PutRC500 13D0  
                 Mf500PiccRead@addr 002A                         deal_floor@i 0021  
       Mf500PiccAuthState@auth_mode 002A                __size_of_ds1302_read 0019  
           __end_of_Mf500PiccSelect 0F8A                    ISR_RC500@irqBits 007A  
                  ISR_RC500@irqMask 0076                      ??_ClearBitMask 0076  
                  __size_of___awdiv 0040                         _init_ds1302 1092  
                  __size_of_WriteRC 0011                        ??_init_uart1 0070  
                      ??_init_uart2 0070                           rfcard@ret 003E  
                __end_of__stringtab 1801                          ?_start_i2c 0070  
                read_eeprom@address 0070               __end_of_init_hardware 108E  
                          _checkpsw 0F23                            _checksum 0DDE  
                       _init_timer1 10D0                    __size_of_read_id 0007  
                          _delay_ms 0AC7                         _read_eeprom 0ABD  
                __end_of_read_24c02 0D9E                    __size_of_same_id 0018  
                          __ptext10 10A6                            __ptext11 1092  
                          __ptext20 0BCA                            __ptext12 108E  
                          __ptext21 1106                            __ptext13 10FF  
                          __ptext30 0E6B                            __ptext22 0DDE  
                          __ptext14 176D                            __ptext31 0F9A  
                          __ptext23 0D5B                            __ptext15 0786  
                          __ptext40 0F4E                            __ptext32 14D5  
                          __ptext24 1466                            __ptext16 1274  
                          __ptext41 1418                            __ptext33 102F  
                          __ptext25 0E0C                            __ptext17 0FEE  
                          __ptext50 17BA                            __ptext42 0EAE  
                          __ptext34 0F7E                            __ptext26 1016  
                          __ptext18 0ECC                            __ptext51 13D0  
                          __ptext43 1664                            __ptext35 0F85  
                          __ptext27 0FD0                            __ptext19 07E8  
                          __ptext60 0D9E                            __ptext52 08AD  
                          __ptext44 12E8                            __ptext36 07A0  
                          __ptext28 0F8A                            __ptext61 0DF1  
                          __ptext53 0AAB                            __ptext45 0E66  
                          __ptext37 07DD                            __ptext29 0FCB  
                          __ptext62 0B86                            __ptext54 0AC7  
                          __ptext46 17DA                            __ptext38 0F23  
                          __ptext63 0B39                            __ptext55 0AA2  
                          __ptext47 17CB                            __ptext39 0F37  
                          __ptext64 0B6E                            __ptext56 0ABD  
                          __ptext48 13E9                            __ptext65 0AE2  
                          __ptext57 0D8A                            __ptext49 1623  
                          __ptext66 0B06                            __ptext58 0BA0  
                          __ptext67 0B1F                            __ptext59 0DC8  
                          __ptext68 0BB1      Mf500PiccCascAnticoll@snr_check 0030  
                    ?_handle_config 0070            __size_of_ds1302_get_time 0024  
                    _Mf500PiccWrite 1466                         checksum@sum 0072  
               uart1_send_byte@data 0070         __size_of_Mf500PiccAuthState 004E  
                          _init_i2c 10A6                            _init_led 10AF  
                     __size_of_main 00AA                            _init_osc 10C5  
               _Mf500PiccCascSelect 07A0                  __end_of_init_uart1 10EA  
                __end_of_init_uart2 10FF              Mf500PiccCascAnticoll@i 003C  
                     ??_write_24c02 0077            __size_of_ds1302_set_time 0035  
                 ?_Mf500PiccLoadKey 0070                   ??_check_user_card 0074  
                pnum$text21_split_1 0057                       SetBitMask@reg 0077  
                     SetBitMask@tmp 0076                  ??_Mf500PiccLoadKey 007B  
                          _stop_i2c 0BA0                   ?_Mf500PiccRequest 002A  
                 ?_Mf500HostCodeKey 0070                ?_Mf500PiccCascSelect 007B  
                ??_Mf500PiccRequest 007E                  ??_Mf500HostCodeKey 0071  
                          memcpy@d1 0077                            memcpy@s1 0070  
    Mf500PiccCascSelect@select_code 007C                         ??_init_beep 0070  
            __end_of_Mf500PiccWrite 14D5                        ?_RC500Config 0070  
                       ??_init_port 0070         Mf500PiccCascAnticoll@nbytes 0039  
                       ??_rece_byte 0070                            intlevel1 0000  
       Mf500PiccCascAnticoll@snr_in 0035           PcdSingleResponseCmd@irqEn 0026  
        __size_of_Mf500PiccAnticoll 0008                       ?_handle_timer 0070  
                       ??_send_byte 0070                    ??_handle_ic_card 007E  
           __size_of_checkpsw_super 001E                    ?_Mf500PiccSelect 0070  
handle_config@report_the_loss_count 0026               ??_Mf500PiccCascSelect 007C  
             __end_of_Mf500PiccRead 0E66              Mf500PiccCascSelect@snr 007B  
                       ??_start_i2c 0070          Mf500PiccCascAnticoll@nbits 003B  
               __end_of_write_24c02 0ABD                        ?_handle_beep 0070  
     Mf500PiccCascSelect@ret_status 007D    Mf500PiccCascAnticoll@dummyShift1 0032  
  Mf500PiccCascAnticoll@dummyShift2 0031                     ??_handle_config 0078  
                       _timer_count 00A4                          _TX1STAbits 019E  
                   ?_Mf500PiccWrite 007B                __end_of_ClearBitMask 07E8  
                      PcdRfReset@ms 0079                      ??_handle_timer 0070  
           __size_of_RC500OutSelect 0007                         PcdRfReset@i 007A  
                 ??_ds1302_get_time 0074  
